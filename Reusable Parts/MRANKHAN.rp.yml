Reusable Part:
  Name:               MRANKHAND
  Enabled For RDMLX:  Yes
  Target Platform:    Browser

  Framework:
    Id1:                10240
    Id2:                30

  Multilingual Details:
  - ENG:
      Description:        "Mech rank XP Handler"

  - FRA:
      Description:        "Mech rank XP Handler"

  Source: |
    * ================================================================================
    * Type            : COMMAND HANDLER
    * Platform        : Web browser (Visual LANSA)
    * Ancestor        : VF_AC010O
    * Written By      : F14PGMLIB
    * Written On      : 24th MAY 2016  at 16:14:04
    * Copyright       : (C) Copyright
    * Framework       : Battle_Mechs_Framework
    * Application     : Battle Mechs
    * Business Object : Ranks
    * Command Handler : New
    * ================================================================================
    *
    * NOTE: This command handler was designed to be invoked by the New, Delete, and other (e.g. Details or Create/Read/Update/Delete) commands
    * It uses the user-object-type of the command to decide how to behave.
    *
    Function Options(*DIRECT)
    Begin_Com Role(*EXTENDS #VF_AC010O) Layoutmanager(#TableLayout_Main) Width(600) Height(240)
    
    * Table Layout
    
    Define_Com Class(#PRIM_TBLO) Name(#TableLayout_Main)
    
    Define_Com Class(#PRIM_TBLO.Column) Name(#Column1) Displayposition(1) Parent(#TableLayout_Main)
    Define_Com Class(#PRIM_TBLO.Row) Name(#Row1) Displayposition(1) Parent(#TableLayout_Main) Height(1.72)
    Define_Com Class(#PRIM_TBLO.Row) Name(#Row2) Displayposition(2) Parent(#TableLayout_Main) Height(25) Units(Pixels)
    
    * Groups
    
    Group_By Name(#XG_HEAD) Fields(#MRANKVAL #MRANK)
    Group_By Name(#XG_Keys) Fields(#MRANKVAL)
    
    * Work Fields
    
    Define Field(#cmd_type) Type(*char) Length(32) Desc('user object type of the command')
    Define_Com Class(#prim_boln) Name(#Ret_Code)
    
    * Collection of fields on the panel
    
    Define_Com Class(#Prim_ACol<#prim_evp>) Name(#PanelFields)
    Define_Com Class(#Prim_ACol<#prim_evp>) Name(#KeyFields)
    
    
    * The new/update/delete button
    
    Define_Com Class(#PRIM_PHBN) Name(#Button_All) Buttondefault(True) Caption('Undefined') Displayposition(1) Left(0) Parent(#COM_OWNER) Tabposition(1) Top(215) Width(120)
    Define_Com Class(#PRIM_TBLO.Item) Name(#Button_AllItem1) Manage(#Button_All) Parent(#TableLayout_Main) Row(#Row2) Sizing(FitToHeight) Column(#Column1) Alignment(CenterLeft) Flow(Right)
    
    * Fields on the panel
    
    Define_Com Class(#MRankVal.Visual) Parent(#COM_OWNER) Displayposition(2) Tabposition(2) Top(10)
    Define_Com Class(#MRank.Visual) Parent(#COM_OWNER) Displayposition(3) Tabposition(3) Top(41) Width(600)
    Define_Com Class(#PRIM_TBLO.Item) Name(#MRankValItem1) Manage(#MRANKVAL) Parent(#TableLayout_Main) Row(#Row1) Sizing(None) Column(#Column1) Alignment(TopLeft) Flow(Down) Margintop(10)
    Define_Com Class(#PRIM_TBLO.Item) Name(#MRankItem1) Manage(#MRANK) Parent(#TableLayout_Main) Row(#Row1) Sizing(FitToWidth) Column(#Column1) Alignment(TopLeft) Flow(Down) Margintop(10)
    
    * ================================================================================
    * Routines
    * ================================================================================
    Define_Com Class(#VLF1MSVRM.Ranks) Name(#ALL)
    
    * --------------------------------------------------------------------------------
    * Handle Command Execution
    * --------------------------------------------------------------------------------
    Mthroutine Name(uExecute) Options(*REDEFINE)
    *  Do an execution logic defined in the ancestor
    #COM_ANCESTOR.uExecute Gotofreestate(#GotoFreeState) Switchcallerreference(#SwitchCallerReference)
    #Button_All.enabled := false
    * The behaviour of this command handler is modified by the user-object-type of the command that initiated it.
    * (To see the user-object-type of the command, start the framework in design mode and work with commands)
    #cmd_type := #Com_Owner.avCommandType
    Case (#cmd_type)
    When Value_Is(= NEW)
    Set Com(#PanelFields<>) Enabled(true)
    #Button_All.caption := 'Save New Details'
    #XG_HEAD := *null
    When Value_Is(= COPY)
    Set Com(#PanelFields<>) Enabled(true)
    #Button_All.caption := 'Save New Details'
    #Com_owner.getcurrent
    When Value_Is(= DELETE)
    Set Com(#PanelFields<>) Enabled(False)
    Set Com(#Button_All) Enabled(true) Caption('Confirm Deletion')
    #Com_owner.getcurrent
    Otherwise
    Set Com(#PanelFields<>) Enabled(true)
    Set Com(#KeyFields<>) Enabled(False)
    #Button_All.caption := 'Save Changes'
    #Com_owner.getcurrent
    Endcase
    
    Endroutine
    
    Mthroutine Name(uInitialize) Options(*REDEFINE)
    Define_Com Class(#prim_evp) Name(#TempField) Reference(*DYNAMIC)
    * Do any initialization defined in the ancestor
    #Com_Ancestor.uInitialize
    * Build collection of Editable fields
    For Each(#Control) In(#Com_Owner.ComponentControls)
    If_Ref Com(#Control) Is(*INSTANCE_OF #prim_evp)
    #TempField <= #Control *As #prim_evp
    #PanelFields.Insert( #TempField )
    Endif
    Endfor
    * Build collection of Key fields
    #KeyFields.Insert( #MRANKVAL )
    Endroutine
    
    
    Mthroutine Name(uTerminate) Options(*REDEFINE)
    #PanelFields.RemoveAll
    #KeyFields.RemoveAll
    * Do any termination defined in the ancestor
    #Com_Ancestor.uTerminate
    Endroutine
    
    * --------------------------------------------------------------------------------
    * display the current instance in preparation for an update or delete
    * --------------------------------------------------------------------------------
    Mthroutine Name(getcurrent)
    * Define the data service
    Group_By Name(#DataFields) Fields(#MRANK)
    If_Ref Com(#AVLISTMANAGER.CurrentInstance) Is_Not(*NULL)
    * Get details of the current instance
    #avListManager.GetCurrentInstance Found(#Ret_Code) Nkey1(#MRANKVAL) Visualid2(#MRANK)
    If (#Ret_Code)
    #AVFRAMEWORKMANAGER.avIssueMessage Text('Item Selected') Requester(#Com_Owner)
    Else
    #AVFRAMEWORKMANAGER.avIssueMessage Text('No current item found') Requester(#Com_Owner)
    Endif
    Endif
    
    Endroutine
    
    Evtroutine Handling(#Button_All.Click)
    Case Of_Field(#cmd_type)
    When (= Delete)
    #com_owner.uDelete
    Otherwise
    #com_owner.uSave
    Endcase
    Invoke Method(#COM_OWNER.avSignalEvent) Withid(RankUpdate)
    Endroutine
    
    Mthroutine Name(uSave)
    Group_By Name(#SaveFields) Fields(#MRANKVAL #MRANK)
    * Note: Clear messages in status bar otherwise old messages are too confusing
    #AVFRAMEWORKMANAGER.avClearMessages Requester(#COM_OWNER)
    * Now initiate the save (the synchronous .Execute is ok if quick)
    #Status := UI
    #ALL.ExecuteAsync Rankfields(#SaveFields) Status(#Status) Io$sts(#IO$STS)
    If (#IO$sts = OK)
    #avFrameworkManager.avIssueMessage Text('Save was successful') Requester(#COM_OWNER)
    #Button_All.Enabled := False
    Endif
    * Get server messages and issue them in the Framework
    #avFrameworkManager.avReceiveServerMessages Requester(#Com_owner)
    Case Of_Field(#cmd_type)
    When Value_Is(= NEW)
    * Prepare for the next entry
    #XG_HEAD := *NULL
    Endcase
    Endroutine
    
    Mthroutine Name(uDelete)
    Define_Com Class(#VLF1MSVRMOD.Search) Name(#Delete)
    If_Ref Com(#AVLISTMANAGER.CurrentInstance) Is_Not(*NULL)
    * Note: Clear messages in status bar otherwise old messages are too confusing
    #AVFRAMEWORKMANAGER.avClearMessages Requester(#COM_OWNER)
    * Now initiate the save (the synchronous .Execute is ok if quick)
    #SYS_WEB.Confirm Caption('Are you sure you want to remove rank: ' + #MRANK) Resultcode(#IO$STS)
    If Cond(#IO$STS *EQ OK)
    #Delete.Execute Mechdata(#DataFields) Io$sts(#IO$STS) Status(D)
    Endif
    If (#IO$sts = OK)
    * Message indicating successful update
    #avFrameworkManager.avIssueMessage Text('Delete was successful') Requester(#COM_OWNER)
    #AVLISTMANAGER.CurrentInstance.avUpdateDisplay
    #Button_All.Enabled := False
    Endif
    * Get server messages and issue them in the Framework
    #avFrameworkManager.avReceiveServerMessages Requester(#Com_owner)
    Endif
    Endroutine
    
    Evtroutine Handling(#PanelFields<>.Changed)
    #Button_All.Enabled := True
    Endroutine
    End_Com
