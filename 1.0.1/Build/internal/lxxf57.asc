BBALPSYS  0000000100000000000001     @@QUESTION PROMPT('What is the name of the system variable that is to be evaluated ?') ANSWER(@@CANS001) EXTEND('*2345678901234567890 <- Specify the system variable name. Remember to' 'start it with an "*" and make sure that the name (including the *) does' 'not exceed 20 characters in length.') LOWER(*NO) RANGE(('*AAAAAAAAAAAAAAAAAAA' '*ZZZZZZZZZZZZZZZZZZZ')) HELPIDS(HELP010)
BBALPSYS  0000000200000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPSYS  0000000300000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1992')
BBALPSYS  0000000400000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBALPSYS  0000000500000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBALPSYS  0000000600000000000001     @@COMMENT  COMMENT('Type ..........: System Variable Evaluator')
BBALPSYS  0000000700000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBALPSYS  0000000800000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBALPSYS  0000000900000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBALPSYS  0000001000000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPSYS  0000001100000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBALPSYS  0000001200000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPSYS  0000001300000000000001     @@COMMENT  COMMENT(' ')
BBALPSYS  0000001400000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPSYS  0000001500000000000001     @@COMMENT  COMMENT('Function Mainline : @@FUNCTION')
BBALPSYS  0000001600000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPSYS  0000001700000000000001     @@COMMENT  COMMENT(' ')
BBALPSYS  0000001800000000000001     FUNCTION   OPTIONS(*DIRECT *NOMESSAGES *LIGHTUSAGE *MLOPTIMISE *ALP_SYSTEM_VARIABLE)
BBALPSYS  0000001900000000000001     @@COMMENT  COMMENT(' ')
BBALPSYS  0000002000000000000001     CASE       OF_FIELD(#SYSVAR$NM)
BBALPSYS  0000002100000000000001     WHEN       VALUE_IS('= ''@@CANS001''')
BBALPSYS  0000002200000000000001     @@COMMENT  COMMENT('>>> Set #SYSVAR$AV to correct value here <<<')
BBALPSYS  0000002300000000000001     OTHERWISE
BBALPSYS  0000002400000000000001     ABORT      MSGTXT('@@CANS001 system variable evaluator invalidly invoked.')
BBALPSYS  0000002500000000000001     ENDCASE
BBALPSYS  0000002600000000000001     @@COMMENT  COMMENT(' ')
BBALPSYS  0000002700000000000001     RETURN
BBALPVAL  0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPVAL  0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1992')
BBALPVAL  0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBALPVAL  0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBALPVAL  0000000500000000000001     @@COMMENT  COMMENT('Type ..........: Alphanumeric Field Validation')
BBALPVAL  0000000600000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBALPVAL  0000000700000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBALPVAL  0000000800000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBALPVAL  0000000900000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPVAL  0000001000000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBALPVAL  0000001100000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPVAL  0000001200000000000001     @@COMMENT  COMMENT(' ')
BBALPVAL  0000001300000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPVAL  0000001400000000000001     @@COMMENT  COMMENT('Function Mainline : @@FUNCTION')
BBALPVAL  0000001500000000000001     @@COMMENT  COMMENT('=======================================================')
BBALPVAL  0000001600000000000001     FUNCTION   OPTIONS(*DIRECT *LIGHTUSAGE *MLOPTIMISE *ALP_FIELD_VALIDATE)
BBALPVAL  0000001700000000000001     @@COMMENT  COMMENT('Set up a "good" return as the default')
BBALPVAL  0000001800000000000001     CHANGE     FIELD(#VALFLD$RT) TO('''1''')
BBALPVAL  0000001900000000000001     @@COMMENT  COMMENT('Now validate the field')
BBALPVAL  0000002000000000000001     @@COMMENT  COMMENT('>>> ======================== <<<')
BBALPVAL  0000002100000000000001     @@COMMENT  COMMENT('>>> Do validation logic here <<<')
BBALPVAL  0000002200000000000001     @@COMMENT  COMMENT('>>> ======================== <<<')
BBALPVAL  0000002300000000000001     @@COMMENT  COMMENT('>>> When invoked :           <<<')
BBALPVAL  0000002400000000000001     @@COMMENT  COMMENT('>>> #VALFLD$NM - Name of field to validate <<<')
BBALPVAL  0000002500000000000001     @@COMMENT  COMMENT('>>> #VALFLD$LN - Length of field to validate <<<')
BBALPVAL  0000002600000000000001     @@COMMENT  COMMENT('>>> #VALFLD$AV - Current alpha value of field <<<')
BBALPVAL  0000002700000000000001     @@COMMENT  COMMENT('>>> #VALFLD$RT - Return Code. "1"=Good, "0"=Bad <<<')
BBALPVAL  0000002800000000000001     @@COMMENT  COMMENT('Return control to caller')
BBALPVAL  0000002900000000000001     RETURN
BBCASE    0000000100000000000001     @@QUESTION PROMPT('Describe what this entire CASE construct is used for') ANSWER(@@CANS001) EXTEND('The information you provide here is used to create a comment in your RDML' 'program. If you do not specify an answer, no comment will be generated.' 'Use the HELP function key for more details and/or examples.') HELPIDS(HELP010 HELP020)
BBCASE    0000000200000000000001     @@QUESTION PROMPT('Specify the name of the field that is to be tested by this CASE construct') ANSWER(@@CANS002) EXTEND('Precede the field name with a "#" sign as you do in all RDML programming.' 'Use the HELP function key for more details and/or examples.') LOWER(*NO) HELPIDS(HELP010 HELP020)
BBCASE    0000000300000000000001     @@QUESTION PROMPT('Now, specify how many conditions will be tested by this case construct') ANSWER(@@NANS001) EXTEND('For example, your CASE block might want to test for when field @@CANS002' 'is an "A", a "B" and a "C". This would be 3 separate conditions.' 'Use the HELP key to view examples and for further information.') LOWER(*YES) RANGE((1 20)) HELPIDS(HELP010 HELP020)
BBCASE    0000000400000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(A10)
BBCASE    0000000500000000000001     @@COMMENT  COMMENT('@@CANS001')
BBCASE    0000000600000000000001A10: @@LABEL
BBCASE    0000000700000000000001     CASE       OF_FIELD(@@CANS002)
BBCASE    0000000800000000000001     @@SET_IDX  IDX_NAME(CX) TO(1)
BBCASE    0000000900000000000001A30: @@CMP_IDX  IDX_NAME(CX) IDX_VALUE(@@NANS001) IF_GT(A40)
BBCASE    0000001000000000000001     @@QUESTION PROMPT('Specify a value to be compared with field @@CANS002') ANSWER(@@CANS003) EXTEND('You will get this question repeated for each separate condition that is to' 'be tested. For instance, if you specified that the CASE construct tests' '3 separate conditions, then this question will be repeated 3 times.' 'On each repetition, specify the next value that is to be compared with' '@@CANS002. For more information and examples use the HELP function key.') LOWER(*NO) HELPIDS(HELP010 HELP020)
BBCASE    0000001100000000000001     WHEN       VALUE_IS('= @@CANS003')
BBCASE    0000001200000000000001     @@INC_IDX  IDX_NAME(CX)
BBCASE    0000001300000000000001     @@GOTO     LABEL(A30)
BBCASE    0000001400000000000001A40: @@LABEL
BBCASE    0000001500000000000001     OTHERWISE
BBCASE    0000001600000000000001     ENDCASE
BBDOU     0000000100000000000001     @@QUESTION PROMPT('Describe the condition that causes this do UNTIL loop to stop looping') ANSWER(@@CANS001) EXTEND('The information you provide here is used to create a comment in your RDML' 'program. If you do not specify an answer, no comment will be generated.' 'Use the HELP function key for more details and/or examples.') HELPIDS(HELP010)
BBDOU     0000000200000000000001     @@QUESTION PROMPT('Now, specify the actual condition to be tested by this DOUNTIL command') ANSWER(@@CANS002) EXTEND('Specify the condition according to the normal rules for expression' 'formulation used by this product. Do NOT use quotes to surround the' 'expression. Use the HELP key to view examples of expressions.') HELPIDS(HELP010)
BBDOU     0000000300000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(A10)
BBDOU     0000000400000000000001     @@COMMENT  COMMENT('@@CANS001')
BBDOU     0000000500000000000001A10: @@LABEL
BBDOU     0000000600000000000001     DOUNTIL    COND('@@CANS002')
BBDOU     0000000700000000000001     ENDUNTIL
BBDOW     0000000100000000000001     @@QUESTION PROMPT('Describe what condition keeps this do WHILE loop going (ie: looping)') ANSWER(@@CANS001) EXTEND('The information you provide here is used to create a comment in your RDML' 'program. If you do not specify an answer, no comment will be generated.' 'Use the HELP function key for more details and/or examples.') HELPIDS(HELP010)
BBDOW     0000000200000000000001     @@QUESTION PROMPT('Now, specify the actual condition to be tested by this DOWHILE command.') ANSWER(@@CANS002) EXTEND('Specify the condition according to the normal rules for expression' 'formulation used by this product. Do NOT use quotes to surround the' 'expression. Use the HELP key to view examples of expressions.') HELPIDS(HELP010)
BBDOW     0000000300000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(A10)
BBDOW     0000000400000000000001     @@COMMENT  COMMENT('@@CANS001')
BBDOW     0000000500000000000001A10: @@LABEL
BBDOW     0000000600000000000001     DOWHILE    COND('@@CANS002')
BBDOW     0000000700000000000001     ENDWHILE
BBFILTRIG 0000000100000000000001     @@QUESTION PROMPT('What is the name of the file that this trigger is to be associated with ?') ANSWER(@@CANS001) EXTEND('12345678 <- Specify the physical file name. Use no more than 8 characters.') LOWER(*NO) RANGE(('AAAAAAAAA' 'ZZZZZZZZZ')) HELPIDS(HELP010)
BBFILTRIG 0000000200000000000001     @@COMMENT  COMMENT('=======================================================')
BBFILTRIG 0000000300000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1992')
BBFILTRIG 0000000400000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBFILTRIG 0000000500000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBFILTRIG 0000000600000000000001     @@COMMENT  COMMENT('Type ..........: @@CANS001 File Level Trigger ')
BBFILTRIG 0000000700000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBFILTRIG 0000000800000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBFILTRIG 0000000900000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBFILTRIG 0000001000000000000001     @@COMMENT  COMMENT('=======================================================')
BBFILTRIG 0000001100000000000001     FUNCTION   OPTIONS(*DIRECT *NOMESSAGES *LIGHTUSAGE *MLOPTIMISE) RCV_LIST(#TRIG_LIST) TRIGGER(*FILE @@CANS001)
BBFILTRIG 0000001200000000000001     @@COMMENT  COMMENT('=======================================================')
BBFILTRIG 0000001300000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBFILTRIG 0000001400000000000001     @@COMMENT  COMMENT('=======================================================')
BBFILTRIG 0000001500000000000001     @@COMMENT  COMMENT('At entry #TRIG_LIST will contain 0,1 or 2')
BBFILTRIG 0000001600000000000001     @@COMMENT  COMMENT('entries representing current and previous')
BBFILTRIG 0000001700000000000001     @@COMMENT  COMMENT('record images of file @@CANS001. Refer to the')
BBFILTRIG 0000001800000000000001     @@COMMENT  COMMENT('Technical Guide for details and examples.')
BBFILTRIG 0000001900000000000001     @@COMMENT  COMMENT('Do NOT define any fields in this list. They')
BBFILTRIG 0000002000000000000001     @@COMMENT  COMMENT('are automatically included by the compiler.')
BBFILTRIG 0000002100000000000001     DEF_LIST   NAME(#TRIG_LIST) TYPE(*WORKING) ENTRYS(2)
BBFILTRIG 0000002200000000000001     @@COMMENT  COMMENT('=======================================================')
BBFILTRIG 0000002300000000000001     @@COMMENT  COMMENT('Function Mainline : @@FUNCTION')
BBFILTRIG 0000002400000000000001     @@COMMENT  COMMENT('=======================================================')
BBFILTRIG 0000002500000000000001     @@COMMENT  COMMENT('Assume a "good" return initially')
BBFILTRIG 0000002600000000000001     CHANGE     FIELD(#TRIG_RETC) TO('OK')
BBFILTRIG 0000002700000000000001     @@COMMENT  COMMENT(' ')
BBFILTRIG 0000002800000000000001     @@COMMENT  COMMENT('>>> DELETE all "not defined" events from the  <<<')
BBFILTRIG 0000002900000000000001     @@COMMENT  COMMENT('>>> the following CASE construct. (ie: Remove <<<')
BBFILTRIG 0000003000000000000001     @@COMMENT  COMMENT('>>> WHEN VALUE_IS commands that are not part  <<<')
BBFILTRIG 0000003100000000000001     @@COMMENT  COMMENT('>>> of the definition of this trigger BEFORE  <<<')
BBFILTRIG 0000003200000000000001     @@COMMENT  COMMENT('>>> specifying details of the events that are <<<')
BBFILTRIG 0000003300000000000001     @@COMMENT  COMMENT('>>> part of the definition of this trigger).  <<<')
BBFILTRIG 0000003400000000000001     @@COMMENT  COMMENT('>>> This simplifies logic in this function    <<<')
BBFILTRIG 0000003500000000000001     @@COMMENT  COMMENT('>>> and ensures an ABORT if someone attempts  <<<')
BBFILTRIG 0000003600000000000001     @@COMMENT  COMMENT('>>> to cause it to be invoked during an event <<<')
BBFILTRIG 0000003700000000000001     @@COMMENT  COMMENT('>>> that it has not been set up to handle.    <<<')
BBFILTRIG 0000003800000000000001     @@COMMENT  COMMENT(' ')
BBFILTRIG 0000003900000000000001     CASE       OF_FIELD(#TRIG_OPER)
BBFILTRIG 0000004000000000000001     @@COMMENT  COMMENT('Handle a before open event           ')
BBFILTRIG 0000004100000000000001     WHEN       VALUE_IS('= BEFOPN')
BBFILTRIG 0000004200000000000001     @@COMMENT  COMMENT('Handle an after open event        ')
BBFILTRIG 0000004300000000000001     WHEN       VALUE_IS('= AFTOPN')
BBFILTRIG 0000004400000000000001     @@COMMENT  COMMENT('Handle a before close event           ')
BBFILTRIG 0000004500000000000001     WHEN       VALUE_IS('= BEFCLS')
BBFILTRIG 0000004600000000000001     @@COMMENT  COMMENT('Handle an after close event        ')
BBFILTRIG 0000004700000000000001     WHEN       VALUE_IS('= AFTCLS')
BBFILTRIG 0000004800000000000001     @@COMMENT  COMMENT('Handle a before read event           ')
BBFILTRIG 0000004900000000000001     WHEN       VALUE_IS('= BEFRED')
BBFILTRIG 0000005000000000000001     @@COMMENT  COMMENT('Handle an after read event        ')
BBFILTRIG 0000005100000000000001     WHEN       VALUE_IS('= AFTRED')
BBFILTRIG 0000005200000000000001     @@COMMENT  COMMENT('Handle a before insert event       ')
BBFILTRIG 0000005300000000000001     WHEN       VALUE_IS('= BEFINS')
BBFILTRIG 0000005400000000000001     @@COMMENT  COMMENT('Handle an after insert event        ')
BBFILTRIG 0000005500000000000001     WHEN       VALUE_IS('= AFTINS')
BBFILTRIG 0000005600000000000001     @@COMMENT  COMMENT('Handle a before update event       ')
BBFILTRIG 0000005700000000000001     WHEN       VALUE_IS('= BEFUPD')
BBFILTRIG 0000005800000000000001     @@COMMENT  COMMENT('Handle an after update event        ')
BBFILTRIG 0000005900000000000001     WHEN       VALUE_IS('= AFTUPD')
BBFILTRIG 0000006000000000000001     @@COMMENT  COMMENT('Handle a before delete event       ')
BBFILTRIG 0000006100000000000001     WHEN       VALUE_IS('= BEFDLT')
BBFILTRIG 0000006200000000000001     @@COMMENT  COMMENT('Handle an after delete event        ')
BBFILTRIG 0000006300000000000001     WHEN       VALUE_IS('= AFTDLT')
BBFILTRIG 0000006400000000000001     @@COMMENT  COMMENT('Handle an event not catered for   ')
BBFILTRIG 0000006500000000000001     OTHERWISE
BBFILTRIG 0000006600000000000001     ABORT      MSGTXT('File @@CANS001 trigger function invalidly invoked/ used.')
BBFILTRIG 0000006700000000000001     ENDCASE
BBFILTRIG 0000006800000000000001     @@COMMENT  COMMENT('Return control to the invoker')
BBFILTRIG 0000006900000000000001     RETURN
BBFLDTRIG 0000000100000000000001     @@QUESTION PROMPT('What is the name of the field that this trigger is to be associated with ?') ANSWER(@@CANS001) EXTEND('123456789 <- Specify the field name. Do NOT specify the standard "#"' 'prefix, which will be automatically included. Do not make the name' 'more than 9 characters long.') LOWER(*NO) RANGE(('AAAAAAAAA' 'ZZZZZZZZZ')) HELPIDS(HELP010)
BBFLDTRIG 0000000200000000000001     @@COMMENT  COMMENT('=======================================================')
BBFLDTRIG 0000000300000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1992')
BBFLDTRIG 0000000400000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBFLDTRIG 0000000500000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBFLDTRIG 0000000600000000000001     @@COMMENT  COMMENT('Type ..........: @@CANS001 Field Level Trigger')
BBFLDTRIG 0000000700000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBFLDTRIG 0000000800000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBFLDTRIG 0000000900000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBFLDTRIG 0000001000000000000001     @@COMMENT  COMMENT('=======================================================')
BBFLDTRIG 0000001100000000000001     FUNCTION   OPTIONS(*DIRECT *NOMESSAGES *LIGHTUSAGE *MLOPTIMISE) RCV_LIST(#TRIG_LIST) TRIGGER(*FIELD #@@CANS001)
BBFLDTRIG 0000001200000000000001     @@COMMENT  COMMENT('=======================================================')
BBFLDTRIG 0000001300000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBFLDTRIG 0000001400000000000001     @@COMMENT  COMMENT('=======================================================')
BBFLDTRIG 0000001500000000000001     @@COMMENT  COMMENT('At entry #TRIG_LIST will contain 0,1 or 2')
BBFLDTRIG 0000001600000000000001     @@COMMENT  COMMENT('entries representing current and previous')
BBFLDTRIG 0000001700000000000001     @@COMMENT  COMMENT('values of field @@CANS001. Refer to the')
BBFLDTRIG 0000001800000000000001     @@COMMENT  COMMENT('Technical Guide for details and examples.')
BBFLDTRIG 0000001900000000000001     @@COMMENT  COMMENT('Do NOT define any fields in this list. They')
BBFLDTRIG 0000002000000000000001     @@COMMENT  COMMENT('are automatically included by the compiler.')
BBFLDTRIG 0000002100000000000001     DEF_LIST   NAME(#TRIG_LIST) TYPE(*WORKING) ENTRYS(2)
BBFLDTRIG 0000002200000000000001     @@COMMENT  COMMENT('=======================================================')
BBFLDTRIG 0000002300000000000001     @@COMMENT  COMMENT('Function Mainline : @@FUNCTION')
BBFLDTRIG 0000002400000000000001     @@COMMENT  COMMENT('=======================================================')
BBFLDTRIG 0000002500000000000001     @@COMMENT  COMMENT('Assume a "good" return initially')
BBFLDTRIG 0000002600000000000001     CHANGE     FIELD(#TRIG_RETC) TO('OK')
BBFLDTRIG 0000002700000000000001     @@COMMENT  COMMENT(' ')
BBFLDTRIG 0000002800000000000001     @@COMMENT  COMMENT('>>> DELETE all "not defined" events from the  <<<')
BBFLDTRIG 0000002900000000000001     @@COMMENT  COMMENT('>>> the following CASE construct. (ie: Remove <<<')
BBFLDTRIG 0000003000000000000001     @@COMMENT  COMMENT('>>> WHEN VALUE_IS commands that are not part  <<<')
BBFLDTRIG 0000003100000000000001     @@COMMENT  COMMENT('>>> of the definition of this trigger BEFORE  <<<')
BBFLDTRIG 0000003200000000000001     @@COMMENT  COMMENT('>>> specifying details of the events that are <<<')
BBFLDTRIG 0000003300000000000001     @@COMMENT  COMMENT('>>> part of the definition of this trigger).  <<<')
BBFLDTRIG 0000003400000000000001     @@COMMENT  COMMENT('>>> This simplifies logic in this function    <<<')
BBFLDTRIG 0000003500000000000001     @@COMMENT  COMMENT('>>> and ensures an ABORT if someone attempts  <<<')
BBFLDTRIG 0000003600000000000001     @@COMMENT  COMMENT('>>> to cause it to be invoked during an event <<<')
BBFLDTRIG 0000003700000000000001     @@COMMENT  COMMENT('>>> that it has not been set up to handle.    <<<')
BBFLDTRIG 0000003800000000000001     @@COMMENT  COMMENT(' ')
BBFLDTRIG 0000003900000000000001     CASE       OF_FIELD(#TRIG_OPER)
BBFLDTRIG 0000004000000000000001     @@COMMENT  COMMENT('Handle a before open event           ')
BBFLDTRIG 0000004100000000000001     WHEN       VALUE_IS('= BEFOPN')
BBFLDTRIG 0000004200000000000001     @@COMMENT  COMMENT('Handle an after open event        ')
BBFLDTRIG 0000004300000000000001     WHEN       VALUE_IS('= AFTOPN')
BBFLDTRIG 0000004400000000000001     @@COMMENT  COMMENT('Handle a before close event           ')
BBFLDTRIG 0000004500000000000001     WHEN       VALUE_IS('= BEFCLS')
BBFLDTRIG 0000004600000000000001     @@COMMENT  COMMENT('Handle an after close event        ')
BBFLDTRIG 0000004700000000000001     WHEN       VALUE_IS('= AFTCLS')
BBFLDTRIG 0000004800000000000001     @@COMMENT  COMMENT('Handle a before read event           ')
BBFLDTRIG 0000004900000000000001     WHEN       VALUE_IS('= BEFRED')
BBFLDTRIG 0000005000000000000001     @@COMMENT  COMMENT('Handle an after read event        ')
BBFLDTRIG 0000005100000000000001     WHEN       VALUE_IS('= AFTRED')
BBFLDTRIG 0000005200000000000001     @@COMMENT  COMMENT('Handle a before insert event       ')
BBFLDTRIG 0000005300000000000001     WHEN       VALUE_IS('= BEFINS')
BBFLDTRIG 0000005400000000000001     @@COMMENT  COMMENT('Handle an after insert event        ')
BBFLDTRIG 0000005500000000000001     WHEN       VALUE_IS('= AFTINS')
BBFLDTRIG 0000005600000000000001     @@COMMENT  COMMENT('Handle a before update event       ')
BBFLDTRIG 0000005700000000000001     WHEN       VALUE_IS('= BEFUPD')
BBFLDTRIG 0000005800000000000001     @@COMMENT  COMMENT('Handle an after update event        ')
BBFLDTRIG 0000005900000000000001     WHEN       VALUE_IS('= AFTUPD')
BBFLDTRIG 0000006000000000000001     @@COMMENT  COMMENT('Handle a before delete event       ')
BBFLDTRIG 0000006100000000000001     WHEN       VALUE_IS('= BEFDLT')
BBFLDTRIG 0000006200000000000001     @@COMMENT  COMMENT('Handle an after delete event        ')
BBFLDTRIG 0000006300000000000001     WHEN       VALUE_IS('= AFTDLT')
BBFLDTRIG 0000006400000000000001     @@COMMENT  COMMENT('Handle an event not catered for   ')
BBFLDTRIG 0000006500000000000001     OTHERWISE
BBFLDTRIG 0000006600000000000001     ABORT      MSGTXT('Field @@CANS001 trigger function invalidly invoked/ used.')
BBFLDTRIG 0000006700000000000001     ENDCASE
BBFLDTRIG 0000006800000000000001     @@COMMENT  COMMENT('Return control to the invoker')
BBFLDTRIG 0000006900000000000001     RETURN
BBIF      0000000100000000000001     @@QUESTION PROMPT('Describe what condition this IF command tests for') ANSWER(@@CANS001) EXTEND('The information you provide here is used to create a comment in your RDML' 'program. If you do not specify an answer, no comment will be generated.' 'Use the HELP function key for more details and/or examples.') HELPIDS(HELP010)
BBIF      0000000200000000000001     @@QUESTION PROMPT('Now, specify the actual condition to be tested by this IF command') ANSWER(@@CANS002) EXTEND('Specify the condition according to the normal rules for expression' 'formulation used by this product. Do NOT use quotes to surround the' 'expression. Use the HELP key to view examples of expressions.') HELPIDS(HELP010)
BBIF      0000000300000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(A10)
BBIF      0000000400000000000001     @@COMMENT  COMMENT('@@CANS001')
BBIF      0000000500000000000001A10: @@LABEL
BBIF      0000000600000000000001     IF         COND('@@CANS002')
BBIF      0000000700000000000001     ENDIF
BBIFELSE  0000000100000000000001     @@QUESTION PROMPT('Describe what condition this IF command tests for') ANSWER(@@CANS001) EXTEND('The information you provide here is used to create a comment in your RDML' 'program. If you do not specify an answer, no comment will be generated.' 'Use the HELP function key for more details and/or examples.' 'Try to AVOID using the word IF in your description, as this will produce a' 'better automatically generated comment against the ELSE command that is' 'also produced by this template.') HELPIDS(HELP010)
BBIFELSE  0000000200000000000001     @@QUESTION PROMPT('Now, specify the actual condition to be tested by the IF command') ANSWER(@@CANS002) EXTEND('Specify the condition according to the normal rules for expression' 'formulation used by this product. Do NOT use quotes to surround the' 'expression. Use the HELP key to view examples of expressions.') HELPIDS(HELP010)
BBIFELSE  0000000300000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(A10)
BBIFELSE  0000000400000000000001     @@COMMENT  COMMENT('@@CANS001')
BBIFELSE  0000000500000000000001A10: @@LABEL
BBIFELSE  0000000600000000000001     IF         COND('@@CANS002')
BBIFELSE  0000000700000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(A20)
BBIFELSE  0000000800000000000001     @@COMMENT  COMMENT('Else, if not (@@CANS001)')
BBIFELSE  0000000900000000000001A20: @@LABEL
BBIFELSE  0000001000000000000001     ELSE
BBIFELSE  0000001100000000000001     ENDIF
BBJSMCMD  0000000100000000000001     @@QUESTION PROMPT('Use this template to build a command in a function generated by JSMSKEL.') ANSWER(@@CANS999) EXTEND('The code generated by this template assumes the existence of a KEYWRD and' 'a CHECK_STS subroutines as generated by the JSMSKEL template.' 'Press Enter to continue.') LOWER(*NO)
BBJSMCMD  0000000200000000000001     @@COMMENT  'BUILD THE JSM COMMAND '
BBJSMCMD  0000000300000000000001L01: @@LABEL
BBJSMCMD  0000000400000000000001     @@QUESTION PROMPT('Type in the JSM command you want to build') ANSWER(@@CANS001) LOWER(*NO)
BBJSMCMD  0000000500000000000001     CHANGE     FIELD(#JSMCMD) TO(@@CANS001)
BBJSMCMD  0000000600000000000001     @@QUESTION PROMPT('How many keywords do you want to specify?') ANSWER(@@NANS001) EXTEND('If you reply 0, you will not be prompted to specify any keyword-values. ' 'Otherwise, type in a number of up to 20 keyword-value to be prompted') LOWER(*NO) RANGE((0 20))
BBJSMCMD  0000000700000000000001     @@IF       COND((*IF @@NANS001 *EQ 0)) GOTO(L05)
BBJSMCMD  0000000800000000000001     @@SET_IDX  IDX_NAME(II) TO(1)
BBJSMCMD  0000000900000000000001LOP: @@LABEL
BBJSMCMD  0000001000000000000001     @@QUESTION PROMPT('Type in the keyword name.') ANSWER(@@CANS002) EXTEND('Type in the name of a valid keyword for the command you are building. ') LOWER(*NO)
BBJSMCMD  0000001100000000000001     @@QUESTION PROMPT('Type in the value for the @@CANS002 keyword') ANSWER(@@CANS003) EXTEND('Leave blank if the keyword has no value.' 'The value can be a FIELD name or an ALPHANUMERIC string.' 'If the value is a FIELD it must be prefixed with the #.' 'If the value is an ALPHANUMERIC string you must enclose it within triple' 'quotes.') LOWER(*NO)
BBJSMCMD  0000001200000000000001     @@IF       COND((*IF @@CANS003 *EQ ' ')) GOTO(L02)
BBJSMCMD  0000001300000000000001     @@IF       COND((*IF @@CANS002 *EQ 'URI')) GOTO(L07)
BBJSMCMD  0000001400000000000001     @@GOTO     LABEL(L08)
BBJSMCMD  0000001500000000000001L07: @@LABEL
BBJSMCMD  0000001600000000000001     IF         COND('#CPUTYPE = AS400')
BBJSMCMD  0000001700000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS('/CGI-BIN/JSMDIRECT?'  @@CANS003) TO_GET(#STD_TEXTL)
BBJSMCMD  0000001800000000000001     ELSE
BBJSMCMD  0000001900000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS('/CGI-BIN/JSMDIRECT.EXE?'  @@CANS003) TO_GET(#STD_TEXTL)
BBJSMCMD  0000002000000000000001     ENDIF
BBJSMCMD  0000002100000000000001     EXECUTE    SUBROUTINE(KEYWRD) WITH_PARMS(@@CANS002 #STD_TEXTL)
BBJSMCMD  0000002200000000000001     @@GOTO     L03
BBJSMCMD  0000002300000000000001L08: @@LABEL
BBJSMCMD  0000002400000000000001     EXECUTE    SUBROUTINE(KEYWRD) WITH_PARMS(@@CANS002 @@CANS003)
BBJSMCMD  0000002500000000000001     @@GOTO     L03
BBJSMCMD  0000002600000000000001L02: @@LABEL
BBJSMCMD  0000002700000000000001     EXECUTE    SUBROUTINE(KEYWRD) WITH_PARMS(@@CANS002 *BLANKS)
BBJSMCMD  0000002800000000000001L03: @@LABEL
BBJSMCMD  0000002900000000000001     @@INC_IDX  IDX_NAME(II)
BBJSMCMD  0000003000000000000001     @@CMP_IDX  IDX_NAME(II) IDX_VALUE(@@NANS001) IF_GT(L04)
BBJSMCMD  0000003100000000000001     @@GOTO     LABEL(LOP)
BBJSMCMD  0000003200000000000001L04: @@LABEL
BBJSMCMD  0000003300000000000001     @@QUESTION PROMPT('Type in the name of a working list if this command uses one.') ANSWER(@@CANS004) EXTEND('Leave blank if no list is passed with the command. ' 'Do NOT prefix the list name with a #') LOWER(*NO)
BBJSMCMD  0000003400000000000001     @@IF       COND((*IF @@CANS004 *EQ ' ')) GOTO(L05)
BBJSMCMD  0000003500000000000001     USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG #@@CANS004)
BBJSMCMD  0000003600000000000001     EXECUTE    SUBROUTINE(CHECK_STS)
BBJSMCMD  0000003700000000000001     @@COMMENT  '    '
BBJSMCMD  0000003800000000000001     @@GOTO     LABEL(L06)
BBJSMCMD  0000003900000000000001L05: @@LABEL
BBJSMCMD  0000004000000000000001     USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
BBJSMCMD  0000004100000000000001     EXECUTE    SUBROUTINE(CHECK_STS)
BBJSMCMD  0000004200000000000001     @@COMMENT  '    '
BBJSMCMD  0000004300000000000001L06: @@LABEL
BBJSMCMD  0000004400000000000001     @@QUESTION PROMPT('Do you wish to enter another JSM command?') ANSWER(@@CANS005) EXTEND('Reply Y or N only.' 'If you reply Y you will be prompted to enter another command and keywords.') LOWER(*NO) VALUES(Y N)
BBJSMCMD  0000004500000000000001     @@IF       COND((*IF @@CANS005 *EQ Y)) GOTO(L01)
BBJSMCMD  0000004600000000000001END: @@LABEL
BBJSMCMD  0000004700000000000001     /* **********                                                         */
BBJSMCMD  0000004800000000000001     @@COMMENT  '         '
BBJSMXCMD 0000000100000000000001     @@QUESTION PROMPT('Use this template to build a command in a function generated by JSMXSKEL.') ANSWER(@@CANS999) EXTEND('The code generated by this template assumes the existence of a KEYWRD and' 'a CHECK_STS subroutines as generated by the JSMXSKEL template.' 'Press Enter to continue.') LOWER(*NO)
BBJSMXCMD 0000000200000000000001     @@COMMENT  'BUILD THE JSM COMMAND '
BBJSMXCMD 0000000300000000000001L01: @@LABEL
BBJSMXCMD 0000000400000000000001     @@QUESTION PROMPT('Type in the JSM command you want to build') ANSWER(@@CANS001) LOWER(*NO)
BBJSMXCMD 0000000500000000000001     #JSMXCMD   := @@CANS001
BBJSMXCMD 0000000600000000000001     @@QUESTION PROMPT('How many keywords do you want to specify?') ANSWER(@@NANS001) EXTEND('If you reply 0, you will not be prompted to specify any keyword-values. ' 'Otherwise, type in a number of up to 20 keyword-value to be prompted') LOWER(*NO) RANGE((0 20))
BBJSMXCMD 0000000700000000000001     @@IF       COND((*IF @@NANS001 *EQ 0)) GOTO(L05)
BBJSMXCMD 0000000800000000000001     @@SET_IDX  IDX_NAME(II) TO(1)
BBJSMXCMD 0000000900000000000001LOP: @@LABEL
BBJSMXCMD 0000001000000000000001     @@QUESTION PROMPT('Type in the keyword name.') ANSWER(@@CANS002) EXTEND('Type in the name of a valid keyword for the command you are building. ') LOWER(*NO)
BBJSMXCMD 0000001100000000000001     @@QUESTION PROMPT('Type in the value for the @@CANS002 keyword') ANSWER(@@CANS003) EXTEND('Leave blank if the keyword has no value.' 'The value can be a FIELD name or an ALPHANUMERIC string.' 'If the value is a FIELD it must be prefixed with the #.' 'If the value is an ALPHANUMERIC string you must enclose it within triple' 'quotes.') LOWER(*NO)
BBJSMXCMD 0000001200000000000001     @@IF       COND((*IF @@CANS003 *EQ ' ')) GOTO(L02)
BBJSMXCMD 0000001300000000000001     @@IF       COND((*IF @@CANS002 *EQ 'URI')) GOTO(L07)
BBJSMXCMD 0000001400000000000001     @@GOTO     LABEL(L08)
BBJSMXCMD 0000001500000000000001L07: @@LABEL
BBJSMXCMD 0000001600000000000001     IF         COND('#CPUTYPE = AS400')
BBJSMXCMD 0000001700000000000001     #STD_TEXTL := '/CGI-BIN/JSMDIRECT?' + @@CANS003
BBJSMXCMD 0000001800000000000001     ELSE
BBJSMXCMD 0000001900000000000001     #STD_TEXTL := '/CGI-BIN/JSMDIRECT.EXE?' + @@CANS003
BBJSMXCMD 0000002000000000000001     ENDIF
BBJSMXCMD 0000002100000000000001     EXECUTE    SUBROUTINE(KEYWRD) WITH_PARMS(#JSMXCMD @@CANS002 #STD_TEXTL)
BBJSMXCMD 0000002200000000000001     @@GOTO     L03
BBJSMXCMD 0000002300000000000001L08: @@LABEL
BBJSMXCMD 0000002400000000000001     EXECUTE    SUBROUTINE(KEYWRD) WITH_PARMS(#JSMXCMD @@CANS002 @@CANS003)
BBJSMXCMD 0000002500000000000001     @@GOTO     L03
BBJSMXCMD 0000002600000000000001L02: @@LABEL
BBJSMXCMD 0000002700000000000001     EXECUTE    SUBROUTINE(KEYWRD) WITH_PARMS(#JSMXCMD @@CANS002 *BLANKS)
BBJSMXCMD 0000002800000000000001L03: @@LABEL
BBJSMXCMD 0000002900000000000001     @@INC_IDX  IDX_NAME(II)
BBJSMXCMD 0000003000000000000001     @@CMP_IDX  IDX_NAME(II) IDX_VALUE(@@NANS001) IF_GT(L04)
BBJSMXCMD 0000003100000000000001     @@GOTO     LABEL(LOP)
BBJSMXCMD 0000003200000000000001L04: @@LABEL
BBJSMXCMD 0000003300000000000001     @@QUESTION PROMPT('Type in the name of a working list if this command uses one.') ANSWER(@@CANS004) EXTEND('Leave blank if no list is passed with the command. ' 'Do NOT prefix the list name with a #') LOWER(*NO)
BBJSMXCMD 0000003400000000000001     @@IF       COND((*IF @@CANS004 *EQ ' ')) GOTO(L05)
BBJSMXCMD 0000003500000000000001     USE        BUILTIN(JSMX_COMMAND) WITH_ARGS(#JSMXHDLE1 #JSMXCMD) TO_GET(#JSMSTS #JSMMSG #@@CANS004)
BBJSMXCMD 0000003600000000000001     EXECUTE    SUBROUTINE(CHECK_STS) WITH_PARMS(#JSMXCMD)
BBJSMXCMD 0000003700000000000001     @@COMMENT  '    '
BBJSMXCMD 0000003800000000000001     @@GOTO     LABEL(L06)
BBJSMXCMD 0000003900000000000001L05: @@LABEL
BBJSMXCMD 0000004000000000000001     USE        BUILTIN(JSMX_COMMAND) WITH_ARGS(#JSMXHDLE1 #JSMXCMD) TO_GET(#JSMSTS #JSMMSG)
BBJSMXCMD 0000004100000000000001     EXECUTE    SUBROUTINE(CHECK_STS) WITH_PARMS(#JSMXCMD)
BBJSMXCMD 0000004200000000000001     @@COMMENT  '    '
BBJSMXCMD 0000004300000000000001L06: @@LABEL
BBJSMXCMD 0000004400000000000001     @@QUESTION PROMPT('Do you wish to enter another JSM command?') ANSWER(@@CANS005) EXTEND('Reply Y or N only.' 'If you reply Y you will be prompted to enter another command and keywords.') LOWER(*NO) VALUES(Y N)
BBJSMXCMD 0000004500000000000001     @@IF       COND((*IF @@CANS005 *EQ Y)) GOTO(L01)
BBJSMXCMD 0000004600000000000001END: @@LABEL
BBJSMXCMD 0000004700000000000001     /* **********                                                         */
BBJSMXCMD 0000004800000000000001     @@COMMENT  '         '
BBLOOP    0000000100000000000001     @@QUESTION PROMPT('Describe what this loop is used for') ANSWER(@@CANS001) EXTEND('The information you provide here is used to create a comment in your RDML' 'program. If you do not specify an answer, no comment will be generated.' 'Use the HELP function key for more details and/or examples.') HELPIDS(HELP010)
BBLOOP    0000000200000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(A10)
BBLOOP    0000000300000000000001     @@COMMENT  COMMENT('@@CANS001')
BBLOOP    0000000400000000000001A10: @@LABEL
BBLOOP    0000000500000000000001     BEGIN_LOOP
BBLOOP    0000000600000000000001     END_LOOP
BBNUMSYS  0000000100000000000001     @@QUESTION PROMPT('What is the name of the system variable that is to be evaluated ?') ANSWER(@@CANS001) EXTEND('*2345678901234567890 <- Specify the system variable name. Remember to' 'start it with an "*" and make sure that the name (including the *) does' 'not exceed 20 characters in length.') LOWER(*NO) RANGE(('*AAAAAAAAAAAAAAAAAAA' '*ZZZZZZZZZZZZZZZZZZZ')) HELPIDS(HELP010)
BBNUMSYS  0000000200000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMSYS  0000000300000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1992')
BBNUMSYS  0000000400000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBNUMSYS  0000000500000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBNUMSYS  0000000600000000000001     @@COMMENT  COMMENT('Type ..........: System Variable Evaluator')
BBNUMSYS  0000000700000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBNUMSYS  0000000800000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBNUMSYS  0000000900000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBNUMSYS  0000001000000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMSYS  0000001100000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBNUMSYS  0000001200000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMSYS  0000001300000000000001     @@COMMENT  COMMENT(' ')
BBNUMSYS  0000001400000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMSYS  0000001500000000000001     @@COMMENT  COMMENT('Function Mainline : @@FUNCTION')
BBNUMSYS  0000001600000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMSYS  0000001700000000000001     @@COMMENT  COMMENT(' ')
BBNUMSYS  0000001800000000000001     FUNCTION   OPTIONS(*DIRECT *NOMESSAGES *LIGHTUSAGE *MLOPTIMISE *NUM_SYSTEM_VARIABLE)
BBNUMSYS  0000001900000000000001     @@COMMENT  COMMENT(' ')
BBNUMSYS  0000002000000000000001     CASE       OF_FIELD(#SYSVAR$NM)
BBNUMSYS  0000002100000000000001     WHEN       VALUE_IS('= ''@@CANS001''')
BBNUMSYS  0000002200000000000001     @@COMMENT  COMMENT('>>> Set #SYSVAR$NV to correct value here <<<')
BBNUMSYS  0000002300000000000001     OTHERWISE
BBNUMSYS  0000002400000000000001     ABORT      MSGTXT('@@CANS001 system variable evaluator invalidly invoked.')
BBNUMSYS  0000002500000000000001     ENDCASE
BBNUMSYS  0000002600000000000001     @@COMMENT  COMMENT(' ')
BBNUMSYS  0000002700000000000001     RETURN
BBNUMVAL  0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMVAL  0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1992')
BBNUMVAL  0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBNUMVAL  0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBNUMVAL  0000000500000000000001     @@COMMENT  COMMENT('Type ..........: Numeric Field Validation')
BBNUMVAL  0000000600000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBNUMVAL  0000000700000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBNUMVAL  0000000800000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBNUMVAL  0000000900000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMVAL  0000001000000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBNUMVAL  0000001100000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMVAL  0000001200000000000001     @@COMMENT  COMMENT(' ')
BBNUMVAL  0000001300000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMVAL  0000001400000000000001     @@COMMENT  COMMENT('Function Mainline : @@FUNCTION')
BBNUMVAL  0000001500000000000001     @@COMMENT  COMMENT('=======================================================')
BBNUMVAL  0000001600000000000001     FUNCTION   OPTIONS(*DIRECT *LIGHTUSAGE *MLOPTIMISE *NUM_FIELD_VALIDATE)
BBNUMVAL  0000001700000000000001     @@COMMENT  COMMENT('Set up a "good" return as the default')
BBNUMVAL  0000001800000000000001     CHANGE     FIELD(#VALFLD$RT) TO('''1''')
BBNUMVAL  0000001900000000000001     @@COMMENT  COMMENT('Now validate the field')
BBNUMVAL  0000002000000000000001     @@COMMENT  COMMENT('>>> ======================== <<<')
BBNUMVAL  0000002100000000000001     @@COMMENT  COMMENT('>>> Do validation logic here <<<')
BBNUMVAL  0000002200000000000001     @@COMMENT  COMMENT('>>> ======================== <<<')
BBNUMVAL  0000002300000000000001     @@COMMENT  COMMENT('>>> When invoked :           <<<')
BBNUMVAL  0000002400000000000001     @@COMMENT  COMMENT('>>> #VALFLD$NM - Name of field to validate <<<')
BBNUMVAL  0000002500000000000001     @@COMMENT  COMMENT('>>> #VALFLD$LN - Length of field to validate <<<')
BBNUMVAL  0000002600000000000001     @@COMMENT  COMMENT('>>> #VALFLD$DP - Decimals in field to validate <<<')
BBNUMVAL  0000002700000000000001     @@COMMENT  COMMENT('>>> #VALFLD$NV - Current numeric value of field <<<')
BBNUMVAL  0000002800000000000001     @@COMMENT  COMMENT('>>> #VALFLD$RT - Return Code. "1"=Good, "0"=Bad <<<')
BBNUMVAL  0000002900000000000001     @@COMMENT  COMMENT('Return control to caller')
BBNUMVAL  0000003000000000000001     RETURN
BBPAGE    0000000100000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000000200000000000001     /* ********** START OF TEMPLATE CODE                                  */
BBPAGE    0000000300000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000000400000000000001     /* ********** GET PREFIX FOR RDML VARIABLES                           */
BBPAGE    0000000500000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000000600000000000001     @@QUESTION PROMPT('Enter a 1 to 4 character prefix for variables declared by this template') ANSWER(@@CANS001) EXTEND('Use from 1 to 4 alphabetic characters only. Do not use the name LIST.' 'Try to make the name reflect what the browse list will contain.' 'For example : CUST, PROD, SUPP, ITEM, etc.' 'For more information and examples use the HELP function key.') LOWER(*NO) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
BBPAGE    0000000700000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000000800000000000001     /* ********** GET FILE TO WORK WITH                                   */
BBPAGE    0000000900000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000001000000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the file to be browsed by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
BBPAGE    0000001100000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000001200000000000001     /* ********** SET UP BROWSE LIST                                      */
BBPAGE    0000001300000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000001400000000000001     @@CLR_LST  NUMBER(1)
BBPAGE    0000001500000000000001     @@RTV_FLDS FROM_FILE(01) INTO_LST(1)
BBPAGE    0000001600000000000001     @@CLR_LST  NUMBER(2)
BBPAGE    0000001700000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields to' 'Display' 'in List' *SEQUENCE)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
BBPAGE    0000001800000000000001     @@CLR_LST  NUMBER(3)
BBPAGE    0000001900000000000001     @@RTV_KEYS OF_FILE(01) INTO_LST(3)
BBPAGE    0000002000000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000002100000000000001     /* ********** ASK WHETHER OR NOT A SELECTOR FIELD IS REQUIRED         */
BBPAGE    0000002200000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000002300000000000001     @@QUESTION PROMPT('Do you want a "selector" field to be included into the browse list ?') ANSWER(@@CANS002) EXTEND('Reply Y or N only to this question.' 'Reply Y to cause a selector field to be included into the browse list.' 'Reply N to omit a selector field from the browse list.' 'For more information and examples use the HELP function key.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
BBPAGE    0000002400000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000002500000000000001     /* ********** START OF GENERATED CODE                                 */
BBPAGE    0000002600000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000002700000000000001     @@COMMENT  COMMENT('=======================================================')
BBPAGE    0000002800000000000001     @@COMMENT  COMMENT('Work variables and browse list that are used by the')
BBPAGE    0000002900000000000001     @@COMMENT  COMMENT('@@CANS001BROWSE and @@CANS001DISP subroutines')
BBPAGE    0000003000000000000001     @@COMMENT  COMMENT('=======================================================')
BBPAGE    0000003100000000000001     FUNCTION   OPTIONS(*DEFERWRITE *DIRECT)
BBPAGE    0000003200000000000001     DEFINE     FIELD(#@@CANS001COUNT) REFFLD(#LISTCOUNT)
BBPAGE    0000003300000000000001     DEFINE     FIELD(#@@CANS001PAGE) REFFLD(#LISTPAGE)
BBPAGE    0000003400000000000001     DEFINE     FIELD(#@@CANS001TOP) REFFLD(#LISTTOP)
BBPAGE    0000003500000000000001     DEFINE     FIELD(#@@CANS001POS) REFFLD(#LISTPOS)
BBPAGE    0000003600000000000001     @@IF       ((*IF @@CANS002 *EQ Y)) GOTO(S05)
BBPAGE    0000003700000000000001     DEFINE     FIELD(#@@CANS001ENTRY) REFFLD(#LISTENTRY)
BBPAGE    0000003800000000000001S05: @@LABEL
BBPAGE    0000003900000000000001     DEFINE     FIELD(#@@CANS001REMN) REFFLD(#LISTREMN)
BBPAGE    0000004000000000000001     @@IF       ((*IF @@CANS002 *EQ Y)) GOTO(S20)
BBPAGE    0000004100000000000001     DEF_LIST   #@@CANS001LIST FIELDS(@@LST02) PAGE_SIZE(#@@CANS001PAGE) COUNTER(#@@CANS001COUNT) TOP_ENTRY(#@@CANS001TOP) SCROLL_TXT(#@@CANS001POS) SEL_ENTRY(#@@CANS001ENTRY)
BBPAGE    0000004200000000000001     @@GOTO     S30
BBPAGE    0000004300000000000001S20: @@LABEL
BBPAGE    0000004400000000000001     DEF_LIST   #@@CANS001LIST FIELDS((#SELECTOR *SELECT) @@LST02) PAGE_SIZE(#@@CANS001PAGE) COUNTER(#@@CANS001COUNT) TOP_ENTRY(#@@CANS001TOP) SCROLL_TXT(#@@CANS001POS)
BBPAGE    0000004500000000000001S30: @@LABEL
BBPAGE    0000004600000000000001     @@COMMENT  COMMENT('=======================================================')
BBPAGE    0000004700000000000001     @@COMMENT  COMMENT('Subroutine ....: @@CANS001BROWSE')
BBPAGE    0000004800000000000001     @@COMMENT  COMMENT('Description....: Browse from @@FNAME01 (page at a time)')
BBPAGE    0000004900000000000001     @@COMMENT  COMMENT('=======================================================')
BBPAGE    0000005000000000000001     SUBROUTINE NAME(@@CANS001BROWSE)
BBPAGE    0000005100000000000001     @@COMMENT  COMMENT('Repeat until records found and selection made')
BBPAGE    0000005200000000000001     @@IF       ((*IF @@CANS002 *EQ Y)) GOTO(X10)
BBPAGE    0000005300000000000001     DOUNTIL    COND('(#@@CANS001COUNT *GT 0) *AND (#IO$KEY *EQ RA) *AND (#@@CANS001ENTRY *GT 0)')
BBPAGE    0000005400000000000001     @@GOTO     X20
BBPAGE    0000005500000000000001X10: @@LABEL
BBPAGE    0000005600000000000001     DOUNTIL    COND('(#@@CANS001COUNT *GT 0) *AND (#IO$KEY *EQ RA)')
BBPAGE    0000005700000000000001X20: @@LABEL
BBPAGE    0000005800000000000001     @@COMMENT  COMMENT('Request search criteria')
BBPAGE    0000005900000000000001     SET_MODE   TO(*CHANGE)
BBPAGE    0000006000000000000001     POP_UP     FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(7 7) WITH_SIZE(45 12) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) CURSOR_LOC(*ATFIELD #@@LEL0301)
BBPAGE    0000006100000000000001     @@COMMENT  COMMENT('Build list of matching records')
BBPAGE    0000006200000000000001     @@COMMENT  COMMENT('and display using page at a time logic')
BBPAGE    0000006300000000000001     CLR_LIST   NAMED(#@@CANS001LIST)
BBPAGE    0000006400000000000001     CHANGE     FIELD(#IO$KEY) TO(UP)
BBPAGE    0000006500000000000001     SELECT     FIELDS((#@@CANS001LIST)) FROM_FILE(@@FNAME01) WHERE('#IO$KEY *EQ UP') WITH_KEY(@@LST03) NBR_KEYS(*COMPUTE) GENERIC(*YES) OPTIONS(*ENDWHERE)
BBPAGE    0000006600000000000001     EXECUTE    SUBROUTINE(@@CANS001DISP) WITH_PARMS('''More...''')
BBPAGE    0000006700000000000001     ADD_ENTRY  TO_LIST(#@@CANS001LIST) WITH_MODE(*DISPLAY)
BBPAGE    0000006800000000000001     ENDSELECT
BBPAGE    0000006900000000000001     IF         '(#@@CANS001COUNT = 0)'
BBPAGE    0000007000000000000001     MESSAGE    'No details found matching search request'
BBPAGE    0000007100000000000001     ELSE
BBPAGE    0000007200000000000001     EXECUTE    SUBROUTINE(@@CANS001DISP) WITH_PARMS('''Bottom''')
BBPAGE    0000007300000000000001     ENDIF
BBPAGE    0000007400000000000001     ENDUNTIL
BBPAGE    0000007500000000000001     @@COMMENT  COMMENT(' ')
BBPAGE    0000007600000000000001     ENDROUTINE
BBPAGE    0000007700000000000001     @@COMMENT  COMMENT('=======================================================')
BBPAGE    0000007800000000000001     @@COMMENT  COMMENT('Subroutine ....: @@CANS001DISP')
BBPAGE    0000007900000000000001     @@COMMENT  COMMENT('Description....: Browse from @@FNAME01 (page at a time)')
BBPAGE    0000008000000000000001     @@COMMENT  COMMENT('Parameters ....: Name      Typ Len  Description')
BBPAGE    0000008100000000000001     @@COMMENT  COMMENT('                 ----      --- ---  -----------')
BBPAGE    0000008200000000000001     @@COMMENT  COMMENT('                 @@CANS001POS   A   7   Browse position')
BBPAGE    0000008300000000000001     @@COMMENT  COMMENT('=======================================================')
BBPAGE    0000008400000000000001     SUBROUTINE NAME(@@CANS001DISP) PARMS((#@@CANS001POS))
BBPAGE    0000008500000000000001     @@COMMENT  'Display if at bottom of list or on a page boundary'
BBPAGE    0000008600000000000001     CHANGE     FIELD(#@@CANS001REMN) TO('#@@CANS001COUNT / #@@CANS001PAGE')
BBPAGE    0000008700000000000001     IF         COND('(#IO$KEY *EQ UP) *AND ((#@@CANS001POS *EQ ''Bottom'') *OR ((#@@CANS001REMN *EQ 0) *AND (#@@CANS001COUNT *NE 0)))')
BBPAGE    0000008800000000000001     DOUNTIL    COND('(#@@CANS001POS *NE ''Bottom'') *OR (#IO$KEY *NE UP)')
BBPAGE    0000008900000000000001     @@IF       ((*IF @@CANS002 *EQ Y)) GOTO(S50)
BBPAGE    0000009000000000000001     POP_UP     BROWSELIST(#@@CANS001LIST) USER_KEYS((*ROLLUP)) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) AT_LOC(3 20)  CURSOR_LOC(*ATFIELD #@@LEL0201) DESIGN(*DOWN)
BBPAGE    0000009100000000000001     @@GOTO     S60
BBPAGE    0000009200000000000001S50: @@LABEL
BBPAGE    0000009300000000000001     POP_UP     BROWSELIST(#@@CANS001LIST) USER_KEYS((*ROLLUP)) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) AT_LOC(3 20) DESIGN(*DOWN) CURSOR_LOC(*ATFIELD #@@LEL0201)
BBPAGE    0000009400000000000001S60: @@LABEL
BBPAGE    0000009500000000000001     ENDUNTIL
BBPAGE    0000009600000000000001     CHANGE     #@@CANS001TOP '#@@CANS001TOP + #@@CANS001PAGE'
BBPAGE    0000009700000000000001     ENDIF
BBPAGE    0000009800000000000001     ENDROUTINE
BBPAGE    0000009900000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000010000000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
BBPAGE    0000010100000000000001     /* ********** ------------------------------------------------        */
BBPAGE    0000010200000000000001     @@CLR_LST  NUMBER(1)
BBPAGE    0000010300000000000001     @@CLR_LST  NUMBER(2)
BBPAGE    0000010400000000000001     @@CLR_LST  NUMBER(3)
BBPGM     0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1989')
BBPGM     0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBPGM     0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBPGM     0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBPGM     0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBPGM     0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBPGM     0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000000900000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBPGM     0000001000000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000001100000000000001     @@COMMENT  COMMENT(' ')
BBPGM     0000001200000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000001300000000000001     @@COMMENT  COMMENT('Screen Panel Groups and Lists')
BBPGM     0000001400000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000001500000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000001600000000000001     @@COMMENT  COMMENT('Report line declarations')
BBPGM     0000001700000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000001800000000000001     @@COMMENT  COMMENT(' ')
BBPGM     0000001900000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000002000000000000001     @@COMMENT  COMMENT('Program Mainline : @@FUNCTION')
BBPGM     0000002100000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGM     0000002200000000000001     @@COMMENT  COMMENT(' ')
BBPGM     0000002300000000000001     FUNCTION   OPTIONS(*DIRECT)
BBPGMBCH  0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1989')
BBPGMBCH  0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBPGMBCH  0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBPGMBCH  0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBPGMBCH  0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBPGMBCH  0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBPGMBCH  0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000000900000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBPGMBCH  0000001000000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000001100000000000001     @@COMMENT  COMMENT(' ')
BBPGMBCH  0000001200000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000001300000000000001     @@COMMENT  COMMENT('Screen Panel Groups and Lists')
BBPGMBCH  0000001400000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000001500000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000001600000000000001     @@COMMENT  COMMENT('Report line declarations')
BBPGMBCH  0000001700000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000001800000000000001     @@COMMENT  COMMENT(' ')
BBPGMBCH  0000001900000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000002000000000000001     @@COMMENT  COMMENT('Program Mainline : @@FUNCTION')
BBPGMBCH  0000002100000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000002200000000000001     @@COMMENT  COMMENT(' ')
BBPGMBCH  0000002300000000000001     /* **********                                                         */
BBPGMBCH  0000002400000000000001     /* **********                                                         */
BBPGMBCH  0000002500000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000002600000000000001     @@COMMENT  COMMENT('Subroutine ....: PRT_ERROR')
BBPGMBCH  0000002700000000000001     @@COMMENT  COMMENT('Description....: Print errors from program queue')
BBPGMBCH  0000002800000000000001     @@COMMENT  COMMENT('=======================================================')
BBPGMBCH  0000002900000000000001     FUNCTION   OPTIONS(*DIRECT)
BBPGMBCH  0000003000000000000001     SUBROUTINE NAME(PRT_ERROR)
BBPGMBCH  0000003100000000000001     DEFINE     FIELD(#ERRTXT) TYPE(*CHAR) LENGTH(100) LABEL('Error :')
BBPGMBCH  0000003200000000000001     DEFINE     FIELD(#RETCODE) TYPE(*CHAR) LENGTH(2)
BBPGMBCH  0000003300000000000001     DEF_LINE   NAME(#ERROR) FIELDS((#ERRTXT)) IDENTIFY(*LABEL)
BBPGMBCH  0000003400000000000001     USE        BUILTIN(GET_MESSAGE) TO_GET(#RETCODE #ERRTXT)
BBPGMBCH  0000003500000000000001     DOWHILE    COND('#RETCODE *EQ OK')
BBPGMBCH  0000003600000000000001     PRINT      LINE(#ERROR)
BBPGMBCH  0000003700000000000001     USE        BUILTIN(GET_MESSAGE) TO_GET(#RETCODE #ERRTXT)
BBPGMBCH  0000003800000000000001     ENDWHILE
BBPGMBCH  0000003900000000000001     ENDROUTINE
BBRDMLBIF 0000000100000000000001     @@QUESTION PROMPT('Will the Built-In Function terminate between USEs? (Y / N)') ANSWER(@@CANS001) EXTEND('This answer governs whether the function will' 'be *HEAVYUSAGE or *LIGHTUSAGE' 'Y = *LIGHTUSAGE' 'N = *HEAVYUSAGE') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030)
BBRDMLBIF 0000000200000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000000300000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1998')
BBRDMLBIF 0000000400000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS')
BBRDMLBIF 0000000500000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION')
BBRDMLBIF 0000000600000000000001     @@COMMENT  COMMENT('Type ..........: Built_In Function')
BBRDMLBIF 0000000700000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
BBRDMLBIF 0000000800000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
BBRDMLBIF 0000000900000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES')
BBRDMLBIF 0000001000000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000001100000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(FU1)
BBRDMLBIF 0000001200000000000001     FUNCTION   OPTIONS(*DIRECT *NOMESSAGES *LIGHTUSAGE *MLOPTIMISE *BUILTIN)
BBRDMLBIF 0000001300000000000001     @@GOTO     LABEL(FU9)
BBRDMLBIF 0000001400000000000001FU1: @@LABEL
BBRDMLBIF 0000001500000000000001     FUNCTION   OPTIONS(*DIRECT *NOMESSAGES *HEAVYUSAGE *MLOPTIMISE *BUILTIN)
BBRDMLBIF 0000001600000000000001FU9: @@LABEL
BBRDMLBIF 0000001700000000000001     @@QUESTION PROMPT('Do the current name or description need to be overridden (Y/N)') ANSWER(@@CANS002) EXTEND('This answer governs whether "@@FUNCTION" is to be the BIF name and' '"@@FUNCDES" is to be the BIF description' 'Y = You will be prompted for the name and description required' 'N = These remain as the BIF name and description, respectively') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030)
BBRDMLBIF 0000001800000000000001     @@IF       COND((*IF @@CANS002 *EQ N)) GOTO(BNO)
BBRDMLBIF 0000001900000000000001     @@QUESTION PROMPT('What is the name of the Built-In Function?') ANSWER(@@CANS003) EXTEND('123456789012345678<- No more than 18 characters' 'This is the name that will be specified when the BIF is used.' 'Make it as meaningful as possible within the UD_, OV_ naming conventions') LOWER(*NO) RANGE(('AAAAAAAAAAAAAAAAAA' 'Z99999999999999999')) HELPIDS(HELP010 HELP020 HELP030)
BBRDMLBIF 0000002000000000000001     @@QUESTION PROMPT('What is the description of the Built-In Function?') ANSWER(@@CANS004) EXTEND('1234567890123456789012345678901234567890<- no more than 40 characters' 'This is the description that will be held in the BIF Definition file' 'Describe the BIF as meaningfully as is possible') LOWER(*YES) HELPIDS(HELP010 HELP020 HELP030)
BBRDMLBIF 0000002100000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000002200000000000001     @@COMMENT  COMMENT('Special field to name the Built-In Function')
BBRDMLBIF 0000002300000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000002400000000000001     DEFINE     FIELD(#BIF_NAME) TYPE(*CHAR) LENGTH(20) DESC('@@CANS004') DEFAULT(@@CANS003)
BBRDMLBIF 0000002500000000000001BNO: @@LABEL
BBRDMLBIF 0000002600000000000001     @@QUESTION PROMPT('How many arguments will the Built-In Function have?') ANSWER(@@NANS005) EXTEND('(0 - 20)' 'Check now that you are not going to define required arguments or' 'lists after optional arguments') RANGE((0 20)) HELPIDS(HELP020 HELP030 HELP010)
BBRDMLBIF 0000002700000000000001     @@IF       COND((*IF @@NANS005 *EQ 0)) GOTO(AR9)
BBRDMLBIF 0000002800000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000002900000000000001     @@COMMENT  COMMENT('Built-In Function Arguments')
BBRDMLBIF 0000003000000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000003100000000000001     @@SET_IDX  IDX_NAME(AR) TO(0)
BBRDMLBIF 0000003200000000000001AR1: @@LABEL
BBRDMLBIF 0000003300000000000001     @@INC_IDX  IDX_NAME(AR)
BBRDMLBIF 0000003400000000000001     @@CMP_IDX  IDX_NAME(AR) IDX_VALUE(@@NANS005) IF_GT(AR9)
BBRDMLBIF 0000003500000000000001     @@QUESTION PROMPT('What is the description of Built-In Function Argument @@INDEXAR?') ANSWER(@@CANS011) EXTEND('1234567890123456789012345678901234567890<- no more than 40 characters' 'This is the description that will be held in the BIF Parameter file' 'Describe the argument as meaningfully as is possible') LOWER(*YES) HELPIDS(HELP020 HELP030 HELP010)
BBRDMLBIF 0000003600000000000001     @@QUESTION PROMPT('What is the type of Built-In Function Argument @@INDEXAR?') ANSWER(@@CANS012) EXTEND('A = alpha, S = signed, P = packed, L = list') LOWER(*NO) VALUES(A S P L) HELPIDS(HELP020 HELP030 HELP010)
BBRDMLBIF 0000003700000000000001     @@IF       COND((*IF @@CANS012 *EQ L)) GOTO(AR2)
BBRDMLBIF 0000003800000000000001     @@QUESTION PROMPT('Is the Built-In Function Argument @@INDEXAR Required or Optional?') ANSWER(@@CANS013) EXTEND('R = required, O = Optional' 'Remember that a required or list argument cannot be defined after an' 'optional argument') LOWER(*NO) VALUES(R O) HELPIDS(HELP020)
BBRDMLBIF 0000003900000000000001     @@GOTO     LABEL(AR3)
BBRDMLBIF 0000004000000000000001AR2: @@LABEL
BBRDMLBIF 0000004100000000000001     @@QUESTION PROMPT('What is the maximum number of entries for list Argument @@INDEXAR?') ANSWER(@@NANS014) EXTEND('(1 - 9999)') RANGE((1 9999)) HELPIDS(HELP020 HELP030 HELP010)
BBRDMLBIF 0000004200000000000001AR3: @@LABEL
BBRDMLBIF 0000004300000000000001     @@QUESTION PROMPT('What is the length for Argument @@INDEXAR of type @@CANS012?') ANSWER(@@NANS015) EXTEND('For A (1 - 256), S (1 - 30), P (1 - 30), L (1 - 256)') RANGE((1 256)) HELPIDS(HELP020 HELP030 HELP010)
BBRDMLBIF 0000004400000000000001     @@IF       COND((*IF @@CANS012 *EQ A)) GOTO(AR4)
BBRDMLBIF 0000004500000000000001     @@IF       COND((*IF @@CANS012 *EQ L)) GOTO(AR5)
BBRDMLBIF 0000004600000000000001     @@QUESTION PROMPT('How many decimal places for argument @@INDEXAR of type @@CANS012?') ANSWER(@@NANS016) EXTEND('(0 - 9 or @@NANS015)' 'The maximum is 9 or @@NANS015, whichever is smaller') RANGE((0 9)) HELPIDS(HELP020 HELP030 HELP010)
BBRDMLBIF 0000004700000000000001AR4: @@LABEL
BBRDMLBIF 0000004800000000000001     @@IF       COND((*IF @@CANS013 *EQ R)) GOTO(AR5)
BBRDMLBIF 0000004900000000000001     @@QUESTION PROMPT('What is the default value of Argument @@INDEXAR?') ANSWER(@@CANS017) EXTEND('1234567890<- no more than 10 characters' ' This is the default that will be used if the argument is not specified') LOWER(*YES) HELPIDS(HELP020 HELP030 HELP010)
BBRDMLBIF 0000005000000000000001AR5: @@LABEL
BBRDMLBIF 0000005100000000000001     @@COMMENT  COMMENT('Argument @@INDEXAR, @@CANS011')
BBRDMLBIF 0000005200000000000001     @@IF       COND((*IF @@CANS012 *EQ A) (*AND @@CANS013 *EQ R)) GOTO(AAR)
BBRDMLBIF 0000005300000000000001     @@IF       COND((*IF @@CANS012 *EQ A) (*AND @@CANS013 *EQ O)) GOTO(AAO)
BBRDMLBIF 0000005400000000000001     @@IF       COND((*IF @@CANS012 *EQ S) (*AND @@CANS013 *EQ R)) GOTO(ASR)
BBRDMLBIF 0000005500000000000001     @@IF       COND((*IF @@CANS012 *EQ S) (*AND @@CANS013 *EQ O)) GOTO(ASO)
BBRDMLBIF 0000005600000000000001     @@IF       COND((*IF @@CANS012 *EQ P) (*AND @@CANS013 *EQ R)) GOTO(APR)
BBRDMLBIF 0000005700000000000001     @@IF       COND((*IF @@CANS012 *EQ P) (*AND @@CANS013 *EQ O)) GOTO(APO)
BBRDMLBIF 0000005800000000000001     @@IF       COND((*IF @@CANS012 *EQ L)) GOTO(ALR)
BBRDMLBIF 0000005900000000000001ALR: @@LABEL
BBRDMLBIF 0000006000000000000001     @@COMMENT  COMMENT('Replace field  ARG@@INDEXARFILL with the field(s)')
BBRDMLBIF 0000006100000000000001     @@COMMENT  COMMENT('that will really be in the list')
BBRDMLBIF 0000006200000000000001     DEFINE     FIELD(#BIF_ALC@@INDEXAR) TYPE(*DEC) LENGTH(7) DECIMALS(0) DESC('@@CANS011')
BBRDMLBIF 0000006300000000000001     DEFINE     FIELD(#ARG@@INDEXARFILL) TYPE(*CHAR) LENGTH(@@NANS015) DESC('Dummy Field for Prototyping')
BBRDMLBIF 0000006400000000000001     DEF_LIST   NAME(#BIF_ARG@@INDEXAR) FIELDS((#ARG@@INDEXARFILL)) COUNTER(#BIF_ALC@@INDEXAR) TYPE(*WORKING) ENTRYS(@@NANS014)
BBRDMLBIF 0000006500000000000001     @@GOTO     LABEL(AR6)
BBRDMLBIF 0000006600000000000001AAR: @@LABEL
BBRDMLBIF 0000006700000000000001     DEFINE     FIELD(#BIF_ARG@@INDEXAR) TYPE(*CHAR) LENGTH(@@NANS015) DESC('@@CANS011')
BBRDMLBIF 0000006800000000000001     @@GOTO     LABEL(AR6)
BBRDMLBIF 0000006900000000000001AAO: @@LABEL
BBRDMLBIF 0000007000000000000001     DEFINE     FIELD(#BIF_ARG@@INDEXAR) TYPE(*CHAR) LENGTH(@@NANS015) DESC('@@CANS011') DEFAULT('@@CANS017')
BBRDMLBIF 0000007100000000000001     @@GOTO     LABEL(AR6)
BBRDMLBIF 0000007200000000000001ASR: @@LABEL
BBRDMLBIF 0000007300000000000001     DEFINE     FIELD(#BIF_ARG@@INDEXAR) REFFLD(#REP1PAGE) LENGTH(@@NANS015) DECIMALS(@@NANS016) DESC('@@CANS011')
BBRDMLBIF 0000007400000000000001     @@GOTO     LABEL(AR6)
BBRDMLBIF 0000007500000000000001ASO: @@LABEL
BBRDMLBIF 0000007600000000000001     DEFINE     FIELD(#BIF_ARG@@INDEXAR) REFFLD(#REP1PAGE) LENGTH(@@NANS015) DECIMALS(@@NANS016) DESC('@@CANS011') DEFAULT(@@CANS017)
BBRDMLBIF 0000007700000000000001     @@GOTO     LABEL(AR6)
BBRDMLBIF 0000007800000000000001APR: @@LABEL
BBRDMLBIF 0000007900000000000001     DEFINE     FIELD(#BIF_ARG@@INDEXAR) TYPE(*DEC) LENGTH(@@NANS015) DECIMALS(@@NANS016) DESC('@@CANS011')
BBRDMLBIF 0000008000000000000001     @@GOTO     LABEL(AR6)
BBRDMLBIF 0000008100000000000001APO: @@LABEL
BBRDMLBIF 0000008200000000000001     DEFINE     FIELD(#BIF_ARG@@INDEXAR) TYPE(*DEC) LENGTH(@@NANS015) DECIMALS(@@NANS016) DESC('@@CANS011') DEFAULT(@@CANS017)
BBRDMLBIF 0000008300000000000001     @@GOTO     LABEL(AR6)
BBRDMLBIF 0000008400000000000001AR6: @@LABEL
BBRDMLBIF 0000008500000000000001     @@GOTO     LABEL(AR1)
BBRDMLBIF 0000008600000000000001AR9: @@LABEL
BBRDMLBIF 0000008700000000000001     @@QUESTION PROMPT('How many return values will the Built-In Function have?') ANSWER(@@NANS006) EXTEND('(0 - 20)' 'Check now that you are not going to define required return values or' 'lists after optional return values') RANGE((0 20)) HELPIDS(HELP030 HELP010 HELP020)
BBRDMLBIF 0000008800000000000001     @@IF       COND((*IF @@NANS006 *EQ 0)) GOTO(RV9)
BBRDMLBIF 0000008900000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000009000000000000001     @@COMMENT  COMMENT('Built-In Function Return Values')
BBRDMLBIF 0000009100000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000009200000000000001     @@SET_IDX  IDX_NAME(RV) TO(0)
BBRDMLBIF 0000009300000000000001RV1: @@LABEL
BBRDMLBIF 0000009400000000000001     @@INC_IDX  IDX_NAME(RV)
BBRDMLBIF 0000009500000000000001     @@CMP_IDX  IDX_NAME(RV) IDX_VALUE(@@NANS006) IF_GT(RV9)
BBRDMLBIF 0000009600000000000001     @@QUESTION PROMPT('What is the description of Built-In Function Return Value @@INDEXRV?') ANSWER(@@CANS021) EXTEND('1234567890123456789012345678901234567890<- no more than 40 characters' ' This is the description that will be held in the BIF Parameter file' 'Describe the return value as meaningfully as is possible') LOWER(*YES) HELPIDS(HELP030 HELP010 HELP020)
BBRDMLBIF 0000009700000000000001     @@QUESTION PROMPT('What is the type of Return Value @@INDEXRV?') ANSWER(@@CANS022) EXTEND('A = alpha, S = signed, P = packed, L = list') LOWER(*NO) VALUES(A S P L) HELPIDS(HELP030 HELP010 HELP020)
BBRDMLBIF 0000009800000000000001     @@IF       COND((*IF @@CANS022 *EQ L)) GOTO(RV2)
BBRDMLBIF 0000009900000000000001     @@QUESTION PROMPT('Is the Return Value @@INDEXRV Required or Optional?') ANSWER(@@CANS023) EXTEND('R = required, O = Optional' 'Remember that a required or list return value cannot be defined after an' 'optional return value') LOWER(*NO) VALUES(R O) HELPIDS(HELP030 HELP010 HELP020)
BBRDMLBIF 0000010000000000000001     @@GOTO     LABEL(RV3)
BBRDMLBIF 0000010100000000000001RV2: @@LABEL
BBRDMLBIF 0000010200000000000001     @@QUESTION PROMPT('What is the maximum number of entries for list Return Value @@INDEXRV?') ANSWER(@@NANS024) EXTEND('(1 - 9999)') RANGE((1 9999)) HELPIDS(HELP030 HELP010 HELP020)
BBRDMLBIF 0000010300000000000001RV3: @@LABEL
BBRDMLBIF 0000010400000000000001     @@QUESTION PROMPT('What is the length for Return Value @@INDEXRV of type @@CANS022?') ANSWER(@@NANS025) EXTEND('For A (1 - 256), S (1 - 30), P (1 - 30), L (1 - 256)') RANGE((1 256)) HELPIDS(HELP030 HELP010 HELP020)
BBRDMLBIF 0000010500000000000001     @@IF       COND((*IF @@CANS022 *EQ A)) GOTO(RV4)
BBRDMLBIF 0000010600000000000001     @@IF       COND((*IF @@CANS022 *EQ L)) GOTO(RV4)
BBRDMLBIF 0000010700000000000001     @@QUESTION PROMPT('How many decimal places for return value @@INDEXRV of type @@CANS022?') ANSWER(@@NANS026) EXTEND('(0 - 9 or @@NANS025)' 'The maximum is 9 or @@NANS025, whichever is smaller') RANGE((0 9)) HELPIDS(HELP030 HELP010 HELP020)
BBRDMLBIF 0000010800000000000001RV4: @@LABEL
BBRDMLBIF 0000010900000000000001     @@COMMENT  COMMENT('Return Value @@INDEXRV, @@CANS021')
BBRDMLBIF 0000011000000000000001     @@IF       COND((*IF @@CANS022 *EQ A) (*AND @@CANS023 *EQ R)) GOTO(RAR)
BBRDMLBIF 0000011100000000000001     @@IF       COND((*IF @@CANS022 *EQ A) (*AND @@CANS023 *EQ O)) GOTO(RAO)
BBRDMLBIF 0000011200000000000001     @@IF       COND((*IF @@CANS022 *EQ S) (*AND @@CANS023 *EQ R)) GOTO(RSR)
BBRDMLBIF 0000011300000000000001     @@IF       COND((*IF @@CANS022 *EQ S) (*AND @@CANS023 *EQ O)) GOTO(RSO)
BBRDMLBIF 0000011400000000000001     @@IF       COND((*IF @@CANS022 *EQ P) (*AND @@CANS023 *EQ R)) GOTO(RPR)
BBRDMLBIF 0000011500000000000001     @@IF       COND((*IF @@CANS022 *EQ P) (*AND @@CANS023 *EQ O)) GOTO(RPO)
BBRDMLBIF 0000011600000000000001     @@IF       COND((*IF @@CANS012 *EQ L)) GOTO(RLR)
BBRDMLBIF 0000011700000000000001RLR: @@LABEL
BBRDMLBIF 0000011800000000000001     @@COMMENT  COMMENT('Replace field  RET@@INDEXRVFILL with the fields')
BBRDMLBIF 0000011900000000000001     @@COMMENT  COMMENT('that will really be in the list')
BBRDMLBIF 0000012000000000000001     DEFINE     FIELD(#BIF_RLC@@INDEXRV) TYPE(*DEC) LENGTH(7) DECIMALS(0) DESC('@@CANS021')
BBRDMLBIF 0000012100000000000001     DEFINE     FIELD(#RET@@INDEXRVFILL) TYPE(*CHAR) LENGTH(@@NANS025) DESC('Dummy Field for Prototyping')
BBRDMLBIF 0000012200000000000001     DEF_LIST   NAME(#BIF_RET@@INDEXRV) FIELDS((#RET@@INDEXRVFILL)) COUNTER(#BIF_RLC@@INDEXRV) TYPE(*WORKING) ENTRYS(@@NANS024)
BBRDMLBIF 0000012300000000000001     @@GOTO     LABEL(RV5)
BBRDMLBIF 0000012400000000000001RAR: @@LABEL
BBRDMLBIF 0000012500000000000001     DEFINE     FIELD(#BIF_RET@@INDEXRV) TYPE(*CHAR) LENGTH(@@NANS025) DESC('@@CANS021')
BBRDMLBIF 0000012600000000000001     @@GOTO     LABEL(RV5)
BBRDMLBIF 0000012700000000000001RAO: @@LABEL
BBRDMLBIF 0000012800000000000001     DEFINE     FIELD(#BIF_RET@@INDEXRV) TYPE(*CHAR) LENGTH(@@NANS025) DESC('@@CANS021') DEFAULT(*BLANK)
BBRDMLBIF 0000012900000000000001     @@GOTO     LABEL(RV5)
BBRDMLBIF 0000013000000000000001RSR: @@LABEL
BBRDMLBIF 0000013100000000000001     DEFINE     FIELD(#BIF_RET@@INDEXRV) REFFLD(#REP1PAGE) LENGTH(@@NANS025) DECIMALS(@@NANS026) DESC('@@CANS021')
BBRDMLBIF 0000013200000000000001     @@GOTO     LABEL(RV5)
BBRDMLBIF 0000013300000000000001RSO: @@LABEL
BBRDMLBIF 0000013400000000000001     DEFINE     FIELD(#BIF_RET@@INDEXRV) REFFLD(#REP1PAGE) LENGTH(@@NANS025) DECIMALS(@@NANS026) DESC('@@CANS021') DEFAULT(*ZERO)
BBRDMLBIF 0000013500000000000001     @@GOTO     LABEL(RV5)
BBRDMLBIF 0000013600000000000001RPR: @@LABEL
BBRDMLBIF 0000013700000000000001     DEFINE     FIELD(#BIF_RET@@INDEXRV) TYPE(*DEC) LENGTH(@@NANS025) DECIMALS(@@NANS026) DESC('@@CANS021')
BBRDMLBIF 0000013800000000000001     @@GOTO     LABEL(RV5)
BBRDMLBIF 0000013900000000000001RPO: @@LABEL
BBRDMLBIF 0000014000000000000001     DEFINE     FIELD(#BIF_RET@@INDEXRV) TYPE(*DEC) LENGTH(@@NANS025) DECIMALS(@@NANS026) DESC('@@CANS021') DEFAULT(*ZERO)
BBRDMLBIF 0000014100000000000001     @@GOTO     LABEL(RV5)
BBRDMLBIF 0000014200000000000001RV5: @@LABEL
BBRDMLBIF 0000014300000000000001     @@GOTO     LABEL(RV1)
BBRDMLBIF 0000014400000000000001RV9: @@LABEL
BBRDMLBIF 0000014500000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000014600000000000001     @@COMMENT  COMMENT('Working fields, lists and groups')
BBRDMLBIF 0000014700000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000014800000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000014900000000000001     @@COMMENT  COMMENT('Function Mainline : @@FUNCTION')
BBRDMLBIF 0000015000000000000001     @@COMMENT  COMMENT('=======================================================')
BBRDMLBIF 0000015100000000000001     @@IF       COND((*IF @@CANS001 *EQ Y)) GOTO(ML1)
BBRDMLBIF 0000015200000000000001     @@COMMENT  COMMENT('This is an evaluation call')
BBRDMLBIF 0000015300000000000001     @@COMMENT  COMMENT(' ')
BBRDMLBIF 0000015400000000000001     IF         COND('*BIF_SHUTDOWN *NE Y')
BBRDMLBIF 0000015500000000000001     @@COMMENT  COMMENT('>>> Put Built-In Function evaluation logic    <<<')
BBRDMLBIF 0000015600000000000001     @@COMMENT  COMMENT('>>> here.                                     <<<')
BBRDMLBIF 0000015700000000000001     @@COMMENT  COMMENT('>>> Two system variables are available to     <<<')
BBRDMLBIF 0000015800000000000001     @@COMMENT  COMMENT('>>> tell you how many arguments and return    <<<')
BBRDMLBIF 0000015900000000000001     @@COMMENT  COMMENT('>>> values have been used. They are:          <<<')
BBRDMLBIF 0000016000000000000001     @@COMMENT  COMMENT('>>> *BIF_ARGCOUNT and *BIF_RETCOUNT.          <<<')
BBRDMLBIF 0000016100000000000001     ELSE
BBRDMLBIF 0000016200000000000001     @@COMMENT  COMMENT('>>> Put Built-In Function shutdown logic      <<<')
BBRDMLBIF 0000016300000000000001     @@COMMENT  COMMENT('>>> here                                      <<<')
BBRDMLBIF 0000016400000000000001     ENDIF
BBRDMLBIF 0000016500000000000001     @@GOTO     LABEL(ML9)
BBRDMLBIF 0000016600000000000001ML1: @@LABEL
BBRDMLBIF 0000016700000000000001     @@COMMENT  COMMENT('>>> Put Built-In Function logic               <<<')
BBRDMLBIF 0000016800000000000001     @@COMMENT  COMMENT('>>> here                                      <<<')
BBRDMLBIF 0000016900000000000001     @@COMMENT  COMMENT('>>> Two system variables are available to     <<<')
BBRDMLBIF 0000017000000000000001     @@COMMENT  COMMENT('>>> tell you how many arguments and return    <<<')
BBRDMLBIF 0000017100000000000001     @@COMMENT  COMMENT('>>> values have been passed. They are:        <<<')
BBRDMLBIF 0000017200000000000001     @@COMMENT  COMMENT('>>> *BIF_ARGCOUNT and *BIF_RETCOUNT.          <<<')
BBRDMLBIF 0000017300000000000001ML9: @@LABEL
BBRDMLBIF 0000017400000000000001     @@COMMENT  COMMENT('Return control to the invoker')
BBRDMLBIF 0000017500000000000001     RETURN
BBSUB     0000000100000000000001     @@QUESTION PROMPT('Please enter a brief description of what this subroutine does') ANSWER(@@CANS001) EXTEND('For more information press the HELP function key.') HELPIDS(HELP010)
BBSUB     0000000200000000000001     @@QUESTION PROMPT('Please specify the name of this subroutine') ANSWER(@@CANS002) EXTEND('For more information about valid subroutine names and naming rules use' 'the Help function key.') HELPIDS(HELP010)
BBSUB     0000000300000000000001     @@QUESTION PROMPT('Will this subroutine receive or return parameter/argument values ?') ANSWER(@@CANS003) EXTEND('You must reply with a Y (yes) or an N (no) to this question.' 'For more information about this template use the Help function key.') LOWER(*NO) VALUES('Y' 'N') HELPIDS(HELP010)
BBSUB     0000000400000000000001     @@COMMENT  COMMENT('=======================================================')
BBSUB     0000000500000000000001     @@COMMENT  COMMENT('Subroutine ....: @@CANS002')
BBSUB     0000000600000000000001     @@COMMENT  COMMENT('Description....: @@CANS001')
BBSUB     0000000700000000000001     @@IF       COND((*IF @@CANS003 *NE 'Y')) GOTO(L10)
BBSUB     0000000800000000000001     @@COMMENT  COMMENT('Parameters ....: Name      Typ Len  Description')
BBSUB     0000000900000000000001     @@COMMENT  COMMENT('                 ----      --- ---  -----------')
BBSUB     0000001000000000000001     @@COMMENT  COMMENT('                 #XXXXXX   XXX 99,9 XXXXXXXXXXXXXXXXXXX')
BBSUB     0000001100000000000001L10: @@LABEL
BBSUB     0000001200000000000001     @@COMMENT  COMMENT('=======================================================')
BBSUB     0000001300000000000001     @@IF       COND((*IF @@CANS003 *NE 'Y')) GOTO(L20)
BBSUB     0000001400000000000001     SUBROUTINE NAME(@@CANS002) PARMS((#XXXXXX))
BBSUB     0000001500000000000001     @@GOTO     LABEL(L30)
BBSUB     0000001600000000000001L20: @@LABEL
BBSUB     0000001700000000000001     SUBROUTINE NAME(@@CANS002)
BBSUB     0000001800000000000001L30: @@LABEL
BBSUB     0000001900000000000001     ENDROUTINE
FLDTEST   0000000100000000000001     @@COMMENT  COMMENT('=========================================== ')
FLDTEST   0000000200000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FLDTEST   0000000300000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FLDTEST   0000000400000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FLDTEST   0000000500000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME')
FLDTEST   0000000600000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FLDTEST   0000000700000000000001     @@COMMENT  COMMENT('=========================================== ')
FLDTEST   0000000800000000000001     /* ********** ======================================================= */
FLDTEST   0000000900000000000001     /* ********** ASK FOR THE FIRST FIELD IN THE DISPLAY                  */
FLDTEST   0000001000000000000001     /* ********** ======================================================= */
FLDTEST   0000001100000000000001D01: @@LABEL
FLDTEST   0000001200000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS001) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'You must enter at least one field for the display.' 'Use the HELP function key for more information.') HELPIDS(HELP010 HELP030)
FLDTEST   0000001300000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(D01)
FLDTEST   0000001400000000000001     /* ********** ======================================================= */
FLDTEST   0000001500000000000001     /* ********** ASK FOR THE 2nd FIELD IN THE DISPLAY                    */
FLDTEST   0000001600000000000001     /* ********** ======================================================= */
FLDTEST   0000001700000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS002) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is field 2. The maximum is 10 fields.' 'Leave the field blank if there are no more fields to display.') HELPIDS(HELP010 HELP030)
FLDTEST   0000001800000000000001     @@IF       COND((*IF @@CANS002 *EQ ' ')) GOTO(G01)
FLDTEST   0000001900000000000001     /* ********** ======================================================= */
FLDTEST   0000002000000000000001     /* ********** ASK FOR THE 3rd FIELD IN THE DISPLAY                    */
FLDTEST   0000002100000000000001     /* ********** ======================================================= */
FLDTEST   0000002200000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS003) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is field 3. The maximum is 10 fields.' 'Leave this field balnk if there are no more fields to display.') HELPIDS(HELP010 HELP030)
FLDTEST   0000002300000000000001     @@IF       COND((*IF @@CANS003 *EQ ' ')) GOTO(G02)
FLDTEST   0000002400000000000001     /* ********** ======================================================= */
FLDTEST   0000002500000000000001     /* ********** ASK FOR THE 4TH FIELD IN THE DISPLAY                    */
FLDTEST   0000002600000000000001     /* ********** ======================================================= */
FLDTEST   0000002700000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS004) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is field 4. The maximum is 10 fields.' 'Leave this field blank if there are no more fields to display.')  HELPIDS(HELP010 HELP030)
FLDTEST   0000002800000000000001     @@IF       COND((*IF @@CANS004 *EQ ' ')) GOTO(G03)
FLDTEST   0000002900000000000001     /* ********** ======================================================= */
FLDTEST   0000003000000000000001     /* ********** ASK FOR THE 5TH FIELD IN THE DISPLAY                    */
FLDTEST   0000003100000000000001     /* ********** ======================================================= */
FLDTEST   0000003200000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS005) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is field 5. The maximum is 10 fields.' 'Leave this field blank if there are no more fields to display.')  HELPIDS(HELP010 HELP030)
FLDTEST   0000003300000000000001     @@IF       COND((*IF @@CANS005 *EQ ' ')) GOTO(G04)
FLDTEST   0000003400000000000001     /* ********** ======================================================= */
FLDTEST   0000003500000000000001     /* ********** ASK FOR THE 6TH FIELD IN THE DISPLAY                    */
FLDTEST   0000003600000000000001     /* ********** ======================================================= */
FLDTEST   0000003700000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS006) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is field 6. The maximum is 10 fields.' 'Leave this field blank if there are no more fields to display.') HELPIDS(HELP010 HELP030)
FLDTEST   0000003800000000000001     @@IF       COND((*IF @@CANS006 *EQ ' ')) GOTO(G05)
FLDTEST   0000003900000000000001     /* ********** ======================================================= */
FLDTEST   0000004000000000000001     /* ********** ASK FOR THE 7TH FIELD IN THE DISPLAY                    */
FLDTEST   0000004100000000000001     /* ********** ======================================================= */
FLDTEST   0000004200000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS007) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is field 7. The maximum is 10 fields.' 'Leave this field blank if there are no more fields to display.')  HELPIDS(HELP010 HELP030)
FLDTEST   0000004300000000000001     @@IF       COND((*IF @@CANS007 *EQ ' ')) GOTO(G06)
FLDTEST   0000004400000000000001     /* ********** ======================================================= */
FLDTEST   0000004500000000000001     /* ********** ASK FOR THE 8TH FIELD IN THE DISPLAY                    */
FLDTEST   0000004600000000000001     /* ********** ======================================================= */
FLDTEST   0000004700000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS008) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is field 8. The maximum is 10 fields.' 'Leave this field blank if there are no more fields to display.')  HELPIDS(HELP010 HELP030)
FLDTEST   0000004800000000000001     @@IF       COND((*IF @@CANS008 *EQ ' ')) GOTO(G07)
FLDTEST   0000004900000000000001     /* ********** ======================================================= */
FLDTEST   0000005000000000000001     /* ********** ASK FOR THE 9TH FIELD IN THE DISPLAY                    */
FLDTEST   0000005100000000000001     /* ********** ======================================================= */
FLDTEST   0000005200000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS009) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is field 9. The maximum is 10 fields.' 'Leave this field blank if there are no more fields to display.')  HELPIDS(HELP010 HELP030)
FLDTEST   0000005300000000000001     @@IF       COND((*IF @@CANS009 *EQ ' ')) GOTO(G08)
FLDTEST   0000005400000000000001     /* ********** ======================================================= */
FLDTEST   0000005500000000000001     /* ********** ASK FOR THE 10TH FIELD IN THE DISPLAY                   */
FLDTEST   0000005600000000000001     /* ********** ======================================================= */
FLDTEST   0000005700000000000001     @@QUESTION PROMPT('Enter the name of a field to display.') ANSWER(@@CANS010) EXTEND('123456789' 'Enter the name of a field which you have created in the repository. Do' 'not use the # character to proceed the field name.' 'This is the last field allowed on the display.'  'Leave this field blank if there are no more fields to  display.') HELPIDS(HELP010 HELP030)
FLDTEST   0000005800000000000001     @@IF       COND((*IF @@CANS010 *EQ ' ')) GOTO(G09)
FLDTEST   0000005900000000000001     /* ********** ======================================================= */
FLDTEST   0000006000000000000001     /* ********** GENERATE THE RDML PROGRAM                               */
FLDTEST   0000006100000000000001     /* ********** ======================================================= */
FLDTEST   0000006200000000000001G10: @@LABEL    /* 10 fields in group */
FLDTEST   0000006300000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000006400000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002 #@@CANS003 #@@CANS004 #@@CANS005 #@@CANS006 #@@CANS007 #@@CANS008 #@@CANS009 #@@CANS010)
FLDTEST   0000006500000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000006600000000000001G09: @@LABEL    /* 9 fields in group */
FLDTEST   0000006700000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000006800000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002 #@@CANS003 #@@CANS004 #@@CANS005 #@@CANS006 #@@CANS007 #@@CANS008 #@@CANS009)
FLDTEST   0000006900000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000007000000000000001G08: @@LABEL    /* 8 fields in group */
FLDTEST   0000007100000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000007200000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002 #@@CANS003 #@@CANS004 #@@CANS005 #@@CANS006 #@@CANS007 #@@CANS008)
FLDTEST   0000007300000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000007400000000000001G07: @@LABEL    /* 7 fields in group */
FLDTEST   0000007500000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000007600000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002 #@@CANS003 #@@CANS004 #@@CANS005 #@@CANS006 #@@CANS007)
FLDTEST   0000007700000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000007800000000000001G06: @@LABEL    /* 6 fields in group */
FLDTEST   0000007900000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000008000000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002 #@@CANS003 #@@CANS004 #@@CANS005 #@@CANS006)
FLDTEST   0000008100000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000008200000000000001G05: @@LABEL    /* 5 fields in group */
FLDTEST   0000008300000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000008400000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002 #@@CANS003 #@@CANS004 #@@CANS005)
FLDTEST   0000008500000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000008600000000000001G04: @@LABEL    /* 4 fields in group */
FLDTEST   0000008700000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000008800000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002 #@@CANS003 #@@CANS004)
FLDTEST   0000008900000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000009000000000000001G03: @@LABEL    /* 3 fields in group */
FLDTEST   0000009100000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000009200000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002 #@@CANS003)
FLDTEST   0000009300000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000009400000000000001G02: @@LABEL    /* 2 fields in group */
FLDTEST   0000009500000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000009600000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001 #@@CANS002)
FLDTEST   0000009700000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000009800000000000001G01: @@LABEL    /* One field in group */
FLDTEST   0000009900000000000001     FUNCTION   OPTIONS(*DIRECT)
FLDTEST   0000010000000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(#@@CANS001)
FLDTEST   0000010100000000000001     @@GOTO     LABEL(G11)
FLDTEST   0000010200000000000001G11: @@LABEL
FLDTEST   0000010300000000000001     @@COMMENT  'Do data entry until terminated by EXIT or CANCEL'
FLDTEST   0000010400000000000001     BEGIN_LOOP
FLDTEST   0000010500000000000001     REQUEST    FIELDS(#PANELDATA) DESIGN(*DOWN) IDENTIFY(*DESC)
FLDTEST   0000010600000000000001     END_LOOP
FLDTEST   0000010700000000000001     /* **********                                                         */
FRABMNT01 0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRABMNT01 0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRABMNT01 0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRABMNT01 0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRABMNT01 0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRABMNT01 0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRABMNT01 0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRABMNT01 0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRABMNT01 0000000900000000000001     /* ********** ******************************************************* */
FRABMNT01 0000001000000000000001     /* ********** *          T E M P L A T E  C O M M A N D S           * */
FRABMNT01 0000001100000000000001     /* ********** ******************************************************* */
FRABMNT01 0000001200000000000001     /* ********** ======================================================= */
FRABMNT01 0000001300000000000001     /* ********** Get file to maintain                                    */
FRABMNT01 0000001400000000000001     /* ********** ======================================================= */
FRABMNT01 0000001500000000000001     @@GET_FILS PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the file used by this template') EXTEND('The file may be specified in full, partially (to cause a partial' 'list of available files to be displayed) or left blank (to cause a full' 'list of available files to be displayed). When a list of files is ' 'displayed, the file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000001600000000000001     /* ********** ======================================================= */
FRABMNT01 0000001700000000000001     /* ********** Ask for the name of the object                          */
FRABMNT01 0000001800000000000001     /* ********** ======================================================= */
FRABMNT01 0000001900000000000001     @@QUESTION PROMPT('Specify the name of the object that the file represents') ANSWER(@@CANS001) EXTEND('123456789012345' 'Specify a word that describes the object that the file being used by' 'this template represents. Use singular form, use at most 16 characters' 'and do NOT use any single quote characters in the name.' 'Use the HELP key to view more information about this question or to view' 'examples of the type of answers that you would give to this question.') HELPIDS(HELP020 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000002000000000000001     /* ********** ======================================================= */
FRABMNT01 0000002100000000000001     /* ********** Put key fields into list 1                              */
FRABMNT01 0000002200000000000001     /* ********** ======================================================= */
FRABMNT01 0000002300000000000001     @@CLR_LST  1
FRABMNT01 0000002400000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(1)
FRABMNT01 0000002500000000000001     /* ********** ======================================================= */
FRABMNT01 0000002600000000000001     /* ********** Put fields for ADD screen into list 2                   */
FRABMNT01 0000002700000000000001     /* ********** ======================================================= */
FRABMNT01 0000002800000000000001     @@CLR_LST  2
FRABMNT01 0000002900000000000001     @@CLR_LST  21
FRABMNT01 0000003000000000000001     @@CLR_LST  22
FRABMNT01 0000003100000000000001     @@CLR_LST  23
FRABMNT01 0000003200000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(21)
FRABMNT01 0000003300000000000001     @@MAK_LSTS FROM_LSTS(21) INTO_LSTS((22 'Input' 'Fields for' 'ADD screen' *SEQUENCE *ALL) (23 'Output' 'Fields for' 'ADD screen' *SEQUENCE)) HELPIDS(HELP030 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000003400000000000001     @@MRG_LSTS FROM_LSTS((22 *INPUT) (23 *OUTPUT)) INTO_LST(2)
FRABMNT01 0000003500000000000001     /* ********** ======================================================= */
FRABMNT01 0000003600000000000001     /* ********** Ask about the design of the ADD screen                  */
FRABMNT01 0000003700000000000001     /* ********** ======================================================= */
FRABMNT01 0000003800000000000001     @@QUESTION PROMPT('Design fields on the ADD screen DOWN or ACROSS') ANSWER(@@CANS021) EXTEND('Reply DOWN or ACROSS only.' 'If your ADD screen contains 16 (or less) fields, DOWN is the' 'recommended value. If your ADD screen contains more than 16' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP040 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000003900000000000001     @@QUESTION PROMPT('Identify fields on the ADD screen by LABEL, COLHDG, DESC or NOID') ANSWER(@@CANS022) EXTEND('Reply LABEL, COLHDG, DESC or NOID only.' 'If your ADD screen contains 16 (or less) fields, DESC is the   ' 'recommended value. If your ADD screen contains more than 16' 'fields, LABEL is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(LABEL COLHDG DESC NOID) HELPIDS(HELP050 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000004000000000000001     /* ********** ======================================================= */
FRABMNT01 0000004100000000000001     /* ********** Put fields for REVIEW/CHANGE/DELETE screen into 3       */
FRABMNT01 0000004200000000000001     /* ********** ======================================================= */
FRABMNT01 0000004300000000000001     @@CLR_LST  3
FRABMNT01 0000004400000000000001     @@CLR_LST  31
FRABMNT01 0000004500000000000001     @@CLR_LST  32
FRABMNT01 0000004600000000000001     @@CLR_LST  33
FRABMNT01 0000004700000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(31)
FRABMNT01 0000004800000000000001     @@MAK_LSTS FROM_LSTS(31) INTO_LSTS((32 'Input Fields' 'for CHANGE' 'Screen' *SEQUENCE *ALL) (33 'Output Flds' 'for CHANGE' 'screen' *SEQUENCE)) HELPIDS(HELP060 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000004900000000000001     @@MRG_LSTS FROM_LSTS((32) (33 *OUTPUT)) INTO_LST(3)
FRABMNT01 0000005000000000000001     /* ********** ======================================================= */
FRABMNT01 0000005100000000000001     /* ********** Ask about the design of the CHANGE screen               */
FRABMNT01 0000005200000000000001     /* ********** ======================================================= */
FRABMNT01 0000005300000000000001     @@QUESTION PROMPT('Design fields on the CHANGE screen DOWN or ACROSS') ANSWER(@@CANS031) EXTEND('Reply DOWN or ACROSS only.' 'If your CHANGE screen contains 16 (or less) fields, DOWN is the' 'recommended value. If your CHANGE screen contains more than 16' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP070 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000005400000000000001     @@QUESTION PROMPT('Identify fields on the CHANGE screen by LABEL, COLHDG, DESC or NOID') ANSWER(@@CANS032) EXTEND('Reply LABEL, COLHDG, DESC or NOID only.' 'If your CHANGE screen contains 16 (or less) fields, DESC is the   ' 'recommended value. If your CHANGE screen contains more than 16' 'fields, LABEL is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(LABEL COLHDG DESC NOID) HELPIDS(HELP080 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000005500000000000001     /* ********** ======================================================= */
FRABMNT01 0000005600000000000001     /* ********** Put fields to be PRINTed into list 4                    */
FRABMNT01 0000005700000000000001     /* ********** ======================================================= */
FRABMNT01 0000005800000000000001     @@CLR_LST  4
FRABMNT01 0000005900000000000001     @@CLR_LST  41
FRABMNT01 0000006000000000000001     @@CLR_LST  42
FRABMNT01 0000006100000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(41)
FRABMNT01 0000006200000000000001     @@MAK_LSTS FROM_LSTS(41) INTO_LSTS((42 'Fields to' 'be PRINTed' *N *SEQUENCE *ALL)) HELPIDS(HELP090 HELP100 HELP110 HELP120 HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRABMNT01 0000006300000000000001     @@MRG_LSTS FROM_LSTS(42) INTO_LST(4)
FRABMNT01 0000006400000000000001     /* ********** ******************************************************* */
FRABMNT01 0000006500000000000001     /* ********** *  B E G I N I N G   O F   R D M L   C O M M A N D S  * */
FRABMNT01 0000006600000000000001     /* ********** ******************************************************* */
FRABMNT01 0000006700000000000001     FUNCTION   OPTIONS(*DEFERWRITE *DIRECT)
FRABMNT01 0000006800000000000001     EXCHANGE   (@@LST01) OPTION(*ALWAYS)
FRABMNT01 0000006900000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000007000000000000001     @@COMMENT  '*                  M A I N   L I N E                  *'
FRABMNT01 0000007100000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000007200000000000001     CASE       #PD$OPT
FRABMNT01 0000007300000000000001     WHEN       '= SLT'
FRABMNT01 0000007400000000000001     EXECUTE    SLTREC
FRABMNT01 0000007500000000000001     WHEN       '= CRT'
FRABMNT01 0000007600000000000001     EXECUTE    CRTREC
FRABMNT01 0000007700000000000001     WHEN       '= REV'
FRABMNT01 0000007800000000000001     EXECUTE    WRKREC WITH_PARMS('''Review''')
FRABMNT01 0000007900000000000001     WHEN       '= CHG'
FRABMNT01 0000008000000000000001     EXECUTE    WRKREC WITH_PARMS('''Change''')
FRABMNT01 0000008100000000000001     WHEN       '= DEL'
FRABMNT01 0000008200000000000001     EXECUTE    WRKREC WITH_PARMS('''Delete''')
FRABMNT01 0000008300000000000001     WHEN       '= PRT'
FRABMNT01 0000008400000000000001     EXECUTE    PRTREC
FRABMNT01 0000008500000000000001     ENDCASE
FRABMNT01 0000008600000000000001     MENU
FRABMNT01 0000008700000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000008800000000000001     @@COMMENT  'S L T R E C  - SELECT A RECORD'
FRABMNT01 0000008900000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000009000000000000001     SUBROUTINE SLTREC
FRABMNT01 0000009100000000000001     GROUP_BY   #SLT (@@LST01 (#STD_NDFLD *NOID))
FRABMNT01 0000009200000000000001     BEGIN_LOOP
FRABMNT01 0000009300000000000001     REQUEST    #SLT DESIGN(*@@CANS021) IDENTIFY(*@@CANS022) CURSOR_LOC(*ATFIELD #@@LEL0101)
FRABMNT01 0000009400000000000001     BEGINCHECK
FRABMNT01 0000009500000000000001     CHECK_FOR  IN_FILE(@@FNAME01) WITH_KEY(@@LST01)
FRABMNT01 0000009600000000000001     IF_STATUS  IS_NOT(*EQUALKEY)
FRABMNT01 0000009700000000000001     SET_ERROR  FOR_FIELD(#SLT) MSGTXT('Selected @@CANS001 not found')
FRABMNT01 0000009800000000000001     ENDIF
FRABMNT01 0000009900000000000001     ENDCHECK
FRABMNT01 0000010000000000000001     MESSAGE    'Selected @@CANS001 found'
FRABMNT01 0000010100000000000001     END_LOOP
FRABMNT01 0000010200000000000001     ENDROUTINE
FRABMNT01 0000010300000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000010400000000000001     @@COMMENT  'C R T R E C  - CREATE A NEW RECORD'
FRABMNT01 0000010500000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000010600000000000001     SUBROUTINE CRTREC
FRABMNT01 0000010700000000000001     GROUP_BY   #CRT (@@LST02 (#STD_NDFLD *NOID))
FRABMNT01 0000010800000000000001     BEGIN_LOOP
FRABMNT01 0000010900000000000001     CHANGE     #CRT *DEFAULT
FRABMNT01 0000011000000000000001     SET_MODE   *ADD
FRABMNT01 0000011100000000000001     REQUEST    #CRT DESIGN(*@@CANS021) IDENTIFY(*@@CANS022) CURSOR_LOC(*ATFIELD #@@LEL2201)
FRABMNT01 0000011200000000000001     INSERT     #CRT TO_FILE(@@FNAME01)
FRABMNT01 0000011300000000000001     MESSAGE    'New @@CANS001 added'
FRABMNT01 0000011400000000000001     END_LOOP
FRABMNT01 0000011500000000000001     ENDROUTINE
FRABMNT01 0000011600000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000011700000000000001     @@COMMENT  'W R K R E C  - WORK WITH RECORD'
FRABMNT01 0000011800000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000011900000000000001     SUBROUTINE WRKREC PARMS((#WRKMODE *RECEIVED))
FRABMNT01 0000012000000000000001     DEFINE     #WRKMODE *CHAR 6
FRABMNT01 0000012100000000000001     GROUP_BY   #WRK (@@LST03 (#STD_NDFLD *NOID))
FRABMNT01 0000012200000000000001     BEGIN_LOOP
FRABMNT01 0000012300000000000001     FETCH      #WRK FROM_FILE(@@FNAME01) WITH_KEY(@@LST01)
FRABMNT01 0000012400000000000001     IF_STATUS  IS_NOT(*OKAY)
FRABMNT01 0000012500000000000001     MESSAGE    'Selected @@CANS001 not found'
FRABMNT01 0000012600000000000001     MENU
FRABMNT01 0000012700000000000001     ENDIF
FRABMNT01 0000012800000000000001     @@COMMENT  ' '
FRABMNT01 0000012900000000000001     CASE       #WRKMODE
FRABMNT01 0000013000000000000001     WHEN       '= ''Review'''
FRABMNT01 0000013100000000000001     SET_MODE   *DISPLAY
FRABMNT01 0000013200000000000001     WHEN       '= ''Change'''
FRABMNT01 0000013300000000000001     SET_MODE   *CHANGE
FRABMNT01 0000013400000000000001     WHEN       '= ''Delete'''
FRABMNT01 0000013500000000000001     MESSAGE    'Press ENTER to confirm deletion of @@CANS001'
FRABMNT01 0000013600000000000001     SET_MODE   *DELETE
FRABMNT01 0000013700000000000001     ENDCASE
FRABMNT01 0000013800000000000001     DISPLAY    #WRK DESIGN(*@@CANS031) IDENTIFY(*@@CANS032) CURSOR_LOC(*ATFIELD #@@LEL3201)
FRABMNT01 0000013900000000000001     IF_MODE    IS(*DELETE)
FRABMNT01 0000014000000000000001     DELETE     FROM_FILE(@@FNAME01)
FRABMNT01 0000014100000000000001     MESSAGE    'Selected @@CANS001 deleted'
FRABMNT01 0000014200000000000001     MENU
FRABMNT01 0000014300000000000001     ENDIF
FRABMNT01 0000014400000000000001     IF_MODE    IS(*CHANGE)
FRABMNT01 0000014500000000000001     UPDATE     #WRK IN_FILE(@@FNAME01)
FRABMNT01 0000014600000000000001     MESSAGE    'Selected @@CANS001 changed'
FRABMNT01 0000014700000000000001     ENDIF
FRABMNT01 0000014800000000000001     END_LOOP
FRABMNT01 0000014900000000000001     ENDROUTINE
FRABMNT01 0000015000000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000015100000000000001     @@COMMENT  'P R T R E C  - PRINT A RECORD'
FRABMNT01 0000015200000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000015300000000000001     SUBROUTINE PRTREC
FRABMNT01 0000015400000000000001     DEF_HEAD   #PRTH (#DATE #TIME) TEXT(('@@CANS001' 1 10) ('Information' 1 26))
FRABMNT01 0000015500000000000001     DEF_LINE   #PRT (@@LST04) DESIGN(*DOWN) IDENTIFY(*LABEL)
FRABMNT01 0000015600000000000001     FETCH      #PRT FROM_FILE(@@FNAME01) WITH_KEY(@@LST01)
FRABMNT01 0000015700000000000001     IF_STATUS  IS(*OKAY)
FRABMNT01 0000015800000000000001     PRINT      #PRT
FRABMNT01 0000015900000000000001     ENDPRINT
FRABMNT01 0000016000000000000001     MESSAGE    'Selected @@CANS001 printed'
FRABMNT01 0000016100000000000001     ELSE
FRABMNT01 0000016200000000000001     MESSAGE    'Selected @@CANS001 not found'
FRABMNT01 0000016300000000000001     ENDIF
FRABMNT01 0000016400000000000001     ENDROUTINE
FRABMNT01 0000016500000000000001     @@COMMENT  '*******************************************************'
FRABMNT01 0000016600000000000001     @@CLR_LST  1
FRABMNT01 0000016700000000000001     @@CLR_LST  2
FRABMNT01 0000016800000000000001     @@CLR_LST  21
FRABMNT01 0000016900000000000001     @@CLR_LST  22
FRABMNT01 0000017000000000000001     @@CLR_LST  23
FRABMNT01 0000017100000000000001     @@CLR_LST  3
FRABMNT01 0000017200000000000001     @@CLR_LST  31
FRABMNT01 0000017300000000000001     @@CLR_LST  32
FRABMNT01 0000017400000000000001     @@CLR_LST  33
FRABMNT01 0000017500000000000001     @@CLR_LST  4
FRABMNT01 0000017600000000000001     @@CLR_LST  41
FRABMNT01 0000017700000000000001     @@CLR_LST  42
FRADD01   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRADD01   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRADD01   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRADD01   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRADD01   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRADD01   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRADD01   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRADD01   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRADD01   0000000900000000000001     /* ********** ======================================================= */
FRADD01   0000001000000000000001     /* ********** ASK FOR THE "WORD"                                      */
FRADD01   0000001100000000000001     /* ********** ======================================================= */
FRADD01   0000001200000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT this data entry program works with') ANSWER(@@CANS001) EXTEND('123456789012345678' 'The word you specify here is used to build messages that appear on the' 'data entry screen panel. You should use ONE word only, use lowercase' 'characters only and only use singular form (eg: "customer", "employee"' '"order"). Do NOT use more than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRADD01   0000001300000000000001     /* ********** ======================================================= */
FRADD01   0000001400000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRADD01   0000001500000000000001     /* ********** ======================================================= */
FRADD01   0000001600000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRADD01   0000001700000000000001     /* ********** ======================================================= */
FRADD01   0000001800000000000001     /* ********** GET NAME OF JUST ONE PHYSICAL FILE                      */
FRADD01   0000001900000000000001     /* ********** ======================================================= */
FRADD01   0000002000000000000001     @@GET_FILS TO(1) PROMPT('Enter the name of the PHYSICAL file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRADD01   0000002100000000000001     /* ********** ======================================================= */
FRADD01   0000002200000000000001     /* ********** GET FIELDS OF CHOSEN FILE INTO LIST 1                   */
FRADD01   0000002300000000000001     /* ********** ======================================================= */
FRADD01   0000002400000000000001     @@CLR_LST  NUMBER(1)
FRADD01   0000002500000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRADD01   0000002600000000000001     /* ********** ======================================================= */
FRADD01   0000002700000000000001     /* ********** GET KEYS OF CHOSEN FILE INTO LIST 2                     */
FRADD01   0000002800000000000001     /* ********** ======================================================= */
FRADD01   0000002900000000000001     @@CLR_LST  NUMBER(2)
FRADD01   0000003000000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
FRADD01   0000003100000000000001     /* ********** ======================================================= */
FRADD01   0000003200000000000001     /* ********** GET USER TO CHOOSE FIELDS TO APPEAR ON PANEL            */
FRADD01   0000003300000000000001     /* ********** AND PUT RESULTS INTO LIST 3                             */
FRADD01   0000003400000000000001     /* ********** ======================================================= */
FRADD01   0000003500000000000001     @@CLR_LST  NUMBER(3)
FRADD01   0000003600000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(2) INTO_LSTS((3 'Fields to' 'Appear on' 'Entry Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRADD01   0000003700000000000001     /* ********** ======================================================= */
FRADD01   0000003800000000000001     /* ********** GET USER TO CHOOSE FIELDS TO WORK WITH IN PROGRAM       */
FRADD01   0000003900000000000001     /* ********** AND PUT RESULTS INTO LIST 4                             */
FRADD01   0000004000000000000001     /* ********** ======================================================= */
FRADD01   0000004100000000000001     @@CLR_LST  NUMBER(4)
FRADD01   0000004200000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((4 'Fields to   ' 'Work with  ' 'in Program ' *YESNO *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRADD01   0000004300000000000001     /* ********** ======================================================= */
FRADD01   0000004400000000000001     /* ********** MERGE FIELDS IN LIST 4 INTO LIST 3 AS *HIDDEN           */
FRADD01   0000004500000000000001     /* ********** ======================================================= */
FRADD01   0000004600000000000001     @@MRG_LSTS FROM_LSTS((4 *HIDDEN)) INTO_LST(3)
FRADD01   0000004700000000000001     /* ********** ======================================================= */
FRADD01   0000004800000000000001     /* ********** ASK HOW THE PANEL IS TO BE DESIGNED                     */
FRADD01   0000004900000000000001     /* ********** ======================================================= */
FRADD01   0000005000000000000001     @@QUESTION PROMPT('Design fields on the data entry panel DOWN the screen or ACROSS the screen') ANSWER(@@CANS002) EXTEND('Reply DOWN or ACROSS only.' 'If your data entry panel contains 17 (or less) fields, DOWN is the   ' 'recommended value. If your data entry panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRADD01   0000005100000000000001     /* ********** ======================================================= */
FRADD01   0000005200000000000001     /* ********** GENERATE THE RDML PROGRAM                               */
FRADD01   0000005300000000000001     /* ********** ======================================================= */
FRADD01   0000005400000000000001     @@COMMENT  'Function control options'
FRADD01   0000005500000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRADD01   0000005600000000000001     @@COMMENT  'Group and field declarations'
FRADD01   0000005700000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(@@LST03)
FRADD01   0000005800000000000001     @@COMMENT  'Issue initial data entry message'
FRADD01   0000005900000000000001     MESSAGE    MSGID(DCU0010) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRADD01   0000006000000000000001     @@COMMENT  'Do data entry until terminated by EXIT or CANCEL'
FRADD01   0000006100000000000001     BEGIN_LOOP
FRADD01   0000006200000000000001     @@COMMENT  'Request user inputs or corrects details'
FRADD01   0000006300000000000001     @@IF       COND((*IF @@CANS002 *NE DOWN)) GOTO(D01)
FRADD01   0000006400000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRADD01   0000006500000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRADD01   0000006600000000000001     REQUEST    FIELDS(#PANELDATA) DESIGN(*@@CANS002) IDENTIFY(*DESC)
FRADD01   0000006700000000000001     @@GOTO     LABEL(D02)
FRADD01   0000006800000000000001L91: @@LABEL
FRADD01   0000006900000000000001     REQUEST    FIELDS(#PANELDATA) DESIGN(*@@CANS002) IDENTIFY(*DESC) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRADD01   0000007000000000000001     @@GOTO     LABEL(D02)
FRADD01   0000007100000000000001D01: @@IF       COND((*IF @@CANS002 *NE ACROSS)) GOTO(D02)
FRADD01   0000007200000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L93)
FRADD01   0000007300000000000001     REQUEST    FIELDS(#PANELDATA) DESIGN(*@@CANS002) IDENTIFY(*LABEL)
FRADD01   0000007400000000000001     @@GOTO     LABEL(D02)
FRADD01   0000007500000000000001L93: @@LABEL
FRADD01   0000007600000000000001     REQUEST    FIELDS(#PANELDATA) DESIGN(*@@CANS002) IDENTIFY(*LABEL) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRADD01   0000007700000000000001D02: @@COMMENT  'Perform any program level validation here'
FRADD01   0000007800000000000001     BEGINCHECK
FRADD01   0000007900000000000001     ENDCHECK
FRADD01   0000008000000000000001     @@COMMENT  'Attempt to insert data into the data base'
FRADD01   0000008100000000000001     INSERT     FIELDS((#PANELDATA)) TO_FILE(@@FNAME01)
FRADD01   0000008200000000000001     @@COMMENT  'If okay, reset fields and issue accepted message'
FRADD01   0000008300000000000001     CHANGE     FIELD(#PANELDATA) TO(*DEFAULT)
FRADD01   0000008400000000000001     MESSAGE    MSGID(DCU0011) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRADD01   0000008500000000000001     END_LOOP
FRADD01   0000008600000000000001     /* ********** ======================================================= */
FRADD01   0000008700000000000001     /* ********** CLEAR ALL LISTS USED                                    */
FRADD01   0000008800000000000001     /* ********** ======================================================= */
FRADD01   0000008900000000000001     @@CLR_LST  NUMBER(1)
FRADD01   0000009000000000000001     @@CLR_LST  NUMBER(2)
FRADD01   0000009100000000000001     @@CLR_LST  NUMBER(3)
FRADD01   0000009200000000000001     @@CLR_LST  NUMBER(4)
FRADD02   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRADD02   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRADD02   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRADD02   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRADD02   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRADD02   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRADD02   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRADD02   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRADD02   0000000900000000000001     /* ********** ======================================================= */
FRADD02   0000001000000000000001     /* ********** GET THE "WORD"                                          */
FRADD02   0000001100000000000001     /* ********** ======================================================= */
FRADD02   0000001200000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT this data entry program works with') ANSWER(@@CANS001) EXTEND('123456789012345678' 'The word you specify here is used to build messages that appear on the' 'data entry screen panel. You should use ONE word only, use lowercase' 'characters only and only use singular form (eg: "customer", "employee",' '"order"). Do NOT use more than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRADD02   0000001300000000000001     /* ********** ======================================================= */
FRADD02   0000001400000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRADD02   0000001500000000000001     /* ********** ======================================================= */
FRADD02   0000001600000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRADD02   0000001700000000000001     /* ********** ======================================================= */
FRADD02   0000001800000000000001     /* ********** GET THE FILES TO BE USED (ONLY 1 : 1 RELATIONSHIPS)     */
FRADD02   0000001900000000000001     /* ********** ======================================================= */
FRADD02   0000002000000000000001     @@GET_FILS TO(20) PHY_ONLY(*NO) PROMPT('Enter the name of the base file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRADD02   0000002100000000000001     /* ********** ======================================================= */
FRADD02   0000002200000000000001     /* ********** PLACE ALL FIELDS FROM BASE FILE INTO LIST 1             */
FRADD02   0000002300000000000001     /* ********** PLACE KEYS OF BASE FILE INTO LIST 2                     */
FRADD02   0000002400000000000001     /* ********** ======================================================= */
FRADD02   0000002500000000000001     @@CLR_LST  NUMBER(1)
FRADD02   0000002600000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRADD02   0000002700000000000001     @@CLR_LST  NUMBER(2)
FRADD02   0000002800000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
FRADD02   0000002900000000000001     /* ********** ======================================================= */
FRADD02   0000003000000000000001     /* ********** RETRIEVE ALL FIELDS FROM SECONDARY FILES AND MERGE INTO */
FRADD02   0000003100000000000001     /* ********** LIST 1 AS *CONF ONLY FIELDS                             */
FRADD02   0000003200000000000001     /* ********** ======================================================= */
FRADD02   0000003300000000000001     @@SET_IDX  IDX_NAME(CP) TO(2)
FRADD02   0000003400000000000001A10: @@LABEL
FRADD02   0000003500000000000001     @@CMP_IDX  IDX_NAME(CP) IDX_VALUE(@@TFMX) IF_GT(A20)
FRADD02   0000003600000000000001     @@CLR_LST  NUMBER(3)
FRADD02   0000003700000000000001     @@RTV_FLDS FROM_FILE(CP) INTO_LST(3)
FRADD02   0000003800000000000001     @@MRG_LSTS FROM_LSTS((3 *CONF)) INTO_LST(1)
FRADD02   0000003900000000000001     @@INC_IDX  IDX_NAME(CP)
FRADD02   0000004000000000000001     @@GOTO     LABEL(A10)
FRADD02   0000004100000000000001A20: @@LABEL
FRADD02   0000004200000000000001     /* ********** ======================================================= */
FRADD02   0000004300000000000001     /* ********** ASK USER TO SELECT FIELDS TO APPEAR ON ENTRY PANEL      */
FRADD02   0000004400000000000001     /* ********** RESULT GOES INTO LIST 4. MUST CHOOSE FIELDS IN LIST 2   */
FRADD02   0000004500000000000001     /* ********** ======================================================= */
FRADD02   0000004600000000000001     @@CLR_LST  NUMBER(4)
FRADD02   0000004700000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(2) INTO_LSTS((4 'Fields to' 'Appear on' 'Entry Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRADD02   0000004800000000000001     /* ********** ======================================================= */
FRADD02   0000004900000000000001     /* ********** ASK USER TO SELECT FIELDS TO WORK WITH IN PROGRAM       */
FRADD02   0000005000000000000001     /* ********** BUT NOT TO APPEAR ON THE PANEL. MERGE RESULTS INTO      */
FRADD02   0000005100000000000001     /* ********** LIST 4 AS *HIDDEN FIELDS                                */
FRADD02   0000005200000000000001     /* ********** ======================================================= */
FRADD02   0000005300000000000001     @@CLR_LST  NUMBER(3)
FRADD02   0000005400000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((3 'Fields to   ' 'Work with  ' 'in Program ' *YESNO *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRADD02   0000005500000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(4)
FRADD02   0000005600000000000001     /* ********** ======================================================= */
FRADD02   0000005700000000000001     /* ********** ASK ABOUT SCREEN LAYOUT                                 */
FRADD02   0000005800000000000001     /* ********** ======================================================= */
FRADD02   0000005900000000000001     @@QUESTION PROMPT('Design fields on the data entry panel DOWN the screen or ACROSS the screen') ANSWER(@@CANS002) EXTEND('Reply DOWN or ACROSS only.' 'If your data entry panel contains 17 (or less) fields, DOWN is the   ' 'recommended value. If your data entry panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRADD02   0000006000000000000001     /* ********** ======================================================= */
FRADD02   0000006100000000000001     /* ********** PLACE ALL RELATING KEYS INTO LIST 4 AS *HIDDEN FIELDS   */
FRADD02   0000006200000000000001     /* ********** ======================================================= */
FRADD02   0000006300000000000001     @@SET_IDX  IDX_NAME(CP) TO(2)
FRADD02   0000006400000000000001A30: @@LABEL
FRADD02   0000006500000000000001     @@CMP_IDX  IDX_NAME(CP) IDX_VALUE(@@TFMX) IF_GT(A40)
FRADD02   0000006600000000000001     @@CLR_LST  NUMBER(3)
FRADD02   0000006700000000000001     @@RTV_RELN OF_FILE(CP) INTO_LST(3)
FRADD02   0000006800000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(4)
FRADD02   0000006900000000000001     @@INC_IDX  IDX_NAME(CP)
FRADD02   0000007000000000000001     @@GOTO     LABEL(A30)
FRADD02   0000007100000000000001A40: @@LABEL
FRADD02   0000007200000000000001     /* ********** ======================================================= */
FRADD02   0000007300000000000001     /* ********** FINALLY GENERATE THE RDML CODE                          */
FRADD02   0000007400000000000001     /* ********** ======================================================= */
FRADD02   0000007500000000000001     @@COMMENT  'Function control options'
FRADD02   0000007600000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRADD02   0000007700000000000001     @@COMMENT  'Field and group declarations'
FRADD02   0000007800000000000001     DEFINE     FIELD(#CONFIRM) TYPE(*CHAR) LENGTH(1) LABEL('Confirm ......?') INPUT_ATR(PBEE) OUTPUT_ATR(PBCE)
FRADD02   0000007900000000000001     DEF_COND   NAME(*CONF) COND('#CONFIRM = Y')
FRADD02   0000008000000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(@@LST04 (#CONFIRM *CONF *INPUT))
FRADD02   0000008100000000000001     @@COMMENT  'Issue initial message/ initialise variables'
FRADD02   0000008200000000000001     MESSAGE    MSGID(DCU0010) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRADD02   0000008300000000000001     CHANGE     FIELD(#CONFIRM) TO(N)
FRADD02   0000008400000000000001     SET_MODE   TO(*ADD)
FRADD02   0000008500000000000001     @@COMMENT  'Do data entry until terminated by EXIT or CANCEL'
FRADD02   0000008600000000000001     BEGIN_LOOP
FRADD02   0000008700000000000001     @@COMMENT  'Request user inputs or corrects details'
FRADD02   0000008800000000000001     @@IF       COND((*IF @@CANS002 *NE DOWN)) GOTO(D01)
FRADD02   0000008900000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRADD02   0000009000000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRADD02   0000009100000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*@@CANS002) IDENTIFY(*DESC)
FRADD02   0000009200000000000001     @@GOTO     LABEL(D02)
FRADD02   0000009300000000000001L91: @@LABEL
FRADD02   0000009400000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*@@CANS002) IDENTIFY(*DESC) CURSOR_LOC(*ATFIELD #@@LEL0401)
FRADD02   0000009500000000000001D01: @@IF       COND((*IF @@CANS002 *NE ACROSS)) GOTO(D02)
FRADD02   0000009600000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L93)
FRADD02   0000009700000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*@@CANS002) IDENTIFY(*LABEL)
FRADD02   0000009800000000000001     @@GOTO     LABEL(D02)
FRADD02   0000009900000000000001L93: @@LABEL
FRADD02   0000010000000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*@@CANS002) IDENTIFY(*LABEL) CURSOR_LOC(*ATFIELD #@@LEL0401)
FRADD02   0000010100000000000001D02: @@COMMENT  'If data is confirmed as valid'
FRADD02   0000010200000000000001     IF         COND(*CONF)
FRADD02   0000010300000000000001     INSERT     FIELDS((#PANELDATA)) TO_FILE(@@FNAME01)
FRADD02   0000010400000000000001     CHANGE     FIELD(#PANELDATA) TO(*DEFAULT)
FRADD02   0000010500000000000001     CHANGE     FIELD(#CONFIRM) TO(N)
FRADD02   0000010600000000000001     MESSAGE    MSGID(DCU0011) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRADD02   0000010700000000000001     SET_MODE   TO(*ADD)
FRADD02   0000010800000000000001     @@COMMENT  'If data is NOT confirmed as valid'
FRADD02   0000010900000000000001     ELSE
FRADD02   0000011000000000000001     @@COMMENT  'else, If display mode, revert to add to allow changes'
FRADD02   0000011100000000000001     IF_MODE    IS(*DISPLAY)
FRADD02   0000011200000000000001     SET_MODE   TO(*ADD)
FRADD02   0000011300000000000001     CHANGE     FIELD(#CONFIRM) TO(N)
FRADD02   0000011400000000000001     @@COMMENT  'else, validate data'
FRADD02   0000011500000000000001     ELSE
FRADD02   0000011600000000000001     BEGINCHECK
FRADD02   0000011700000000000001     /* **********                                                         */
FRADD02   0000011800000000000001     /* ********** FETCH DATA FROM ASSOCIATED FILES                        */
FRADD02   0000011900000000000001     /* **********                                                         */
FRADD02   0000012000000000000001     @@SET_IDX  IDX_NAME(CP) TO(2)
FRADD02   0000012100000000000001A50: @@LABEL
FRADD02   0000012200000000000001     @@CMP_IDX  IDX_NAME(CP) IDX_VALUE(@@TFMX) IF_GT(A60)
FRADD02   0000012300000000000001     @@CLR_LST  NUMBER(3)
FRADD02   0000012400000000000001     @@RTV_RELN OF_FILE(CP) INTO_LST(3)
FRADD02   0000012500000000000001     FETCH      FIELDS((#PANELDATA)) FROM_FILE(@@FNAMECP) WITH_KEY(@@LST03)
FRADD02   0000012600000000000001     @@INC_IDX  IDX_NAME(CP)
FRADD02   0000012700000000000001     @@GOTO     LABEL(A50)
FRADD02   0000012800000000000001A60: @@LABEL
FRADD02   0000012900000000000001     ENDCHECK
FRADD02   0000013000000000000001     INSERT     FIELDS((#PANELDATA)) TO_FILE(@@FNAME01) CHECK_ONLY(*YES)
FRADD02   0000013100000000000001     SET_MODE   TO(*DISPLAY)
FRADD02   0000013200000000000001     CHANGE     FIELD(#CONFIRM) TO(Y)
FRADD02   0000013300000000000001     MESSAGE    MSGID(DCU0012) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRADD02   0000013400000000000001     ENDIF
FRADD02   0000013500000000000001     ENDIF
FRADD02   0000013600000000000001     /* **********                                                         */
FRADD02   0000013700000000000001     END_LOOP
FRADD02   0000013800000000000001     /* ********** ======================================================= */
FRADD02   0000013900000000000001     /* ********** END OF RDML COMMANDS                                    */
FRADD02   0000014000000000000001     /* ********** ======================================================= */
FRADD02   0000014100000000000001     @@CLR_LST  NUMBER(1)
FRADD02   0000014200000000000001     @@CLR_LST  NUMBER(2)
FRADD02   0000014300000000000001     @@CLR_LST  NUMBER(3)
FRADD02   0000014400000000000001     @@CLR_LST  NUMBER(4)
FRENQ01   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRENQ01   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRENQ01   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRENQ01   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRENQ01   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRENQ01   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRENQ01   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRENQ01   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRENQ01   0000000900000000000001     /* ********** ======================================================= */
FRENQ01   0000001000000000000001     /* ********** GET NAMES OF UP TO 20 1:1 RELATED FILES                 */
FRENQ01   0000001100000000000001     /* ********** ======================================================= */
FRENQ01   0000001200000000000001     @@GET_FILS TO(20) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the base file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ01   0000001300000000000001     /* ********** ======================================================= */
FRENQ01   0000001400000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRENQ01   0000001500000000000001     /* ********** ======================================================= */
FRENQ01   0000001600000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ01   0000001700000000000001     /* ********** ======================================================= */
FRENQ01   0000001800000000000001     /* ********** LOAD DETAILS OF ALL FIELDS FROM ALL FILES INTO LIST 1   */
FRENQ01   0000001900000000000001     /* ********** ======================================================= */
FRENQ01   0000002000000000000001     @@CLR_LST  NUMBER(1)
FRENQ01   0000002100000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRENQ01   0000002200000000000001A10: @@LABEL
FRENQ01   0000002300000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRENQ01   0000002400000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(1)
FRENQ01   0000002500000000000001     @@INC_IDX  IDX_NAME(CF)
FRENQ01   0000002600000000000001     @@GOTO     LABEL(A10)
FRENQ01   0000002700000000000001A20: @@LABEL
FRENQ01   0000002800000000000001     /* ********** ======================================================= */
FRENQ01   0000002900000000000001     /* ********** ASK THE USER TO MAKE A LIST OF ALL FIELDS IN LIST 2     */
FRENQ01   0000003000000000000001     /* ********** ======================================================= */
FRENQ01   0000003100000000000001     @@CLR_LST  NUMBER(2)
FRENQ01   0000003200000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields to' 'Appear on' 'Display' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ01   0000003300000000000001     /* ********** ======================================================= */
FRENQ01   0000003400000000000001     /* ********** ASK THE USER HOW TO DESIGN THE PANELS                   */
FRENQ01   0000003500000000000001     /* ********** ======================================================= */
FRENQ01   0000003600000000000001     @@QUESTION PROMPT('Design fields on the enquiry panel DOWN the screen or ACROSS the screen') ANSWER(@@CANS002) EXTEND('Reply DOWN or ACROSS only.' 'If your enquiry panel contains 17 (or less) fields, DOWN is the   ' 'recommended value. If your enquiry panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ01   0000003700000000000001     /* ********** ======================================================= */
FRENQ01   0000003800000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 2 AS *HIDDEN     */
FRENQ01   0000003900000000000001     /* ********** ======================================================= */
FRENQ01   0000004000000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRENQ01   0000004100000000000001A30: @@LABEL
FRENQ01   0000004200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRENQ01   0000004300000000000001     @@CLR_LST  NUMBER(3)
FRENQ01   0000004400000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRENQ01   0000004500000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(2)
FRENQ01   0000004600000000000001     @@INC_IDX  IDX_NAME(CF)
FRENQ01   0000004700000000000001     @@GOTO     LABEL(A30)
FRENQ01   0000004800000000000001A40: @@LABEL
FRENQ01   0000004900000000000001     /* ********** ======================================================= */
FRENQ01   0000005000000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRENQ01   0000005100000000000001     /* ********** ======================================================= */
FRENQ01   0000005200000000000001     @@COMMENT  'Function control options'
FRENQ01   0000005300000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRENQ01   0000005400000000000001     @@COMMENT  'Group and field definitions'
FRENQ01   0000005500000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(@@LST02)
FRENQ01   0000005600000000000001     @@COMMENT  'Loop until user EXITs or CANCELs'
FRENQ01   0000005700000000000001     BEGIN_LOOP
FRENQ01   0000005800000000000001     /* ********** ======================================================= */
FRENQ01   0000005900000000000001     /* ********** REQUEST KEYS OF THE BASE FILE BE INPUT AND GET DATA     */
FRENQ01   0000006000000000000001     /* ********** ======================================================= */
FRENQ01   0000006100000000000001     @@CLR_LST  NUMBER(3)
FRENQ01   0000006200000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRENQ01   0000006300000000000001     @@COMMENT  'Request user inputs keys to locate base file details'
FRENQ01   0000006400000000000001     @@IF       COND((*IF @@CANS002 *NE DOWN)) GOTO(R01)
FRENQ01   0000006500000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRENQ01   0000006600000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRENQ01   0000006700000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC)
FRENQ01   0000006800000000000001     @@GOTO     LABEL(R02)
FRENQ01   0000006900000000000001L91: @@LABEL
FRENQ01   0000007000000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRENQ01   0000007100000000000001     @@GOTO     LABEL(R02)
FRENQ01   0000007200000000000001R01: @@IF       COND((*IF @@CANS002 *NE ACROSS)) GOTO(R02)
FRENQ01   0000007300000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L93)
FRENQ01   0000007400000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*ACROSS) IDENTIFY(*LABEL)
FRENQ01   0000007500000000000001     @@GOTO     LABEL(R02)
FRENQ01   0000007600000000000001L93: @@LABEL
FRENQ01   0000007700000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*ACROSS) IDENTIFY(*LABEL)    CURSOR_LOC(*ATFIELD #@@LEL0301)
FRENQ01   0000007800000000000001R02: @@COMMENT  COMMENT('Fetch file @@FNAME01 details     ')
FRENQ01   0000007900000000000001     FETCH      FIELDS((#PANELDATA)) FROM_FILE(@@FNAME01) WITH_KEY(@@LST03) NOT_FOUND(R10) ISSUE_MSG(*YES)
FRENQ01   0000008000000000000001     /* ********** ======================================================= */
FRENQ01   0000008100000000000001     /* ********** FETCH DETAILS FROM ALL SECONDARY FILES                  */
FRENQ01   0000008200000000000001     /* ********** ======================================================= */
FRENQ01   0000008300000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRENQ01   0000008400000000000001A50: @@LABEL
FRENQ01   0000008500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A60)
FRENQ01   0000008600000000000001     @@CLR_LST  NUMBER(3)
FRENQ01   0000008700000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRENQ01   0000008800000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRENQ01   0000008900000000000001     FETCH      FIELDS((#PANELDATA)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03)
FRENQ01   0000009000000000000001     @@INC_IDX  IDX_NAME(CF)
FRENQ01   0000009100000000000001     @@GOTO     LABEL(A50)
FRENQ01   0000009200000000000001A60: @@LABEL
FRENQ01   0000009300000000000001     /* ********** ======================================================= */
FRENQ01   0000009400000000000001     /* ********** DISPLAY DETAILS                                         */
FRENQ01   0000009500000000000001     /* ********** ======================================================= */
FRENQ01   0000009600000000000001     @@COMMENT  COMMENT('Display results to the user      ')
FRENQ01   0000009700000000000001     @@IF       COND((*IF @@CANS002 *NE DOWN)) GOTO(D01)
FRENQ01   0000009800000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRENQ01   0000009900000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L94)
FRENQ01   0000010000000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*DOWN) IDENTIFY(*DESC)
FRENQ01   0000010100000000000001     @@GOTO     LABEL(D02)
FRENQ01   0000010200000000000001L94: @@LABEL
FRENQ01   0000010300000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*DOWN) IDENTIFY(*DESC) CURSOR_LOC(*ATFIELD #@@LEL0201)
FRENQ01   0000010400000000000001     @@GOTO     LABEL(D02)
FRENQ01   0000010500000000000001D01: @@IF       COND((*IF @@CANS002 *NE ACROSS)) GOTO(R02)
FRENQ01   0000010600000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L95)
FRENQ01   0000010700000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*ACROSS) IDENTIFY(*LABEL)
FRENQ01   0000010800000000000001     @@GOTO     LABEL(D02)
FRENQ01   0000010900000000000001L95: @@LABEL
FRENQ01   0000011000000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*ACROSS) IDENTIFY(*LABEL) CURSOR_LOC(*ATFIELD #@@LEL0201)
FRENQ01   0000011100000000000001D02: CHANGE     FIELD(#PANELDATA) TO(*DEFAULT)
FRENQ01   0000011200000000000001     END_LOOP
FRENQ02   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRENQ02   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRENQ02   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRENQ02   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRENQ02   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRENQ02   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRENQ02   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRENQ02   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRENQ02   0000000900000000000001     /* ********** ======================================================= */
FRENQ02   0000001000000000000001     /* ********** GET NAMES OF UP TO 50 RELATED FILES                     */
FRENQ02   0000001100000000000001     /* ********** ======================================================= */
FRENQ02   0000001200000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the base file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ02   0000001300000000000001     /* ********** ======================================================= */
FRENQ02   0000001400000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRENQ02   0000001500000000000001     /* ********** ======================================================= */
FRENQ02   0000001600000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ02   0000001700000000000001     /* ********** ======================================================= */
FRENQ02   0000001800000000000001     /* ********** LOAD DETAILS OF FIELDS OF "HEADER" INTO LIST 1          */
FRENQ02   0000001900000000000001     /* ********** LOAD DETAILS OF FIELDS OF "BROWSE" INTO LIST 2          */
FRENQ02   0000002000000000000001     /* ********** ======================================================= */
FRENQ02   0000002100000000000001     @@CLR_LST  NUMBER(1)
FRENQ02   0000002200000000000001     @@CLR_LST  NUMBER(2)
FRENQ02   0000002300000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRENQ02   0000002400000000000001A10: @@LABEL
FRENQ02   0000002500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRENQ02   0000002600000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A12)
FRENQ02   0000002700000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(2)
FRENQ02   0000002800000000000001     @@GOTO     LABEL(A14)
FRENQ02   0000002900000000000001A12: @@RTV_FLDS FROM_FILE(CF) INTO_LST(1)
FRENQ02   0000003000000000000001A14: @@INC_IDX  IDX_NAME(CF)
FRENQ02   0000003100000000000001     @@GOTO     LABEL(A10)
FRENQ02   0000003200000000000001A20: @@LABEL
FRENQ02   0000003300000000000001     /* ********** ======================================================= */
FRENQ02   0000003400000000000001     /* ********** ASK THE USER TO SELECT THE HEADER FIELDS REQUIRED       */
FRENQ02   0000003500000000000001     /* ********** ======================================================= */
FRENQ02   0000003600000000000001     @@CLR_LST  NUMBER(11)
FRENQ02   0000003700000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((11 'Fields in' 'Header' 'Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ02   0000003800000000000001     /* ********** ======================================================= */
FRENQ02   0000003900000000000001     /* ********** ASK THE USER TO SELECT THE BROWSE FIELDS REQUIRED       */
FRENQ02   0000004000000000000001     /* ********** ======================================================= */
FRENQ02   0000004100000000000001     @@CLR_LST  NUMBER(22)
FRENQ02   0000004200000000000001     @@MAK_LSTS FROM_LSTS(2) INTO_LSTS((22 'Fields in' 'Detail/List' 'Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ02   0000004300000000000001     /* ********** ======================================================= */
FRENQ02   0000004400000000000001     /* ********** ASK THE USER HOW TO DESIGN THE PANELS                   */
FRENQ02   0000004500000000000001     /* ********** ======================================================= */
FRENQ02   0000004600000000000001     @@QUESTION PROMPT('Design fields in the header area DOWN the screen or ACROSS the screen') ANSWER(@@CANS002) EXTEND('Reply DOWN or ACROSS only.' 'If your header area contains 10 (or less) fields, DOWN is the   ' 'recommended value. If your header area contains more than 10' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRENQ02   0000004700000000000001     /* ********** ======================================================= */
FRENQ02   0000004800000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 11 OR LIST 22    */
FRENQ02   0000004900000000000001     /* ********** AS *HIDDEN FIELDS. LIST 3 IS A WORKING LIST ONLY        */
FRENQ02   0000005000000000000001     /* ********** ======================================================= */
FRENQ02   0000005100000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRENQ02   0000005200000000000001A30: @@LABEL
FRENQ02   0000005300000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRENQ02   0000005400000000000001     @@CLR_LST  NUMBER(3)
FRENQ02   0000005500000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRENQ02   0000005600000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A34)
FRENQ02   0000005700000000000001     @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(A34)
FRENQ02   0000005800000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(22)
FRENQ02   0000005900000000000001     @@GOTO     LABEL(A36)
FRENQ02   0000006000000000000001A34: @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(11)
FRENQ02   0000006100000000000001A36: @@INC_IDX  IDX_NAME(CF)
FRENQ02   0000006200000000000001     @@GOTO     LABEL(A30)
FRENQ02   0000006300000000000001A40: @@LABEL
FRENQ02   0000006400000000000001     /* ********** ======================================================= */
FRENQ02   0000006500000000000001     /* ********** GENERATION OF RDML CODE STARTS HERE                     */
FRENQ02   0000006600000000000001     /* ********** ======================================================= */
FRENQ02   0000006700000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRENQ02   0000006800000000000001     GROUP_BY   NAME(#HEADER) FIELDS(@@LST11)
FRENQ02   0000006900000000000001     DEF_LIST   NAME(#LIST) FIELDS((#LISTDUMMY *HIDDEN) @@LST22)
FRENQ02   0000007000000000000001     @@COMMENT  'Loop until user EXITs or CANCELs'
FRENQ02   0000007100000000000001     BEGIN_LOOP
FRENQ02   0000007200000000000001     /* ********** ======================================================= */
FRENQ02   0000007300000000000001     /* ********** REQUEST KEYS OF THE BASE FILE BE INPUT AND GET DATA     */
FRENQ02   0000007400000000000001     /* ********** ======================================================= */
FRENQ02   0000007500000000000001     @@CLR_LST  NUMBER(3)
FRENQ02   0000007600000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRENQ02   0000007700000000000001     @@IF       COND((*IF @@CANS002 *NE DOWN)) GOTO(R01)
FRENQ02   0000007800000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRENQ02   0000007900000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRENQ02   0000008000000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC)
FRENQ02   0000008100000000000001     @@GOTO     LABEL(R02)
FRENQ02   0000008200000000000001L91: @@LABEL
FRENQ02   0000008300000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRENQ02   0000008400000000000001     @@GOTO     LABEL(R02)
FRENQ02   0000008500000000000001R01: @@IF       COND((*IF @@CANS002 *NE ACROSS)) GOTO(R02)
FRENQ02   0000008600000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L93)
FRENQ02   0000008700000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*ACROSS) IDENTIFY(*LABEL)
FRENQ02   0000008800000000000001     @@GOTO     LABEL(R02)
FRENQ02   0000008900000000000001L93: @@LABEL
FRENQ02   0000009000000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*ACROSS) IDENTIFY(*LABEL) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRENQ02   0000009100000000000001     /* ********** ======================================================= */
FRENQ02   0000009200000000000001     /* ********** GENERATE FETCH TO THE PRIMARY FILE                      */
FRENQ02   0000009300000000000001     /* ********** ======================================================= */
FRENQ02   0000009400000000000001R02: @@COMMENT  COMMENT('Fetch file @@FNAME01 details     ')
FRENQ02   0000009500000000000001     FETCH      FIELDS((#HEADER))    FROM_FILE(@@FNAME01) WITH_KEY(@@LST03) NOT_FOUND(R10) ISSUE_MSG(*YES)
FRENQ02   0000009600000000000001     /* ********** ======================================================= */
FRENQ02   0000009700000000000001     /* ********** GENERATE FETCHES TO ALL FILES IN THE HEADER AREA        */
FRENQ02   0000009800000000000001     /* ********** ======================================================= */
FRENQ02   0000009900000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRENQ02   0000010000000000000001H10: @@LABEL
FRENQ02   0000010100000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(H20)
FRENQ02   0000010200000000000001     @@IF       COND((*IF @@FAREACF *EQ B)) GOTO(H15)
FRENQ02   0000010300000000000001     @@CLR_LST  NUMBER(3)
FRENQ02   0000010400000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRENQ02   0000010500000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRENQ02   0000010600000000000001     FETCH      FIELDS((#HEADER)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03)
FRENQ02   0000010700000000000001H15: @@INC_IDX  IDX_NAME(CF)
FRENQ02   0000010800000000000001     @@GOTO     LABEL(H10)
FRENQ02   0000010900000000000001H20: @@LABEL
FRENQ02   0000011000000000000001     /* ********** ======================================================= */
FRENQ02   0000011100000000000001     /* ********** NOW EXTRACT DATA TO BE PLACED INTO THE BROWSE LIST      */
FRENQ02   0000011200000000000001     /* ********** ======================================================= */
FRENQ02   0000011300000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRENQ02   0000011400000000000001     @@SET_IDX  IDX_NAME(SC) TO(0)
FRENQ02   0000011500000000000001A50: @@LABEL
FRENQ02   0000011600000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A80)
FRENQ02   0000011700000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A78)
FRENQ02   0000011800000000000001     @@CLR_LST  NUMBER(3)
FRENQ02   0000011900000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRENQ02   0000012000000000000001     @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(A55)
FRENQ02   0000012100000000000001     /* ********** FETCH INTO THE LIST ENTRY                               */
FRENQ02   0000012200000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRENQ02   0000012300000000000001     FETCH      FIELDS((#LIST)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03)
FRENQ02   0000012400000000000001     @@GOTO     LABEL(A78)
FRENQ02   0000012500000000000001     /* ********** THE ONE AND ONLY SELECT COMMAND                         */
FRENQ02   0000012600000000000001A55: @@COMMENT  COMMENT('Select all file @@FNAMECF details')
FRENQ02   0000012700000000000001     @@INC_IDX  IDX_NAME(SC)
FRENQ02   0000012800000000000001     SELECT     FIELDS((#LIST)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03)
FRENQ02   0000012900000000000001     @@GOTO     LABEL(A78)
FRENQ02   0000013000000000000001     /* ********** INC INDEX AND LOOP AROUND                               */
FRENQ02   0000013100000000000001A78: @@INC_IDX  IDX_NAME(CF)
FRENQ02   0000013200000000000001     @@GOTO     LABEL(A50)
FRENQ02   0000013300000000000001A80: @@LABEL
FRENQ02   0000013400000000000001     /* ********** ======================================================= */
FRENQ02   0000013500000000000001     /* ********** ADD_ENTRY AND ENDSELECT FOR THE LIST (IF SELECT USED)   */
FRENQ02   0000013600000000000001     /* ********** ======================================================= */
FRENQ02   0000013700000000000001     @@CMP_IDX  IDX_NAME(SC) IDX_VALUE(0) IF_EQ(A90)
FRENQ02   0000013800000000000001     ADD_ENTRY  TO_LIST(#LIST)
FRENQ02   0000013900000000000001     ENDSELECT
FRENQ02   0000014000000000000001A90: @@LABEL
FRENQ02   0000014100000000000001     /* ********** ======================================================= */
FRENQ02   0000014200000000000001     /* ********** DISPLAY DETAILS TO THE USER                             */
FRENQ02   0000014300000000000001     /* ********** ======================================================= */
FRENQ02   0000014400000000000001     @@COMMENT  COMMENT('Display results to the user')
FRENQ02   0000014500000000000001     @@IF       COND((*IF @@CANS002 *NE DOWN)) GOTO(D01)
FRENQ02   0000014600000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRENQ02   0000014700000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L94)
FRENQ02   0000014800000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*DOWN) IDENTIFY(*DESC) BROWSELIST(#LIST)
FRENQ02   0000014900000000000001     @@GOTO     LABEL(D02)
FRENQ02   0000015000000000000001L94: @@LABEL
FRENQ02   0000015100000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*DOWN) IDENTIFY(*DESC) BROWSELIST(#LIST) CURSOR_LOC(*ATFIELD #@@LEL1101)
FRENQ02   0000015200000000000001     @@GOTO     LABEL(D02)
FRENQ02   0000015300000000000001D01: @@IF       COND((*IF @@CANS002 *NE ACROSS)) GOTO(D02)
FRENQ02   0000015400000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L95)
FRENQ02   0000015500000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*ACROSS) IDENTIFY(*LABEL) BROWSELIST(#LIST)
FRENQ02   0000015600000000000001     @@GOTO     LABEL(D02)
FRENQ02   0000015700000000000001L95: @@LABEL
FRENQ02   0000015800000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*ACROSS) IDENTIFY(*LABEL) BROWSELIST(#LIST) CURSOR_LOC(*ATFIELD #@@LEL1101)
FRENQ02   0000015900000000000001D02: @@COMMENT  COMMENT('Clear header and list and loop around ')
FRENQ02   0000016000000000000001     CHANGE     FIELD(#HEADER) TO(*DEFAULT)
FRENQ02   0000016100000000000001     @@CMP_IDX  IDX_NAME(SC) IDX_VALUE(0) IF_EQ(A95)
FRENQ02   0000016200000000000001     CLR_LIST   NAMED(#LIST)
FRENQ02   0000016300000000000001A95: @@LABEL
FRENQ02   0000016400000000000001     END_LOOP
FRENQ02   0000016500000000000001     /* ********** ======================================================= */
FRENQ02   0000016600000000000001     /* ********** END OF RDML COMMANDS                                    */
FRENQ02   0000016700000000000001     /* ********** ======================================================= */
FRENQ02   0000016800000000000001     @@CLR_LST  NUMBER(1)
FRENQ02   0000016900000000000001     @@CLR_LST  NUMBER(2)
FRENQ02   0000017000000000000001     @@CLR_LST  NUMBER(3)
FRENQ02   0000017100000000000001     @@CLR_LST  NUMBER(11)
FRENQ02   0000017200000000000001     @@CLR_LST  NUMBER(22)
FRMNT01   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT01   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRMNT01   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRMNT01   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRMNT01   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRMNT01   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRMNT01   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRMNT01   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT01   0000000900000000000001     /* **********                                                         */
FRMNT01   0000001000000000000001     /* ********** GET NAMES OF UP TO 20 RELATED FILES                     */
FRMNT01   0000001100000000000001     /* **********                                                         */
FRMNT01   0000001200000000000001     @@GET_FILS TO(20) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the primary file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000001300000000000001     /* ********** ======================================================= */
FRMNT01   0000001400000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRMNT01   0000001500000000000001     /* ********** ======================================================= */
FRMNT01   0000001600000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000001700000000000001     /* **********                                                         */
FRMNT01   0000001800000000000001     /* ********** LOAD DETAILS OF ALL FIELDS IN PRIMARY FILE INTO LIST 1  */
FRMNT01   0000001900000000000001     /* **********                                                         */
FRMNT01   0000002000000000000001     @@CLR_LST  NUMBER(1)
FRMNT01   0000002100000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRMNT01   0000002200000000000001     /* **********                                                         */
FRMNT01   0000002300000000000001     /* ********** ASK USER TO SELECT FIELDS FOR DISPLAY                   */
FRMNT01   0000002400000000000001     /* **********                                                         */
FRMNT01   0000002500000000000001     @@CLR_LST  NUMBER(2)
FRMNT01   0000002600000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields to' 'Appear on' 'Display' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000002700000000000001     /* **********                                                         */
FRMNT01   0000002800000000000001     /* ********** ASK USER IF CHANGE FUNCTION ALLOWED                     */
FRMNT01   0000002900000000000001     /* **********                                                         */
FRMNT01   0000003000000000000001     @@QUESTION PROMPT('Is the change function key to be enabled ?') ANSWER(@@CANS001) EXTEND('Reply Y or N only.' 'Your reply will determine whether or not this function will allow the' 'CHANGE function key to be used to change records in the primary file.' ' ' 'Use the HELP function key for more information and examples') LOWER(*NO) SPCVAL((Y *YES) ('y' *YES) (N *NO) ('n' *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000003100000000000001     /* **********                                                         */
FRMNT01   0000003200000000000001     /* ********** ASK THE USER TO MAKE A LIST OF ALL FIELDS IN LIST 5     */
FRMNT01   0000003300000000000001     /* ********** THAT ARE NOT TO BE UPDATED IF CHANGE ENABLED            */
FRMNT01   0000003400000000000001     /* **********                                                         */
FRMNT01   0000003500000000000001     @@CLR_LST  NUMBER(6)
FRMNT01   0000003600000000000001     @@IF       COND((*IF @@CANS001 *EQ *NO)) GOTO(A05)
FRMNT01   0000003700000000000001     @@CLR_LST  NUMBER(5)
FRMNT01   0000003800000000000001     @@MAK_LSTS FROM_LSTS(2) INTO_LSTS((5 'Fields that' 'Cannot be' 'Updated' *YESNO *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000003900000000000001     @@MRG_LSTS FROM_LSTS((5 *OUTPUT)) INTO_LST(6)
FRMNT01   0000004000000000000001A05: @@LABEL
FRMNT01   0000004100000000000001     @@MRG_LSTS FROM_LSTS((2)) INTO_LST(6)
FRMNT01   0000004200000000000001     /* **********                                                         */
FRMNT01   0000004300000000000001     /* ********** ASK USER IF ADD FUNCTION ALLOWED                        */
FRMNT01   0000004400000000000001     /* **********                                                         */
FRMNT01   0000004500000000000001     @@QUESTION PROMPT('Is the add function key to be enabled ?') ANSWER(@@CANS002) EXTEND('Reply Y or N only.' 'Your reply will determine whether or not this function will allow the' 'ADD function key to be used to add additional records to the primary file.' 'Use the HELP function key for more information and examples.') LOWER(*NO) SPCVAL((Y *YES) ('y' *YES) (N *NO) ('n' *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000004600000000000001     /* **********                                                         */
FRMNT01   0000004700000000000001     /* ********** ASK USER IF DELETE FUNCTION ALLOWED                     */
FRMNT01   0000004800000000000001     /* **********                                                         */
FRMNT01   0000004900000000000001     @@QUESTION PROMPT('Is the delete function key to be enabled ?') ANSWER(@@CANS003) EXTEND('Reply Y or N only.' 'Your reply will determine whether or not this function will allow the' 'DELETE function key to be used to delete records from the primary file.' ' ' 'Use the HELP function key for more information and examples') LOWER(*NO) SPCVAL((Y *YES) ('y' *YES) (N *NO) ('n' *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000005000000000000001     /* **********                                                         */
FRMNT01   0000005100000000000001     /* ********** PUT ALL FIELDS FROM OTHER SELECTED FILES INTO LIST 3    */
FRMNT01   0000005200000000000001     /* **********                                                         */
FRMNT01   0000005300000000000001     @@CLR_LST  NUMBER(3)
FRMNT01   0000005400000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT01   0000005500000000000001A10: @@LABEL
FRMNT01   0000005600000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRMNT01   0000005700000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(3)
FRMNT01   0000005800000000000001     @@INC_IDX  IDX_NAME(CF)
FRMNT01   0000005900000000000001     @@GOTO     LABEL(A10)
FRMNT01   0000006000000000000001A20: @@LABEL
FRMNT01   0000006100000000000001     /* **********                                                         */
FRMNT01   0000006200000000000001     /* ********** ASK THE USER TO MAKE A LIST OF ALL FIELDS IN LIST 2     */
FRMNT01   0000006300000000000001     /* ********** IF MORE THAN 1 FILE SELECTED                            */
FRMNT01   0000006400000000000001     /* **********                                                         */
FRMNT01   0000006500000000000001     @@IF       COND((*IF @@TFMX *EQ 1)) GOTO(A25)
FRMNT01   0000006600000000000001     @@CLR_LST  NUMBER(4)
FRMNT01   0000006700000000000001     @@MAK_LSTS FROM_LSTS(3) INTO_LSTS((4 'Additional' 'Fields to' 'Appear' *YESNO *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000006800000000000001     @@MRG_LSTS FROM_LSTS((4 *OUTPUT)) INTO_LST(6)
FRMNT01   0000006900000000000001A25: @@LABEL
FRMNT01   0000007000000000000001     /* **********                                                         */
FRMNT01   0000007100000000000001     /* ********** ASK THE USER HOW TO DESIGN THE PANELS                   */
FRMNT01   0000007200000000000001     /* **********                                                         */
FRMNT01   0000007300000000000001     @@QUESTION PROMPT('Design fields on the data entry panel DOWN the screen or ACROSS the screen') ANSWER(@@CANS004) EXTEND('Reply DOWN or ACROSS only.' 'If your data entry panel contains 17 (or less) fields, DOWN is the   ' 'recommended value. If your data entry panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000007400000000000001     /* **********                                                         */
FRMNT01   0000007500000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 6 AS *HIDDEN     */
FRMNT01   0000007600000000000001     /* **********                                                         */
FRMNT01   0000007700000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT01   0000007800000000000001A30: @@LABEL
FRMNT01   0000007900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRMNT01   0000008000000000000001     @@CLR_LST  NUMBER(3)
FRMNT01   0000008100000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT01   0000008200000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(6)
FRMNT01   0000008300000000000001     @@INC_IDX  IDX_NAME(CF)
FRMNT01   0000008400000000000001     @@GOTO     LABEL(A30)
FRMNT01   0000008500000000000001A40: @@LABEL
FRMNT01   0000008600000000000001     /* **********                                                         */
FRMNT01   0000008700000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRMNT01   0000008800000000000001     /* **********                                                         */
FRMNT01   0000008900000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRMNT01   0000009000000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS(@@LST06)
FRMNT01   0000009100000000000001     @@COMMENT  'Loop until user EXITs or CANCELs'
FRMNT01   0000009200000000000001     BEGIN_LOOP
FRMNT01   0000009300000000000001     /* **********                                                         */
FRMNT01   0000009400000000000001     /* ********** REQUEST KEYS OF THE BASE FILE                           */
FRMNT01   0000009500000000000001     /* **********                                                         */
FRMNT01   0000009600000000000001     @@CLR_LST  NUMBER(3)
FRMNT01   0000009700000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRMNT01   0000009800000000000001     @@IF       COND((*IF @@CANS004 *NE DOWN)) GOTO(R01)
FRMNT01   0000009900000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT01   0000010000000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRMNT01   0000010100000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) ADD_KEY(@@CANS002)
FRMNT01   0000010200000000000001     @@GOTO     LABEL(R02)
FRMNT01   0000010300000000000001L91: @@LABEL
FRMNT01   0000010400000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) ADD_KEY(@@CANS002) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRMNT01   0000010500000000000001     @@GOTO     LABEL(R02)
FRMNT01   0000010600000000000001R01: @@IF       COND((*IF @@CANS004 *NE ACROSS)) GOTO(R02)
FRMNT01   0000010700000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L93)
FRMNT01   0000010800000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*ACROSS) IDENTIFY(*LABEL) ADD_KEY(@@CANS002)
FRMNT01   0000010900000000000001     @@GOTO     LABEL(R02)
FRMNT01   0000011000000000000001L93: @@LABEL
FRMNT01   0000011100000000000001R10: REQUEST    FIELDS(@@LST03) DESIGN(*ACROSS) IDENTIFY(*LABEL) ADD_KEY(@@CANS002) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRMNT01   0000011200000000000001     /* **********                                                         */
FRMNT01   0000011300000000000001     /* ********** IF ADD KEY ENABLED, THEN CODE FOR ADD INSERTED          */
FRMNT01   0000011400000000000001     /* **********                                                         */
FRMNT01   0000011500000000000001R02: @@IF       COND((*IF @@CANS002 *EQ *NO)) GOTO(A45)
FRMNT01   0000011600000000000001     IF_MODE    IS(*ADD)
FRMNT01   0000011700000000000001     EXECUTE    SUBROUTINE(ADDRECORD)
FRMNT01   0000011800000000000001     SET_MODE   TO(*DISPLAY)
FRMNT01   0000011900000000000001     ELSE
FRMNT01   0000012000000000000001A45: @@LABEL
FRMNT01   0000012100000000000001     /* **********                                                         */
FRMNT01   0000012200000000000001     /* ********** FETCH DETAILS FROM THE BASE FILE                        */
FRMNT01   0000012300000000000001     /* **********                                                         */
FRMNT01   0000012400000000000001     @@COMMENT  COMMENT('Fetch file @@FNAME01 details     ')
FRMNT01   0000012500000000000001     FETCH      FIELDS((#PANELDATA)) FROM_FILE(@@FNAME01) WITH_KEY(@@LST03) NOT_FOUND(R10) ISSUE_MSG(*YES)
FRMNT01   0000012600000000000001     /* **********                                                         */
FRMNT01   0000012700000000000001     /* ********** FETCH DETAILS FROM ALL SECONDARY FILES                  */
FRMNT01   0000012800000000000001     /* **********                                                         */
FRMNT01   0000012900000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT01   0000013000000000000001A50: @@LABEL
FRMNT01   0000013100000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A60)
FRMNT01   0000013200000000000001     @@CLR_LST  NUMBER(3)
FRMNT01   0000013300000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT01   0000013400000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRMNT01   0000013500000000000001     FETCH      FIELDS((#PANELDATA)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03)
FRMNT01   0000013600000000000001     @@INC_IDX  IDX_NAME(CF)
FRMNT01   0000013700000000000001     @@GOTO     LABEL(A50)
FRMNT01   0000013800000000000001A60: @@LABEL
FRMNT01   0000013900000000000001     /* **********                                                         */
FRMNT01   0000014000000000000001     /* ********** DISPLAY DETAILS TO USER                                 */
FRMNT01   0000014100000000000001     /* **********                                                         */
FRMNT01   0000014200000000000001     @@COMMENT  COMMENT('Display results to the user      ')
FRMNT01   0000014300000000000001     SET_MODE   TO(*DISPLAY)
FRMNT01   0000014400000000000001     @@IF       COND((*IF @@CANS004 *NE DOWN)) GOTO(D01)
FRMNT01   0000014500000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT01   0000014600000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L94)
FRMNT01   0000014700000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*DOWN) IDENTIFY(*DESC)       ADD_KEY(@@CANS002) CHANGE_KEY(@@CANS001) DELETE_KEY(@@CANS003)
FRMNT01   0000014800000000000001     @@GOTO     LABEL(D02)
FRMNT01   0000014900000000000001L94: @@LABEL
FRMNT01   0000015000000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*DOWN) IDENTIFY(*DESC)       ADD_KEY(@@CANS002) CHANGE_KEY(@@CANS001) DELETE_KEY(@@CANS003) CURSOR_LOC(*ATFIELD #@@LEL0601)
FRMNT01   0000015100000000000001     @@GOTO     LABEL(D02)
FRMNT01   0000015200000000000001D01: @@IF       COND((*IF @@CANS004 *NE ACROSS)) GOTO(D02)
FRMNT01   0000015300000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L95)
FRMNT01   0000015400000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*ACROSS) IDENTIFY(*LABEL)    ADD_KEY(@@CANS002) CHANGE_KEY(@@CANS001) DELETE_KEY(@@CANS003)
FRMNT01   0000015500000000000001     @@GOTO     LABEL(D02)
FRMNT01   0000015600000000000001L95: @@LABEL
FRMNT01   0000015700000000000001     DISPLAY    FIELDS(#PANELDATA) DESIGN(*ACROSS) IDENTIFY(*LABEL)    ADD_KEY(@@CANS002) CHANGE_KEY(@@CANS001) DELETE_KEY(@@CANS003) CURSOR_LOC(*ATFIELD #@@LEL0601)
FRMNT01   0000015800000000000001     /* **********                                                         */
FRMNT01   0000015900000000000001     /* ********** IF ADD KEY ENABLED INSERT CODE FOR ADD KEY              */
FRMNT01   0000016000000000000001     /* **********                                                         */
FRMNT01   0000016100000000000001D02: @@IF       COND((*IF @@CANS002 *EQ *NO)) GOTO(A70)
FRMNT01   0000016200000000000001     IF_MODE    IS(*ADD)
FRMNT01   0000016300000000000001     EXECUTE    SUBROUTINE(ADDRECORD)
FRMNT01   0000016400000000000001     SET_MODE   TO(*DISPLAY)
FRMNT01   0000016500000000000001     ENDIF
FRMNT01   0000016600000000000001A70: @@LABEL
FRMNT01   0000016700000000000001     /* **********                                                         */
FRMNT01   0000016800000000000001     /* ********** IF CHANGE KEY ENABLED INSERT CODE FOR CHANGE KEY        */
FRMNT01   0000016900000000000001     /* **********                                                         */
FRMNT01   0000017000000000000001     @@IF       COND((*IF @@CANS001 *EQ *NO)) GOTO(A75)
FRMNT01   0000017100000000000001     IF_MODE    IS(*CHANGE)
FRMNT01   0000017200000000000001     UPDATE     FIELDS((#PANELDATA)) IN_FILE(@@FNAME01) ISSUE_MSG(*YES)
FRMNT01   0000017300000000000001     ENDIF
FRMNT01   0000017400000000000001A75: @@LABEL
FRMNT01   0000017500000000000001     /* **********                                                         */
FRMNT01   0000017600000000000001     /* ********** IF DELETE KEY ENABLED INSERT CODE FOR DELETE KEY        */
FRMNT01   0000017700000000000001     /* **********                                                         */
FRMNT01   0000017800000000000001     @@IF       COND((*IF @@CANS003 *EQ *NO)) GOTO(A80)
FRMNT01   0000017900000000000001     IF_MODE    IS(*DELETE)
FRMNT01   0000018000000000000001     DELETE     FROM_FILE(@@FNAME01) ISSUE_MSG(*YES)
FRMNT01   0000018100000000000001     ENDIF
FRMNT01   0000018200000000000001A80: @@LABEL
FRMNT01   0000018300000000000001     /* **********                                                         */
FRMNT01   0000018400000000000001     /* ********** IF ADD KEY ENABLED INSERT ENDIF FOR ADD KEY CODE        */
FRMNT01   0000018500000000000001     /* **********                                                         */
FRMNT01   0000018600000000000001     @@IF       COND((*IF @@CANS002 *EQ *NO)) GOTO(A82)
FRMNT01   0000018700000000000001     ENDIF
FRMNT01   0000018800000000000001A82: @@LABEL
FRMNT01   0000018900000000000001     END_LOOP
FRMNT01   0000019000000000000001     /* **********                                                         */
FRMNT01   0000019100000000000001     /* ********** IF ADD KEY ENABLED THEN INSERT ADD SUBROUTINE           */
FRMNT01   0000019200000000000001     /* **********                                                         */
FRMNT01   0000019300000000000001     @@IF       COND((*IF @@CANS002 *EQ *NO)) GOTO(A85)
FRMNT01   0000019400000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT this maintenance program works with') ANSWER(@@CANS005) EXTEND('123456789012345678' 'The word you specify here is used to build messages that appear on the' 'data entry screen panel. You should use ONE word only, use lowercase' 'characters only and only use singular form (eg: "customer", "employee"' '"order"). Do NOT use more than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080)
FRMNT01   0000019500000000000001     /* **********                                                         */
FRMNT01   0000019600000000000001     /* ********** ASK USER FOR FIELDS TO APPEAR ON ADD PANEL              */
FRMNT01   0000019700000000000001     /* **********                                                         */
FRMNT01   0000019800000000000001     @@CLR_LST  NUMBER(4)
FRMNT01   0000019900000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(3) INTO_LSTS((4 'Fields to' 'Appear on' 'Add Panel' *SEQUENCE *ALL))
FRMNT01   0000020000000000000001     /* **********                                                         */
FRMNT01   0000020100000000000001     @@COMMENT  COMMENT('Subroutine to add a new record to the primary file')
FRMNT01   0000020200000000000001     SUBROUTINE NAME(ADDRECORD)
FRMNT01   0000020300000000000001     GROUP_BY   NAME(#ADDDATA) FIELDS(@@LST04)
FRMNT01   0000020400000000000001     @@COMMENT  'Issue initial data entry message'
FRMNT01   0000020500000000000001     MESSAGE    MSGID(DCU0010) MSGF(DC@M01) MSGDTA('''@@CANS005''')
FRMNT01   0000020600000000000001     @@COMMENT  COMMENT('Do data entry until terminated by EXIT or CANCEL ')
FRMNT01   0000020700000000000001     CHANGE     FIELD(#ADDDATA) TO(*DEFAULT)
FRMNT01   0000020800000000000001     BEGIN_LOOP
FRMNT01   0000020900000000000001     @@COMMENT  'Request user inputs or corrects details'
FRMNT01   0000021000000000000001     @@IF       COND((*IF @@CANS004 *NE DOWN)) GOTO(D11)
FRMNT01   0000021100000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT01   0000021200000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L96)
FRMNT01   0000021300000000000001     REQUEST    FIELDS((#ADDDATA)) DESIGN(*DOWN) IDENTIFY(*DESC ) MENU_KEY(*YES *RETURN)
FRMNT01   0000021400000000000001     @@GOTO     LABEL(D12)
FRMNT01   0000021500000000000001L96: @@LABEL
FRMNT01   0000021600000000000001     REQUEST    FIELDS((#ADDDATA)) DESIGN(*DOWN) IDENTIFY(*DESC ) MENU_KEY(*YES *RETURN) CURSOR_LOC(*ATFIELD #@@LEL0401)
FRMNT01   0000021700000000000001     @@GOTO     LABEL(D12)
FRMNT01   0000021800000000000001D11: @@IF       COND((*IF @@CANS004 *NE ACROSS)) GOTO(D12)
FRMNT01   0000021900000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L97)
FRMNT01   0000022000000000000001     REQUEST    FIELDS((#ADDDATA)) DESIGN(*ACROSS) IDENTIFY(*LABEL) MENU_KEY(*YES *RETURN)
FRMNT01   0000022100000000000001     @@GOTO     LABEL(D12)
FRMNT01   0000022200000000000001L97: @@LABEL
FRMNT01   0000022300000000000001     REQUEST    FIELDS((#ADDDATA)) DESIGN(*ACROSS) IDENTIFY(*LABEL) MENU_KEY(*YES *RETURN) CURSOR_LOC(*ATFIELD #@@LEL0401)
FRMNT01   0000022400000000000001D12: @@COMMENT  'Perform any program level validation here'
FRMNT01   0000022500000000000001     BEGINCHECK
FRMNT01   0000022600000000000001     ENDCHECK
FRMNT01   0000022700000000000001     @@COMMENT  'Attempt to insert data into the data base'
FRMNT01   0000022800000000000001     INSERT     FIELDS((#ADDDATA)) TO_FILE(@@FNAME01)
FRMNT01   0000022900000000000001     @@COMMENT  'If okay, reset fields and issue accepted message'
FRMNT01   0000023000000000000001     CHANGE     FIELD(#ADDDATA) TO(*DEFAULT)
FRMNT01   0000023100000000000001     MESSAGE    MSGID(DCU0011) MSGF(DC@M01) MSGDTA('''@@CANS005''')
FRMNT01   0000023200000000000001     END_LOOP
FRMNT01   0000023300000000000001     ENDROUTINE
FRMNT01   0000023400000000000001A85: @@LABEL
FRMNT01   0000023500000000000001     /* **********                                                         */
FRMNT01   0000023600000000000001     /* ********** CLEAR ALL WORK LISTS                                    */
FRMNT01   0000023700000000000001     /* **********                                                         */
FRMNT01   0000023800000000000001     @@CLR_LST  NUMBER(1)
FRMNT01   0000023900000000000001     @@CLR_LST  NUMBER(2)
FRMNT01   0000024000000000000001     @@CLR_LST  NUMBER(3)
FRMNT01   0000024100000000000001     @@CLR_LST  NUMBER(4)
FRMNT01   0000024200000000000001     @@CLR_LST  NUMBER(5)
FRMNT01   0000024300000000000001     @@CLR_LST  NUMBER(6)
FRMNT02   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRMNT02   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRMNT02   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRMNT02   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRMNT02   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRMNT02   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRMNT02   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000000900000000000001     /* ********** ======================================================= */
FRMNT02   0000001000000000000001     /* ********** START OF TEMPLATE CODE                                  */
FRMNT02   0000001100000000000001     /* ********** ======================================================= */
FRMNT02   0000001200000000000001     /* ********** ASK FOR THE "OBJECT"                                    */
FRMNT02   0000001300000000000001     /* ********** ======================================================= */
FRMNT02   0000001400000000000001     @@QUESTION PROMPT('Supply a word that describes what "object" this program will work with') ANSWER(@@CANS001) EXTEND('123456789012345' 'The word you specify here is used to build messages that appear on the' 'screen panels. You should use ONE word only, use upper and lower case' 'characters, and only use singular form (eg: "Customer", "Employee",' '"Order"). Do NOT use more than 15 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRMNT02   0000001500000000000001     /* ********** ======================================================= */
FRMNT02   0000001600000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRMNT02   0000001700000000000001     /* ********** ======================================================= */
FRMNT02   0000001800000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRMNT02   0000001900000000000001     /* ********** ======================================================= */
FRMNT02   0000002000000000000001     /* ********** GET FILES TO WORK WITH                                  */
FRMNT02   0000002100000000000001     /* ********** ======================================================= */
FRMNT02   0000002200000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the base file to be used by this application.') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' 'After choosing the base file, choose ALL OTHER RELATED FILES that' 'will be used in the DETAILED DISPLAY routine. Use the HELP key for more' 'details of this template and the type of applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRMNT02   0000002300000000000001     /* ********** ======================================================= */
FRMNT02   0000002400000000000001     /* ********** LOAD DETAILS OF ALL FIELDS FROM ALL FILES INTO LIST 51  */
FRMNT02   0000002500000000000001     /* ********** LOAD FIELDS FROM OTHER THAN BASE FILE INTO LIST 57      */
FRMNT02   0000002600000000000001     /* ********** ======================================================= */
FRMNT02   0000002700000000000001     @@CLR_LST  NUMBER(51)
FRMNT02   0000002800000000000001     @@CLR_LST  NUMBER(57)
FRMNT02   0000002900000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRMNT02   0000003000000000000001D10: @@LABEL
FRMNT02   0000003100000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(D12)
FRMNT02   0000003200000000000001     @@CLR_LST  NUMBER(52)
FRMNT02   0000003300000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(52)
FRMNT02   0000003400000000000001     @@MRG_LSTS FROM_LSTS((52)) INTO_LST(51)
FRMNT02   0000003500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(1) IF_EQ(D11)
FRMNT02   0000003600000000000001     @@MRG_LSTS FROM_LSTS((52)) INTO_LST(57)
FRMNT02   0000003700000000000001D11: @@LABEL
FRMNT02   0000003800000000000001     @@INC_IDX  IDX_NAME(CF)
FRMNT02   0000003900000000000001     @@GOTO     LABEL(D10)
FRMNT02   0000004000000000000001D12: @@LABEL
FRMNT02   0000004100000000000001     /* ********** ======================================================= */
FRMNT02   0000004200000000000001     /* ********** PUT ALL FIELDS FOR BROWSE INTO LIST 52                  */
FRMNT02   0000004300000000000001     /* ********** ======================================================= */
FRMNT02   0000004400000000000001     @@CLR_LST  NUMBER(52)
FRMNT02   0000004500000000000001     @@MAK_LSTS FROM_LSTS(51) INTO_LSTS((52 'Fields for' 'Browse' 'Panel')) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRMNT02   0000004600000000000001     /* ********** ======================================================= */
FRMNT02   0000004700000000000001     /* ********** RETRIEVE KEYS FOR ALL FILES USED INTO LISTS             */
FRMNT02   0000004800000000000001     /* ********** ======================================================= */
FRMNT02   0000004900000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRMNT02   0000005000000000000001     @@SET_IDX  IDX_NAME(FK) TO(1)
FRMNT02   0000005100000000000001D20: @@LABEL
FRMNT02   0000005200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(D22)
FRMNT02   0000005300000000000001     @@CLR_LST  NUMBER(FK)
FRMNT02   0000005400000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(1) IF_GT(D2A)
FRMNT02   0000005500000000000001     @@RTV_KEYS OF_FILE(CF) INTO_LST(FK)
FRMNT02   0000005600000000000001     @@GOTO     LABEL(D2B)
FRMNT02   0000005700000000000001D2A: @@LABEL
FRMNT02   0000005800000000000001     /* ********** ======================================================= */
FRMNT02   0000005900000000000001     /* ********** RETRIEVE KEYS FROM ACCESS ROUTE KEY FIELDS              */
FRMNT02   0000006000000000000001     /* ********** ======================================================= */
FRMNT02   0000006100000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(FK)
FRMNT02   0000006200000000000001D2B: @@LABEL
FRMNT02   0000006300000000000001     @@INC_IDX  IDX_NAME(CF)
FRMNT02   0000006400000000000001     @@INC_IDX  IDX_NAME(FK)
FRMNT02   0000006500000000000001     @@GOTO     LABEL(D20)
FRMNT02   0000006600000000000001D22: @@LABEL
FRMNT02   0000006700000000000001     /* ********** ======================================================= */
FRMNT02   0000006800000000000001     /* ********** RETRIEVE KEYS FOR ALL FILES USED INTO LISTS             */
FRMNT02   0000006900000000000001     /* ********** ======================================================= */
FRMNT02   0000007000000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRMNT02   0000007100000000000001     @@SET_IDX  IDX_NAME(FK) TO(1)
FRMNT02   0000007200000000000001     @@CLR_LST  NUMBER(56)
FRMNT02   0000007300000000000001     @@MRG_LSTS FROM_LSTS((52)) INTO_LST(56)
FRMNT02   0000007400000000000001D30: @@LABEL
FRMNT02   0000007500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(D32)
FRMNT02   0000007600000000000001     @@MRG_LSTS FROM_LSTS((FK *HIDDEN)) INTO_LST(52)
FRMNT02   0000007700000000000001     @@INC_IDX  IDX_NAME(CF)
FRMNT02   0000007800000000000001     @@INC_IDX  IDX_NAME(FK)
FRMNT02   0000007900000000000001     @@GOTO     LABEL(D30)
FRMNT02   0000008000000000000001D32: @@LABEL
FRMNT02   0000008100000000000001     /* ********** ======================================================= */
FRMNT02   0000008200000000000001     /* ********** SET UP FIELDS TO BE ADDED AND UPDATED                   */
FRMNT02   0000008300000000000001     /* ********** ======================================================= */
FRMNT02   0000008400000000000001     @@CLR_LST  NUMBER(53)
FRMNT02   0000008500000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(53)
FRMNT02   0000008600000000000001     @@MAK_LSTS FROM_LSTS(53) INTO_LSTS((54 'Fields' 'to be' 'added')) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRMNT02   0000008700000000000001     @@CLR_LST  NUMBER(55)
FRMNT02   0000008800000000000001     @@CLR_LST  NUMBER(56)
FRMNT02   0000008900000000000001     @@MAK_LSTS FROM_LSTS(51) INTO_LSTS((55 'Fields' 'to be' 'updated') (56 '  Other' 'fields to' ' display')) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060)
FRMNT02   0000009000000000000001     @@CLR_LST  NUMBER(58)
FRMNT02   0000009100000000000001     @@CLR_LST  NUMBER(59)
FRMNT02   0000009200000000000001     @@MRG_LSTS FROM_LSTS((55) (56 *OUT)) INTO_LST(58)
FRMNT02   0000009300000000000001     @@MRG_LSTS FROM_LSTS((58) (1 *OUT)) INTO_LST(59)
FRMNT02   0000009400000000000001     /* ********** ======================================================= */
FRMNT02   0000009500000000000001     /* ********** THE LISTS THAT HAVE BEEN SET UP CONTAIN THE FOLLOWING:  */
FRMNT02   0000009600000000000001     /* **********                                                         */
FRMNT02   0000009700000000000001     /* ********** LIST #  CONTENTS                                        */
FRMNT02   0000009800000000000001     /* ********** ------  --------                                        */
FRMNT02   0000009900000000000001     /* ********** 1 - 50  KEY VALUES FOR ALL FILES USED (UP TO 50 FILES)  */
FRMNT02   0000010000000000000001     /* ********** 51      ALL FIELDS FROM ALL FILES USED                  */
FRMNT02   0000010100000000000001     /* ********** 52      FIELDS TO APPEAR ON BROWSE                      */
FRMNT02   0000010200000000000001     /* ********** 53      ALL FIELDS FROM THE BASE FILE                   */
FRMNT02   0000010300000000000001     /* ********** 54      FIELDS TO BE ADDED TO THE BASE FILE             */
FRMNT02   0000010400000000000001     /* ********** 55      FIELDS TO BE UPDATED IN THE BASE FILE           */
FRMNT02   0000010500000000000001     /* ********** 56      FIELDS FROM OTHER THAN BASE FILE TO DISPLAY     */
FRMNT02   0000010600000000000001     /* ********** 57      ALL FIELDS FROM ALL OTHER FILES                 */
FRMNT02   0000010700000000000001     /* ********** 58      FIELDS TO DISPLAY ON UPDATE SCREEN (LESS KEYS)  */
FRMNT02   0000010800000000000001     /* ********** 59      ALL FIELDS TO DISPLAY ON UPDATE SCREEN          */
FRMNT02   0000010900000000000001     /* **********                                                         */
FRMNT02   0000011000000000000001     /* ********** ======================================================= */
FRMNT02   0000011100000000000001     /* ********** END OF TEMPLATE CODE                                    */
FRMNT02   0000011200000000000001     /* ********** ======================================================= */
FRMNT02   0000011300000000000001     /* ********** START TO GENERATE THE RDML PROGRAM                      */
FRMNT02   0000011400000000000001     /* ********** ======================================================= */
FRMNT02   0000011500000000000001     @@COMMENT  COMMENT('Options, work variables, conditions and browselists')
FRMNT02   0000011600000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000011700000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRMNT02   0000011800000000000001     DEFINE     FIELD(#ALLOWADD) TYPE(*CHAR) LENGTH(1)
FRMNT02   0000011900000000000001     DEFINE     FIELD(#ALLOWCHG) REFFLD(#ALLOWADD)
FRMNT02   0000012000000000000001     DEFINE     FIELD(#ALLOWDLT) REFFLD(#ALLOWADD)
FRMNT02   0000012100000000000001     DEF_COND   NAME(*ALLOWADD) COND('#ALLOWADD *EQ Y')
FRMNT02   0000012200000000000001     DEF_COND   NAME(*ALLOWCHG) COND('#ALLOWCHG *EQ Y')
FRMNT02   0000012300000000000001     DEF_COND   NAME(*ALLOWDLT) COND('#ALLOWDLT *EQ Y')
FRMNT02   0000012400000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000012500000000000001     @@COMMENT  COMMENT('PROGRAM MAINLINE')
FRMNT02   0000012600000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000012700000000000001     @@COMMENT  COMMENT('Determine if the user can maintain the file')
FRMNT02   0000012800000000000001     USE        BUILTIN(CHECK_AUTHORITY) WITH_ARGS(@@FBASP01 '''*LIBL''' FD AD) TO_GET(#ALLOWADD)
FRMNT02   0000012900000000000001     USE        BUILTIN(CHECK_AUTHORITY) WITH_ARGS(@@FBASP01 '''*LIBL''' FD CH) TO_GET(#ALLOWCHG)
FRMNT02   0000013000000000000001     USE        BUILTIN(CHECK_AUTHORITY) WITH_ARGS(@@FBASP01 '''*LIBL''' FD DL) TO_GET(#ALLOWDLT)
FRMNT02   0000013100000000000001     EXECUTE    SUBROUTINE(OBJ_BROWSE)
FRMNT02   0000013200000000000001     @@COMMENT  COMMENT('Perform the loop that handles the command keys used')
FRMNT02   0000013300000000000001     DOWHILE    COND('#IO$KEY *NE ''12''')
FRMNT02   0000013400000000000001     CASE       OF_FIELD(#IO$KEY)
FRMNT02   0000013500000000000001     @@COMMENT  COMMENT('When the ADD key is used')
FRMNT02   0000013600000000000001     WHEN       VALUE_IS('= ''06''')
FRMNT02   0000013700000000000001     EXECUTE    SUBROUTINE(ADD$DATA)
FRMNT02   0000013800000000000001     @@COMMENT  COMMENT('When maintenance is required')
FRMNT02   0000013900000000000001     WHEN       VALUE_IS('= RA')
FRMNT02   0000014000000000000001     IF         COND('#LISTENTRY *GT *ZERO')
FRMNT02   0000014100000000000001     EXECUTE    SUBROUTINE(WORK$DATA)
FRMNT02   0000014200000000000001     ENDIF
FRMNT02   0000014300000000000001     ENDCASE
FRMNT02   0000014400000000000001     @@COMMENT  COMMENT('Select and display a list of records')
FRMNT02   0000014500000000000001     EXECUTE    SUBROUTINE(OBJ_BROWSE)
FRMNT02   0000014600000000000001     ENDWHILE
FRMNT02   0000014700000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000014800000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ_BROWSE')
FRMNT02   0000014900000000000001     @@COMMENT  COMMENT('Description ...: Browse from @@FBASP01 (page at a time)')
FRMNT02   0000015000000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000015100000000000001     SUBROUTINE NAME(OBJ_BROWSE)
FRMNT02   0000015200000000000001     @@COMMENT  COMMENT('Work fields and lists used in this subroutine')
FRMNT02   0000015300000000000001     DEF_LIST   NAME(#OBJLIST) FIELDS(@@LST52 (#PRIFILRRN *HIDDEN))   COUNTER(#LISTCOUNT) PAGE_SIZE(#LISTPAGE) TOP_ENTRY(#LISTTOP) SEL_ENTRY(#LISTENTRY) SCROLL_TXT(#LISTPOS)
FRMNT02   0000015400000000000001     DEF_LIST   NAME(#LASTREQ) FIELDS(@@LST01) TYPE(*WORKING) ENTRYS(1)
FRMNT02   0000015500000000000001     GROUP_BY   NAME(#CLRLIST) FIELDS(@@LST58)
FRMNT02   0000015600000000000001     @@COMMENT  COMMENT('Repeat until records found and selection made')
FRMNT02   0000015700000000000001     DOUNTIL    COND('((#LISTENTRY *GT 0) *AND (#IO$KEY *EQ RA)) *OR ((#IO$KEY *EQ ''06'') *OR (#IO$KEY *EQ ''12''))')
FRMNT02   0000015800000000000001     IF         COND('#LISTCOUNT *GT 0')
FRMNT02   0000015900000000000001     CHANGE     FIELD(#LISTTOP) TO('#LISTTOP - #LISTPAGE')
FRMNT02   0000016000000000000001     GET_ENTRY  NUMBER(#LISTTOP) FROM_LIST(#OBJLIST)
FRMNT02   0000016100000000000001     CLR_LIST   NAMED(#LASTREQ)
FRMNT02   0000016200000000000001     ADD_ENTRY  TO_LIST(#LASTREQ)
FRMNT02   0000016300000000000001     CHANGE     FIELD(#CLRLIST) TO(*DEFAULT)
FRMNT02   0000016400000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#LASTREQ)
FRMNT02   0000016500000000000001     ENDIF
FRMNT02   0000016600000000000001     CLR_LIST   NAMED(#OBJLIST)
FRMNT02   0000016700000000000001     CHANGE     FIELD(#CLRLIST) TO(*NAVAIL)
FRMNT02   0000016800000000000001     CHANGE     FIELD(@@LST01) TO(*NULL)
FRMNT02   0000016900000000000001     @@COMMENT  COMMENT('Display list of selected records a page at a time')
FRMNT02   0000017000000000000001     CHANGE     FIELD(#IO$KEY) TO(UP)
FRMNT02   0000017100000000000001     SELECT     FIELDS((#OBJLIST)) FROM_FILE(@@FNAME01) WHERE('#IO$KEY *EQ UP') WITH_KEY(@@LST01) NBR_KEYS(*COMPUTE) RETURN_RRN(#PRIFILRRN) OPTIONS(*ENDWHERE *STARTKEY)
FRMNT02   0000017200000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT02   0000017300000000000001     @@SET_IDX  IDX_NAME(FK) TO(2)
FRMNT02   0000017400000000000001D40: @@LABEL
FRMNT02   0000017500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(D42)
FRMNT02   0000017600000000000001     FETCH      FIELDS((#OBJLIST)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LSTFK) KEEP_LAST(1)
FRMNT02   0000017700000000000001     @@INC_IDX  IDX_NAME(CF)
FRMNT02   0000017800000000000001     @@INC_IDX  IDX_NAME(FK)
FRMNT02   0000017900000000000001     @@GOTO     LABEL(D40)
FRMNT02   0000018000000000000001D42: @@LABEL
FRMNT02   0000018100000000000001     EXECUTE    SUBROUTINE(OBJDISP) WITH_PARMS('''More...''')
FRMNT02   0000018200000000000001     IF         COND('#IO$KEY *EQ ''12''')
FRMNT02   0000018300000000000001     RETURN
FRMNT02   0000018400000000000001     ENDIF
FRMNT02   0000018500000000000001     ADD_ENTRY  TO_LIST(#OBJLIST) WITH_MODE(*DISPLAY)
FRMNT02   0000018600000000000001     CHANGE     FIELD(#CLRLIST) TO(*NAVAIL)
FRMNT02   0000018700000000000001     ENDSELECT
FRMNT02   0000018800000000000001     @@COMMENT  COMMENT('When there are no more records to be read . . . .')
FRMNT02   0000018900000000000001     IF         '(#IO$KEY = UP)'
FRMNT02   0000019000000000000001     IF         '(#LISTCOUNT *EQ 0)'
FRMNT02   0000019100000000000001     EXECUTE    SUBROUTINE(SHOWLIST)
FRMNT02   0000019200000000000001     ELSE
FRMNT02   0000019300000000000001     EXECUTE    SUBROUTINE(OBJDISP) WITH_PARMS('''Bottom''')
FRMNT02   0000019400000000000001     ENDIF
FRMNT02   0000019500000000000001     ENDIF
FRMNT02   0000019600000000000001     ENDUNTIL
FRMNT02   0000019700000000000001     ENDROUTINE
FRMNT02   0000019800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000019900000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJDISP')
FRMNT02   0000020000000000000001     @@COMMENT  COMMENT('Description ...: Browse from @@FBASP01 (page at a time)')
FRMNT02   0000020100000000000001     @@COMMENT  COMMENT('Parameters ...: Name      Typ Len  Description')
FRMNT02   0000020200000000000001     @@COMMENT  COMMENT('                ----      --- ---  -----------')
FRMNT02   0000020300000000000001     @@COMMENT  COMMENT('                #LISTPOS   A    7  Browse position')
FRMNT02   0000020400000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000020500000000000001     SUBROUTINE NAME(OBJDISP) PARMS((#LISTPOS))
FRMNT02   0000020600000000000001     @@COMMENT  COMMENT('Display if at bottom of list or on a page boundary')
FRMNT02   0000020700000000000001     CHANGE     FIELD(#LISTREMN) TO('#LISTCOUNT / #LISTPAGE')
FRMNT02   0000020800000000000001     IF         COND('(#IO$KEY *EQ UP) *AND ((#LISTPOS *EQ ''Bottom'') *OR ((#LISTREMN *EQ 0) *AND (#LISTCOUNT *GT 0)))')
FRMNT02   0000020900000000000001     EXECUTE    SUBROUTINE(SHOWLIST)
FRMNT02   0000021000000000000001     DOWHILE    COND('((#IO$KEY *EQ RA) *AND (#LISTENTRY *EQ 0)) *OR ((#LISTPOS *EQ ''Bottom'') *AND (#IO$KEY *EQ UP))')
FRMNT02   0000021100000000000001     EXECUTE    SUBROUTINE(SHOWLIST)
FRMNT02   0000021200000000000001     ENDWHILE
FRMNT02   0000021300000000000001     @@COMMENT  COMMENT('Set up the top of the next page')
FRMNT02   0000021400000000000001     CHANGE     FIELD(#LISTTOP) TO('#LISTTOP + #LISTPAGE')
FRMNT02   0000021500000000000001     ENDIF
FRMNT02   0000021600000000000001     ENDROUTINE
FRMNT02   0000021700000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000021800000000000001     @@COMMENT  COMMENT('Subroutine ....: ADD$DATA')
FRMNT02   0000021900000000000001     @@COMMENT  COMMENT('Description ...: Add new data to @@FBASP01')
FRMNT02   0000022000000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000022100000000000001     SUBROUTINE NAME(ADD$DATA)
FRMNT02   0000022200000000000001     @@COMMENT  COMMENT('Groups used in this subroutine')
FRMNT02   0000022300000000000001     GROUP_BY   NAME(#ADD$DATA) FIELDS(@@LST54)
FRMNT02   0000022400000000000001     @@COMMENT  COMMENT('Issue initial data entry display, prepare display')
FRMNT02   0000022500000000000001     MESSAGE    MSGID(DCU0010) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRMNT02   0000022600000000000001     CHANGE     FIELD(#ADD$DATA) TO(*DEFAULT)
FRMNT02   0000022700000000000001     SET_MODE   TO(*ADD)
FRMNT02   0000022800000000000001     @@COMMENT  COMMENT('Display the screen to ADD records')
FRMNT02   0000022900000000000001     POP_UP     FIELDS((#ADD$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(7 14) PANEL_TITL('Create New @@CANS001') EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) CURSOR_LOC(*ATFIELD #@@LEL5301)
FRMNT02   0000023000000000000001     INSERT     FIELDS(#ADD$DATA) TO_FILE(@@FBASP01)
FRMNT02   0000023100000000000001     CHANGE     FIELD(#ADD$DATA) TO(*DEFAULT)
FRMNT02   0000023200000000000001     MESSAGE    MSGTXT('@@CANS001 successfully added')
FRMNT02   0000023300000000000001     ENDROUTINE
FRMNT02   0000023400000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000023500000000000001     @@COMMENT  COMMENT('Subroutine ....: WORK$DATA')
FRMNT02   0000023600000000000001     @@COMMENT  COMMENT('Description ...: Work with detailed data from @@FBASP01')
FRMNT02   0000023700000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000023800000000000001     SUBROUTINE NAME(WORK$DATA)
FRMNT02   0000023900000000000001     @@COMMENT  COMMENT('Groups and work fields used in this subroutine')
FRMNT02   0000024000000000000001     GROUP_BY   NAME(#WORK$DATA) FIELDS(@@LST59)
FRMNT02   0000024100000000000001     @@COMMENT  COMMENT('Fetch full record details from file @@FNAME01')
FRMNT02   0000024200000000000001     CHANGE     FIELD(#WORK$DATA) TO(*NAVAIL)
FRMNT02   0000024300000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#OBJLIST)
FRMNT02   0000024400000000000001     FETCH      FIELDS((#WORK$DATA)) FROM_FILE(@@FBASP01) WITH_RRN(#PRIFILRRN)
FRMNT02   0000024500000000000001     IF_STATUS  IS_NOT(*OKAY)
FRMNT02   0000024600000000000001     MESSAGE    MSGID(DCU0016) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRMNT02   0000024700000000000001     RETURN
FRMNT02   0000024800000000000001     ENDIF
FRMNT02   0000024900000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT02   0000025000000000000001     @@SET_IDX  IDX_NAME(FK) TO(2)
FRMNT02   0000025100000000000001D50: @@LABEL
FRMNT02   0000025200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(D52)
FRMNT02   0000025300000000000001     FETCH      FIELDS((#WORK$DATA)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LSTFK) KEEP_LAST(1)
FRMNT02   0000025400000000000001     @@INC_IDX  IDX_NAME(CF)
FRMNT02   0000025500000000000001     @@INC_IDX  IDX_NAME(FK)
FRMNT02   0000025600000000000001     @@GOTO     LABEL(D50)
FRMNT02   0000025700000000000001D52: @@LABEL
FRMNT02   0000025800000000000001     SET_MODE   TO(*DISPLAY)
FRMNT02   0000025900000000000001     @@COMMENT  COMMENT('Display full record details')
FRMNT02   0000026000000000000001     POP_UP     FIELDS((#WORK$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(8 14) PANEL_TITL('Maintain @@CANS001s') EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) CHANGE_KEY(*YES *NEXT *ALLOWCHG) DELETE_KEY(*YES *NEXT *ALLOWDLT) CURSOR_LOC(*ATFIELD #@@LEL5401)
FRMNT02   0000026100000000000001     IF_MODE    IS(*CHANGE)
FRMNT02   0000026200000000000001     UPDATE     FIELDS(#WORK$DATA) IN_FILE(@@FBASP01)
FRMNT02   0000026300000000000001     ENDIF
FRMNT02   0000026400000000000001     IF_MODE    IS(*DELETE)
FRMNT02   0000026500000000000001     DELETE     FROM_FILE(@@FBASP01)
FRMNT02   0000026600000000000001     ENDIF
FRMNT02   0000026700000000000001     ENDROUTINE
FRMNT02   0000026800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000026900000000000001     @@COMMENT  COMMENT('Subroutine ....: SHOWLIST')
FRMNT02   0000027000000000000001     @@COMMENT  COMMENT('Description ...: Display the browselist')
FRMNT02   0000027100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT02   0000027200000000000001     SUBROUTINE NAME(SHOWLIST)
FRMNT02   0000027300000000000001     IF         '(#LISTCOUNT = 0)'
FRMNT02   0000027400000000000001     MESSAGE    MSGTXT('No records found in file @@FNAME01. Use F6 to ADD.')
FRMNT02   0000027500000000000001     ELSE
FRMNT02   0000027600000000000001     MESSAGE    MSGTXT('Select section to review/change/delete or ADD key to add a new @@CANS001')
FRMNT02   0000027700000000000001     ENDIF
FRMNT02   0000027800000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT02   0000027900000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRMNT02   0000028000000000000001     REQUEST    BROWSELIST(#OBJLIST) ADD_KEY(*YES *NEXT *ALLOWADD) USER_KEYS((*ROLLUP)) PANEL_TITL('Choose @@CANS001s')
FRMNT02   0000028100000000000001     @@GOTO     LABEL(L92)
FRMNT02   0000028200000000000001L91: @@LABEL
FRMNT02   0000028300000000000001     REQUEST    BROWSELIST(#OBJLIST) ADD_KEY(*YES *NEXT *ALLOWADD) USER_KEYS((*ROLLUP)) PANEL_TITL('Choose @@CANS001s') CURSOR_LOC(*ATFIELD #@@LEL5201)
FRMNT02   0000028400000000000001L92: @@LABEL
FRMNT02   0000028500000000000001     ENDROUTINE
FRMNT02   0000028600000000000001     /* ********** ======================================================= */
FRMNT02   0000028700000000000001     /* ********** END OF RDML CODE                                        */
FRMNT02   0000028800000000000001     /* ********** ======================================================= */
FRMNT02   0000028900000000000001     /* ********** CLEAR OUT ALL THE LISTS USED                            */
FRMNT02   0000029000000000000001     @@SET_IDX  IDX_NAME(FK) TO(1)
FRMNT02   0000029100000000000001D60: @@LABEL
FRMNT02   0000029200000000000001     @@CMP_IDX  IDX_NAME(FK) IDX_VALUE(@@TFMX) IF_GT(D62)
FRMNT02   0000029300000000000001     @@CLR_LST  NUMBER(FK)
FRMNT02   0000029400000000000001     @@INC_IDX  IDX_NAME(FK)
FRMNT02   0000029500000000000001     @@GOTO     LABEL(D60)
FRMNT02   0000029600000000000001D62: @@LABEL
FRMNT02   0000029700000000000001     @@CLR_LST  NUMBER(51)
FRMNT02   0000029800000000000001     @@CLR_LST  NUMBER(52)
FRMNT02   0000029900000000000001     @@CLR_LST  NUMBER(53)
FRMNT02   0000030000000000000001     @@CLR_LST  NUMBER(54)
FRMNT02   0000030100000000000001     @@CLR_LST  NUMBER(55)
FRMNT02   0000030200000000000001     @@CLR_LST  NUMBER(56)
FRMNT02   0000030300000000000001     @@CLR_LST  NUMBER(57)
FRMNT02   0000030400000000000001     @@CLR_LST  NUMBER(58)
FRMNT02   0000030500000000000001     @@CLR_LST  NUMBER(59)
FRMNT03   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRMNT03   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRMNT03   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRMNT03   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRMNT03   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRMNT03   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRMNT03   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000000900000000000001     /* ********** ======================================================= */
FRMNT03   0000001000000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRMNT03   0000001100000000000001     /* ********** ======================================================= */
FRMNT03   0000001200000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP060 HELP030 HELP040 HELP050)
FRMNT03   0000001300000000000001     /* ********** ======================================================= */
FRMNT03   0000001400000000000001     /* ********** GET NAMES OF UP TO 50 RELATED FILES                     */
FRMNT03   0000001500000000000001     /* ********** ======================================================= */
FRMNT03   0000001600000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the base file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial' 'list of available files to be displayed) or in full (to cause a full list' 'of available files to be displayed). When a list of files is displayed,' 'the file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP060 HELP030 HELP040 HELP050)
FRMNT03   0000001700000000000001     /* ********** ======================================================= */
FRMNT03   0000001800000000000001     /* ********** ASK FOR NAME OF "HEADER" ENTITY                         */
FRMNT03   0000001900000000000001     /* ********** ======================================================= */
FRMNT03   0000002000000000000001     @@QUESTION PROMPT('Specify the name of the object that the "header" file represents') ANSWER(@@CANS001) EXTEND('123456789012345' 'Specify a word that describes the object that the "header" file being' 'used by this template represents. Use singular form, use at most 15' 'characters and do NOT use any single quote characters in the name.' 'Use the HELP key to view more information about this question or to view' 'examples of the type of answers that you would give to this question.') HELPIDS(HELP070)
FRMNT03   0000002100000000000001     /* ********** ======================================================= */
FRMNT03   0000002200000000000001     /* ********** ASK FOR NAME OF "DETAIL" ENTITY                         */
FRMNT03   0000002300000000000001     /* ********** ======================================================= */
FRMNT03   0000002400000000000001     @@QUESTION PROMPT('Specify the name of the object that the "detail" file represents') ANSWER(@@CANS002) EXTEND('123456789012345' 'Specify a word that describes that object that the "detail" file being' 'used by this template represents. Use singular form, use at most 15' 'characters and do NOT use any single quote characters in the name.' 'Use the HELP key to view more information about this question or to view' 'examples of the type of answers that you would give to this question.') HELPIDS(HELP080)
FRMNT03   0000002500000000000001     /* ********** ======================================================= */
FRMNT03   0000002600000000000001     /* ********** LIST 4 CONTAINS THE HEADER FILES KEYS                   */
FRMNT03   0000002700000000000001     /* ********** LOAD DETAILS OF FIELDS OF "HEADER" INTO LIST 1          */
FRMNT03   0000002800000000000001     /* ********** LOAD DETAILS OF FIELDS OF "BROWSE" INTO LIST 2          */
FRMNT03   0000002900000000000001     /* ********** LIST 3 IS USED AS A WORKING LIST ONLY                   */
FRMNT03   0000003000000000000001     /* ********** LIST 4 CONTAINS THE HEADER FILES KEYS                   */
FRMNT03   0000003100000000000001     /* ********** LIST 5 CONTAINS THE HEADER/DETAIL RELATED KEYS          */
FRMNT03   0000003200000000000001     /* ********** ======================================================= */
FRMNT03   0000003300000000000001     @@CLR_LST  NUMBER(1)
FRMNT03   0000003400000000000001     @@CLR_LST  NUMBER(2)
FRMNT03   0000003500000000000001     @@CLR_LST  NUMBER(6)
FRMNT03   0000003600000000000001     @@CLR_LST  NUMBER(3)
FRMNT03   0000003700000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRMNT03   0000003800000000000001     @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(1)
FRMNT03   0000003900000000000001     @@CLR_LST  NUMBER(4)
FRMNT03   0000004000000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(4)
FRMNT03   0000004100000000000001     @@CLR_LST  NUMBER(5)
FRMNT03   0000004200000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRMNT03   0000004300000000000001A10: @@LABEL
FRMNT03   0000004400000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRMNT03   0000004500000000000001     @@CLR_LST  NUMBER(3)
FRMNT03   0000004600000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(3)
FRMNT03   0000004700000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A12)
FRMNT03   0000004800000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(A11)
FRMNT03   0000004900000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(2)
FRMNT03   0000005000000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(6)
FRMNT03   0000005100000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(5)
FRMNT03   0000005200000000000001     @@GOTO     LABEL(A14)
FRMNT03   0000005300000000000001A11: @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(2)
FRMNT03   0000005400000000000001     @@GOTO     LABEL(A14)
FRMNT03   0000005500000000000001A12: @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(1) IF_GT(A13)
FRMNT03   0000005600000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(1)
FRMNT03   0000005700000000000001     @@GOTO     LABEL(A14)
FRMNT03   0000005800000000000001A13: @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(1)
FRMNT03   0000005900000000000001     @@GOTO     LABEL(A14)
FRMNT03   0000006000000000000001A14: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000006100000000000001     @@GOTO     LABEL(A10)
FRMNT03   0000006200000000000001A20: @@LABEL
FRMNT03   0000006300000000000001     /* ********** ======================================================= */
FRMNT03   0000006400000000000001     /* ********** ASK THE USER TO SELECT THE HEADER FIELDS REQUIRED       */
FRMNT03   0000006500000000000001     /* ********** ======================================================= */
FRMNT03   0000006600000000000001     @@CLR_LST  NUMBER(11)
FRMNT03   0000006700000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((11 'Fields on' 'Header' 'Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP060 HELP030 HELP040 HELP050)
FRMNT03   0000006800000000000001     @@QUESTION PROMPT('Design fields on the ADD panel DOWN the screen or ACROSS the screen') ANSWER(@@CANS022) EXTEND('Reply DOWN or ACROSS only.' 'If your ADD panel contains 17 (or less) fields, DOWN is the ' 'recommended value. If your ADD panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP090 HELP100)
FRMNT03   0000006900000000000001     /* ********** ======================================================= */
FRMNT03   0000007000000000000001     /* ********** ASK THE USER TO SELECT THE BROWSE FIELDS REQUIRED       */
FRMNT03   0000007100000000000001     /* ********** ======================================================= */
FRMNT03   0000007200000000000001     @@CLR_LST  NUMBER(22)
FRMNT03   0000007300000000000001     @@MAK_LSTS FROM_LSTS(2) INTO_LSTS((22 'ALL Fields' 'In Detail' 'Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP060 HELP030 HELP040 HELP050)
FRMNT03   0000007400000000000001     /* ********** ======================================================= */
FRMNT03   0000007500000000000001     /* ********** ASK THE USER TO SELECT THE BROWSE FIELDS REQUIRED       */
FRMNT03   0000007600000000000001     /* ********** ======================================================= */
FRMNT03   0000007700000000000001     @@CLR_LST  NUMBER(66)
FRMNT03   0000007800000000000001     @@MAK_LSTS FROM_LSTS(6) INTO_LSTS((66 'Input Flds' 'Detail/List' 'Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP060 HELP030 HELP040 HELP050)
FRMNT03   0000007900000000000001     /* ********** ======================================================= */
FRMNT03   0000008000000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 11 OR LIST 22    */
FRMNT03   0000008100000000000001     /* ********** AS *HIDDEN FIELDS. LIST 3 IS A WORKING LIST ONLY        */
FRMNT03   0000008200000000000001     /* ********** ======================================================= */
FRMNT03   0000008300000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000008400000000000001A30: @@LABEL
FRMNT03   0000008500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRMNT03   0000008600000000000001     @@CLR_LST  NUMBER(3)
FRMNT03   0000008700000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT03   0000008800000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A34)
FRMNT03   0000008900000000000001     @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(A34)
FRMNT03   0000009000000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(22)
FRMNT03   0000009100000000000001     @@GOTO     LABEL(A36)
FRMNT03   0000009200000000000001A34: @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(11)
FRMNT03   0000009300000000000001A36: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000009400000000000001     @@GOTO     LABEL(A30)
FRMNT03   0000009500000000000001A40: @@LABEL
FRMNT03   0000009600000000000001     /* ********** ======================================================= */
FRMNT03   0000009700000000000001     /* ********** GENERATION OF RDML CODE STARTS HERE                     */
FRMNT03   0000009800000000000001     /* ********** ======================================================= */
FRMNT03   0000009900000000000001     @@COMMENT  COMMENT('Groups, definitions and declarations')
FRMNT03   0000010000000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000010100000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRMNT03   0000010200000000000001     DEFINE     FIELD(#NEXTROUTN) TYPE(*CHAR) LENGTH(15)
FRMNT03   0000010300000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000010400000000000001     @@COMMENT  COMMENT('Program Mainline')
FRMNT03   0000010500000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000010600000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT03   0000010700000000000001     BEGIN_LOOP
FRMNT03   0000010800000000000001     CASE       OF_FIELD(#NEXTROUTN)
FRMNT03   0000010900000000000001     WHEN       VALUE_IS('= GET_KEY')
FRMNT03   0000011000000000000001     EXECUTE    SUBROUTINE(GET_KEY)
FRMNT03   0000011100000000000001     WHEN       VALUE_IS('= WRK_HEADER')
FRMNT03   0000011200000000000001     EXECUTE    SUBROUTINE(WRK_HEADER)
FRMNT03   0000011300000000000001     WHEN       VALUE_IS('= WRK_DETAIL')
FRMNT03   0000011400000000000001     EXECUTE    SUBROUTINE(WRK_DETAIL)
FRMNT03   0000011500000000000001     ENDCASE
FRMNT03   0000011600000000000001     END_LOOP
FRMNT03   0000011700000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000011800000000000001     @@COMMENT  COMMENT('GETKEY : Get keys of record to create or review')
FRMNT03   0000011900000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000012000000000000001     SUBROUTINE NAME(GET_KEY)
FRMNT03   0000012100000000000001     @@COMMENT  COMMENT('Groups, definitions and declarations')
FRMNT03   0000012200000000000001     GROUP_BY   NAME(#KEY) FIELDS(@@LST04)
FRMNT03   0000012300000000000001     DEF_LIST   NAME(#SAVKEY) FIELDS(@@LST04)  TYPE(*WORKING) ENTRYS(1)
FRMNT03   0000012400000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT03   0000012500000000000001     CLR_LIST   NAMED(#SAVKEY)
FRMNT03   0000012600000000000001     CHANGE     FIELD(#KEY) TO(*DEFAULT)
FRMNT03   0000012700000000000001     MESSAGE    MSGTXT('Specify Identifier of @@CANS001 to Create/Review/Change or Delete')
FRMNT03   0000012800000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT03   0000012900000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRMNT03   0000013000000000000001     REQUEST    FIELDS((#KEY)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) PANEL_TITL('Specify @@CANS001')
FRMNT03   0000013100000000000001     @@GOTO     LABEL(L92)
FRMNT03   0000013200000000000001L91: @@LABEL
FRMNT03   0000013300000000000001     REQUEST    FIELDS((#KEY)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) PANEL_TITL('Specify @@CANS001') CURSOR_LOC(*ATFIELD #@@LEL0401)
FRMNT03   0000013400000000000001L92: @@LABEL
FRMNT03   0000013500000000000001     IF_NULL    #KEY
FRMNT03   0000013600000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT03   0000013700000000000001     ELSE
FRMNT03   0000013800000000000001     ADD_ENTRY  TO_LIST(#SAVKEY)
FRMNT03   0000013900000000000001     CHANGE     FIELD(#NEXTROUTN) TO('WRK_HEADER')
FRMNT03   0000014000000000000001     ENDIF
FRMNT03   0000014100000000000001     ENDROUTINE
FRMNT03   0000014200000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000014300000000000001     @@COMMENT  COMMENT('WRK_HEADER : Work with @@CANS001 details')
FRMNT03   0000014400000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000014500000000000001     /* ********** Work with employee details                              */
FRMNT03   0000014600000000000001     /* ********** ******************************************************* */
FRMNT03   0000014700000000000001     SUBROUTINE NAME(WRK_HEADER)
FRMNT03   0000014800000000000001     /* **********                                                         */
FRMNT03   0000014900000000000001     GROUP_BY   NAME(#HEADER) FIELDS(@@LST11)
FRMNT03   0000015000000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT03   0000015100000000000001     @@COMMENT  COMMENT('Load existing @@CANS001 data (if any)')
FRMNT03   0000015200000000000001     EXECUTE    SUBROUTINE(GET_HEADER)
FRMNT03   0000015300000000000001     @@COMMENT  COMMENT('Do until end of this routine is requested')
FRMNT03   0000015400000000000001     DOUNTIL    COND('#NEXTROUTN *NE WRK_HEADER')
FRMNT03   0000015500000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT03   0000015600000000000001     @@IF       COND((*IF @@CANS022 *NE DOWN)) GOTO(D01)
FRMNT03   0000015700000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT03   0000015800000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L93)
FRMNT03   0000015900000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) CHANGE_KEY(*YES) DELETE_KEY(*YES) PANEL_TITL('Work with @@CANS001 Details')
FRMNT03   0000016000000000000001     @@GOTO     LABEL(D02)
FRMNT03   0000016100000000000001L93: @@LABEL
FRMNT03   0000016200000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) CHANGE_KEY(*YES) DELETE_KEY(*YES) PANEL_TITL('Work with @@CANS001 Details') CURSOR_LOC(*ATFIELD #@@LEL1101)
FRMNT03   0000016300000000000001     @@GOTO     LABEL(D02)
FRMNT03   0000016400000000000001D01: @@IF       COND((*IF @@CANS022 *NE ACROSS)) GOTO(D02)
FRMNT03   0000016500000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L94)
FRMNT03   0000016600000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*ACROSS) IDENTIFY(*LABEL) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) CHANGE_KEY(*YES) DELETE_KEY(*YES) PANEL_TITL('Work with @@CANS001 Details')
FRMNT03   0000016700000000000001     @@GOTO     LABEL(D02)
FRMNT03   0000016800000000000001L94: @@LABEL
FRMNT03   0000016900000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*ACROSS) IDENTIFY(*LABEL) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) CHANGE_KEY(*YES) DELETE_KEY(*YES) PANEL_TITL('Work with @@CANS001 Details') CURSOR_LOC(*ATFIELD #@@LEL1101)
FRMNT03   0000017000000000000001D02: CHANGE     FIELD(#NEXTROUTN) TO('WRK_HEADER')
FRMNT03   0000017100000000000001     @@COMMENT  COMMENT('If @@CANS001 is being displayed')
FRMNT03   0000017200000000000001     IF_MODE    IS(*DISPLAY)
FRMNT03   0000017300000000000001     CHANGE     FIELD(#NEXTROUTN) TO('WRK_DETAIL')
FRMNT03   0000017400000000000001     ENDIF
FRMNT03   0000017500000000000001     @@COMMENT  COMMENT('If new @@CANS001 is being created')
FRMNT03   0000017600000000000001     IF_MODE    IS(*ADD)
FRMNT03   0000017700000000000001     INSERT     FIELDS(#HEADER) TO_FILE(@@FNAME01)
FRMNT03   0000017800000000000001     EXECUTE    SUBROUTINE(GET_HEADER)
FRMNT03   0000017900000000000001     MESSAGE    MSGTXT('New @@CANS001 successfully created')
FRMNT03   0000018000000000000001     ENDIF
FRMNT03   0000018100000000000001     @@COMMENT  COMMENT('If existing @@CANS001 is being updated')
FRMNT03   0000018200000000000001     IF_MODE    IS(*CHANGE)
FRMNT03   0000018300000000000001     UPDATE     FIELDS((#HEADER)) IN_FILE(@@FNAME01)
FRMNT03   0000018400000000000001     EXECUTE    SUBROUTINE(GET_HEADER)
FRMNT03   0000018500000000000001     MESSAGE    MSGTXT('@@CANS001 successfully updated')
FRMNT03   0000018600000000000001     ENDIF
FRMNT03   0000018700000000000001     @@COMMENT  COMMENT('If existing @@CANS001 is being deleted')
FRMNT03   0000018800000000000001     IF_MODE    IS(*DELETE)
FRMNT03   0000018900000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000019000000000000001A50: @@LABEL
FRMNT03   0000019100000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A60)
FRMNT03   0000019200000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(A55)
FRMNT03   0000019300000000000001     DELETE     FROM_FILE(@@FNAMECF) WITH_KEY(@@LST05)
FRMNT03   0000019400000000000001     @@GOTO     LABEL(A60)
FRMNT03   0000019500000000000001A55: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000019600000000000001     @@GOTO     LABEL(A50)
FRMNT03   0000019700000000000001A60: /* **********                                                         */
FRMNT03   0000019800000000000001     DELETE     FROM_FILE(@@FNAME01)
FRMNT03   0000019900000000000001     MESSAGE    MSGTXT('@@CANS001 successfully deleted')
FRMNT03   0000020000000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT03   0000020100000000000001     ENDIF
FRMNT03   0000020200000000000001     @@COMMENT  COMMENT(' ')
FRMNT03   0000020300000000000001     ENDUNTIL
FRMNT03   0000020400000000000001     ENDROUTINE
FRMNT03   0000020500000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000020600000000000001     @@COMMENT  COMMENT('GET_HEADER : Load up @@CANS001 details')
FRMNT03   0000020700000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000020800000000000001     SUBROUTINE NAME(GET_HEADER)
FRMNT03   0000020900000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT03   0000021000000000000001     FETCH      FIELDS((#HEADER)) FROM_FILE(@@FNAME01) WITH_KEY(@@LST04)
FRMNT03   0000021100000000000001     IF_STATUS  IS(*OKAY)
FRMNT03   0000021200000000000001     SET_MODE   TO(*DISPLAY)
FRMNT03   0000021300000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000021400000000000001A70: @@LABEL
FRMNT03   0000021500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A90)
FRMNT03   0000021600000000000001     @@IF       COND((*IF @@FAREACF *EQ B)) GOTO(A80)
FRMNT03   0000021700000000000001     @@CLR_LST  NUMBER(3)
FRMNT03   0000021800000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT03   0000021900000000000001     FETCH      FIELDS((#HEADER)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(3)
FRMNT03   0000022000000000000001A80: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000022100000000000001     @@GOTO     LABEL(A70)
FRMNT03   0000022200000000000001A90: /* **********                                                         */
FRMNT03   0000022300000000000001     ELSE
FRMNT03   0000022400000000000001     CHANGE     FIELD(#HEADER) TO(*DEFAULT)
FRMNT03   0000022500000000000001     SET_MODE   TO(*ADD)
FRMNT03   0000022600000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SAVKEY)
FRMNT03   0000022700000000000001     ENDIF
FRMNT03   0000022800000000000001     ENDROUTINE
FRMNT03   0000022900000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000023000000000000001     @@COMMENT  COMMENT('WRK_DETAIL : Work with @@CANS002 details')
FRMNT03   0000023100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000023200000000000001     SUBROUTINE NAME(WRK_DETAIL)
FRMNT03   0000023300000000000001     @@COMMENT  COMMENT('Groups, definitions and declarations')
FRMNT03   0000023400000000000001     DEFINE     FIELD(#USE$NO) TYPE(*DEC) LENGTH(3) DECIMALS(0) LABEL('Line Number') COLHDG('Line' ' No') EDIT_CODE(4)
FRMNT03   0000023500000000000001     DEFINE     FIELD(#LIN$NO) REFFLD(#USE$NO)
FRMNT03   0000023600000000000001     DEFINE     FIELD(#TOP$NO) REFFLD(#USE$NO)
FRMNT03   0000023700000000000001     /* ********** ======================================================= */
FRMNT03   0000023800000000000001     /* ********** LIST 33 : HEADER KEYS / SELECTED FIELDS .....           */
FRMNT03   0000023900000000000001     /* ********** ======================================================= */
FRMNT03   0000024000000000000001     @@CLR_LST  NUMBER(3)
FRMNT03   0000024100000000000001     @@MRG_LSTS FROM_LSTS((4 *OUTPUT)) INTO_LST(3)
FRMNT03   0000024200000000000001     @@MRG_LSTS FROM_LSTS((66 *INPUT)) INTO_LST(3)
FRMNT03   0000024300000000000001     @@COMMENT  COMMENT('Top area of Screen Panel')
FRMNT03   0000024400000000000001     GROUP_BY   NAME(#HDETAIL) FIELDS((#USE$NO) @@LST03)
FRMNT03   0000024500000000000001     @@COMMENT  COMMENT('Input capable fields in top area')
FRMNT03   0000024600000000000001     GROUP_BY   NAME(#IDETAIL) FIELDS(@@LST66)
FRMNT03   0000024700000000000001     @@COMMENT  COMMENT('List to display at bottom of panel')
FRMNT03   0000024800000000000001     @@CLR_LST  NUMBER(3)
FRMNT03   0000024900000000000001     @@MRG_LSTS FROM_LSTS((4 *HIDDEN)) INTO_LST(3)
FRMNT03   0000025000000000000001     @@MRG_LSTS FROM_LSTS((66 *OUTPUT)) INTO_LST(3)
FRMNT03   0000025100000000000001     @@MRG_LSTS FROM_LSTS((22 *OUTPUT)) INTO_LST(3)
FRMNT03   0000025200000000000001     DEF_LIST   NAME(#LDETAIL) FIELDS((#LIN$NO *OUTPUT)  @@LST03) COUNTER(#LISTENTRY) TOP_ENTRY(#TOP$NO)
FRMNT03   0000025300000000000001     /* ********** Same as LDETAIL (Used as a save stack)                  */
FRMNT03   0000025400000000000001     DEF_LIST   NAME(#SDETAIL) FIELDS((#LIN$NO) @@LST03) TYPE(*WORKING) ENTRYS(1)
FRMNT03   0000025500000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT03   0000025600000000000001     @@COMMENT  COMMENT('Load existing @@CANS002 details')
FRMNT03   0000025700000000000001     EXECUTE    SUBROUTINE(GET_DETAIL)
FRMNT03   0000025800000000000001     CHANGE     FIELD(#USE$NO) TO('#LISTENTRY + 1')
FRMNT03   0000025900000000000001     SET_MODE   TO(*CHANGE)
FRMNT03   0000026000000000000001     @@COMMENT  COMMENT('Loop until another routine requested')
FRMNT03   0000026100000000000001     DOUNTIL    COND('#NEXTROUTN *NE WRK_DETAIL')
FRMNT03   0000026200000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT03   0000026300000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L95)
FRMNT03   0000026400000000000001     DISPLAY    FIELDS((#HDETAIL)) DESIGN(*ACROSS) IDENTIFY(*COLHDG) BROWSELIST(#LDETAIL) EXIT_KEY(*NO) MENU_KEY(*YES L10) PANEL_TITL('Work with @@CANS002 Details')
FRMNT03   0000026500000000000001     @@GOTO     LABEL(L96)
FRMNT03   0000026600000000000001L95: @@LABEL
FRMNT03   0000026700000000000001     DISPLAY    FIELDS((#HDETAIL)) DESIGN(*ACROSS) IDENTIFY(*COLHDG) BROWSELIST(#LDETAIL) EXIT_KEY(*NO) MENU_KEY(*YES L10) PANEL_TITL('Work with @@CANS002 Details') CURSOR_LOC(*ATFIELD #@@LEL0301)
FRMNT03   0000026800000000000001L96: @@LABEL
FRMNT03   0000026900000000000001     @@COMMENT  COMMENT('If cancel of panel was requested')
FRMNT03   0000027000000000000001L10: IF_KEY     WAS(*CANCEL)
FRMNT03   0000027100000000000001     @@COMMENT  COMMENT('If editing an existing line, cancel edit')
FRMNT03   0000027200000000000001     IF_MODE    IS(*DISPLAY)
FRMNT03   0000027300000000000001     CHANGE     FIELD(#IDETAIL) TO(*NULL)
FRMNT03   0000027400000000000001     CHANGE     FIELD(#USE$NO) TO(0)
FRMNT03   0000027500000000000001     SET_MODE   TO(*CHANGE)
FRMNT03   0000027600000000000001     @@COMMENT  COMMENT('Else, cancel this subroutine')
FRMNT03   0000027700000000000001     ELSE
FRMNT03   0000027800000000000001     CHANGE     FIELD(#NEXTROUTN) TO('WRK_HEADER')
FRMNT03   0000027900000000000001     ENDIF
FRMNT03   0000028000000000000001     @@COMMENT  COMMENT('Else, if cancel key was not used')
FRMNT03   0000028100000000000001     ELSE
FRMNT03   0000028200000000000001     BEGINCHECK
FRMNT03   0000028300000000000001     CASE       OF_FIELD(#USE$NO)
FRMNT03   0000028400000000000001     @@COMMENT  COMMENT('Validate line number')
FRMNT03   0000028500000000000001     WHEN       VALUE_IS('*LT 1' '*GT (#LISTENTRY + 1)')
FRMNT03   0000028600000000000001     SET_MODE   TO(*CHANGE)
FRMNT03   0000028700000000000001     SET_ERROR  FOR_FIELD(#USE$NO) MSGTXT('Line entered number must be in range 1 -> (maximum number shown + 1)')
FRMNT03   0000028800000000000001     @@COMMENT  COMMENT('When existing line is requested')
FRMNT03   0000028900000000000001     WHEN       VALUE_IS('*LE #LISTENTRY')
FRMNT03   0000029000000000000001     @@COMMENT  COMMENT('Handle edit in progress of existing line')
FRMNT03   0000029100000000000001     IF_MODE    IS(*DISPLAY)
FRMNT03   0000029200000000000001     @@COMMENT  COMMENT('Delete line if all fields are now null')
FRMNT03   0000029300000000000001     IF_NULL    FIELD(#IDETAIL)
FRMNT03   0000029400000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000029500000000000001B10: @@LABEL
FRMNT03   0000029600000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B30)
FRMNT03   0000029700000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B20)
FRMNT03   0000029800000000000001     DELETE     FROM_FILE(@@FNAMECF)
FRMNT03   0000029900000000000001     @@GOTO     LABEL(B30)
FRMNT03   0000030000000000000001B20: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000030100000000000001     @@GOTO     LABEL(B10)
FRMNT03   0000030200000000000001B30: /* **********                                                         */
FRMNT03   0000030300000000000001     MESSAGE    MSGTXT('@@CANS002 details sucessfully deleted')
FRMNT03   0000030400000000000001     EXECUTE    SUBROUTINE(GET_DETAIL)
FRMNT03   0000030500000000000001     @@COMMENT  COMMENT('Else, update the existing line details')
FRMNT03   0000030600000000000001     ELSE
FRMNT03   0000030700000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000030800000000000001B40: @@LABEL
FRMNT03   0000030900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B60)
FRMNT03   0000031000000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B50)
FRMNT03   0000031100000000000001     UPDATE     FIELDS((#IDETAIL)) IN_FILE(@@FNAMECF)
FRMNT03   0000031200000000000001     @@GOTO     LABEL(B60)
FRMNT03   0000031300000000000001B50: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000031400000000000001     @@GOTO     LABEL(B40)
FRMNT03   0000031500000000000001B60: /* **********                                                         */
FRMNT03   0000031600000000000001     EXECUTE    SUBROUTINE(EXT_DETAIL)
FRMNT03   0000031700000000000001     CLR_LIST   NAMED(#SDETAIL)
FRMNT03   0000031800000000000001     ADD_ENTRY  TO_LIST(#SDETAIL)
FRMNT03   0000031900000000000001     GET_ENTRY  NUMBER(#USE$NO) FROM_LIST(#LDETAIL)
FRMNT03   0000032000000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SDETAIL)
FRMNT03   0000032100000000000001     UPD_ENTRY  IN_LIST(#LDETAIL)
FRMNT03   0000032200000000000001     MESSAGE    MSGTXT('@@CANS002 details successfully updated')
FRMNT03   0000032300000000000001     CHANGE     FIELD(#TOP$NO) TO(#USE$NO)
FRMNT03   0000032400000000000001     ENDIF
FRMNT03   0000032500000000000001     CHANGE     FIELD(#USE$NO #IDETAIL) TO(*NULL)
FRMNT03   0000032600000000000001     SET_MODE   TO(*CHANGE)
FRMNT03   0000032700000000000001     @@COMMENT  COMMENT('Else, load up an existing LINE for edit')
FRMNT03   0000032800000000000001     ELSE
FRMNT03   0000032900000000000001     GET_ENTRY  NUMBER(#USE$NO) FROM_LIST(#LDETAIL)
FRMNT03   0000033000000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000033100000000000001B70: @@LABEL
FRMNT03   0000033200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B90)
FRMNT03   0000033300000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B80)
FRMNT03   0000033400000000000001     @@CLR_LST  NUMBER(77)
FRMNT03   0000033500000000000001     @@RTV_KEYS OF_FILE(CF) INTO_LST(77)
FRMNT03   0000033600000000000001     FETCH      FIELDS((#LDETAIL)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST77)
FRMNT03   0000033700000000000001     @@GOTO     LABEL(B90)
FRMNT03   0000033800000000000001B80: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000033900000000000001     @@GOTO     LABEL(B70)
FRMNT03   0000034000000000000001B90: /* **********                                                         */
FRMNT03   0000034100000000000001     SET_MODE   TO(*DISPLAY)
FRMNT03   0000034200000000000001     CHANGE     FIELD(#TOP$NO) TO(#USE$NO)
FRMNT03   0000034300000000000001     ENDIF
FRMNT03   0000034400000000000001     @@COMMENT  COMMENT('Handle entry of a new line')
FRMNT03   0000034500000000000001     WHEN       VALUE_IS('*GT #LISTENTRY')
FRMNT03   0000034600000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000034700000000000001C10: @@LABEL
FRMNT03   0000034800000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(C30)
FRMNT03   0000034900000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(C20)
FRMNT03   0000035000000000000001     INSERT     FIELDS((#HDETAIL)) TO_FILE(@@FNAMECF)
FRMNT03   0000035100000000000001     @@GOTO     LABEL(C30)
FRMNT03   0000035200000000000001C20: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000035300000000000001     @@GOTO     LABEL(C10)
FRMNT03   0000035400000000000001C30: /* **********                                                         */
FRMNT03   0000035500000000000001     EXECUTE    SUBROUTINE(EXT_DETAIL)
FRMNT03   0000035600000000000001     CHANGE     FIELD(#LIN$NO) TO('#LISTENTRY + 1')
FRMNT03   0000035700000000000001     ADD_ENTRY  TO_LIST(#LDETAIL)
FRMNT03   0000035800000000000001     SET_MODE   TO(*CHANGE)
FRMNT03   0000035900000000000001     CHANGE     FIELD(#IDETAIL) TO(*NULL)
FRMNT03   0000036000000000000001     CHANGE     FIELD(#TOP$NO) TO(#USE$NO)
FRMNT03   0000036100000000000001     CHANGE     FIELD(#USE$NO) TO('#LISTENTRY + 1')
FRMNT03   0000036200000000000001     ENDCASE
FRMNT03   0000036300000000000001     ENDCHECK
FRMNT03   0000036400000000000001     ENDIF
FRMNT03   0000036500000000000001     ENDUNTIL
FRMNT03   0000036600000000000001     @@COMMENT  COMMENT(' ')
FRMNT03   0000036700000000000001     ENDROUTINE
FRMNT03   0000036800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000036900000000000001     @@COMMENT  COMMENT('GET_DETAIL : Load up all @@CANS002 details')
FRMNT03   0000037000000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000037100000000000001     SUBROUTINE NAME(GET_DETAIL)
FRMNT03   0000037200000000000001     CLR_LIST   NAMED(#LDETAIL)
FRMNT03   0000037300000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000037400000000000001C40: @@LABEL
FRMNT03   0000037500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(C60)
FRMNT03   0000037600000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(C50)
FRMNT03   0000037700000000000001     SELECT     FIELDS((#LDETAIL)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST05)
FRMNT03   0000037800000000000001     @@GOTO     LABEL(C60)
FRMNT03   0000037900000000000001C50: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000038000000000000001     @@GOTO     LABEL(C40)
FRMNT03   0000038100000000000001C60: /* **********                                                         */
FRMNT03   0000038200000000000001     EXECUTE    SUBROUTINE(EXT_DETAIL)
FRMNT03   0000038300000000000001     CHANGE     FIELD(#LIN$NO) TO('#LISTENTRY + 1')
FRMNT03   0000038400000000000001     ADD_ENTRY  TO_LIST(#LDETAIL)
FRMNT03   0000038500000000000001     ENDSELECT
FRMNT03   0000038600000000000001     CHANGE     FIELD(#IDETAIL) TO(*NULL)
FRMNT03   0000038700000000000001     CHANGE     FIELD(#TOP$NO) TO(#LISTENTRY)
FRMNT03   0000038800000000000001     ENDROUTINE
FRMNT03   0000038900000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000039000000000000001     @@COMMENT  COMMENT('EXT_DETAIL : Get extended @@CANS002 details')
FRMNT03   0000039100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT03   0000039200000000000001     SUBROUTINE NAME(EXT_DETAIL)
FRMNT03   0000039300000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT03   0000039400000000000001C70: @@LABEL
FRMNT03   0000039500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(C90)
FRMNT03   0000039600000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(C80)
FRMNT03   0000039700000000000001     @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(C80)
FRMNT03   0000039800000000000001     @@CLR_LST  NUMBER(3)
FRMNT03   0000039900000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT03   0000040000000000000001     FETCH      FIELDS(#LDETAIL)  FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(3)
FRMNT03   0000040100000000000001C80: @@INC_IDX  IDX_NAME(CF)
FRMNT03   0000040200000000000001     @@GOTO     LABEL(C70)
FRMNT03   0000040300000000000001C90: /* **********                                                         */
FRMNT03   0000040400000000000001     ENDROUTINE
FRMNT03   0000040500000000000001     /* ********** Clear space used by all working lists                   */
FRMNT03   0000040600000000000001     @@CLR_LST  NUMBER(1)
FRMNT03   0000040700000000000001     @@CLR_LST  NUMBER(2)
FRMNT03   0000040800000000000001     @@CLR_LST  NUMBER(3)
FRMNT03   0000040900000000000001     @@CLR_LST  NUMBER(4)
FRMNT03   0000041000000000000001     @@CLR_LST  NUMBER(5)
FRMNT03   0000041100000000000001     @@CLR_LST  NUMBER(6)
FRMNT03   0000041200000000000001     @@CLR_LST  NUMBER(9)
FRMNT03   0000041300000000000001     @@CLR_LST  NUMBER(11)
FRMNT03   0000041400000000000001     @@CLR_LST  NUMBER(22)
FRMNT03   0000041500000000000001     @@CLR_LST  NUMBER(66)
FRMNT03   0000041600000000000001     @@CLR_LST  NUMBER(77)
FRMNT04   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRMNT04   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRMNT04   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRMNT04   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRMNT04   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRMNT04   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRMNT04   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000000900000000000001     /* ********** ======================================================= */
FRMNT04   0000001000000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRMNT04   0000001100000000000001     /* ********** ======================================================= */
FRMNT04   0000001200000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP050 HELP030 HELP040 HELP060)
FRMNT04   0000001300000000000001     /* ********** ======================================================= */
FRMNT04   0000001400000000000001     /* ********** GET NAMES OF UP TO 50 RELATED FILES                     */
FRMNT04   0000001500000000000001     /* ********** ======================================================= */
FRMNT04   0000001600000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the base file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial' 'list of available files to be displayed) or in full (to cause a full list' 'of available files to be displayed). When a list of files is displayed,' 'the file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP050 HELP030 HELP040 HELP060)
FRMNT04   0000001700000000000001     /* ********** ======================================================= */
FRMNT04   0000001800000000000001     /* ********** ASK FOR NAME OF "HEADER" ENTITY                         */
FRMNT04   0000001900000000000001     /* ********** ======================================================= */
FRMNT04   0000002000000000000001     @@QUESTION PROMPT('Specify the name of the object that the "header" file represents') ANSWER(@@CANS001) EXTEND('123456789012345' 'Specify a word that describes the object that the "header" file being' 'used by this template represents. Use singular form, use at most 15' 'characters and do NOT use any single quote characters in the name.' 'Use the HELP key to view more information about this question or to view' 'examples of the type of answers that you would give to this question.') HELPIDS(HELP070)
FRMNT04   0000002100000000000001     /* ********** ======================================================= */
FRMNT04   0000002200000000000001     /* ********** ASK FOR NAME OF "DETAIL" ENTITY                         */
FRMNT04   0000002300000000000001     /* ********** ======================================================= */
FRMNT04   0000002400000000000001     @@QUESTION PROMPT('Specify the name of the object that the "detail" file represents') ANSWER(@@CANS002) EXTEND('123456789012345' 'Specify a word that describes the object that the "detail" file being' 'used by this template represents. Use singular form, use at most 15' 'characters and do NOT use any single quote characters in the name.' 'Use the HELP key to view more information about this question or to view' 'examples of the type of answers that you would give to this question.') HELPIDS(HELP080)
FRMNT04   0000002500000000000001     /* ********** ======================================================= */
FRMNT04   0000002600000000000001     /* ********** LIST 4 CONTAINS THE HEADER FILES KEYS                   */
FRMNT04   0000002700000000000001     /* ********** LOAD DETAILS OF FIELDS OF "HEADER" INTO LIST 1          */
FRMNT04   0000002800000000000001     /* ********** LOAD DETAILS OF FIELDS OF "BROWSE" INTO LIST 2          */
FRMNT04   0000002900000000000001     /* ********** LIST 3 IS USED AS A WORKING LIST ONLY                   */
FRMNT04   0000003000000000000001     /* ********** LIST 4 CONTAINS THE HEADER FILES KEYS                   */
FRMNT04   0000003100000000000001     /* ********** LIST 5 CONTAINS THE HEADER/DETAIL RELATED KEYS          */
FRMNT04   0000003200000000000001     /* ********** LIST 22 CONTAINS INPUT DETAIL FIELDS                    */
FRMNT04   0000003300000000000001     /* ********** LIST 33 CONTAINS DETAIL RELATED FIELDS                  */
FRMNT04   0000003400000000000001     /* ********** LIST 34 DELETE CHECK FIELDS FROM DETAIL                 */
FRMNT04   0000003500000000000001     /* ********** LIST 66 DISPLAY DETAIL RELATED FIELDS                   */
FRMNT04   0000003600000000000001     /* ********** ======================================================= */
FRMNT04   0000003700000000000001     @@CLR_LST  NUMBER(1)
FRMNT04   0000003800000000000001     @@CLR_LST  NUMBER(2)
FRMNT04   0000003900000000000001     @@CLR_LST  NUMBER(6)
FRMNT04   0000004000000000000001     @@CLR_LST  NUMBER(3)
FRMNT04   0000004100000000000001     @@CLR_LST  NUMBER(33)
FRMNT04   0000004200000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRMNT04   0000004300000000000001     @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(1)
FRMNT04   0000004400000000000001     @@CLR_LST  NUMBER(4)
FRMNT04   0000004500000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(4)
FRMNT04   0000004600000000000001     @@CLR_LST  NUMBER(5)
FRMNT04   0000004700000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRMNT04   0000004800000000000001A10: @@LABEL
FRMNT04   0000004900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRMNT04   0000005000000000000001     @@CLR_LST  NUMBER(3)
FRMNT04   0000005100000000000001     @@CLR_LST  NUMBER(8)
FRMNT04   0000005200000000000001     @@RTV_KEYS OF_FILE(CF) INTO_LST(8)
FRMNT04   0000005300000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(3)
FRMNT04   0000005400000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A12)
FRMNT04   0000005500000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(A11)
FRMNT04   0000005600000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(2)
FRMNT04   0000005700000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(6)
FRMNT04   0000005800000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(5)
FRMNT04   0000005900000000000001     @@GOTO     LABEL(A14)
FRMNT04   0000006000000000000001A11: @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(33)
FRMNT04   0000006100000000000001     @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(2)
FRMNT04   0000006200000000000001     @@GOTO     LABEL(A14)
FRMNT04   0000006300000000000001A12: @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(1) IF_GT(A13)
FRMNT04   0000006400000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(1)
FRMNT04   0000006500000000000001     @@GOTO     LABEL(A14)
FRMNT04   0000006600000000000001A13: @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(1)
FRMNT04   0000006700000000000001     @@GOTO     LABEL(A14)
FRMNT04   0000006800000000000001A14: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000006900000000000001     @@GOTO     LABEL(A10)
FRMNT04   0000007000000000000001A20: @@LABEL
FRMNT04   0000007100000000000001     /* ********** ======================================================= */
FRMNT04   0000007200000000000001     /* ********** ASK THE USER TO SELECT THE HEADER FIELDS REQUIRED       */
FRMNT04   0000007300000000000001     /* ********** ======================================================= */
FRMNT04   0000007400000000000001     @@CLR_LST  NUMBER(11)
FRMNT04   0000007500000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((11 'Fields on' 'Header' 'Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP050 HELP030 HELP040 HELP060)
FRMNT04   0000007600000000000001     /* ********** ======================================================= */
FRMNT04   0000007700000000000001     /* ********** ASK THE USER TO SELECT THE BROWSE FIELDS REQUIRED       */
FRMNT04   0000007800000000000001     /* ********** ======================================================= */
FRMNT04   0000007900000000000001     @@CLR_LST  NUMBER(22)
FRMNT04   0000008000000000000001     @@MAK_LSTS FROM_LSTS(2)  INTO_LSTS((22 'Input Fields' 'In Detail' 'Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP050 HELP030 HELP040 HELP060)
FRMNT04   0000008100000000000001     @@CLR_LST  NUMBER(66)
FRMNT04   0000008200000000000001     @@CLR_LST  NUMBER(34)
FRMNT04   0000008300000000000001     @@MAK_LSTS FROM_LSTS(2)  INTO_LSTS((66 'Fields to be' 'Displayed in' 'Detail Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP050 HELP030 HELP040 HELP060)
FRMNT04   0000008400000000000001     @@MRG_LSTS FROM_LSTS((22)) INTO_LST(34)
FRMNT04   0000008500000000000001     @@MRG_LSTS FROM_LSTS((66 *OUTPUT)) INTO_LST(22)
FRMNT04   0000008600000000000001     /* ********** ======================================================= */
FRMNT04   0000008700000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 11 OR LIST 22    */
FRMNT04   0000008800000000000001     /* ********** AS *HIDDEN FIELDS. LIST 3 IS A WORKING LIST ONLY        */
FRMNT04   0000008900000000000001     /* ********** ======================================================= */
FRMNT04   0000009000000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT04   0000009100000000000001A30: @@LABEL
FRMNT04   0000009200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRMNT04   0000009300000000000001     @@CLR_LST  NUMBER(3)
FRMNT04   0000009400000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT04   0000009500000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A34)
FRMNT04   0000009600000000000001     /* ********** @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(A34)        */
FRMNT04   0000009700000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(22)
FRMNT04   0000009800000000000001     @@GOTO     LABEL(A36)
FRMNT04   0000009900000000000001A34: @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(11)
FRMNT04   0000010000000000000001A36: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000010100000000000001     @@GOTO     LABEL(A30)
FRMNT04   0000010200000000000001A40: @@LABEL
FRMNT04   0000010300000000000001     /* ********** ======================================================= */
FRMNT04   0000010400000000000001     /* ********** GENERATION OF RDML CODE STARTS HERE                     */
FRMNT04   0000010500000000000001     /* ********** ======================================================= */
FRMNT04   0000010600000000000001     @@COMMENT  COMMENT('Groups, definitions and declarations')
FRMNT04   0000010700000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000010800000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRMNT04   0000010900000000000001     DEFINE     FIELD(#NEXTROUTN) TYPE(*CHAR) LENGTH(10)
FRMNT04   0000011000000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000011100000000000001     @@COMMENT  COMMENT('Program Mainline')
FRMNT04   0000011200000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000011300000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT04   0000011400000000000001     BEGIN_LOOP
FRMNT04   0000011500000000000001     CASE       OF_FIELD(#NEXTROUTN)
FRMNT04   0000011600000000000001     WHEN       VALUE_IS('= GET_KEY')
FRMNT04   0000011700000000000001     EXECUTE    SUBROUTINE(GET_KEY)
FRMNT04   0000011800000000000001     WHEN       VALUE_IS('= WRK_DATA' '= REDISPLAY')
FRMNT04   0000011900000000000001     EXECUTE    SUBROUTINE(WRK_DATA)
FRMNT04   0000012000000000000001     ENDCASE
FRMNT04   0000012100000000000001     END_LOOP
FRMNT04   0000012200000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000012300000000000001     @@COMMENT  COMMENT('GETKEY : Get keys of record to create or review')
FRMNT04   0000012400000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000012500000000000001     SUBROUTINE NAME(GET_KEY)
FRMNT04   0000012600000000000001     @@COMMENT  COMMENT('Groups, definitions and declarations')
FRMNT04   0000012700000000000001     GROUP_BY   NAME(#KEY) FIELDS(@@LST04)
FRMNT04   0000012800000000000001     DEF_LIST   NAME(#SAVKEY) FIELDS(@@LST04)  TYPE(*WORKING) ENTRYS(1)
FRMNT04   0000012900000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT04   0000013000000000000001     CLR_LIST   NAMED(#SAVKEY)
FRMNT04   0000013100000000000001     CHANGE     FIELD(#KEY) TO(*DEFAULT)
FRMNT04   0000013200000000000001     MESSAGE    MSGTXT('Specify Identifier of @@CANS001 to Create/Review/Change or Delete')
FRMNT04   0000013300000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT04   0000013400000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRMNT04   0000013500000000000001     REQUEST    FIELDS((#KEY)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) PANEL_TITL('Specify @@CANS001')
FRMNT04   0000013600000000000001     @@GOTO     LABEL(L92)
FRMNT04   0000013700000000000001L91: @@LABEL
FRMNT04   0000013800000000000001     REQUEST    FIELDS((#KEY)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) PANEL_TITL('Specify @@CANS001') CURSOR_LOC(*ATFIELD #@@LEL0401)
FRMNT04   0000013900000000000001L92: @@LABEL
FRMNT04   0000014000000000000001     ADD_ENTRY  TO_LIST(#SAVKEY)
FRMNT04   0000014100000000000001     CHANGE     FIELD(#NEXTROUTN) TO('WRK_DATA')
FRMNT04   0000014200000000000001     ENDROUTINE
FRMNT04   0000014300000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000014400000000000001     @@COMMENT  COMMENT('WRK_DATA   : Work with @@CANS001 details')
FRMNT04   0000014500000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000014600000000000001     SUBROUTINE NAME(WRK_DATA)
FRMNT04   0000014700000000000001     /* ********** Work with employee details                              */
FRMNT04   0000014800000000000001     /* ********** ******************************************************* */
FRMNT04   0000014900000000000001     DEFINE     FIELD(#HDRFILRRN) REFFLD(#PRIFILRRN)
FRMNT04   0000015000000000000001     DEFINE     FIELD(#DETFILRRN) REFFLD(#PRIFILRRN)
FRMNT04   0000015100000000000001     DEFINE     FIELD(#ERRORS) TYPE(*DEC) LENGTH(7) DECIMALS(0)
FRMNT04   0000015200000000000001     DEF_LIST   NAME(#DETAILS) FIELDS((#DETFILRRN *HIDDEN) @@LST22) COUNTER(#LISTENTRY) TOP_ENTRY(#LISTTOP)
FRMNT04   0000015300000000000001     GROUP_BY   NAME(#IDETAILS) FIELDS(@@LST34)
FRMNT04   0000015400000000000001     /* **********                                                         */
FRMNT04   0000015500000000000001     GROUP_BY   NAME(#HEADER) FIELDS(@@LST11)
FRMNT04   0000015600000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT04   0000015700000000000001     @@COMMENT  COMMENT('Load existing @@CANS001 data (if any)')
FRMNT04   0000015800000000000001     EXECUTE    SUBROUTINE(GET_DATA)
FRMNT04   0000015900000000000001     @@COMMENT  COMMENT('Do until end of this routine is requested')
FRMNT04   0000016000000000000001     DOUNTIL    COND('#NEXTROUTN *NE WRK_DATA')
FRMNT04   0000016100000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT04   0000016200000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRMNT04   0000016300000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L93)
FRMNT04   0000016400000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*ACROSS) IDENTIFY(*LABEL) BROWSELIST(#DETAILS) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) ADD_KEY(*YES) CHANGE_KEY(*YES) DELETE_KEY(*YES) PANEL_TITL('Work with @@CANS001 Details')
FRMNT04   0000016500000000000001     @@GOTO     LABEL(L94)
FRMNT04   0000016600000000000001L93: @@LABEL
FRMNT04   0000016700000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*ACROSS) IDENTIFY(*LABEL) BROWSELIST(#DETAILS) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) ADD_KEY(*YES) CHANGE_KEY(*YES) DELETE_KEY(*YES) PANEL_TITL('Work with @@CANS001 Details') CURSOR_LOC(*ATFIELD #@@LEL1101)
FRMNT04   0000016800000000000001L94: @@LABEL
FRMNT04   0000016900000000000001     CHANGE     FIELD(#NEXTROUTN) TO('WRK_DATA')
FRMNT04   0000017000000000000001     @@COMMENT  COMMENT('If @@CANS001 is being displayed')
FRMNT04   0000017100000000000001     IF_MODE    IS(*DISPLAY)
FRMNT04   0000017200000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT04   0000017300000000000001     ENDIF
FRMNT04   0000017400000000000001     @@COMMENT  COMMENT('If existing @@CANS001 is being updated')
FRMNT04   0000017500000000000001     IF_MODE    IS(*CHANGE)
FRMNT04   0000017600000000000001     EXECUTE    SUBROUTINE(VAL_DATA)
FRMNT04   0000017700000000000001     IF         COND('#ERRORS = 0')
FRMNT04   0000017800000000000001     CHANGE     FIELD(#NEXTROUTN) TO('REDISPLAY')
FRMNT04   0000017900000000000001     ENDIF
FRMNT04   0000018000000000000001     ENDIF
FRMNT04   0000018100000000000001     @@COMMENT  COMMENT('If new @@CANS001 is being created')
FRMNT04   0000018200000000000001     IF_MODE    IS(*ADD)
FRMNT04   0000018300000000000001     SET_MODE   TO(*CHANGE)
FRMNT04   0000018400000000000001     SELECTLIST NAMED(#DETAILS)
FRMNT04   0000018500000000000001     UPD_ENTRY  IN_LIST(#DETAILS)
FRMNT04   0000018600000000000001     ENDSELECT
FRMNT04   0000018700000000000001     CHANGE     FIELD(#LISTTOP) TO(#LISTENTRY)
FRMNT04   0000018800000000000001     CHANGE     FIELD(#DETAILS) TO(*NULL)
FRMNT04   0000018900000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SAVKEY)
FRMNT04   0000019000000000000001     BEGIN_LOOP FROM(1) TO(20)
FRMNT04   0000019100000000000001     ADD_ENTRY  TO_LIST(#DETAILS)
FRMNT04   0000019200000000000001     END_LOOP
FRMNT04   0000019300000000000001     ENDIF
FRMNT04   0000019400000000000001     @@COMMENT  COMMENT('If existing @@CANS001 is being deleted')
FRMNT04   0000019500000000000001     IF_MODE    IS(*DELETE)
FRMNT04   0000019600000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT04   0000019700000000000001A50: @@LABEL
FRMNT04   0000019800000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A60)
FRMNT04   0000019900000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(A55)
FRMNT04   0000020000000000000001     DELETE     FROM_FILE(@@FNAMECF) WITH_KEY(@@LST05)
FRMNT04   0000020100000000000001     @@GOTO     LABEL(A60)
FRMNT04   0000020200000000000001A55: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000020300000000000001     @@GOTO     LABEL(A50)
FRMNT04   0000020400000000000001A60: @@LABEL
FRMNT04   0000020500000000000001     DELETE     FROM_FILE(@@FNAME01)
FRMNT04   0000020600000000000001     MESSAGE    MSGTXT('@@CANS001 successfully deleted')
FRMNT04   0000020700000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT04   0000020800000000000001     ENDIF
FRMNT04   0000020900000000000001     @@COMMENT  COMMENT(' ')
FRMNT04   0000021000000000000001     ENDUNTIL
FRMNT04   0000021100000000000001     ENDROUTINE
FRMNT04   0000021200000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000021300000000000001     @@COMMENT  COMMENT('GET_DATA :Load up @@CANS001 details')
FRMNT04   0000021400000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000021500000000000001     SUBROUTINE NAME(GET_DATA)
FRMNT04   0000021600000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT04   0000021700000000000001     CLR_LIST   NAMED(#DETAILS)
FRMNT04   0000021800000000000001     FETCH      FIELDS((#HEADER)) FROM_FILE(@@FNAME01) WITH_KEY(@@LST04) RETURN_RRN(#HDRFILRRN)
FRMNT04   0000021900000000000001     IF_STATUS  IS(*OKAY)
FRMNT04   0000022000000000000001     SET_MODE   TO(*DISPLAY)
FRMNT04   0000022100000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT04   0000022200000000000001A70: @@LABEL
FRMNT04   0000022300000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A90)
FRMNT04   0000022400000000000001     @@IF       COND((*IF @@FAREACF *EQ B)) GOTO(A80)
FRMNT04   0000022500000000000001     @@CLR_LST  NUMBER(3)
FRMNT04   0000022600000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT04   0000022700000000000001     FETCH      FIELDS((#HEADER)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(3)
FRMNT04   0000022800000000000001A80: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000022900000000000001     @@GOTO     LABEL(A70)
FRMNT04   0000023000000000000001A90: /* **********                                                         */
FRMNT04   0000023100000000000001     @@COMMENT  COMMENT('Load Detail information')
FRMNT04   0000023200000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT04   0000023300000000000001C40: @@LABEL
FRMNT04   0000023400000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(C60)
FRMNT04   0000023500000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(C50)
FRMNT04   0000023600000000000001     SELECT     FIELDS((#DETAILS)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST05) RETURN_RRN(#DETFILRRN)
FRMNT04   0000023700000000000001     @@GOTO     LABEL(C60)
FRMNT04   0000023800000000000001C50: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000023900000000000001     @@GOTO     LABEL(C40)
FRMNT04   0000024000000000000001C60: @@LABEL
FRMNT04   0000024100000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT04   0000024200000000000001C70: @@LABEL
FRMNT04   0000024300000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(C90)
FRMNT04   0000024400000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(C80)
FRMNT04   0000024500000000000001     @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(C80)
FRMNT04   0000024600000000000001     @@CLR_LST  NUMBER(3)
FRMNT04   0000024700000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT04   0000024800000000000001     FETCH      FIELDS(#DETAILS)  FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(3)
FRMNT04   0000024900000000000001C80: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000025000000000000001     @@GOTO     LABEL(C70)
FRMNT04   0000025100000000000001C90: /* **********                                                         */
FRMNT04   0000025200000000000001     ADD_ENTRY  TO_LIST(#DETAILS)
FRMNT04   0000025300000000000001     ENDSELECT
FRMNT04   0000025400000000000001     CHANGE     FIELD(#LISTTOP) TO(1)
FRMNT04   0000025500000000000001     ELSE
FRMNT04   0000025600000000000001     @@COMMENT  COMMENT('Header record does not exist')
FRMNT04   0000025700000000000001     SET_MODE   TO(*CHANGE)
FRMNT04   0000025800000000000001     CHANGE     FIELD(#HEADER) TO(*DEFAULT)
FRMNT04   0000025900000000000001     CHANGE     FIELD(#DETAILS)  TO(*NULL)
FRMNT04   0000026000000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SAVKEY)
FRMNT04   0000026100000000000001     INZ_LIST   NAMED(#DETAILS) NUM_ENTRYS(10)
FRMNT04   0000026200000000000001     ENDIF
FRMNT04   0000026300000000000001     ENDROUTINE
FRMNT04   0000026400000000000001     /* ********** ****************************************************    */
FRMNT04   0000026500000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000026600000000000001     @@COMMENT  COMMENT('VAL_DATA   : VALIDATE INPUT DATA details')
FRMNT04   0000026700000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000026800000000000001     SUBROUTINE NAME(VAL_DATA)
FRMNT04   0000026900000000000001     CHANGE     FIELD(#ERRORS) TO(0)
FRMNT04   0000027000000000000001     BEGINCHECK KEEP_COUNT(#ERRORS)
FRMNT04   0000027100000000000001     IF         COND('#HDRFILRRN *EQ 0')
FRMNT04   0000027200000000000001     INSERT     FIELDS((#HEADER)) TO_FILE(@@FNAME01) VAL_ERROR(*NEXT) RETURN_RRN(#HDRFILRRN)
FRMNT04   0000027300000000000001     ELSE
FRMNT04   0000027400000000000001     UPDATE     FIELDS((#HEADER)) IN_FILE(@@FBASP01) VAL_ERROR(*NEXT) WITH_RRN(#HDRFILRRN)
FRMNT04   0000027500000000000001     ENDIF
FRMNT04   0000027600000000000001     ENDCHECK   IF_ERROR(V90)
FRMNT04   0000027700000000000001     SELECTLIST NAMED(#DETAILS) GET_ENTRYS(*ALTERED)
FRMNT04   0000027800000000000001     BEGINCHECK KEEP_COUNT(#ERRORS)
FRMNT04   0000027900000000000001     IF_NULL    FIELD(#IDETAILS)
FRMNT04   0000028000000000000001     IF         COND('#DETFILRRN *GT 0')
FRMNT04   0000028100000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT04   0000028200000000000001B10: @@LABEL
FRMNT04   0000028300000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B30)
FRMNT04   0000028400000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B20)
FRMNT04   0000028500000000000001     DELETE     FROM_FILE(@@FBASPCF) VAL_ERROR(*NEXT) WITH_RRN(#DETFILRRN)
FRMNT04   0000028600000000000001     @@GOTO     LABEL(B30)
FRMNT04   0000028700000000000001B20: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000028800000000000001     @@GOTO     LABEL(B10)
FRMNT04   0000028900000000000001B30: IF_STATUS  IS(*OKAY)
FRMNT04   0000029000000000000001     CHANGE     FIELD(#DETAILS) TO(*NULL)
FRMNT04   0000029100000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SAVKEY)
FRMNT04   0000029200000000000001     MESSAGE    MSGTXT('Detail record succesfully Deleted')
FRMNT04   0000029300000000000001     ENDIF
FRMNT04   0000029400000000000001     ENDIF
FRMNT04   0000029500000000000001     ELSE
FRMNT04   0000029600000000000001     IF         COND('#DETFILRRN *GT 0')
FRMNT04   0000029700000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT04   0000029800000000000001B40: @@LABEL
FRMNT04   0000029900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B60)
FRMNT04   0000030000000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B50)
FRMNT04   0000030100000000000001     UPDATE     FIELDS((#DETAILS)) IN_FILE(@@FBASPCF) VAL_ERROR(*NEXT) WITH_RRN(#DETFILRRN)
FRMNT04   0000030200000000000001     @@GOTO     LABEL(B60)
FRMNT04   0000030300000000000001B50: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000030400000000000001     @@GOTO     LABEL(B40)
FRMNT04   0000030500000000000001B60: @@LABEL
FRMNT04   0000030600000000000001     ELSE
FRMNT04   0000030700000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SAVKEY)
FRMNT04   0000030800000000000001     @@COMMENT  COMMENT('Handle entry of a new line')
FRMNT04   0000030900000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT04   0000031000000000000001B70: @@LABEL
FRMNT04   0000031100000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B90)
FRMNT04   0000031200000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B80)
FRMNT04   0000031300000000000001     INSERT     FIELDS((#DETAILS)) TO_FILE(@@FNAMECF) VAL_ERROR(*NEXT) RETURN_RRN(#DETFILRRN)
FRMNT04   0000031400000000000001     @@GOTO     LABEL(B90)
FRMNT04   0000031500000000000001B80: @@INC_IDX  IDX_NAME(CF)
FRMNT04   0000031600000000000001     @@GOTO     LABEL(B70)
FRMNT04   0000031700000000000001B90: @@LABEL
FRMNT04   0000031800000000000001     ENDIF
FRMNT04   0000031900000000000001     ENDIF
FRMNT04   0000032000000000000001     ENDCHECK   IF_ERROR(*NEXT)
FRMNT04   0000032100000000000001     UPD_ENTRY  IN_LIST(#DETAILS)
FRMNT04   0000032200000000000001     ENDSELECT
FRMNT04   0000032300000000000001V90: ENDROUTINE
FRMNT04   0000032400000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT04   0000032500000000000001     /* ********** Clear space used by all working lists                   */
FRMNT04   0000032600000000000001     @@CLR_LST  NUMBER(1)
FRMNT04   0000032700000000000001     @@CLR_LST  NUMBER(2)
FRMNT04   0000032800000000000001     @@CLR_LST  NUMBER(3)
FRMNT04   0000032900000000000001     @@CLR_LST  NUMBER(4)
FRMNT04   0000033000000000000001     @@CLR_LST  NUMBER(5)
FRMNT04   0000033100000000000001     @@CLR_LST  NUMBER(6)
FRMNT04   0000033200000000000001     @@CLR_LST  NUMBER(9)
FRMNT04   0000033300000000000001     @@CLR_LST  NUMBER(11)
FRMNT04   0000033400000000000001     @@CLR_LST  NUMBER(22)
FRMNT04   0000033500000000000001     @@CLR_LST  NUMBER(33)
FRMNT04   0000033600000000000001     @@CLR_LST  NUMBER(34)
FRMNT04   0000033700000000000001     @@CLR_LST  NUMBER(66)
FRMNT05   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRMNT05   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRMNT05   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRMNT05   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRMNT05   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRMNT05   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRMNT05   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000000900000000000001     /* ********** ======================================================= */
FRMNT05   0000001000000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRMNT05   0000001100000000000001     /* ********** ======================================================= */
FRMNT05   0000001200000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP015 HELP070 HELP030 HELP040 HELP050 HELP060)
FRMNT05   0000001300000000000001     /* ********** ======================================================= */
FRMNT05   0000001400000000000001     /* ********** GET NAMES OF UP TO 50 RELATED FILES                     */
FRMNT05   0000001500000000000001     /* ********** ======================================================= */
FRMNT05   0000001600000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the base header and detail files used by this template') EXTEND('The files may be specified in full, partially (to cause a partial' 'list of available files to be displayed) or left blank (to cause a full' 'list of available files to be displayed). When a list of files is ' 'displayed, the files required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP015 HELP070 HELP030 HELP040 HELP050 HELP060)
FRMNT05   0000001700000000000001     /* ********** ======================================================= */
FRMNT05   0000001800000000000001     /* ********** ASK FOR NAME OF "HEADER" ENTITY                         */
FRMNT05   0000001900000000000001     /* ********** ======================================================= */
FRMNT05   0000002000000000000001     @@QUESTION PROMPT('Specify the name of the object that the "header" file represents') ANSWER(@@CANS001) EXTEND('123456789012345' 'Specify a word that describes the object that the "header" file being' 'used by this template represents. Use singular form, use at most 15' 'characters and do NOT use any single quote characters in the name.' 'Use the HELP key to view more information about this question or to view' 'examples of the type of answers that you would give to this question.') HELPIDS(HELP018)
FRMNT05   0000002100000000000001     /* ********** ======================================================= */
FRMNT05   0000002200000000000001     /* ********** ASK FOR NAME OF "DETAIL" ENTITY                         */
FRMNT05   0000002300000000000001     /* ********** ======================================================= */
FRMNT05   0000002400000000000001     @@QUESTION PROMPT('Specify the name of the object that the "detail" file represents') ANSWER(@@CANS002) EXTEND('123456789012345' 'Specify a word that describes the object that the "detail" file being' 'used by this template represents. Use singular form, use at most 15' 'characters and do NOT use any single quote characters in the name.' 'Use the HELP key to view more information about this question or to view' 'examples of the type of answers that you would give to this question.') HELPIDS(HELP019)
FRMNT05   0000002500000000000001     /* ********** ======================================================= */
FRMNT05   0000002600000000000001     @@QUESTION PROMPT('Enter a 1 to 2 character prefix for variables defined by this Template') ANSWER(@@CANS010) EXTEND('Use from 1 to 2 Alphabetic Characters only.' 'Use the HELP key to view more information about this question or to view' 'Examples of the type of answers you would give to this question') LOWER(*NO) HELPIDS(HELP021)
FRMNT05   0000002700000000000001     /* ********** ======================================================= */
FRMNT05   0000002800000000000001     /* ********** LIST 4 CONTAINS THE HEADER FILES KEYS                   */
FRMNT05   0000002900000000000001     /* ********** LOAD DETAILS OF FIELDS OF "HEADER" INTO LIST 1          */
FRMNT05   0000003000000000000001     /* ********** LOAD DETAILS OF FIELDS OF "BROWSE" INTO LIST 2          */
FRMNT05   0000003100000000000001     /* ********** LIST 3 IS USED AS A WORKING LIST ONLY                   */
FRMNT05   0000003200000000000001     /* ********** LIST 4 CONTAINS THE HEADER FILES KEYS                   */
FRMNT05   0000003300000000000001     /* ********** LIST 5 CONTAINS THE HEADER/DETAIL RELATED KEYS          */
FRMNT05   0000003400000000000001     /* ********** LIST 22 CONTAINS INPUT DETAIL FIELDS *OUTPUT            */
FRMNT05   0000003500000000000001     /* ********** LIST 22 CONTAINS INPUT DETAIL FIELDS                    */
FRMNT05   0000003600000000000001     /* ********** LIST 33 CONTAINS DETAIL RELATED FIELDS                  */
FRMNT05   0000003700000000000001     /* ********** LIST 34 DELETE CHECK FIELDS FROM DETAIL                 */
FRMNT05   0000003800000000000001     /* ********** LIST 66 DISPLAY DETAIL RELATED FIELDS                   */
FRMNT05   0000003900000000000001     /* ********** ======================================================= */
FRMNT05   0000004000000000000001     @@CLR_LST  NUMBER(1)
FRMNT05   0000004100000000000001     @@CLR_LST  NUMBER(2)
FRMNT05   0000004200000000000001     @@CLR_LST  NUMBER(6)
FRMNT05   0000004300000000000001     @@CLR_LST  NUMBER(3)
FRMNT05   0000004400000000000001     @@CLR_LST  NUMBER(33)
FRMNT05   0000004500000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRMNT05   0000004600000000000001     @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(1)
FRMNT05   0000004700000000000001     @@CLR_LST  NUMBER(4)
FRMNT05   0000004800000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(4)
FRMNT05   0000004900000000000001     @@CLR_LST  NUMBER(5)
FRMNT05   0000005000000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRMNT05   0000005100000000000001A10: @@LABEL
FRMNT05   0000005200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRMNT05   0000005300000000000001     @@CLR_LST  NUMBER(3)
FRMNT05   0000005400000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(3)
FRMNT05   0000005500000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A12)
FRMNT05   0000005600000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(A11)
FRMNT05   0000005700000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(2)
FRMNT05   0000005800000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(6)
FRMNT05   0000005900000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(5)
FRMNT05   0000006000000000000001     @@GOTO     LABEL(A14)
FRMNT05   0000006100000000000001A11: @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(33)
FRMNT05   0000006200000000000001     @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(2)
FRMNT05   0000006300000000000001     @@GOTO     LABEL(A14)
FRMNT05   0000006400000000000001A12: @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(1) IF_GT(A13)
FRMNT05   0000006500000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(1)
FRMNT05   0000006600000000000001     @@GOTO     LABEL(A14)
FRMNT05   0000006700000000000001A13: @@MRG_LSTS FROM_LSTS((3 *OUTPUT)) INTO_LST(1)
FRMNT05   0000006800000000000001     @@GOTO     LABEL(A14)
FRMNT05   0000006900000000000001A14: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000007000000000000001     @@GOTO     LABEL(A10)
FRMNT05   0000007100000000000001A20: @@LABEL
FRMNT05   0000007200000000000001     /* ********** ======================================================= */
FRMNT05   0000007300000000000001     /* ********** ASK THE USER TO SELECT THE HEADER FIELDS REQUIRED       */
FRMNT05   0000007400000000000001     /* ********** ======================================================= */
FRMNT05   0000007500000000000001     @@CLR_LST  NUMBER(11)
FRMNT05   0000007600000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((11 'Fields on' 'Header' 'Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP015 HELP070 HELP030 HELP040 HELP050 HELP060)
FRMNT05   0000007700000000000001     /* ********** ======================================================= */
FRMNT05   0000007800000000000001     /* ********** ASK THE USER TO SELECT THE BROWSE FIELDS REQUIRED       */
FRMNT05   0000007900000000000001     /* ********** ======================================================= */
FRMNT05   0000008000000000000001     @@CLR_LST  NUMBER(22)
FRMNT05   0000008100000000000001     @@CLR_LST  NUMBER(23)
FRMNT05   0000008200000000000001     @@MAK_LSTS FROM_LSTS(2) INTO_LSTS((23 'INPUT Fields' 'In Detail' 'Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP015 HELP070 HELP030 HELP040 HELP050 HELP060)
FRMNT05   0000008300000000000001     @@MRG_LSTS FROM_LSTS((23 *OUTPUT)) INTO_LST(22)
FRMNT05   0000008400000000000001     @@CLR_LST  NUMBER(66)
FRMNT05   0000008500000000000001     @@CLR_LST  NUMBER(34)
FRMNT05   0000008600000000000001     @@MAK_LSTS FROM_LSTS(2)  INTO_LSTS((66 'Fields to be' 'DISPLAYED in' 'Detail Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP015 HELP070 HELP030 HELP040 HELP050 HELP060)
FRMNT05   0000008700000000000001     @@MRG_LSTS FROM_LSTS((23)) INTO_LST(34)
FRMNT05   0000008800000000000001     @@MRG_LSTS FROM_LSTS((66 *OUTPUT)) INTO_LST(34)
FRMNT05   0000008900000000000001     @@MRG_LSTS FROM_LSTS((66 *OUTPUT)) INTO_LST(22)
FRMNT05   0000009000000000000001     /* ********** ======================================================= */
FRMNT05   0000009100000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 11 OR LIST 22    */
FRMNT05   0000009200000000000001     /* ********** AS *HIDDEN FIELDS. LIST 3 IS A WORKING LIST ONLY        */
FRMNT05   0000009300000000000001     /* ********** ======================================================= */
FRMNT05   0000009400000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT05   0000009500000000000001A30: @@LABEL
FRMNT05   0000009600000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRMNT05   0000009700000000000001     @@CLR_LST  NUMBER(3)
FRMNT05   0000009800000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT05   0000009900000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A34)
FRMNT05   0000010000000000000001     /* ********** @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(A34)        */
FRMNT05   0000010100000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(22)
FRMNT05   0000010200000000000001     @@GOTO     LABEL(A36)
FRMNT05   0000010300000000000001A34: @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(11)
FRMNT05   0000010400000000000001A36: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000010500000000000001     @@GOTO     LABEL(A30)
FRMNT05   0000010600000000000001A40: @@LABEL
FRMNT05   0000010700000000000001     /* ********** ======================================================= */
FRMNT05   0000010800000000000001     /* ********** GENERATION OF RDML CODE STARTS HERE                     */
FRMNT05   0000010900000000000001     /* ********** ======================================================= */
FRMNT05   0000011000000000000001     @@COMMENT  COMMENT('Groups, definitions and declarations')
FRMNT05   0000011100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000011200000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRMNT05   0000011300000000000001     DEFINE     FIELD(#NEXTROUTN) TYPE(*CHAR) LENGTH(10)
FRMNT05   0000011400000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000011500000000000001     @@COMMENT  COMMENT('Program Mainline')
FRMNT05   0000011600000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000011700000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT05   0000011800000000000001     BEGIN_LOOP
FRMNT05   0000011900000000000001     CASE       OF_FIELD(#NEXTROUTN)
FRMNT05   0000012000000000000001     WHEN       VALUE_IS('= GET_KEY')
FRMNT05   0000012100000000000001     EXECUTE    SUBROUTINE(GET_KEY)
FRMNT05   0000012200000000000001     WHEN       VALUE_IS('= WRK_DATA' '= REDISPLAY')
FRMNT05   0000012300000000000001     EXECUTE    SUBROUTINE(WRK_DATA)
FRMNT05   0000012400000000000001     ENDCASE
FRMNT05   0000012500000000000001     END_LOOP
FRMNT05   0000012600000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000012700000000000001     @@COMMENT  COMMENT('GETKEY : Get keys of record to create or review')
FRMNT05   0000012800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000012900000000000001     SUBROUTINE NAME(GET_KEY)
FRMNT05   0000013000000000000001     @@COMMENT  COMMENT('Groups, definitions and declarations')
FRMNT05   0000013100000000000001     GROUP_BY   NAME(#KEY) FIELDS(@@LST04)
FRMNT05   0000013200000000000001     DEF_LIST   NAME(#SAVKEY) FIELDS(@@LST04)  TYPE(*WORKING) ENTRYS(1)
FRMNT05   0000013300000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT05   0000013400000000000001     CHANGE     FIELD(#KEY) TO(*DEFAULT)
FRMNT05   0000013500000000000001     CLR_LIST   NAMED(#SAVKEY)
FRMNT05   0000013600000000000001     MESSAGE    MSGTXT('Specify Identifier of @@CANS001 to Create/Review/Change or Delete')
FRMNT05   0000013700000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRMNT05   0000013800000000000001     REQUEST    FIELDS((#KEY)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) PANEL_TITL('Specify @@CANS001')
FRMNT05   0000013900000000000001     @@GOTO     LABEL(L92)
FRMNT05   0000014000000000000001L91: @@LABEL
FRMNT05   0000014100000000000001     REQUEST    FIELDS((#KEY)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) PANEL_TITL('Specify @@CANS001') CURSOR_LOC(*ATFIELD #@@LEL0401)
FRMNT05   0000014200000000000001L92: @@LABEL
FRMNT05   0000014300000000000001     ADD_ENTRY  TO_LIST(#SAVKEY)
FRMNT05   0000014400000000000001     CHANGE     FIELD(#NEXTROUTN) TO('WRK_DATA')
FRMNT05   0000014500000000000001     ENDROUTINE
FRMNT05   0000014600000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000014700000000000001     @@COMMENT  COMMENT('WRK_DATA   : Work with @@CANS001 details')
FRMNT05   0000014800000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000014900000000000001     /* ********** ******************************************************* */
FRMNT05   0000015000000000000001     SUBROUTINE NAME(WRK_DATA)
FRMNT05   0000015100000000000001     DEFINE     FIELD(#HDRFILRRN) REFFLD(#PRIFILRRN)
FRMNT05   0000015200000000000001     DEFINE     FIELD(#DETFILRRN) REFFLD(#PRIFILRRN)
FRMNT05   0000015300000000000001     DEFINE     FIELD(#ERRORS) TYPE(*DEC) LENGTH(7) DECIMALS(0)
FRMNT05   0000015400000000000001     DEFINE     FIELD(#@@CANS010CRSRLC)  REFFLD(#PRIFILRRN)
FRMNT05   0000015500000000000001     DEF_LIST   NAME(#DETAILS) FIELDS((#DETFILRRN *HIDDEN) @@LST22) COUNTER(#LISTENTRY) TOP_ENTRY(#LISTTOP) SEL_ENTRY(#@@CANS010CRSRLC)
FRMNT05   0000015600000000000001     GROUP_BY   NAME(#IDETAILS) FIELDS(@@LST34)
FRMNT05   0000015700000000000001     DEFINE     FIELD(#@@CANS010CUR_ROW) TYPE(*DEC) LENGTH(3) DECIMALS(0)
FRMNT05   0000015800000000000001     DEFINE     FIELD(#@@CANS010CUR_COL) TYPE(*DEC) LENGTH(3) DECIMALS(0)
FRMNT05   0000015900000000000001     DEFINE     FIELD(#@@CANS010INST01) TYPE(*CHAR) LENGTH(76) INPUT_ATR(PBIN) OUTPUT_ATR(PBIN)
FRMNT05   0000016000000000000001     CHANGE     FIELD(#@@CANS010INST01) TO('''Cursor Select @@CANS002 to Rev/Chg/Dlt or use ADD for new @@CANS002''')
FRMNT05   0000016100000000000001     /* **********                                                         */
FRMNT05   0000016200000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(T91)
FRMNT05   0000016300000000000001     GROUP_BY   NAME(#HEADER) FIELDS((#@@CANS010INST01 *L002 *P002 *NOID *NOCHG) @@LST11)
FRMNT05   0000016400000000000001     @@GOTO     LABEL(T92)
FRMNT05   0000016500000000000001T91: @@LABEL
FRMNT05   0000016600000000000001     GROUP_BY   NAME(#HEADER) FIELDS((#@@CANS010INST01 *L005 *P002 *NOID *NOCHG) @@LST11)
FRMNT05   0000016700000000000001T92: @@LABEL
FRMNT05   0000016800000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT05   0000016900000000000001     @@COMMENT  COMMENT('Load existing @@CANS001 & @@CANS002 data')
FRMNT05   0000017000000000000001     EXECUTE    SUBROUTINE(GET_DATA)
FRMNT05   0000017100000000000001     CHANGE     FIELD(#@@CANS010CUR_ROW #@@CANS010CUR_COL) TO(0)
FRMNT05   0000017200000000000001     @@COMMENT  COMMENT('Do until end of this routine is requested')
FRMNT05   0000017300000000000001     DOUNTIL    COND('#NEXTROUTN *NE WRK_DATA')
FRMNT05   0000017400000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT05   0000017500000000000001     DISPLAY    FIELDS((#HEADER)) DESIGN(*ACROSS) IDENTIFY(*LABEL) BROWSELIST(#DETAILS) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) ADD_KEY(*YES) CHANGE_KEY(*YES) DELETE_KEY(*YES) PANEL_TITL('Work with @@CANS001 Details') CURSOR_LOC(#@@CANS010CUR_ROW #@@CANS010CUR_COL)
FRMNT05   0000017600000000000001     CHANGE     FIELD(#NEXTROUTN) TO('WRK_DATA')
FRMNT05   0000017700000000000001     @@COMMENT  COMMENT('Retrieve Cursor location')
FRMNT05   0000017800000000000001     IF         '#@@CANS010CRSRLC *GT 0'
FRMNT05   0000017900000000000001     GET_ENTRY  #@@CANS010CRSRLC FROM_LIST(#DETAILS)
FRMNT05   0000018000000000000001     ENDIF
FRMNT05   0000018100000000000001     @@COMMENT  COMMENT('If @@CANS001 is being displayed')
FRMNT05   0000018200000000000001     IF_MODE    IS(*DISPLAY)
FRMNT05   0000018300000000000001     IF         '#@@CANS010CRSRLC = 0'
FRMNT05   0000018400000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT05   0000018500000000000001     ELSE
FRMNT05   0000018600000000000001     EXECUTE    SUBROUTINE(WRK_LINE)
FRMNT05   0000018700000000000001     ENDIF
FRMNT05   0000018800000000000001     ENDIF
FRMNT05   0000018900000000000001     @@COMMENT  COMMENT('If existing @@CANS001 is being updated')
FRMNT05   0000019000000000000001     IF_MODE    IS(*CHANGE)
FRMNT05   0000019100000000000001     EXECUTE    SUBROUTINE(VAL_DATA)
FRMNT05   0000019200000000000001     IF         COND('#ERRORS = 0')
FRMNT05   0000019300000000000001     CHANGE     FIELD(#NEXTROUTN) TO('REDISPLAY')
FRMNT05   0000019400000000000001     ENDIF
FRMNT05   0000019500000000000001     ENDIF
FRMNT05   0000019600000000000001     @@COMMENT  COMMENT('If new @@CANS001 is being created')
FRMNT05   0000019700000000000001     IF_MODE    IS(*ADD)
FRMNT05   0000019800000000000001     CHANGE     #IDETAILS *DEFAULT
FRMNT05   0000019900000000000001     EXECUTE    SUBROUTINE(WRK_LINE)
FRMNT05   0000020000000000000001     ENDIF
FRMNT05   0000020100000000000001     @@COMMENT  COMMENT('If existing @@CANS001 is being deleted')
FRMNT05   0000020200000000000001     IF_MODE    IS(*DELETE)
FRMNT05   0000020300000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT05   0000020400000000000001A50: @@LABEL
FRMNT05   0000020500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A60)
FRMNT05   0000020600000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(A55)
FRMNT05   0000020700000000000001     DELETE     FROM_FILE(@@FNAMECF) WITH_KEY(@@LST05)
FRMNT05   0000020800000000000001     @@GOTO     LABEL(A60)
FRMNT05   0000020900000000000001A55: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000021000000000000001     @@GOTO     LABEL(A50)
FRMNT05   0000021100000000000001A60: @@LABEL
FRMNT05   0000021200000000000001     DELETE     FROM_FILE(@@FNAME01)
FRMNT05   0000021300000000000001     MESSAGE    MSGTXT('@@CANS001 successfully deleted')
FRMNT05   0000021400000000000001     CHANGE     FIELD(#NEXTROUTN) TO('GET_KEY')
FRMNT05   0000021500000000000001     ENDIF
FRMNT05   0000021600000000000001     @@COMMENT  COMMENT(' ')
FRMNT05   0000021700000000000001     ENDUNTIL
FRMNT05   0000021800000000000001     ENDROUTINE
FRMNT05   0000021900000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000022000000000000001     @@COMMENT  COMMENT('GET_DATA :Load up @@CANS001 details')
FRMNT05   0000022100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000022200000000000001     SUBROUTINE NAME(GET_DATA)
FRMNT05   0000022300000000000001     @@COMMENT  COMMENT('Subroutine mainline')
FRMNT05   0000022400000000000001     CLR_LIST   NAMED(#DETAILS)
FRMNT05   0000022500000000000001     FETCH      FIELDS(#HEADER) FROM_FILE(@@FNAME01) WITH_KEY(@@LST04) RETURN_RRN(#HDRFILRRN)
FRMNT05   0000022600000000000001     IF_STATUS  IS(*OKAY)
FRMNT05   0000022700000000000001     SET_MODE   TO(*DISPLAY)
FRMNT05   0000022800000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT05   0000022900000000000001A70: @@LABEL
FRMNT05   0000023000000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A90)
FRMNT05   0000023100000000000001     @@IF       COND((*IF @@FAREACF *EQ B)) GOTO(A80)
FRMNT05   0000023200000000000001     @@CLR_LST  NUMBER(3)
FRMNT05   0000023300000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT05   0000023400000000000001     FETCH      FIELDS((#HEADER)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(3)
FRMNT05   0000023500000000000001A80: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000023600000000000001     @@GOTO     LABEL(A70)
FRMNT05   0000023700000000000001A90: /* **********                                                         */
FRMNT05   0000023800000000000001     @@COMMENT  COMMENT('Load Detail information')
FRMNT05   0000023900000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT05   0000024000000000000001C40: @@LABEL
FRMNT05   0000024100000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(C60)
FRMNT05   0000024200000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(C50)
FRMNT05   0000024300000000000001     SELECT     FIELDS((#DETAILS)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST05) RETURN_RRN(#DETFILRRN)
FRMNT05   0000024400000000000001     @@GOTO     LABEL(C60)
FRMNT05   0000024500000000000001C50: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000024600000000000001     @@GOTO     LABEL(C40)
FRMNT05   0000024700000000000001C60: @@LABEL
FRMNT05   0000024800000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT05   0000024900000000000001C70: @@LABEL
FRMNT05   0000025000000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(C90)
FRMNT05   0000025100000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(C80)
FRMNT05   0000025200000000000001     @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(C80)
FRMNT05   0000025300000000000001     @@CLR_LST  NUMBER(3)
FRMNT05   0000025400000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRMNT05   0000025500000000000001     FETCH      FIELDS(#DETAILS)  FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(3)
FRMNT05   0000025600000000000001C80: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000025700000000000001     @@GOTO     LABEL(C70)
FRMNT05   0000025800000000000001C90: /* **********                                                         */
FRMNT05   0000025900000000000001     ADD_ENTRY  TO_LIST(#DETAILS)
FRMNT05   0000026000000000000001     ENDSELECT
FRMNT05   0000026100000000000001     CHANGE     FIELD(#LISTTOP) TO(1)
FRMNT05   0000026200000000000001     ELSE
FRMNT05   0000026300000000000001     @@COMMENT  COMMENT('Header record does not exist')
FRMNT05   0000026400000000000001     SET_MODE   TO(*CHANGE)
FRMNT05   0000026500000000000001     CHANGE     FIELD(#HEADER) TO(*DEFAULT)
FRMNT05   0000026600000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SAVKEY)
FRMNT05   0000026700000000000001     /* ********** INZ_LIST   NAMED(#DETAILS) NUM_ENTRYS(20)               */
FRMNT05   0000026800000000000001     ENDIF
FRMNT05   0000026900000000000001     ENDROUTINE
FRMNT05   0000027000000000000001     /* ********** ****************************************************    */
FRMNT05   0000027100000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000027200000000000001     @@COMMENT  COMMENT('VAL_DATA   : VALIDATE INPUT DATA details')
FRMNT05   0000027300000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000027400000000000001     SUBROUTINE NAME(VAL_DATA)
FRMNT05   0000027500000000000001     CHANGE     FIELD(#ERRORS) TO(0)
FRMNT05   0000027600000000000001     BEGINCHECK KEEP_COUNT(#ERRORS)
FRMNT05   0000027700000000000001     IF         COND('#HDRFILRRN *EQ 0')
FRMNT05   0000027800000000000001     INSERT     FIELDS((#HEADER)) TO_FILE(@@FNAME01) VAL_ERROR(*NEXT) RETURN_RRN(#HDRFILRRN)
FRMNT05   0000027900000000000001     ELSE
FRMNT05   0000028000000000000001     UPDATE     FIELDS((#HEADER)) IN_FILE(@@FBASP01) VAL_ERROR(*NEXT) WITH_RRN(#HDRFILRRN)
FRMNT05   0000028100000000000001     ENDIF
FRMNT05   0000028200000000000001     ENDCHECK   IF_ERROR(*NEXT)
FRMNT05   0000028300000000000001     ENDROUTINE
FRMNT05   0000028400000000000001     @@COMMENT  COMMENT('***********************************')
FRMNT05   0000028500000000000001     @@COMMENT  COMMENT('SUBROUTINE : WRK_LINE ')
FRMNT05   0000028600000000000001     @@COMMENT  COMMENT('***********************************')
FRMNT05   0000028700000000000001     SUBROUTINE NAME(WRK_LINE)
FRMNT05   0000028800000000000001     POP_UP     FIELDS((#IDETAILS)) AT_LOC(10 14) PANEL_TITL('Work With @@CANS002') EXIT_KEY(*NO) MENU_KEY(*YES W10) CHANGE_KEY(*YES) DELETE_KEY(*YES) CURSOR_LOC(*ATFIELD #@@LEL3401)
FRMNT05   0000028900000000000001     @@COMMENT  COMMENT('Additional Validation ?')
FRMNT05   0000029000000000000001     BEGINCHECK
FRMNT05   0000029100000000000001     ENDCHECK
FRMNT05   0000029200000000000001     @@COMMENT  COMMENT('Handle entry of a new line')
FRMNT05   0000029300000000000001     IF_MODE    IS(*ADD)
FRMNT05   0000029400000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT05   0000029500000000000001B70: @@LABEL
FRMNT05   0000029600000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B90)
FRMNT05   0000029700000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B80)
FRMNT05   0000029800000000000001     INSERT     FIELDS((#DETAILS)) TO_FILE(@@FNAMECF)
FRMNT05   0000029900000000000001     @@GOTO     LABEL(B90)
FRMNT05   0000030000000000000001B80: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000030100000000000001     @@GOTO     LABEL(B70)
FRMNT05   0000030200000000000001B90: @@LABEL
FRMNT05   0000030300000000000001     EXECUTE    SUBROUTINE(GET_DATA)
FRMNT05   0000030400000000000001     ENDIF
FRMNT05   0000030500000000000001     @@COMMENT  COMMENT('Change request of Detail line')
FRMNT05   0000030600000000000001     IF_MODE    IS(*CHANGE)
FRMNT05   0000030700000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT05   0000030800000000000001B40: @@LABEL
FRMNT05   0000030900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B60)
FRMNT05   0000031000000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B50)
FRMNT05   0000031100000000000001     UPDATE     FIELDS((#IDETAILS)) IN_FILE(@@FBASPCF) WITH_RRN(#DETFILRRN)
FRMNT05   0000031200000000000001     @@GOTO     LABEL(B60)
FRMNT05   0000031300000000000001B50: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000031400000000000001     @@GOTO     LABEL(B40)
FRMNT05   0000031500000000000001B60: @@LABEL
FRMNT05   0000031600000000000001     EXECUTE    SUBROUTINE(GET_DATA)
FRMNT05   0000031700000000000001     ENDIF
FRMNT05   0000031800000000000001     @@COMMENT  COMMENT('Delete Request of Detail line')
FRMNT05   0000031900000000000001     IF_MODE    IS(*DELETE)
FRMNT05   0000032000000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRMNT05   0000032100000000000001B10: @@LABEL
FRMNT05   0000032200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(B30)
FRMNT05   0000032300000000000001     @@IF       COND((*IF @@FRELRCF *NE M)) GOTO(B20)
FRMNT05   0000032400000000000001     DELETE     FROM_FILE(@@FBASPCF) WITH_RRN(#DETFILRRN)
FRMNT05   0000032500000000000001     @@GOTO     LABEL(B30)
FRMNT05   0000032600000000000001B20: @@INC_IDX  IDX_NAME(CF)
FRMNT05   0000032700000000000001     @@GOTO     LABEL(B10)
FRMNT05   0000032800000000000001B30: @@LABEL
FRMNT05   0000032900000000000001     EXECUTE    SUBROUTINE(GET_DATA)
FRMNT05   0000033000000000000001     ENDIF
FRMNT05   0000033100000000000001W10: SET_MODE   TO(*DISPLAY)
FRMNT05   0000033200000000000001     ENDROUTINE
FRMNT05   0000033300000000000001     @@COMMENT  COMMENT('=======================================================')
FRMNT05   0000033400000000000001     /* ********** Clear space used by all working lists                   */
FRMNT05   0000033500000000000001     @@CLR_LST  NUMBER(1)
FRMNT05   0000033600000000000001     @@CLR_LST  NUMBER(2)
FRMNT05   0000033700000000000001     @@CLR_LST  NUMBER(3)
FRMNT05   0000033800000000000001     @@CLR_LST  NUMBER(4)
FRMNT05   0000033900000000000001     @@CLR_LST  NUMBER(5)
FRMNT05   0000034000000000000001     @@CLR_LST  NUMBER(6)
FRMNT05   0000034100000000000001     @@CLR_LST  NUMBER(9)
FRMNT05   0000034200000000000001     @@CLR_LST  NUMBER(11)
FRMNT05   0000034300000000000001     @@CLR_LST  NUMBER(22)
FRMNT05   0000034400000000000001     @@CLR_LST  NUMBER(23)
FRMNT05   0000034500000000000001     @@CLR_LST  NUMBER(33)
FRMNT05   0000034600000000000001     @@CLR_LST  NUMBER(34)
FRMNT05   0000034700000000000001     @@CLR_LST  NUMBER(66)
FRPOP01   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP01   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPOP01   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPOP01   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPOP01   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPOP01   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPOP01   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPOP01   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP01   0000000900000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000001000000000000001     /* ********** BEGINNING OF TEMPLATE STATEMENTS                        */
FRPOP01   0000001100000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000001200000000000001     /* ********** ASK FOR HEADING OF WINDOW PANEL                         */
FRPOP01   0000001300000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000001400000000000001     @@QUESTION PROMPT('Enter the title of the POP UP window, up to 20 characters') ANSWER(@@CANS001) EXTEND('12345678901234567890' 'This will be used for the panel title that appears in the window.' 'Use upper and lower case characters. Do not use any '' (quote symbols).' 'Use at most 20 characters.' 'For additional information and examples use the HELP function key.') HELPIDS(HELP010 HELP020 HELP030)
FRPOP01   0000001500000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000001600000000000001     /* ********** ASK FOR NAME OF FILE TO BE USED                         */
FRPOP01   0000001700000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000001800000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Specify the name of the file to be displayed in this pop up window') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030)
FRPOP01   0000001900000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000002000000000000001     /* ********** DEFINE FIELDS TO BE USED IN FUNCTION                    */
FRPOP01   0000002100000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000002200000000000001     @@CLR_LST  NUMBER(1)
FRPOP01   0000002300000000000001     @@RTV_FLDS FROM_FILE(01) INTO_LST(1)
FRPOP01   0000002400000000000001     @@CLR_LST  NUMBER(2)
FRPOP01   0000002500000000000001     @@CLR_LST  NUMBER(3)
FRPOP01   0000002600000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields to' 'display in' 'Window') (3 'Values to' 'Return')) HELPIDS(HELP010 HELP020 HELP030)
FRPOP01   0000002700000000000001     @@CLR_LST  NUMBER(4)
FRPOP01   0000002800000000000001     @@MRG_LSTS FROM_LSTS(2) INTO_LST(4)
FRPOP01   0000002900000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(4)
FRPOP01   0000003000000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000003100000000000001     /* ********** END OF TEMPLATE COMMANDS                                */
FRPOP01   0000003200000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000003300000000000001     /* ********** BEGINNING OF RDML STATEMENTS                            */
FRPOP01   0000003400000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000003500000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT *CLOSE_DISPLAY)
FRPOP01   0000003600000000000001     @@COMMENT  COMMENT('Define list to be displayed in window')
FRPOP01   0000003700000000000001     DEF_LIST   NAME(#XXXXLIST) FIELDS(@@LST04) SEL_ENTRY(#LISTENTRY)
FRPOP01   0000003800000000000001     @@COMMENT  COMMENT('Build list for display in window')
FRPOP01   0000003900000000000001     CLR_LIST   NAMED(#XXXXLIST)
FRPOP01   0000004000000000000001     SELECT     FIELDS(#XXXXLIST) FROM_FILE(@@FNAME01)
FRPOP01   0000004100000000000001     ADD_ENTRY  TO_LIST(#XXXXLIST)
FRPOP01   0000004200000000000001     ENDSELECT
FRPOP01   0000004300000000000001     @@COMMENT  COMMENT('Display window until CANCEL or entry selected')
FRPOP01   0000004400000000000001     DOUNTIL    COND('#LISTENTRY *GT 0')
FRPOP01   0000004500000000000001     POP_UP     AT_LOC(5 22) PANEL_TITL('@@CANS001') BROWSELIST(#XXXXLIST) EXIT_KEY(*NO) MENU_KEY(*YES *MENU)        PROMPT_KEY(*NO) CURSOR_LOC(*ATFIELD #@@LEL0201) DESIGN(*DOWN)
FRPOP01   0000004600000000000001     IF         COND('#LISTENTRY *GT 0')
FRPOP01   0000004700000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#XXXXLIST)
FRPOP01   0000004800000000000001     ENDIF
FRPOP01   0000004900000000000001     ENDUNTIL
FRPOP01   0000005000000000000001     EXCHANGE   FIELDS(@@LST03)
FRPOP01   0000005100000000000001     MENU
FRPOP01   0000005200000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000005300000000000001     /* ********** END       OF RDML STATEMENTS                            */
FRPOP01   0000005400000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000005500000000000001     /* ********** TEMPLATE TIDY UP  STATEMENTS                            */
FRPOP01   0000005600000000000001     /* ********** ------------------------------------------------        */
FRPOP01   0000005700000000000001     @@CLR_LST  NUMBER(1)
FRPOP01   0000005800000000000001     @@CLR_LST  NUMBER(2)
FRPOP01   0000005900000000000001     @@CLR_LST  NUMBER(3)
FRPOP01   0000006000000000000001     @@CLR_LST  NUMBER(4)
FRPOP02   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP02   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPOP02   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPOP02   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPOP02   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPOP02   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPOP02   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPOP02   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP02   0000000900000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000001000000000000001     /* ********** START OF TEMPLATE CODE                                  */
FRPOP02   0000001100000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000001200000000000001     /* ********** GET PREFIX FOR RDML VARIABLES                           */
FRPOP02   0000001300000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000001400000000000001     @@QUESTION PROMPT('Enter a 1 to 4 character prefix for variables declared by this template') ANSWER(@@CANS001) EXTEND('Specify a unique prefix (within this program) that can be used to ensure' 'that program variables generated by this template have unique names.' 'Use from 1 to 4 alphabetic charcters. Attempt to use a prefix that' 'identfies what this window will display. For example COMP for a list of' 'companies, CUST for a list of customers, etc.' 'For more information and examples use the HELP function key.') LOWER(*NO) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRPOP02   0000001500000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000001600000000000001     /* ********** ASK FOR HEADING OF WINDOW PANEL                         */
FRPOP02   0000001700000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000001800000000000001     @@QUESTION PROMPT('Enter the title of the POP UP window, up to 20 characters') ANSWER(@@CANS002) EXTEND('12345678901234567890' 'This will be used for the panel title that appears in the window.' '''Use upper and lower case characters. Do not use any '' (quote symbols).''' 'Use at most 20 characters.' 'For additional information and examples use the HELP function key.') HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRPOP02   0000001900000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000002000000000000001     /* ********** GET FILE TO WORK WITH                                   */
FRPOP02   0000002100000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000002200000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Specify the name of the file to be displayed in this pop up window') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRPOP02   0000002300000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000002400000000000001     /* ********** SET UP BROWSE LIST                                      */
FRPOP02   0000002500000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000002600000000000001     @@CLR_LST  NUMBER(1)
FRPOP02   0000002700000000000001     @@RTV_FLDS FROM_FILE(01) INTO_LST(1)
FRPOP02   0000002800000000000001     @@CLR_LST  NUMBER(2)
FRPOP02   0000002900000000000001     @@CLR_LST  NUMBER(3)
FRPOP02   0000003000000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields to' 'be displayed') (3 'Fields to' 'Return')) HELPIDS(HELP010 HELP020 HELP030 HELP040)
FRPOP02   0000003100000000000001     @@CLR_LST  NUMBER(4)
FRPOP02   0000003200000000000001     @@RTV_KEYS OF_FILE(01) INTO_LST(4)
FRPOP02   0000003300000000000001     @@CLR_LST  NUMBER(5)
FRPOP02   0000003400000000000001     @@MRG_LSTS FROM_LSTS((4 *INPUT)) INTO_LST(5)
FRPOP02   0000003500000000000001     @@CLR_LST  NUMBER(6)
FRPOP02   0000003600000000000001     @@MRG_LSTS FROM_LSTS((2)) INTO_LST(6)
FRPOP02   0000003700000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(6)
FRPOP02   0000003800000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000003900000000000001     /* ********** END OF TEMPLATE CODE                                    */
FRPOP02   0000004000000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000004100000000000001     /* ********** START OF RDML CODE                                      */
FRPOP02   0000004200000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000004300000000000001     @@COMMENT  COMMENT('Function control options')
FRPOP02   0000004400000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT *CLOSE_DISPLAY)
FRPOP02   0000004500000000000001     @@COMMENT  COMMENT('Define work variables, groups and browselist')
FRPOP02   0000004600000000000001     DEFINE     FIELD(#@@CANS001ENTRY) REFFLD(#LISTENTRY)
FRPOP02   0000004700000000000001     DEF_LIST   NAME(#@@CANS001LIST) FIELDS(@@LST06) SEL_ENTRY(#@@CANS001ENTRY)
FRPOP02   0000004800000000000001     GROUP_BY   NAME(#@@CANS001KEYS) FIELDS(@@LST05)
FRPOP02   0000004900000000000001     @@COMMENT  COMMENT('Loop until terminated by CANCEL or selected entry')
FRPOP02   0000005000000000000001     BEGIN_LOOP
FRPOP02   0000005100000000000001     @@COMMENT  COMMENT('Get Search Criteria')
FRPOP02   0000005200000000000001     POP_UP     FIELDS(#@@CANS001KEYS) AT_LOC(5 14) PANEL_TITL('@@CANS002') BROWSELIST(#@@CANS001LIST) EXIT_KEY(*NO) MENU_KEY(*YES *MENU)   PROMPT_KEY(*NO) DESIGN(*DOWN) IDENTIFY(*DESC)
FRPOP02   0000005300000000000001     @@COMMENT  COMMENT('If an entry was selected')
FRPOP02   0000005400000000000001     IF         COND('#@@CANS001ENTRY *GT 0')
FRPOP02   0000005500000000000001     GET_ENTRY  NUMBER(#@@CANS001ENTRY) FROM_LIST(#@@CANS001LIST)
FRPOP02   0000005600000000000001     EXCHANGE   FIELDS(@@LST03)
FRPOP02   0000005700000000000001     MENU
FRPOP02   0000005800000000000001     ENDIF
FRPOP02   0000005900000000000001     @@COMMENT  COMMENT('Build list of records starting at key')
FRPOP02   0000006000000000000001     CLR_LIST   #@@CANS001LIST
FRPOP02   0000006100000000000001     SELECT     FIELDS(#@@CANS001LIST) FROM_FILE(@@FNAME01) WITH_KEY(@@LST04) NBR_KEYS(*COMPUTE) GENERIC(*YES)
FRPOP02   0000006200000000000001     ADD_ENTRY  TO_LIST(#@@CANS001LIST)
FRPOP02   0000006300000000000001     ENDSELECT
FRPOP02   0000006400000000000001     @@COMMENT  COMMENT('Clear search args and loop back for another go')
FRPOP02   0000006500000000000001     CHANGE     FIELD(#@@CANS001KEYS) TO(*NULL)
FRPOP02   0000006600000000000001     END_LOOP
FRPOP02   0000006700000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000006800000000000001     /* ********** END   OF RDML CODE                                      */
FRPOP02   0000006900000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000007000000000000001     /* ********** FREE STORAGE - TEMPLATE PROCESSING                      */
FRPOP02   0000007100000000000001     /* ********** ------------------------------------------------        */
FRPOP02   0000007200000000000001     @@CLR_LST  NUMBER(1)
FRPOP02   0000007300000000000001     @@CLR_LST  NUMBER(2)
FRPOP02   0000007400000000000001     @@CLR_LST  NUMBER(3)
FRPOP02   0000007500000000000001     @@CLR_LST  NUMBER(4)
FRPOP02   0000007600000000000001     @@CLR_LST  NUMBER(5)
FRPOP02   0000007700000000000001     @@CLR_LST  NUMBER(6)
FRPOP03   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPOP03   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPOP03   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPOP03   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPOP03   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPOP03   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPOP03   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000000900000000000001     /* ********** ======================================================= */
FRPOP03   0000001000000000000001     /* ********** START OF TEMPLATE CODE                                  */
FRPOP03   0000001100000000000001     /* ********** ======================================================= */
FRPOP03   0000001200000000000001     /* ********** ASK FOR THE "OBJECT"                                    */
FRPOP03   0000001300000000000001     /* ********** ======================================================= */
FRPOP03   0000001400000000000001     @@QUESTION PROMPT('Supply a word that describes what "object" this program will work with') ANSWER(@@CANS001) EXTEND('123456789012345' 'The word you specify here is used to build messages that appear on the' 'screen panels. You should use ONE word only, use upper and lower case' 'characters, and only use singular form (eg: "Customer", "Employee",' '"Order"). Do NOT use more than 15 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRPOP03   0000001500000000000001     /* ********** ======================================================= */
FRPOP03   0000001600000000000001     /* ********** GET FILES TO WORK WITH                                  */
FRPOP03   0000001700000000000001     /* ********** ======================================================= */
FRPOP03   0000001800000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the file to be used by this application.') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' 'Use the HELP key for more details of this template and the type' 'of applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRPOP03   0000001900000000000001     /* ********** ======================================================= */
FRPOP03   0000002000000000000001     /* ********** PUT ALL FIELDS FOR BROWSE INTO LIST 52                  */
FRPOP03   0000002100000000000001     /* ********** ======================================================= */
FRPOP03   0000002200000000000001     @@CLR_LST  NUMBER(01)
FRPOP03   0000002300000000000001     @@RTV_FLDS FROM_FILE(01) INTO_LST(01)
FRPOP03   0000002400000000000001     @@CLR_LST  NUMBER(02)
FRPOP03   0000002500000000000001     @@CLR_LST  NUMBER(03)
FRPOP03   0000002600000000000001     @@MAK_LSTS FROM_LSTS(01) INTO_LSTS((02 'Fields for' 'Browse' 'Panel') (03 'Fields To' ' Return')) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRPOP03   0000002700000000000001     @@CLR_LST  NUMBER(04)
FRPOP03   0000002800000000000001     @@CLR_LST  NUMBER(05)
FRPOP03   0000002900000000000001     @@MAK_LSTS FROM_LSTS(01) INTO_LSTS((04 'Fields' 'To Be' 'Added') (05 'Fields' ' To Be' 'Updated')) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRPOP03   0000003000000000000001     @@CLR_LST  NUMBER(06)
FRPOP03   0000003100000000000001     @@CLR_LST  NUMBER(07)
FRPOP03   0000003200000000000001     @@RTV_KEYS OF_FILE(01) INTO_LST(06)
FRPOP03   0000003300000000000001     @@MRG_LSTS FROM_LSTS((06 *IN)) INTO_LST(07)
FRPOP03   0000003400000000000001     @@CLR_LST  NUMBER(08)
FRPOP03   0000003500000000000001     @@MRG_LSTS FROM_LSTS((05) (06 *OUT)) INTO_LST(08)
FRPOP03   0000003600000000000001     /* ********** ======================================================= */
FRPOP03   0000003700000000000001     /* ********** START OF TEMPLATE CODE                                  */
FRPOP03   0000003800000000000001     /* ********** ======================================================= */
FRPOP03   0000003900000000000001     @@COMMENT  COMMENT('Options, work variables, conditions and working lists')
FRPOP03   0000004000000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT *CLOSE_DISPLAY)
FRPOP03   0000004100000000000001     DEFINE     FIELD(#REQUEST) TYPE(*CHAR) LENGTH(1)
FRPOP03   0000004200000000000001     DEFINE     FIELD(#ALLOWADD) TYPE(*CHAR) LENGTH(1)
FRPOP03   0000004300000000000001     DEFINE     FIELD(#ALLOWCHG) REFFLD(#ALLOWADD)
FRPOP03   0000004400000000000001     DEFINE     FIELD(#ALLOWDLT) REFFLD(#ALLOWADD)
FRPOP03   0000004500000000000001     GROUP_BY   NAME(#KEYGRPA) FIELDS(@@LST07)
FRPOP03   0000004600000000000001     GROUP_BY   NAME(#KEYGRPB) FIELDS(@@LST07)
FRPOP03   0000004700000000000001     DEF_COND   NAME(*ALLOWADD) COND('#ALLOWADD *EQ Y')
FRPOP03   0000004800000000000001     DEF_COND   NAME(*ALLOWCHG) COND('#ALLOWCHG *EQ Y')
FRPOP03   0000004900000000000001     DEF_COND   NAME(*ALLOWDLT) COND('#ALLOWDLT *EQ Y')
FRPOP03   0000005000000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000005100000000000001     @@COMMENT  COMMENT('PROGRAM MAINLINE')
FRPOP03   0000005200000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000005300000000000001     @@COMMENT  COMMENT('Determine if the user can maintain the file')
FRPOP03   0000005400000000000001     USE        BUILTIN(CHECK_AUTHORITY) WITH_ARGS(@@FBASP01 '''*LIBL''' FD AD) TO_GET(#ALLOWADD)
FRPOP03   0000005500000000000001     USE        BUILTIN(CHECK_AUTHORITY) WITH_ARGS(@@FBASP01 '''*LIBL''' FD CH) TO_GET(#ALLOWCHG)
FRPOP03   0000005600000000000001     USE        BUILTIN(CHECK_AUTHORITY) WITH_ARGS(@@FBASP01 '''*LIBL''' FD DL) TO_GET(#ALLOWDLT)
FRPOP03   0000005700000000000001     EXECUTE    SUBROUTINE(OBJ_BROWSE) WITH_PARMS('Y')
FRPOP03   0000005800000000000001     CHANGE     FIELD(#REQUEST) TO(N)
FRPOP03   0000005900000000000001     @@COMMENT  COMMENT('Perform the loop that handles the command keys used')
FRPOP03   0000006000000000000001     DOWHILE    COND('(#IO$KEY *NE RA) *AND (#IO$KEY *NE ''12'')')
FRPOP03   0000006100000000000001     CASE       OF_FIELD(#IO$KEY)
FRPOP03   0000006200000000000001     @@COMMENT  COMMENT('When the ADD key is used')
FRPOP03   0000006300000000000001     WHEN       VALUE_IS('= ''06''')
FRPOP03   0000006400000000000001     IF         COND('#LISTCOUNT *GT 0')
FRPOP03   0000006500000000000001     EXECUTE    SUBROUTINE(SAVETOP)
FRPOP03   0000006600000000000001     ELSE
FRPOP03   0000006700000000000001     CHANGE     FIELD(#REQUEST) TO(Y)
FRPOP03   0000006800000000000001     ENDIF
FRPOP03   0000006900000000000001     EXECUTE    SUBROUTINE(ADD$DATA)
FRPOP03   0000007000000000000001     @@COMMENT  COMMENT('When the CHANGE key is used')
FRPOP03   0000007100000000000001     WHEN       VALUE_IS('= ''21''')
FRPOP03   0000007200000000000001     EXECUTE    SUBROUTINE(SAVETOP)
FRPOP03   0000007300000000000001     EXECUTE    SUBROUTINE(WORK$DATA) WITH_PARMS('CHG')
FRPOP03   0000007400000000000001     @@COMMENT  COMMENT('When the DELETE key is used')
FRPOP03   0000007500000000000001     WHEN       VALUE_IS('= ''22''')
FRPOP03   0000007600000000000001     EXECUTE    SUBROUTINE(SAVETOP)
FRPOP03   0000007700000000000001     EXECUTE    SUBROUTINE(WORK$DATA) WITH_PARMS('DLT')
FRPOP03   0000007800000000000001     ENDCASE
FRPOP03   0000007900000000000001     @@COMMENT  COMMENT('Select and display a list of records')
FRPOP03   0000008000000000000001     EXECUTE    SUBROUTINE(OBJ_BROWSE) WITH_PARMS(#REQUEST)
FRPOP03   0000008100000000000001     ENDWHILE
FRPOP03   0000008200000000000001     @@COMMENT  COMMENT('Pass the selected value and return')
FRPOP03   0000008300000000000001     IF         COND('#IO$KEY *EQ RA')
FRPOP03   0000008400000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#OBJLIST)
FRPOP03   0000008500000000000001     EXCHANGE   FIELDS(@@LST03 )
FRPOP03   0000008600000000000001     ENDIF
FRPOP03   0000008700000000000001     MENU
FRPOP03   0000008800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000008900000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ_BROWSE')
FRPOP03   0000009000000000000001     @@COMMENT  COMMENT('Description ...: Select records from file & add to list')
FRPOP03   0000009100000000000001     @@COMMENT  COMMENT('Parameters ....: Name      Typ Len  Description')
FRPOP03   0000009200000000000001     @@COMMENT  COMMENT('                 ----      --- ---  -----------')
FRPOP03   0000009300000000000001     @@COMMENT  COMMENT('                 #OBJREQ  CHAR   1  Request keys')
FRPOP03   0000009400000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000009500000000000001     SUBROUTINE NAME(OBJ_BROWSE) PARMS((#OBJREQ *RECEIVED))
FRPOP03   0000009600000000000001     @@COMMENT  COMMENT('Work fields and lists used in this subroutine')
FRPOP03   0000009700000000000001     DEFINE     FIELD(#OBJREQ) TYPE(*CHAR) LENGTH(1)
FRPOP03   0000009800000000000001     DEF_LIST   NAME(#LASTREQ) FIELDS(@@LST06) TYPE(*WORKING) ENTRYS(1)
FRPOP03   0000009900000000000001     DEF_LIST   NAME(#SAVEREQ) FIELDS(@@LST06) TYPE(*WORKING) ENTRYS(1)
FRPOP03   0000010000000000000001     DEF_LIST   NAME(#OBJLIST) FIELDS(@@LST02) COUNTER(#LISTCOUNT) PAGE_SIZE(#LISTPAGE) TOP_ENTRY(#LISTTOP) SEL_ENTRY(#LISTENTRY) SCROLL_TXT(#LISTPOS)
FRPOP03   0000010100000000000001     @@COMMENT  COMMENT('Repeat until records found and selection made')
FRPOP03   0000010200000000000001     DOUNTIL    COND('((#LISTENTRY *GT 0) *AND (#IO$KEY *EQ RA)) *OR ((#IO$KEY *EQ ''06'') *OR (#IO$KEY *EQ ''21'') *OR (#IO$KEY *EQ ''22''))')
FRPOP03   0000010300000000000001     CLR_LIST   NAMED(#OBJLIST)
FRPOP03   0000010400000000000001     @@COMMENT  COMMENT('Request details if required')
FRPOP03   0000010500000000000001     IF         COND('#OBJREQ = Y')
FRPOP03   0000010600000000000001     POP_UP     FIELDS((#KEYGRPA)) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(5 14) PANEL_TITL('Choose @@CANS001') EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) USER_KEYS((06 'Add' *NEXT *ALLOWADD)) CURSOR_LOC(*ATFIELD #@@LEL0701)
FRPOP03   0000010700000000000001     CLR_LIST   NAMED(#LASTREQ)
FRPOP03   0000010800000000000001     ADD_ENTRY  TO_LIST(#LASTREQ)
FRPOP03   0000010900000000000001     CHANGE     FIELD(#OBJREQ) TO(N)
FRPOP03   0000011000000000000001     @@COMMENT  COMMENT('Return to mainline if add is required')
FRPOP03   0000011100000000000001     IF         COND('#IO$KEY *EQ ''06''')
FRPOP03   0000011200000000000001     RETURN
FRPOP03   0000011300000000000001     ENDIF
FRPOP03   0000011400000000000001     ELSE
FRPOP03   0000011500000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#LASTREQ)
FRPOP03   0000011600000000000001     ENDIF
FRPOP03   0000011700000000000001     @@COMMENT  COMMENT('Retrieve records from @@FNAME01 and add to list')
FRPOP03   0000011800000000000001     CHANGE     FIELD(#IO$KEY) TO(UP)
FRPOP03   0000011900000000000001     SELECT     FIELDS((#OBJLIST)) FROM_FILE(@@FNAME01) WHERE('#IO$KEY *EQ UP') WITH_KEY(@@LST06) NBR_KEYS(*COMPUTE) OPTIONS(*STARTKEY *ENDWHERE)
FRPOP03   0000012000000000000001     EXECUTE    SUBROUTINE(OBJDISP) WITH_PARMS('''More...''')
FRPOP03   0000012100000000000001     IF         COND('#IO$KEY *EQ ''12''')
FRPOP03   0000012200000000000001     RETURN
FRPOP03   0000012300000000000001     ENDIF
FRPOP03   0000012400000000000001     ADD_ENTRY  TO_LIST(#OBJLIST) WITH_MODE(*DISPLAY)
FRPOP03   0000012500000000000001     ENDSELECT
FRPOP03   0000012600000000000001     @@COMMENT  COMMENT('When there is no more records to be read')
FRPOP03   0000012700000000000001     IF         COND('(#IO$KEY = UP)')
FRPOP03   0000012800000000000001     IF         COND('(#LISTCOUNT = 0)')
FRPOP03   0000012900000000000001     MESSAGE    MSGTXT('No details found matching search request')
FRPOP03   0000013000000000000001     CHANGE     FIELD(#OBJREQ) TO(Y)
FRPOP03   0000013100000000000001     ELSE
FRPOP03   0000013200000000000001     EXECUTE    SUBROUTINE(OBJDISP) WITH_PARMS('''Bottom''')
FRPOP03   0000013300000000000001     ENDIF
FRPOP03   0000013400000000000001     ENDIF
FRPOP03   0000013500000000000001     @@COMMENT  COMMENT('Return to the mainline when the CANCEL key is used')
FRPOP03   0000013600000000000001     IF         COND('#IO$KEY *EQ ''12''')
FRPOP03   0000013700000000000001     RETURN
FRPOP03   0000013800000000000001     ENDIF
FRPOP03   0000013900000000000001     ENDUNTIL
FRPOP03   0000014000000000000001     ENDROUTINE
FRPOP03   0000014100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000014200000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJDISP')
FRPOP03   0000014300000000000001     @@COMMENT  COMMENT('Description ...: Display the browselist page at a time')
FRPOP03   0000014400000000000001     @@COMMENT  COMMENT('Parameters ....: Name      Typ Len  Descripti n')
FRPOP03   0000014500000000000001     @@COMMENT  COMMENT('                 ----      --- ---  --------- -')
FRPOP03   0000014600000000000001     @@COMMENT  COMMENT('                 #LISTPOS CHAR   7  Browse position')
FRPOP03   0000014700000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000014800000000000001     SUBROUTINE NAME(OBJDISP) PARMS((#LISTPOS))
FRPOP03   0000014900000000000001     DEFINE     FIELD(#SAVKEY) REFFLD(#@@LEL0601)
FRPOP03   0000015000000000000001     @@COMMENT  COMMENT('Display the list when page is full or no more records')
FRPOP03   0000015100000000000001     CHANGE     FIELD(#LISTREMN) TO('#LISTCOUNT / #LISTPAGE')
FRPOP03   0000015200000000000001     IF         COND('(#IO$KEY *EQ UP) *AND ((#LISTPOS *EQ ''Bottom'') *OR ((#LISTREMN *EQ 0) *AND (#LISTCOUNT *NE 0)))')
FRPOP03   0000015300000000000001     CLR_LIST   NAMED(#SAVEREQ)
FRPOP03   0000015400000000000001     ADD_ENTRY  TO_LIST(#SAVEREQ)
FRPOP03   0000015500000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#LASTREQ)
FRPOP03   0000015600000000000001     CHANGE     FIELD(#SAVKEY) TO(#@@LEL0601)
FRPOP03   0000015700000000000001     EXECUTE    SUBROUTINE(POPLIST)
FRPOP03   0000015800000000000001     @@COMMENT  COMMENT('Continue to display the list if the user is trying to' 'roll up past the last entry OR the cursor is not' 'positioned on an entry AND the search key has not been' 'changed')
FRPOP03   0000015900000000000001     DOWHILE    COND('((#IO$KEY *EQ RA) *AND (#SAVKEY *EQ #@@LEL0601) *AND (#LISTENTRY *EQ 0)) *OR ((#LISTENTRY *EQ 0) *AND ((#IO$KEY *EQ ''21'') *OR (#IO$KEY *EQ ''22''))) *OR ((#LISTPOS *EQ ''Bottom'') *AND (#IO$KEY *EQ UP))')
FRPOP03   0000016000000000000001     IF         COND('#LISTENTRY *EQ *ZERO')
FRPOP03   0000016100000000000001     MESSAGE    MSGTXT('Place the cursor on a list entry')
FRPOP03   0000016200000000000001     ENDIF
FRPOP03   0000016300000000000001     EXECUTE    SUBROUTINE(POPLIST)
FRPOP03   0000016400000000000001     USE        BUILTIN(CLR_MESSAGES)
FRPOP03   0000016500000000000001     ENDWHILE
FRPOP03   0000016600000000000001     CLR_LIST   NAMED(#LASTREQ)
FRPOP03   0000016700000000000001     ADD_ENTRY  TO_LIST(#LASTREQ)
FRPOP03   0000016800000000000001     IF         COND('#IO$KEY *EQ UP')
FRPOP03   0000016900000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SAVEREQ)
FRPOP03   0000017000000000000001     ENDIF
FRPOP03   0000017100000000000001     @@COMMENT  COMMENT('Set up the top of the next page')
FRPOP03   0000017200000000000001     CHANGE     FIELD(#LISTTOP) TO('#LISTTOP + #LISTPAGE')
FRPOP03   0000017300000000000001     ENDIF
FRPOP03   0000017400000000000001     ENDROUTINE
FRPOP03   0000017500000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000017600000000000001     @@COMMENT  COMMENT('Subroutine ....: ADD$DATA')
FRPOP03   0000017700000000000001     @@COMMENT  COMMENT('Description ...: Add a new  record to @@FNAME01')
FRPOP03   0000017800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000017900000000000001     SUBROUTINE NAME(ADD$DATA)
FRPOP03   0000018000000000000001     @@COMMENT  COMMENT('Groups used in this subroutine')
FRPOP03   0000018100000000000001     GROUP_BY   NAME(#ADD$DATA) FIELDS(@@LST04)
FRPOP03   0000018200000000000001     @@COMMENT  COMMENT('Set up and display the ADD screen')
FRPOP03   0000018300000000000001     MESSAGE    MSGID(DCU0010) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRPOP03   0000018400000000000001     CHANGE     FIELD(#ADD$DATA) TO(*DEFAULT)
FRPOP03   0000018500000000000001     SET_MODE   TO(*ADD)
FRPOP03   0000018600000000000001     @@COMMENT  COMMENT('Do data entry until user exits with CANCEL key')
FRPOP03   0000018700000000000001     BEGIN_LOOP
FRPOP03   0000018800000000000001     POP_UP     FIELDS((#ADD$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(9 6) PANEL_TITL('Create New @@CANS001') EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) CURSOR_LOC(*ATFIELD #@@LEL0401)
FRPOP03   0000018900000000000001     INSERT     FIELDS((#ADD$DATA)) TO_FILE(@@FNAME01)
FRPOP03   0000019000000000000001     CHANGE     FIELD(#ADD$DATA) TO(*DEFAULT)
FRPOP03   0000019100000000000001     MESSAGE    MSGID(DCU0011) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRPOP03   0000019200000000000001     END_LOOP
FRPOP03   0000019300000000000001     ENDROUTINE
FRPOP03   0000019400000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000019500000000000001     @@COMMENT  COMMENT('Subroutine ....: WORK$DATA')
FRPOP03   0000019600000000000001     @@COMMENT  COMMENT('Description ...: Work with detailed data from @@FNAME01')
FRPOP03   0000019700000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000019800000000000001     SUBROUTINE NAME(WORK$DATA) PARMS(#WORK$OPT)
FRPOP03   0000019900000000000001     @@COMMENT  COMMENT('Groups and work fields used in this subroutine')
FRPOP03   0000020000000000000001     DEFINE     FIELD(#WORK$OPT) TYPE(*CHAR) LENGTH(3)
FRPOP03   0000020100000000000001     GROUP_BY   NAME(#WORK$DATA) FIELDS(@@LST08)
FRPOP03   0000020200000000000001     @@COMMENT  COMMENT('Fetch full record details from file @@FNAME01')
FRPOP03   0000020300000000000001     CHANGE     FIELD(#WORK$DATA) TO(*NAVAIL)
FRPOP03   0000020400000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#OBJLIST)
FRPOP03   0000020500000000000001     FETCH      FIELDS((#WORK$DATA)) FROM_FILE(@@FNAME01) WITH_KEY(@@LST06)
FRPOP03   0000020600000000000001     IF_STATUS  IS_NOT(*OKAY)
FRPOP03   0000020700000000000001     MESSAGE    MSGID(DCU0016) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRPOP03   0000020800000000000001     RETURN
FRPOP03   0000020900000000000001     ENDIF
FRPOP03   0000021000000000000001     @@COMMENT  COMMENT('Set screen to the correct mode')
FRPOP03   0000021100000000000001     CASE       OF_FIELD(#WORK$OPT)
FRPOP03   0000021200000000000001     WHEN       VALUE_IS('= CHG')
FRPOP03   0000021300000000000001     SET_MODE   TO(*CHANGE)
FRPOP03   0000021400000000000001     WHEN       VALUE_IS('= DLT')
FRPOP03   0000021500000000000001     SET_MODE   TO(*DELETE)
FRPOP03   0000021600000000000001     MESSAGE    MSGID(DCU0015) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRPOP03   0000021700000000000001     OTHERWISE
FRPOP03   0000021800000000000001     RETURN
FRPOP03   0000021900000000000001     ENDCASE
FRPOP03   0000022000000000000001     @@COMMENT  COMMENT('Display full record details')
FRPOP03   0000022100000000000001     POP_UP     FIELDS((#WORK$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(9 6)   PANEL_TITL('Maintain @@CANS001s') EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) CURSOR_LOC(*ATFIELD #@@LEL0801)
FRPOP03   0000022200000000000001     IF_MODE    IS(*CHANGE)
FRPOP03   0000022300000000000001     UPDATE     FIELDS((#WORK$DATA)) IN_FILE(@@FNAME01)
FRPOP03   0000022400000000000001     ENDIF
FRPOP03   0000022500000000000001     IF_MODE    IS(*DELETE)
FRPOP03   0000022600000000000001     DELETE     FROM_FILE(@@FNAME01)
FRPOP03   0000022700000000000001     ENDIF
FRPOP03   0000022800000000000001     ENDROUTINE
FRPOP03   0000022900000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000023000000000000001     @@COMMENT  COMMENT('Subroutine ....: POPLIST')
FRPOP03   0000023100000000000001     @@COMMENT  COMMENT('Description ...: Display the browselist in a window')
FRPOP03   0000023200000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000023300000000000001     SUBROUTINE NAME(POPLIST)
FRPOP03   0000023400000000000001     POP_UP     FIELDS((#KEYGRPB)) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(5 14) PANEL_TITL('Choose @@CANS001s') BROWSELIST(#OBJLIST) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) USER_KEYS((*ROLLUP) (06 'Add' *NEXT *ALLOWADD) (21 'Change' *NEXT *ALLOWCHG) (22 'Delete' *NEXT *ALLOWDLT)) CURSOR_LOC(*ATFIELD #@@LEL0701)
FRPOP03   0000023500000000000001     ENDROUTINE
FRPOP03   0000023600000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000023700000000000001     @@COMMENT  COMMENT('Subroutine ....: SAVETOP')
FRPOP03   0000023800000000000001     @@COMMENT  COMMENT('Description ...: Save top of current browselist page')
FRPOP03   0000023900000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP03   0000024000000000000001     SUBROUTINE NAME(SAVETOP)
FRPOP03   0000024100000000000001     @@COMMENT  COMMENT('Set up the top of the page to be displayed after an')
FRPOP03   0000024200000000000001     @@COMMENT  COMMENT('ADD, CHANGE or DELETE operation')
FRPOP03   0000024300000000000001     CHANGE     FIELD(#LISTTOP) TO('#LISTTOP - #LISTPAGE')
FRPOP03   0000024400000000000001     GET_ENTRY  NUMBER(#LISTTOP) FROM_LIST(#OBJLIST)
FRPOP03   0000024500000000000001     CLR_LIST   NAMED(#LASTREQ)
FRPOP03   0000024600000000000001     ADD_ENTRY  TO_LIST(#LASTREQ)
FRPOP03   0000024700000000000001     ENDROUTINE
FRPOP03   0000024800000000000001     /* ********** ======================================================= */
FRPOP03   0000024900000000000001     /* ********** END OF RDML COMMANDS                                    */
FRPOP03   0000025000000000000001     /* ********** ======================================================= */
FRPOP03   0000025100000000000001     @@CLR_LST  NUMBER(01)
FRPOP03   0000025200000000000001     @@CLR_LST  NUMBER(02)
FRPOP03   0000025300000000000001     @@CLR_LST  NUMBER(03)
FRPOP03   0000025400000000000001     @@CLR_LST  NUMBER(04)
FRPOP03   0000025500000000000001     @@CLR_LST  NUMBER(05)
FRPOP03   0000025600000000000001     @@CLR_LST  NUMBER(06)
FRPOP03   0000025700000000000001     @@CLR_LST  NUMBER(07)
FRPOP04   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP04   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPOP04   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPOP04   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPOP04   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPOP04   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPOP04   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPOP04   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPOP04   0000000900000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000001000000000000001     /* ********** BEGINNING OF TEMPLATE STATEMENTS                        */
FRPOP04   0000001100000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000001200000000000001     /* ********** ASK FOR HEADING OF WINDOW PANEL                         */
FRPOP04   0000001300000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000001400000000000001     @@QUESTION PROMPT('Enter the title of the POP UP window, up to 20 characters') ANSWER(@@CANS001) EXTEND('12345678901234567890' 'This will be used for the panel title that appears in the window. Use' 'upper and lower case characters. Do not use any '' (quote symbols). Use at' 'most 20 characters.' 'For additional information and examples use the HELP function key.') HELPIDS(HELP010 HELP020 HELP030)
FRPOP04   0000001500000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000001600000000000001     /* ********** ASK FOR THE NAME OF THE FIELD TO BE WORKED ON           */
FRPOP04   0000001700000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000001800000000000001     @@QUESTION PROMPT('Enter the name of the field to be worked on') ANSWER(@@CANS002) EXTEND('This is the field for which you want to enter the values to be prompted.' 'The field should already exist in the data dictionary. Do not prefix the' 'field name with a # (hash) symbol.') LOWER(*NO) HELPIDS(HELP010 HELP020 HELP030)
FRPOP04   0000001900000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000002000000000000001     /* ********** BEGINNING OF RDML STATEMENTS                            */
FRPOP04   0000002100000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000002200000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT *CLOSE_DISPLAY)
FRPOP04   0000002300000000000001     @@COMMENT  COMMENT('Define the description field and browselist')
FRPOP04   0000002400000000000001     DEFINE     FIELD(#VALUEDESC) TYPE(*CHAR) LENGTH(40) COLHDG('Description')
FRPOP04   0000002500000000000001     DEF_LIST   NAME(#LIST01) FIELDS((#@@CANS002) (#VALUEDESC)) SEL_ENTRY(#LISTENTRY)
FRPOP04   0000002600000000000001     CLR_LIST   NAMED(#LIST01)
FRPOP04   0000002700000000000001     @@COMMENT  COMMENT('Set up the list of valid values')
FRPOP04   0000002800000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000002900000000000001     /* ********** FIND OUT THE FIELD TYPE                                 */
FRPOP04   0000003000000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000003100000000000001     @@QUESTION PROMPT('Is the field type ALPHA or NUMERIC? Answer A or N only.') ANSWER(@@CANS003) EXTEND('When the field was defined in the data dictionary it would have been' 'given a type of alpha (type A) or numeric (type P or S). Enter A or N' 'accordingly.') LOWER(*NO) VALUES(A N) HELPIDS(HELP010 HELP020 HELP030)
FRPOP04   0000003200000000000001     @@IF       COND((*IF @@CANS003 *EQ N)) GOTO(L2)
FRPOP04   0000003300000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000003400000000000001     /* ********** RETRIEVE ALLOWABLE ALPHA VALUES                         */
FRPOP04   0000003500000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000003600000000000001L1 : @@LABEL
FRPOP04   0000003700000000000001     @@QUESTION PROMPT('Enter an allowable alpha value for the nominated field.') ANSWER(@@CANS010) EXTEND('The value entered should be the same or less in length than the specified' 'field. The first time a value is requested the inquiry line will be blank' 'but in subsequent passes the value previously entered is not cleared,' 'simply type over the existing value. When there are no more values to' 'enter, blank out the entry line and press enter.') HELPIDS(HELP010 HELP020 HELP030)
FRPOP04   0000003800000000000001     @@IF       COND((*IF @@CANS010 *EQ ' ')) GOTO(L3)
FRPOP04   0000003900000000000001     @@QUESTION PROMPT('Enter the description of the value') ANSWER(@@CANS020) EXTEND('1234567890123456789012345678901234567890' 'Enter the description that is to appear next to the value in the list.' 'The description should be no more than 40 characters and should not' 'contain any '' quotes.') HELPIDS(HELP010 HELP020 HELP030)
FRPOP04   0000004000000000000001     EXECUTE    SUBROUTINE(ADD_VALUE) WITH_PARMS('''@@CANS010''' '''@@CANS020''')
FRPOP04   0000004100000000000001     @@GOTO     LABEL(L1)
FRPOP04   0000004200000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000004300000000000001     /* ********** RETRIEVE ALLOWABLE NUMERIC VALUES                       */
FRPOP04   0000004400000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000004500000000000001L2 : @@LABEL
FRPOP04   0000004600000000000001     @@QUESTION PROMPT('Enter an allowable numeric value for the nominated field.') ANSWER(@@NANS010) EXTEND('The value entered should be the same or less in length than the specified' 'field. The first time a value is requested the inquiry line will be blank' 'but in subsequent passes the value previously entered is not cleared,' 'simply type over the existing value. When there are no more values to' 'enter, blank out the entry line and press enter.') HELPIDS(HELP010 HELP020 HELP030)
FRPOP04   0000004700000000000001     @@IF       COND((*IF @@NANS010 *EQ 0)) GOTO(L3)
FRPOP04   0000004800000000000001     @@QUESTION PROMPT('Enter the description of the value') ANSWER(@@CANS020) EXTEND('1234567890123456789012345678901234567890' 'Enter the description that is to appear next to the value in the list.' 'The description should be no more than 40 characters and should not' 'contain any '' quotes.') HELPIDS(HELP010 HELP020 HELP030)
FRPOP04   0000004900000000000001     EXECUTE    SUBROUTINE(ADD_VALUE) WITH_PARMS(@@NANS010 '''@@CANS020''')
FRPOP04   0000005000000000000001     @@GOTO     LABEL(L2)
FRPOP04   0000005100000000000001L3 : @@LABEL
FRPOP04   0000005200000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000005300000000000001     /* ********** END OF TEMPLATE STATEMENTS                              */
FRPOP04   0000005400000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000005500000000000001     @@COMMENT  COMMENT('Display the pop-up window until a record is selected')
FRPOP04   0000005600000000000001     DOUNTIL    COND('#LISTENTRY *GT 0')
FRPOP04   0000005700000000000001     POP_UP     AT_LOC(5 22) PANEL_TITL('@@CANS001') BROWSELIST(#LIST01) EXIT_KEY(*NO) MENU_KEY(*YES *MENU) PROMPT_KEY(*NO) CURSOR_LOC(*ATFIELD #@@CANS002)
FRPOP04   0000005800000000000001     ENDUNTIL
FRPOP04   0000005900000000000001     @@COMMENT  COMMENT('Retrieve selected entry & pass back to calling program')
FRPOP04   0000006000000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#LIST01)
FRPOP04   0000006100000000000001     EXCHANGE   FIELDS(#@@CANS002)
FRPOP04   0000006200000000000001     MENU
FRPOP04   0000006300000000000001     @@COMMENT  COMMENT('***************************************************' 'ADD_VALUE - Adds an entry to the browselist')
FRPOP04   0000006400000000000001     @@COMMENT  COMMENT('***************************************************')
FRPOP04   0000006500000000000001     SUBROUTINE NAME(ADD_VALUE) PARMS(#@@CANS002 #VALUEDESC)
FRPOP04   0000006600000000000001     ADD_ENTRY  TO_LIST(#LIST01)
FRPOP04   0000006700000000000001     ENDROUTINE
FRPOP04   0000006800000000000001     /* ********** ------------------------------------------------        */
FRPOP04   0000006900000000000001     /* ********** END OF RDML STATEMENTS                                  */
FRPOP04   0000007000000000000001     /* ********** ------------------------------------------------        */
FRPROTO   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPROTO   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPROTO   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPROTO   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPROTO   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPROTO   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPROTO   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPROTO   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPROTO   0000000900000000000001     FUNCTION   OPTIONS(*DIRECT)
FRPROTO   0000001000000000000001     /* ********** ******************************************************* */
FRPROTO   0000001100000000000001     /* **********                                                         */
FRPROTO   0000001200000000000001     /* ********** % %     P R O T O _ T Y P I N G  T E M P L A T E    % % */
FRPROTO   0000001300000000000001     /* ********** % %     P R O T O _ T Y P I N G  T E M P L A T E    % % */
FRPROTO   0000001400000000000001     /* ********** ===     P R O T O _ T Y P I N G  T E M P L A T E    === */
FRPROTO   0000001500000000000001     /* **********                                                         */
FRPROTO   0000001600000000000001     /* ********** ******************************************************* */
FRPROTO   0000001700000000000001     /* **********                                                         */
FRPROTO   0000001800000000000001     @@SET_IDX  IDX_NAME(G2) TO(0)
FRPROTO   0000001900000000000001     @@SET_IDX  IDX_NAME(RH) TO(1)
FRPROTO   0000002000000000000001     @@SET_IDX  IDX_NAME(DL) TO(1)
FRPROTO   0000002100000000000001     /* **********                                                         */
FRPROTO   0000002200000000000001     /* ********** TEMPLATE MAINLINE                                       */
FRPROTO   0000002300000000000001     /* **********                                                         */
FRPROTO   0000002400000000000001PT1: @@LABEL
FRPROTO   0000002500000000000001     /* **********                                                         */
FRPROTO   0000002600000000000001     @@QUESTION PROMPT('SEC001: Do you want to prototype SCREENs or REPORTs or EXIT ?') ANSWER(@@CANS002) EXTEND('At this point you can decide what you want to prototype.' 'SCREEN - will allow you to set up screen panels.' 'REPORT - will allow you to set up report heading and detail formats.' 'EXIT   - will end this prototyping session.' 'Use the HELP function key for more details about this template.') LOWER(*NO) VALUES(SCREEN REPORT EXIT) HELPIDS(HELP010 HELP100)
FRPROTO   0000002700000000000001     /* **********                                                         */
FRPROTO   0000002800000000000001     /* **********                                                         */
FRPROTO   0000002900000000000001     @@IF       COND((*IF @@CANS002 *EQ EXIT)) GOTO(END)
FRPROTO   0000003000000000000001     /* **********                                                         */
FRPROTO   0000003100000000000001     @@QUESTION PROMPT('SEC001: Specify a title for this section of the prototype.') ANSWER(@@CANS300) EXTEND(1234567890123456789012345678901234567890 'Please enter up to 40 characters of text as a title.' 'You are currently prototyping a @@CANS002' 'Use the HELP function key for more details about this template.') HELPIDS(HELP010 HELP110)
FRPROTO   0000003200000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000003300000000000001     @@COMMENT  COMMENT('TITLE : @@CANS300')
FRPROTO   0000003400000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000003500000000000001     @@COMMENT  COMMENT('***********************************')
FRPROTO   0000003600000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000003700000000000001     /* **********                                                         */
FRPROTO   0000003800000000000001     @@QUESTION PROMPT('SEC001: Do you want to specify any descriptive text ?') ANSWER(@@CANS100) EXTEND('If you want to place any comments at the start of this section of the' 'function specify Y for YES. If not specify N for No.' 'You are currently prototyping a @@CANS002' 'Use the HELP function key for more details about this template.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP120)
FRPROTO   0000003900000000000001     @@IF       COND((*IF @@CANS100 *NE Y)) GOTO(PTB)
FRPROTO   0000004000000000000001     @@SET_IDX  IDX_NAME(GO) TO(8)
FRPROTO   0000004100000000000001     @@GOTO     LABEL(SR6)
FRPROTO   0000004200000000000001R08: @@LABEL
FRPROTO   0000004300000000000001     /* **********                                                         */
FRPROTO   0000004400000000000001PTB: @@IF       COND((*IF @@CANS002 *EQ REPORT)) GOTO(REP)
FRPROTO   0000004500000000000001     @@IF       COND((*IF @@CANS002 *EQ SCREEN)) GOTO(SCN)
FRPROTO   0000004600000000000001     /* **********                                                         */
FRPROTO   0000004700000000000001     /* **********                                                         */
FRPROTO   0000004800000000000001SCN: @@LABEL
FRPROTO   0000004900000000000001     /* **********                                                         */
FRPROTO   0000005000000000000001     /* ********** DETERMINE SCREEN TYPE POP_UP, OR DISPLAY                */
FRPROTO   0000005100000000000001     /* **********                                                         */
FRPROTO   0000005200000000000001     @@QUESTION PROMPT('SEC002: Do you want a POPUP panel or FLAT screen panel ?') ANSWER(@@CANS003) EXTEND('Select what kind of screen panel you want to prototype.' 'POPUP - will generate a POP_UP style screen panel.' 'FLAT  - will generate a normal flat screen panel.' 'You are currently ProtoTyping a @@CANS002' 'Use the HELP function key for more details about this template.') LOWER(*NO) VALUES(POPUP FLAT) HELPIDS(HELP010 HELP200)
FRPROTO   0000005300000000000001     @@QUESTION PROMPT('SEC003: Will this screen DISPLAY data or be INPUT capable ?') ANSWER(@@CANS004) EXTEND('DISPLAY - will prototype a screen panel with output only fields.' 'INPUT   - will generate a screen panel with input capable fields.' 'You are currently prototyping a @@CANS003 @@CANS002' 'Use the HELP function key for more details about this template.') LOWER(*NO) VALUES(DISPLAY INPUT) HELPIDS(HELP010 HELP300)
FRPROTO   0000005400000000000001     /* **********                                                         */
FRPROTO   0000005500000000000001     /* ********** EXECUTE ROUTINE TO BUILD LIST OF FIELDS                 */
FRPROTO   0000005600000000000001     /* **********                                                         */
FRPROTO   0000005700000000000001     @@SET_IDX  IDX_NAME(GO) TO(1)
FRPROTO   0000005800000000000001     @@GOTO     LABEL(SR1)
FRPROTO   0000005900000000000001R01: @@LABEL
FRPROTO   0000006000000000000001     /* **********                                                         */
FRPROTO   0000006100000000000001     @@SET_IDX  IDX_NAME(GO) TO(2)
FRPROTO   0000006200000000000001     @@GOTO     LABEL(SR2)
FRPROTO   0000006300000000000001R02: @@LABEL
FRPROTO   0000006400000000000001     /* **********                                                         */
FRPROTO   0000006500000000000001     @@QUESTION PROMPT('SEC006: Enter a name for this group of fields.') ANSWER(@@CANS012) EXTEND('123456789 Do not use more than 9 characters. Do not use quotes. Some' 'suggestions are FLDGRP001, or EMPDETAIL.' 'Use a name that is unique to this protoyping session.' 'You are currently designing a @@CANS003 @@CANS004.' 'Use the HELP function key for more details about this template.') LOWER(*NO) HELPIDS(HELP010 HELP600)
FRPROTO   0000006600000000000001     /* **********                                                         */
FRPROTO   0000006700000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000006800000000000001     @@COMMENT  COMMENT('Panel group')
FRPROTO   0000006900000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000007000000000000001     GROUP_BY   NAME(#@@CANS012) FIELDS(@@LST04)
FRPROTO   0000007100000000000001     @@COMMENT  COMMENT('Set some default values')
FRPROTO   0000007200000000000001     CHANGE     FIELD(#@@CANS012) TO(*HIVAL)
FRPROTO   0000007300000000000001     /* **********                                                         */
FRPROTO   0000007400000000000001     /* ********** CHANGE ALPHA FIELDS TO ALL 'X'                          */
FRPROTO   0000007500000000000001     /* **********                                                         */
FRPROTO   0000007600000000000001     @@SET_IDX  IDX_NAME(GO) TO(9)
FRPROTO   0000007700000000000001     @@GOTO     LABEL(SR7)
FRPROTO   0000007800000000000001R09: @@LABEL
FRPROTO   0000007900000000000001     /* **********                                                         */
FRPROTO   0000008000000000000001     /* **********                                                         */
FRPROTO   0000008100000000000001     @@QUESTION PROMPT('SEC005: Will this @@CANS003 @@CANS002 contain a scrolling list of data ?') ANSWER(@@CANS007) EXTEND('Do you want to display fields in a list form on the bottom half of' 'this screen panel. Y = Yes, N = No.' 'You are currently prototyping a @@CANS003 @@CANS002' 'Use the HELP function key for more details about this template.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP500)
FRPROTO   0000008200000000000001     /* **********                                                         */
FRPROTO   0000008300000000000001     @@IF       COND((*IF @@CANS007 *EQ N)) GOTO(CNT)
FRPROTO   0000008400000000000001     /* **********                                                         */
FRPROTO   0000008500000000000001     /* ********** EXECUTE ROUTINE TO BUILD LIST OF FIELDS                 */
FRPROTO   0000008600000000000001     /* **********                                                         */
FRPROTO   0000008700000000000001     @@SET_IDX  IDX_NAME(GO) TO(3)
FRPROTO   0000008800000000000001     @@GOTO     LABEL(SR1)
FRPROTO   0000008900000000000001R03: @@LABEL
FRPROTO   0000009000000000000001     /* **********                                                         */
FRPROTO   0000009100000000000001     @@SET_IDX  IDX_NAME(GO) TO(4)
FRPROTO   0000009200000000000001     @@GOTO     LABEL(SR2)
FRPROTO   0000009300000000000001R04: @@LABEL
FRPROTO   0000009400000000000001     /* **********                                                         */
FRPROTO   0000009500000000000001     @@QUESTION PROMPT('SEC006: Enter a name for this list of fields.') ANSWER(@@CANS014) EXTEND('123456789 Only use up to 9 characters. Do not use quotes. Some' 'suggestions are FLDLST001, or EMPLIST.' 'The name MUST be unique within this function - @@FUNCTION.' 'You are currently designing a @@CANS003 @@CANS004.' 'Use the HELP function key for more details about this template.') LOWER(*NO) HELPIDS(HELP010 HELP600)
FRPROTO   0000009600000000000001     /* **********                                                         */
FRPROTO   0000009700000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000009800000000000001     @@COMMENT  COMMENT('List definition')
FRPROTO   0000009900000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000010000000000000001     DEF_LIST   NAME(#@@CANS014) FIELDS(@@LST04)
FRPROTO   0000010100000000000001     @@COMMENT  COMMENT('Set some default values')
FRPROTO   0000010200000000000001     CHANGE     FIELD(#@@CANS014) TO(*HIVAL)
FRPROTO   0000010300000000000001     /* **********                                                         */
FRPROTO   0000010400000000000001     /* ********** CHANGE ALPHA FIELDS TO ALL 'X'                          */
FRPROTO   0000010500000000000001     /* **********                                                         */
FRPROTO   0000010600000000000001     @@SET_IDX  IDX_NAME(GO) TO(10)
FRPROTO   0000010700000000000001     @@GOTO     LABEL(SR7)
FRPROTO   0000010800000000000001R10: @@LABEL
FRPROTO   0000010900000000000001     /* **********                                                         */
FRPROTO   0000011000000000000001     /* ********** PUT SOME VALUES IN THE LIST                             */
FRPROTO   0000011100000000000001     /* **********                                                         */
FRPROTO   0000011200000000000001     @@COMMENT  COMMENT('Add some dummy entries to list.')
FRPROTO   0000011300000000000001     CLR_LIST   NAMED(#@@CANS014)
FRPROTO   0000011400000000000001     INZ_LIST   NAMED(#@@CANS014) NUM_ENTRYS(30)
FRPROTO   0000011500000000000001     /* **********                                                         */
FRPROTO   0000011600000000000001CNT: @@LABEL
FRPROTO   0000011700000000000001     /* **********                                                         */
FRPROTO   0000011800000000000001     /* ********** FOR INPUT SCREENS SET MODE TO ADD                       */
FRPROTO   0000011900000000000001     /* **********                                                         */
FRPROTO   0000012000000000000001     @@IF       COND((*IF @@CANS004 *EQ DISPLAY)) GOTO(L01)
FRPROTO   0000012100000000000001     SET_MODE   TO(*ADD)
FRPROTO   0000012200000000000001     @@GOTO     LABEL(L02)
FRPROTO   0000012300000000000001L01: @@LABEL
FRPROTO   0000012400000000000001     SET_MODE   TO(*DISPLAY)
FRPROTO   0000012500000000000001L02: @@LABEL
FRPROTO   0000012600000000000001     /* **********                                                         */
FRPROTO   0000012700000000000001     /* ********** ******************************************************* */
FRPROTO   0000012800000000000001     /* **********                                                         */
FRPROTO   0000012900000000000001     /* ********** EXECUTE ROUTINE TO SETUP PANEL LAYOUT                   */
FRPROTO   0000013000000000000001     /* **********                                                         */
FRPROTO   0000013100000000000001     @@SET_IDX  IDX_NAME(GO) TO(5)
FRPROTO   0000013200000000000001     @@GOTO     LABEL(SR5)
FRPROTO   0000013300000000000001R05: @@LABEL
FRPROTO   0000013400000000000001     /* **********                                                         */
FRPROTO   0000013500000000000001     @@COMMENT  COMMENT('Screen panels')
FRPROTO   0000013600000000000001     /* **********                                                         */
FRPROTO   0000013700000000000001     /* ********** GENERATE SCREEN PANEL                                   */
FRPROTO   0000013800000000000001     /* **********                                                         */
FRPROTO   0000013900000000000001     @@IF       COND((*IF @@CANS007 *EQ N)) GOTO(NBR)
FRPROTO   0000014000000000000001     @@IF       COND((*IF @@CANS003 *EQ POPUP)) GOTO(POP)
FRPROTO   0000014100000000000001     DISPLAY    FIELDS(#@@CANS012)   DESIGN(*@@CANS020) IDENTIFY(*@@CANS030)    PANEL_TITL('@@CANS040') BROWSELIST(#@@CANS014)
FRPROTO   0000014200000000000001     @@GOTO     LABEL(PTE)
FRPROTO   0000014300000000000001     /* **********                                                         */
FRPROTO   0000014400000000000001POP: @@LABEL
FRPROTO   0000014500000000000001     POP_UP     FIELDS(#@@CANS012) DESIGN(*@@CANS020) IDENTIFY(*@@CANS030)     PANEL_TITL('@@CANS040') AT_LOC(@@NANS010 @@NANS011) WITH_SIZE(@@NANS020 @@NANS021) BROWSELIST(#@@CANS014)
FRPROTO   0000014600000000000001     @@GOTO     LABEL(PTE)
FRPROTO   0000014700000000000001     /* **********                                                         */
FRPROTO   0000014800000000000001NBR: @@LABEL
FRPROTO   0000014900000000000001     @@IF       COND((*IF @@CANS003 *EQ POPUP)) GOTO(PO2)
FRPROTO   0000015000000000000001     DISPLAY    FIELDS(#@@CANS012) DESIGN(*@@CANS020) IDENTIFY(*@@CANS030)    PANEL_TITL('@@CANS040')
FRPROTO   0000015100000000000001     @@GOTO     LABEL(PTE)
FRPROTO   0000015200000000000001     /* **********                                                         */
FRPROTO   0000015300000000000001PO2: @@LABEL
FRPROTO   0000015400000000000001     POP_UP     FIELDS(#@@CANS012) DESIGN(*@@CANS020) IDENTIFY(*@@CANS030)     PANEL_TITL('@@CANS040') AT_LOC(@@NANS010 @@NANS011) WITH_SIZE(@@NANS020 @@NANS021)
FRPROTO   0000015500000000000001     @@GOTO     LABEL(PTE)
FRPROTO   0000015600000000000001     /* **********                                                         */
FRPROTO   0000015700000000000001     /* ********** ******************************************************* */
FRPROTO   0000015800000000000001     /* **********                                                         */
FRPROTO   0000015900000000000001REP: @@LABEL
FRPROTO   0000016000000000000001     @@QUESTION PROMPT('SEC007: Do you want to prototype the Report HEADER or Report DETAIL ?') ANSWER(@@CANS008) EXTEND('HEADER - will allow you to prototype the header section of a report.' 'DETAIL - will allow you to prototype the detail section of a report.' 'Note if you try to prototype more than eight HEADERS or DETAILs it will be' 'ignored. IE You will be returned to SEC001.' 'You are currently prototyping a @@CANS002' 'Use the HELP function key for more details about this template.') LOWER(*NO) VALUES(HEADER DETAIL) HELPIDS(HELP010 HELP700)
FRPROTO   0000016100000000000001     /* **********                                                         */
FRPROTO   0000016200000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(8) IF_GT(PT1)
FRPROTO   0000016300000000000001     /* **********                                                         */
FRPROTO   0000016400000000000001     /* ********** GENERATE DEF_HEAD                                       */
FRPROTO   0000016500000000000001     /* **********                                                         */
FRPROTO   0000016600000000000001     @@IF       COND((*IF @@CANS008 *EQ DETAIL)) GOTO(DET)
FRPROTO   0000016700000000000001     /* **********                                                         */
FRPROTO   0000016800000000000001     @@QUESTION PROMPT('SEC006: Enter a name for this report heading.') ANSWER(@@CANS015) EXTEND('123456789 Only use up to 9 characters. Do not use quotes. Some' 'suggestions are HEADERnn, or REPHEAD.' 'The name MUST be unique within this function - @@FUNCTION.' 'You are currently prototyping a @@CANS002 @@CANS008.' 'Use the HELP function key for more details about this template.') LOWER(*NO) HELPIDS(HELP010 HELP600)
FRPROTO   0000016900000000000001     /* **********                                                         */
FRPROTO   0000017000000000000001     /* ********** EXECUTE ROUTINE TO BUILD LIST OF FIELDS                 */
FRPROTO   0000017100000000000001     /* **********                                                         */
FRPROTO   0000017200000000000001OK : @@SET_IDX  IDX_NAME(GO) TO(6)
FRPROTO   0000017300000000000001     @@GOTO     LABEL(SR1)
FRPROTO   0000017400000000000001R06: @@LABEL
FRPROTO   0000017500000000000001     /* **********                                                         */
FRPROTO   0000017600000000000001     @@SET_IDX  IDX_NAME(GO) TO(7)
FRPROTO   0000017700000000000001     @@GOTO     LABEL(SR2)
FRPROTO   0000017800000000000001R07: @@LABEL
FRPROTO   0000017900000000000001     /* **********                                                         */
FRPROTO   0000018000000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000018100000000000001     @@COMMENT  COMMENT('Report heading')
FRPROTO   0000018200000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000018300000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(1) IF_EQ(RH1)
FRPROTO   0000018400000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(2) IF_EQ(RH2)
FRPROTO   0000018500000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(3) IF_EQ(RH3)
FRPROTO   0000018600000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(4) IF_EQ(RH4)
FRPROTO   0000018700000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(5) IF_EQ(RH5)
FRPROTO   0000018800000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(6) IF_EQ(RH6)
FRPROTO   0000018900000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(7) IF_EQ(RH7)
FRPROTO   0000019000000000000001     @@CMP_IDX  IDX_NAME(RH) IDX_VALUE(8) IF_EQ(RH8)
FRPROTO   0000019100000000000001RH1: @@LABEL
FRPROTO   0000019200000000000001     DEF_HEAD   NAME(#@@CANS015) FIELDS(@@LST04) FOR_REPORT(1)
FRPROTO   0000019300000000000001     @@GOTO     LABEL(RRR)
FRPROTO   0000019400000000000001RH2: @@LABEL
FRPROTO   0000019500000000000001     DEF_HEAD   NAME(#@@CANS015) FIELDS(@@LST04) FOR_REPORT(2)
FRPROTO   0000019600000000000001     @@GOTO     LABEL(RRR)
FRPROTO   0000019700000000000001RH3: @@LABEL
FRPROTO   0000019800000000000001     DEF_HEAD   NAME(#@@CANS015) FIELDS(@@LST04) FOR_REPORT(3)
FRPROTO   0000019900000000000001     @@GOTO     LABEL(RRR)
FRPROTO   0000020000000000000001RH4: @@LABEL
FRPROTO   0000020100000000000001     DEF_HEAD   NAME(#@@CANS015) FIELDS(@@LST04) FOR_REPORT(4)
FRPROTO   0000020200000000000001     @@GOTO     LABEL(RRR)
FRPROTO   0000020300000000000001RH5: @@LABEL
FRPROTO   0000020400000000000001     DEF_HEAD   NAME(#@@CANS015) FIELDS(@@LST04) FOR_REPORT(5)
FRPROTO   0000020500000000000001     @@GOTO     LABEL(RRR)
FRPROTO   0000020600000000000001RH6: @@LABEL
FRPROTO   0000020700000000000001     DEF_HEAD   NAME(#@@CANS015) FIELDS(@@LST04) FOR_REPORT(6)
FRPROTO   0000020800000000000001     @@GOTO     LABEL(RRR)
FRPROTO   0000020900000000000001RH7: @@LABEL
FRPROTO   0000021000000000000001     DEF_HEAD   NAME(#@@CANS015) FIELDS(@@LST04) FOR_REPORT(7)
FRPROTO   0000021100000000000001     @@GOTO     LABEL(RRR)
FRPROTO   0000021200000000000001RH8: @@LABEL
FRPROTO   0000021300000000000001     DEF_HEAD   NAME(#@@CANS015) FIELDS(@@LST04) FOR_REPORT(8)
FRPROTO   0000021400000000000001RRR: @@LABEL
FRPROTO   0000021500000000000001     @@COMMENT  COMMENT('Set some default values')
FRPROTO   0000021600000000000001     CHANGE     FIELD(#@@CANS015) TO(*HIVAL)
FRPROTO   0000021700000000000001     /* **********                                                         */
FRPROTO   0000021800000000000001     /* ********** CHANGE ALPHA FIELDS TO ALL 'X'                          */
FRPROTO   0000021900000000000001     /* **********                                                         */
FRPROTO   0000022000000000000001     @@SET_IDX  IDX_NAME(GO) TO(12)
FRPROTO   0000022100000000000001     @@GOTO     LABEL(SR7)
FRPROTO   0000022200000000000001R12: @@LABEL
FRPROTO   0000022300000000000001     /* **********                                                         */
FRPROTO   0000022400000000000001     /* ********** INCREMENT REPORT HEADER COUNTER                         */
FRPROTO   0000022500000000000001     /* **********                                                         */
FRPROTO   0000022600000000000001     @@INC_IDX  IDX_NAME(RH)
FRPROTO   0000022700000000000001     /* **********                                                         */
FRPROTO   0000022800000000000001     @@GOTO     LABEL(PTE)
FRPROTO   0000022900000000000001     /* **********                                                         */
FRPROTO   0000023000000000000001     /* ********** GENERATE DEF_LINE                                       */
FRPROTO   0000023100000000000001     /* **********                                                         */
FRPROTO   0000023200000000000001DET: @@LABEL
FRPROTO   0000023300000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(8) IF_GT(PT1)
FRPROTO   0000023400000000000001     @@QUESTION PROMPT('SEC006: Enter a name for this detail line.') ANSWER(@@CANS016) EXTEND('123456789 Only use up to nine characters. Do not use quotes. Some' 'suggestions are LINEnn, or DETAILnn.' 'The name MUST be unique within this function - @@FUNCTION.' 'You are currently prototyping a @@CANS002 @@CANS008.' 'Use the HELP function key for more details about this template.') LOWER(*NO) HELPIDS(HELP010 HELP600)
FRPROTO   0000023500000000000001     /* **********                                                         */
FRPROTO   0000023600000000000001     /* ********** EXECUTE ROUTINE TO BUILD LIST OF FIELDS                 */
FRPROTO   0000023700000000000001     /* **********                                                         */
FRPROTO   0000023800000000000001     @@SET_IDX  IDX_NAME(GO) TO(14)
FRPROTO   0000023900000000000001     @@GOTO     LABEL(SR1)
FRPROTO   0000024000000000000001R14: @@LABEL
FRPROTO   0000024100000000000001     /* **********                                                         */
FRPROTO   0000024200000000000001     @@SET_IDX  IDX_NAME(GO) TO(15)
FRPROTO   0000024300000000000001     @@GOTO     LABEL(SR2)
FRPROTO   0000024400000000000001R15: @@LABEL
FRPROTO   0000024500000000000001     /* **********                                                         */
FRPROTO   0000024600000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000024700000000000001     @@COMMENT  COMMENT('Report detail line')
FRPROTO   0000024800000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000024900000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(1) IF_EQ(DL1)
FRPROTO   0000025000000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(2) IF_EQ(DL2)
FRPROTO   0000025100000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(3) IF_EQ(DL3)
FRPROTO   0000025200000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(4) IF_EQ(DL4)
FRPROTO   0000025300000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(5) IF_EQ(DL5)
FRPROTO   0000025400000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(6) IF_EQ(DL6)
FRPROTO   0000025500000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(7) IF_EQ(DL7)
FRPROTO   0000025600000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(8) IF_EQ(DL8)
FRPROTO   0000025700000000000001DL1: @@LABEL
FRPROTO   0000025800000000000001     DEF_LINE   NAME(#@@CANS016) FIELDS(@@LST04) FOR_REPORT(1)
FRPROTO   0000025900000000000001     @@GOTO     LABEL(DDD)
FRPROTO   0000026000000000000001DL2: @@LABEL
FRPROTO   0000026100000000000001     DEF_LINE   NAME(#@@CANS016) FIELDS(@@LST04) FOR_REPORT(2)
FRPROTO   0000026200000000000001     @@GOTO     LABEL(DDD)
FRPROTO   0000026300000000000001DL3: @@LABEL
FRPROTO   0000026400000000000001     DEF_LINE   NAME(#@@CANS016) FIELDS(@@LST04) FOR_REPORT(3)
FRPROTO   0000026500000000000001     @@GOTO     LABEL(DDD)
FRPROTO   0000026600000000000001DL4: @@LABEL
FRPROTO   0000026700000000000001     DEF_LINE   NAME(#@@CANS016) FIELDS(@@LST04) FOR_REPORT(4)
FRPROTO   0000026800000000000001     @@GOTO     LABEL(DDD)
FRPROTO   0000026900000000000001DL5: @@LABEL
FRPROTO   0000027000000000000001     DEF_LINE   NAME(#@@CANS016) FIELDS(@@LST04) FOR_REPORT(5)
FRPROTO   0000027100000000000001     @@GOTO     LABEL(DDD)
FRPROTO   0000027200000000000001DL6: @@LABEL
FRPROTO   0000027300000000000001     DEF_LINE   NAME(#@@CANS016) FIELDS(@@LST04) FOR_REPORT(6)
FRPROTO   0000027400000000000001     @@GOTO     LABEL(DDD)
FRPROTO   0000027500000000000001DL7: @@LABEL
FRPROTO   0000027600000000000001     DEF_LINE   NAME(#@@CANS016) FIELDS(@@LST04) FOR_REPORT(7)
FRPROTO   0000027700000000000001     @@GOTO     LABEL(DDD)
FRPROTO   0000027800000000000001DL8: @@LABEL
FRPROTO   0000027900000000000001     DEF_LINE   NAME(#@@CANS016) FIELDS(@@LST04) FOR_REPORT(8)
FRPROTO   0000028000000000000001     @@COMMENT  COMMENT('Set some default values')
FRPROTO   0000028100000000000001     CHANGE     FIELD(#@@CANS016) TO(*HIVAL)
FRPROTO   0000028200000000000001     /* **********                                                         */
FRPROTO   0000028300000000000001     /* ********** EXECUTE ROUTINE TO GIVE FIELDS VALUES                   */
FRPROTO   0000028400000000000001     /* **********                                                         */
FRPROTO   0000028500000000000001DDD: @@SET_IDX  IDX_NAME(GO) TO(11)
FRPROTO   0000028600000000000001     @@GOTO     LABEL(SR7)
FRPROTO   0000028700000000000001R11: @@LABEL
FRPROTO   0000028800000000000001     /* **********                                                         */
FRPROTO   0000028900000000000001     @@COMMENT  COMMENT('Print some dummy report lines.')
FRPROTO   0000029000000000000001     BEGIN_LOOP TO(10)
FRPROTO   0000029100000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(1) IF_EQ(PL1)
FRPROTO   0000029200000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(2) IF_EQ(PL2)
FRPROTO   0000029300000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(3) IF_EQ(PL3)
FRPROTO   0000029400000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(4) IF_EQ(PL4)
FRPROTO   0000029500000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(5) IF_EQ(PL5)
FRPROTO   0000029600000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(6) IF_EQ(PL6)
FRPROTO   0000029700000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(7) IF_EQ(PL7)
FRPROTO   0000029800000000000001     @@CMP_IDX  IDX_NAME(DL) IDX_VALUE(8) IF_EQ(PL8)
FRPROTO   0000029900000000000001PL1: @@LABEL
FRPROTO   0000030000000000000001     PRINT      LINE(#@@CANS016) ON_REPORT(1)
FRPROTO   0000030100000000000001     @@GOTO     LABEL(PPP)
FRPROTO   0000030200000000000001PL2: @@LABEL
FRPROTO   0000030300000000000001     PRINT      LINE(#@@CANS016) ON_REPORT(2)
FRPROTO   0000030400000000000001     @@GOTO     LABEL(PPP)
FRPROTO   0000030500000000000001PL3: @@LABEL
FRPROTO   0000030600000000000001     PRINT      LINE(#@@CANS016) ON_REPORT(3)
FRPROTO   0000030700000000000001     @@GOTO     LABEL(PPP)
FRPROTO   0000030800000000000001PL4: @@LABEL
FRPROTO   0000030900000000000001     PRINT      LINE(#@@CANS016) ON_REPORT(4)
FRPROTO   0000031000000000000001     @@GOTO     LABEL(PPP)
FRPROTO   0000031100000000000001PL5: @@LABEL
FRPROTO   0000031200000000000001     PRINT      LINE(#@@CANS016) ON_REPORT(5)
FRPROTO   0000031300000000000001     @@GOTO     LABEL(PPP)
FRPROTO   0000031400000000000001PL6: @@LABEL
FRPROTO   0000031500000000000001     PRINT      LINE(#@@CANS016) ON_REPORT(6)
FRPROTO   0000031600000000000001     @@GOTO     LABEL(PPP)
FRPROTO   0000031700000000000001PL7: @@LABEL
FRPROTO   0000031800000000000001     PRINT      LINE(#@@CANS016) ON_REPORT(7)
FRPROTO   0000031900000000000001     @@GOTO     LABEL(PPP)
FRPROTO   0000032000000000000001PL8: @@LABEL
FRPROTO   0000032100000000000001     PRINT      LINE(#@@CANS016) ON_REPORT(8)
FRPROTO   0000032200000000000001PPP: @@LABEL
FRPROTO   0000032300000000000001     END_LOOP
FRPROTO   0000032400000000000001     /* **********                                                         */
FRPROTO   0000032500000000000001     /* ********** INCREMENT DETAIL LINE COUNTER                           */
FRPROTO   0000032600000000000001     /* **********                                                         */
FRPROTO   0000032700000000000001     @@INC_IDX  IDX_NAME(DL)
FRPROTO   0000032800000000000001     /* **********                                                         */
FRPROTO   0000032900000000000001     @@GOTO     LABEL(PTE)
FRPROTO   0000033000000000000001     /* **********                                                         */
FRPROTO   0000033100000000000001PTE: @@GOTO     LABEL(PT1)
FRPROTO   0000033200000000000001     /* ********** ******************************************************* */
FRPROTO   0000033300000000000001     /* **********                                                         */
FRPROTO   0000033400000000000001     /* ********** SUBROUTINES (WELL SORT OF)                              */
FRPROTO   0000033500000000000001     /* **********                                                         */
FRPROTO   0000033600000000000001     /* ********** ******************************************************* */
FRPROTO   0000033700000000000001     /* ********** SR1 - CLEAR LISTS                                       */
FRPROTO   0000033800000000000001     /* **********                                                         */
FRPROTO   0000033900000000000001SR1: @@CLR_LST  NUMBER(01)
FRPROTO   0000034000000000000001     @@CLR_LST  NUMBER(02)
FRPROTO   0000034100000000000001     /* **********                                                         */
FRPROTO   0000034200000000000001     @@CMP_IDX  IDX_NAME(G2) IDX_VALUE(0) IF_GT(SR2)
FRPROTO   0000034300000000000001     /* **********                                                         */
FRPROTO   0000034400000000000001     @@CLR_LST  NUMBER(04)
FRPROTO   0000034500000000000001     /* **********                                                         */
FRPROTO   0000034600000000000001     /* ********** EXECUTE GOTO RETURN ROUTINE                             */
FRPROTO   0000034700000000000001     /* **********                                                         */
FRPROTO   0000034800000000000001     @@GOTO     LABEL(SR3)
FRPROTO   0000034900000000000001     /* **********                                                         */
FRPROTO   0000035000000000000001     /* ********** ******************************************************* */
FRPROTO   0000035100000000000001     /* ********** SR2 -                 RETRIEVE FIELDS                   */
FRPROTO   0000035200000000000001     /* **********                                                         */
FRPROTO   0000035300000000000001SR2: @@LABEL
FRPROTO   0000035400000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('SEC004: Select the file that contains the fields for your @@CANS002.') EXTEND('The file name may be specified in full, partially (to cause a partial' 'list of available files to be displayed) or leave blank (to cause a full' 'list of available files to be displayed). When a list of files is,' 'displayed the file required may be selected from the list.' 'Fields from up to 50 related files can be selected at any one time.' 'Use the HELP function key for more details about this template.' 'You are currently prototyping a @@CANS002') HELPIDS(HELP010 HELP400)
FRPROTO   0000035500000000000001     @@SET_IDX  IDX_NAME(FC) TO(1)
FRPROTO   0000035600000000000001MFI: @@CMP_IDX  IDX_NAME(FC) IDX_VALUE(@@TFMX) IF_GT(NFI)
FRPROTO   0000035700000000000001     @@RTV_FLDS FROM_FILE(FC) INTO_LST(1)
FRPROTO   0000035800000000000001     @@INC_IDX  IDX_NAME(FC)
FRPROTO   0000035900000000000001     @@GOTO     LABEL(MFI)
FRPROTO   0000036000000000000001     /* **********                                                         */
FRPROTO   0000036100000000000001NFI: @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 ' Select' 'Required' ' Fields')) HELPIDS(HELP010 HELP410)
FRPROTO   0000036200000000000001     @@MRG_LSTS FROM_LSTS((2)) INTO_LST(4)
FRPROTO   0000036300000000000001     @@QUESTION PROMPT('SEC004: Do you want to select fields from any more files ?') ANSWER(@@CANS009) EXTEND('Press HELP function key for details on how to include fields from the' 'dictionary into your field selection.' 'Use the HELP function key for more details about this template.' 'You are currently prototyping a @@CANS002') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP400)
FRPROTO   0000036400000000000001     /* **********                                                         */
FRPROTO   0000036500000000000001     @@IF       COND((*IF @@CANS009 *EQ 'N')) GOTO(ER2)
FRPROTO   0000036600000000000001     @@SET_IDX  IDX_NAME(G2) TO(1)
FRPROTO   0000036700000000000001     @@GOTO     LABEL(SR1)
FRPROTO   0000036800000000000001     /* **********                                                         */
FRPROTO   0000036900000000000001ER2: @@LABEL
FRPROTO   0000037000000000000001     @@MAK_LSTS FROM_LSTS(4) INTO_LSTS((5 'Confirm' 'Fields ' *N *YESNO *ALL)) HELPIDS(HELP010 HELP430)
FRPROTO   0000037100000000000001     @@MRG_LSTS FROM_LSTS((5)) INTO_LST(4)
FRPROTO   0000037200000000000001     /* **********                                                         */
FRPROTO   0000037300000000000001     /* ********** EXECUTE GOTO RETURN ROUTINE                             */
FRPROTO   0000037400000000000001     /* **********                                                         */
FRPROTO   0000037500000000000001     @@SET_IDX  IDX_NAME(G2) TO(0)
FRPROTO   0000037600000000000001     @@GOTO     LABEL(SR3)
FRPROTO   0000037700000000000001     /* **********                                                         */
FRPROTO   0000037800000000000001     /* ********** ******************************************************* */
FRPROTO   0000037900000000000001     /* **********                                                         */
FRPROTO   0000038000000000000001     /* ********** SR3 - GOTO RETURN                                       */
FRPROTO   0000038100000000000001     /* ********** DETERMINES WHERE TO RETURN BASED ON VALUE IN            */
FRPROTO   0000038200000000000001     /* ********** THE INDEX "GO"                                          */
FRPROTO   0000038300000000000001     /* **********                                                         */
FRPROTO   0000038400000000000001SR3: @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(1) IF_EQ(R01)
FRPROTO   0000038500000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(2) IF_EQ(R02)
FRPROTO   0000038600000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(3) IF_EQ(R03)
FRPROTO   0000038700000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(4) IF_EQ(R04)
FRPROTO   0000038800000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(5) IF_EQ(R05)
FRPROTO   0000038900000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(6) IF_EQ(R06)
FRPROTO   0000039000000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(7) IF_EQ(R07)
FRPROTO   0000039100000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(8) IF_EQ(R08)
FRPROTO   0000039200000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(9) IF_EQ(R09)
FRPROTO   0000039300000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(10) IF_EQ(R10)
FRPROTO   0000039400000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(11) IF_EQ(R11)
FRPROTO   0000039500000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(12) IF_EQ(R12)
FRPROTO   0000039600000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(14) IF_EQ(R14)
FRPROTO   0000039700000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(15) IF_EQ(R15)
FRPROTO   0000039800000000000001     @@CMP_IDX  IDX_NAME(GO) IDX_VALUE(99) IF_EQ(R99)
FRPROTO   0000039900000000000001     /* **********                                                         */
FRPROTO   0000040000000000000001     /* ********** ******************************************************* */
FRPROTO   0000040100000000000001     /* **********                                                         */
FRPROTO   0000040200000000000001     /* ********** SR5 - PANEL LAYAOUT                                     */
FRPROTO   0000040300000000000001     /* **********                                                         */
FRPROTO   0000040400000000000001SR5: @@QUESTION PROMPT('SEC006: Design fields on the panel DOWN the screen or ACROSS the screen') ANSWER(@@CANS020) EXTEND('Reply DOWN or ACROSS only.' 'If your panel contains 17 (or less) fields, DOWN is the ' 'recommended value. If your panel contains more than 17' 'fields, ACROSS is the recommended value.' 'You are currently prototyping a @@CANS003 @@CANS002' 'Use the HELP function key for more details about this template.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP610)
FRPROTO   0000040500000000000001     @@QUESTION PROMPT('SEC006: How do you want to identify fields NOID, LABEL, DESC, COLHDG ?') ANSWER(@@CANS030) EXTEND('NOID   = No identification is needed for this field' 'LABEL  = The field will be identified by its label' 'DESC  = The field will be identified by its description' 'COLHDG = The field will be identified by its column heading' 'You are currently prototyping a @@CANS003 @@CANS002' 'Use the HELP function key for more details about this template.') LOWER(*NO) VALUES(NOID LABEL DESC COLHDG) HELPIDS(HELP010 HELP620)
FRPROTO   0000040600000000000001     @@QUESTION PROMPT('SEC006: Enter some text to describe this panel.') ANSWER(@@CANS040) EXTEND(12345678901234567890 'Use only 20 characters. Do not use quotes.' 'The text you specify here will appear at the top centre of the panel' 'generated by this prototyping session.' 'You are currently prototyping a @@CANS003 @@CANS002' 'Use the HELP function key for more details about this template.') HELPIDS(HELP010 HELP630)
FRPROTO   0000040700000000000001     /* **********                                                         */
FRPROTO   0000040800000000000001     /* ********** THESE QUESTIONS FOR POP_UPS ONLY                        */
FRPROTO   0000040900000000000001     /* **********                                                         */
FRPROTO   0000041000000000000001     @@IF       COND((*IF @@CANS003 *EQ FLAT)) GOTO(ER5)
FRPROTO   0000041100000000000001     @@QUESTION PROMPT('SEC006: At what row should the top left corner of the POPUP be situated ?') ANSWER(@@NANS010) EXTEND('You are currently prototyping a @@CANS003 @@CANS002' 'Use the HELP function key for more details about this template.') RANGE((5 20)) HELPIDS(HELP010 HELP640)
FRPROTO   0000041200000000000001     @@QUESTION PROMPT('SEC006: What column should the top left corner of the POPUP be situated ?') ANSWER(@@NANS011) EXTEND('You are currently prototyping a @@CANS003 @@CANS004' 'Use the HELP function key for more details about this template.') RANGE((5 75)) HELPIDS(HELP010 HELP640)
FRPROTO   0000041300000000000001     @@QUESTION PROMPT('SEC006: How wide do you want the POP_UP to be ?') ANSWER(@@NANS020) EXTEND('You are currently prototyping a @@CANS003 @@CANS002' 'Use the HELP function key for more details about this template.') RANGE((1 70)) HELPIDS(HELP010 HELP640)
FRPROTO   0000041400000000000001     @@QUESTION PROMPT('SEC006: How long do you want the POP_UP to be ?') ANSWER(@@NANS021) EXTEND('You are currently prototyping a @@CANS003 @@CANS002' 'Use the HELP function key for more details about this template.') RANGE((1 20)) HELPIDS(HELP010 HELP640)
FRPROTO   0000041500000000000001ER5: @@LABEL
FRPROTO   0000041600000000000001     /* **********                                                         */
FRPROTO   0000041700000000000001     /* ********** EXECUTE GOTO RETURN ROUTINE                             */
FRPROTO   0000041800000000000001     /* **********                                                         */
FRPROTO   0000041900000000000001     @@GOTO     LABEL(SR3)
FRPROTO   0000042000000000000001     /* **********                                                         */
FRPROTO   0000042100000000000001     /* **********                                                         */
FRPROTO   0000042200000000000001     /* ********** ******************************************************* */
FRPROTO   0000042300000000000001     /* **********                                                         */
FRPROTO   0000042400000000000001     /* ********** SR6 - ALLOWS COMMENTS TO BE PLACED IN FUNCTION          */
FRPROTO   0000042500000000000001     /* **********                                                         */
FRPROTO   0000042600000000000001SR6: @@QUESTION PROMPT('SEC001: Enter descriptive text now.') ANSWER(@@CANS200) EXTEND(1234567890123456789012345678901234567890 'Enter up to 40 characters of text only.' 'Use the HELP function key for more details about this template.' 'You are currently prototyping a @@CANS002') HELPIDS(HELP010 HELP120)
FRPROTO   0000042700000000000001     @@COMMENT  COMMENT(@@CANS200)
FRPROTO   0000042800000000000001     @@QUESTION PROMPT('SEC001: Do you want to specify more descriptive text for this function ?') ANSWER(@@CANS100) EXTEND('If you want to place any more comments at the start of this section of the' 'function specify Y for YES. if not specify N for No.' 'Use the HELP function key for more details about this template.' 'You are currently prototyping a @@CANS002') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP120)
FRPROTO   0000042900000000000001     /* **********                                                         */
FRPROTO   0000043000000000000001     @@IF       COND((*IF @@CANS100 *EQ Y)) GOTO(SR6)
FRPROTO   0000043100000000000001     /* **********                                                         */
FRPROTO   0000043200000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000043300000000000001     @@COMMENT  COMMENT('***********************************')
FRPROTO   0000043400000000000001     @@COMMENT  COMMENT('                                   ')
FRPROTO   0000043500000000000001     /* **********                                                         */
FRPROTO   0000043600000000000001     /* ********** EXECUTE GOTO RETURN ROUTINE                             */
FRPROTO   0000043700000000000001     /* **********                                                         */
FRPROTO   0000043800000000000001ER6: @@GOTO     LABEL(SR3)
FRPROTO   0000043900000000000001     /* ********** ******************************************************* */
FRPROTO   0000044000000000000001     /* **********                                                         */
FRPROTO   0000044100000000000001     /* ********** SR7 - GENERATE CODE TO FILL FIELDS WITH VALUES          */
FRPROTO   0000044200000000000001     /* **********                                                         */
FRPROTO   0000044300000000000001SR7: @@SET_IDX  IDX_NAME(FS) TO(0)
FRPROTO   0000044400000000000001LR7: @@INC_IDX  IDX_NAME(FS)
FRPROTO   0000044500000000000001     @@CMP_IDX  IDX_NAME(FS) IDX_VALUE(@@LNE05) IF_GT(ER7)
FRPROTO   0000044600000000000001     @@IF       COND((*IF @@LTP05FS *NE A)) GOTO(LB7)
FRPROTO   0000044700000000000001     USE        BUILTIN(FILLSTRING) WITH_ARGS('X') TO_GET(#@@LEL05FS)
FRPROTO   0000044800000000000001LB7: @@GOTO     LABEL(LR7)
FRPROTO   0000044900000000000001     /* **********                                                         */
FRPROTO   0000045000000000000001     /* ********** EXECUTE GOTO RETURN ROUTINE                             */
FRPROTO   0000045100000000000001     /* **********                                                         */
FRPROTO   0000045200000000000001ER7: @@GOTO     LABEL(SR3)
FRPROTO   0000045300000000000001     /* **********                                                         */
FRPROTO   0000045400000000000001     /* **********                                                         */
FRPROTO   0000045500000000000001     /* ********** ******************************************************* */
FRPROTO   0000045600000000000001     /* **********                                                         */
FRPROTO   0000045700000000000001END: @@LABEL
FRPROTO   0000045800000000000001     @@SET_IDX  IDX_NAME(GO) TO(99)
FRPROTO   0000045900000000000001     @@GOTO     LABEL(SR1)
FRPROTO   0000046000000000000001R99: @@LABEL
FRPRT01   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT01   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPRT01   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPRT01   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPRT01   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPRT01   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPRT01   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPRT01   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT01   0000000900000000000001     /* ********** ======================================================= */
FRPRT01   0000001000000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRPRT01   0000001100000000000001     /* ********** ======================================================= */
FRPRT01   0000001200000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRPRT01   0000001300000000000001     /* ********** ======================================================= */
FRPRT01   0000001400000000000001     /* ********** GET NAMES OF UP TO 50 RELATED FILES                     */
FRPRT01   0000001500000000000001     /* ********** ======================================================= */
FRPRT01   0000001600000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the primary file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRPRT01   0000001700000000000001     /* ********** ======================================================= */
FRPRT01   0000001800000000000001     /* ********** LOAD DETAILS OF ALL FIELDS FROM ALL FILES INTO LIST 1   */
FRPRT01   0000001900000000000001     /* ********** ======================================================= */
FRPRT01   0000002000000000000001     @@CLR_LST  NUMBER(1)
FRPRT01   0000002100000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRPRT01   0000002200000000000001A10: @@LABEL
FRPRT01   0000002300000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRPRT01   0000002400000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(1)
FRPRT01   0000002500000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT01   0000002600000000000001     @@GOTO     LABEL(A10)
FRPRT01   0000002700000000000001A20: @@LABEL
FRPRT01   0000002800000000000001     /* ********** ======================================================= */
FRPRT01   0000002900000000000001     /* ********** ASK THE USER TO MAKE A LIST OF HEADER FIELDS IN LIST 5  */
FRPRT01   0000003000000000000001     /* ********** AND DETAIL FIELDS IN LIST 2                             */
FRPRT01   0000003100000000000001     /* ********** ======================================================= */
FRPRT01   0000003200000000000001     @@CLR_LST  NUMBER(2)
FRPRT01   0000003300000000000001     @@CLR_LST  NUMBER(5)
FRPRT01   0000003400000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields to' 'Appear in' 'Detail Line' *SEQUENCE *ALL) (5 'Fields to' 'Appear in' 'Headings' *SEQUENCE *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRPRT01   0000003500000000000001     @@CLR_LST  NUMBER(7)
FRPRT01   0000003600000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((7 'Fields to' 'Trigger a' 'New Page' *SEQUENCE *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRPRT01   0000003700000000000001     /* ********** ======================================================= */
FRPRT01   0000003800000000000001     /* ********** MERGE LISTS 2, 5 and 7 into LIST 22                     */
FRPRT01   0000003900000000000001     /* ********** ======================================================= */
FRPRT01   0000004000000000000001     @@CLR_LST  NUMBER(22)
FRPRT01   0000004100000000000001     @@MRG_LSTS FROM_LSTS(2) INTO_LST(22)
FRPRT01   0000004200000000000001     @@MRG_LSTS FROM_LSTS(5) INTO_LST(22)
FRPRT01   0000004300000000000001     @@MRG_LSTS FROM_LSTS(7) INTO_LST(22)
FRPRT01   0000004400000000000001     /* ********** ======================================================= */
FRPRT01   0000004500000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 22               */
FRPRT01   0000004600000000000001     /* ********** ======================================================= */
FRPRT01   0000004700000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT01   0000004800000000000001A30: @@LABEL
FRPRT01   0000004900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRPRT01   0000005000000000000001     @@CLR_LST  NUMBER(3)
FRPRT01   0000005100000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRPRT01   0000005200000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(22)
FRPRT01   0000005300000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT01   0000005400000000000001     @@GOTO     LABEL(A30)
FRPRT01   0000005500000000000001A40: @@LABEL
FRPRT01   0000005600000000000001     /* ********** ======================================================= */
FRPRT01   0000005700000000000001     /* ********** ASK FOR THE REPORT TITLE                                */
FRPRT01   0000005800000000000001     /* ********** ======================================================= */
FRPRT01   0000005900000000000001     @@QUESTION PROMPT('Please specify a title for this report') ANSWER(@@CANS005) EXTEND(' 1234567890123456789012345678901234567890' 'Use from 1 to 40 characters for your title. Use upper and lowercase' 'characters. For additional information and examples use the HELP function' 'key.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRPRT01   0000006000000000000001     /* ********** ======================================================= */
FRPRT01   0000006100000000000001     /* ********** ASK ABOUT RUNNING IN BATCH                              */
FRPRT01   0000006200000000000001     /* ********** ======================================================= */
FRPRT01   0000006300000000000001     @@QUESTION PROMPT('Do you want this report to run in batch') ANSWER(@@CANS006) EXTEND('Reply Y or N only. For additional information and examples use the ' 'HELP function key.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050)
FRPRT01   0000006400000000000001     /* ********** ======================================================= */
FRPRT01   0000006500000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRPRT01   0000006600000000000001     /* ********** ======================================================= */
FRPRT01   0000006700000000000001     @@COMMENT  'Group and line declarations'
FRPRT01   0000006800000000000001     FUNCTION   OPTIONS(*DEFERWRITE *DIRECT)
FRPRT01   0000006900000000000001     OPEN       FILE(*ALL) USE_OPTION(*ONDEMAND)
FRPRT01   0000007000000000000001     GROUP_BY   NAME(#FETCHDATA) FIELDS(@@LST22)
FRPRT01   0000007100000000000001     DEF_HEAD   NAME(#HDR01) FIELDS((#REP1PAGE) (#DATE) (#TIME) (#FUNCTION) (#STD_TITLE) @@LST05) TRIGGER_BY(*OVERFLOW @@LST07)  DESIGN(*DOWN)
FRPRT01   0000007200000000000001     DEF_LINE   NAME(#DET01) FIELDS(@@LST02)
FRPRT01   0000007300000000000001     CHANGE     FIELD(#STD_TITLE) TO('''@@CANS005''')
FRPRT01   0000007400000000000001     /* ********** ======================================================= */
FRPRT01   0000007500000000000001     /* ********** RETRIEVE KEYS OF THE BASE FILE                          */
FRPRT01   0000007600000000000001     /* ********** ======================================================= */
FRPRT01   0000007700000000000001     @@CLR_LST  NUMBER(3)
FRPRT01   0000007800000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRPRT01   0000007900000000000001     @@IF       COND((*IF @@CANS006 *NE Y)) GOTO(Z10)
FRPRT01   0000008000000000000001     @@COMMENT  COMMENT('If this program is running online')
FRPRT01   0000008100000000000001     IF         COND('*JOBMODE = I')
FRPRT01   0000008200000000000001Z10: @@LABEL
FRPRT01   0000008300000000000001     @@COMMENT  COMMENT('Request report print criteria')
FRPRT01   0000008400000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRPRT01   0000008500000000000001     REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC)
FRPRT01   0000008600000000000001     @@GOTO     LABEL(L92)
FRPRT01   0000008700000000000001L91: @@LABEL
FRPRT01   0000008800000000000001     REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRPRT01   0000008900000000000001L92: @@LABEL
FRPRT01   0000009000000000000001     @@IF       COND((*IF @@CANS006 *NE Y)) GOTO(Z20)
FRPRT01   0000009100000000000001     @@COMMENT  COMMENT('Submit batch run of this program')
FRPRT01   0000009200000000000001     SUBMIT     PROCESS(#PROCESS) FUNCTION(#FUNCTION) EXCHANGE(@@LST03) JOB(#FUNCTION)
FRPRT01   0000009300000000000001     @@COMMENT  COMMENT('Else, if this program is running in batch')
FRPRT01   0000009400000000000001     ELSE
FRPRT01   0000009500000000000001Z20: @@LABEL
FRPRT01   0000009600000000000001     /* ********** ======================================================= */
FRPRT01   0000009700000000000001     /* ********** SELECT ALL MATCHING DETAILS FROM THE BASE FILE          */
FRPRT01   0000009800000000000001     /* ********** ======================================================= */
FRPRT01   0000009900000000000001     @@COMMENT  COMMENT('Select required @@FNAME01 details')
FRPRT01   0000010000000000000001     SELECT     FIELDS(#FETCHDATA) FROM_FILE(@@FNAME01) WITH_KEY(@@LST03) NBR_KEYS(*COMPUTE) GENERIC(*YES)
FRPRT01   0000010100000000000001     /* ********** ======================================================= */
FRPRT01   0000010200000000000001     /* ********** FETCH DETAILS FROM ALL SECONDARY FILES                  */
FRPRT01   0000010300000000000001     /* ********** ======================================================= */
FRPRT01   0000010400000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT01   0000010500000000000001A50: @@LABEL
FRPRT01   0000010600000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A60)
FRPRT01   0000010700000000000001     @@CLR_LST  NUMBER(3)
FRPRT01   0000010800000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRPRT01   0000010900000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRPRT01   0000011000000000000001     FETCH      FIELDS((#FETCHDATA)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(1)
FRPRT01   0000011100000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT01   0000011200000000000001     @@GOTO     LABEL(A50)
FRPRT01   0000011300000000000001A60: @@LABEL
FRPRT01   0000011400000000000001     /* ********** ======================================================= */
FRPRT01   0000011500000000000001     /* ********** PRINT THE DETAILS                                       */
FRPRT01   0000011600000000000001     /* ********** ======================================================= */
FRPRT01   0000011700000000000001     @@COMMENT  COMMENT('Print the detail line ')
FRPRT01   0000011800000000000001     PRINT      LINE(#DET01)
FRPRT01   0000011900000000000001     ENDSELECT
FRPRT01   0000012000000000000001     @@COMMENT  COMMENT('Finish all printing and end program')
FRPRT01   0000012100000000000001     ENDPRINT
FRPRT01   0000012200000000000001     @@IF       COND((*IF @@CANS006 *NE Y)) GOTO(Z30)
FRPRT01   0000012300000000000001     ENDIF
FRPRT01   0000012400000000000001Z30: @@LABEL
FRPRT01   0000012500000000000001     /* ********** ======================================================= */
FRPRT01   0000012600000000000001     /* ********** CLEAR ALL LISTS USED                                    */
FRPRT01   0000012700000000000001     /* ********** ======================================================= */
FRPRT01   0000012800000000000001     @@CLR_LST  NUMBER(1)
FRPRT01   0000012900000000000001     @@CLR_LST  NUMBER(2)
FRPRT01   0000013000000000000001     @@CLR_LST  NUMBER(5)
FRPRT01   0000013100000000000001     @@CLR_LST  NUMBER(7)
FRPRT01   0000013200000000000001     @@CLR_LST  NUMBER(22)
FRPRT03   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT03   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPRT03   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPRT03   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPRT03   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPRT03   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPRT03   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPRT03   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT03   0000000900000000000001     /* ********** ======================================================= */
FRPRT03   0000001000000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRPRT03   0000001100000000000001     /* ********** ======================================================= */
FRPRT03   0000001200000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP025 HELP030 HELP040)
FRPRT03   0000001300000000000001     /* ********** ======================================================= */
FRPRT03   0000001400000000000001     /* ********** GET NAMES OF UP TO 50 RELATED FILES                     */
FRPRT03   0000001500000000000001     /* ********** ======================================================= */
FRPRT03   0000001600000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the primary file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020 HELP025 HELP030 HELP040)
FRPRT03   0000001700000000000001     /* ********** ======================================================= */
FRPRT03   0000001800000000000001     /* ********** LOAD DETAILS OF FIELDS OF "HEADER" INTO LIST 1          */
FRPRT03   0000001900000000000001     /* ********** LOAD DETAILS OF FIELDS OF "BROWSE" INTO LIST 2          */
FRPRT03   0000002000000000000001     /* ********** ======================================================= */
FRPRT03   0000002100000000000001     @@CLR_LST  NUMBER(1)
FRPRT03   0000002200000000000001     @@CLR_LST  NUMBER(2)
FRPRT03   0000002300000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRPRT03   0000002400000000000001A10: @@LABEL
FRPRT03   0000002500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRPRT03   0000002600000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A12)
FRPRT03   0000002700000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(2)   /* DETAIL */
FRPRT03   0000002800000000000001     @@GOTO     LABEL(A14)
FRPRT03   0000002900000000000001A12: @@RTV_FLDS FROM_FILE(CF) INTO_LST(1)   /* HEADER */
FRPRT03   0000003000000000000001A14: @@INC_IDX  IDX_NAME(CF)
FRPRT03   0000003100000000000001     @@GOTO     LABEL(A10)
FRPRT03   0000003200000000000001A20: @@LABEL
FRPRT03   0000003300000000000001     /* ********** ======================================================= */
FRPRT03   0000003400000000000001     /* ********** ASK THE USER TO SELECT THE HEADER FIELDS REQUIRED       */
FRPRT03   0000003500000000000001     /* ********** ======================================================= */
FRPRT03   0000003600000000000001     @@CLR_LST  NUMBER(11)
FRPRT03   0000003700000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((11 'To Print' 'in Header' '  Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP025 HELP030 HELP040)
FRPRT03   0000003800000000000001     /* ********** ======================================================= */
FRPRT03   0000003900000000000001     /* ********** MERGE LISTS 11 INTO 14                                  */
FRPRT03   0000004000000000000001     /* ********** ======================================================= */
FRPRT03   0000004100000000000001     @@CLR_LST  NUMBER(14)
FRPRT03   0000004200000000000001     @@MRG_LSTS FROM_LSTS(11) INTO_LST(14)
FRPRT03   0000004300000000000001     /* ********** ======================================================= */
FRPRT03   0000004400000000000001     /* ********** ASK THE USER TO SELECT THE BROWSE FIELDS REQUIRED       */
FRPRT03   0000004500000000000001     /* ********** ======================================================= */
FRPRT03   0000004600000000000001     @@CLR_LST  NUMBER(22)
FRPRT03   0000004700000000000001     @@MAK_LSTS FROM_LSTS(2) INTO_LSTS((22 'To print' 'in Detail' '  Area' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP025 HELP030 HELP040)
FRPRT03   0000004800000000000001     /* ********** ======================================================= */
FRPRT03   0000004900000000000001     /* ********** MERGE LIST 22 INTO 24                                   */
FRPRT03   0000005000000000000001     /* ********** ======================================================= */
FRPRT03   0000005100000000000001     @@CLR_LST  NUMBER(24)
FRPRT03   0000005200000000000001     @@MRG_LSTS FROM_LSTS(22) INTO_LST(24)
FRPRT03   0000005300000000000001     /* ********** ======================================================= */
FRPRT03   0000005400000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 14 OR LIST 24    */
FRPRT03   0000005500000000000001     /* ********** LIST 3 IS A WORKING LIST ONLY                           */
FRPRT03   0000005600000000000001     /* ********** ======================================================= */
FRPRT03   0000005700000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT03   0000005800000000000001A30: @@LABEL
FRPRT03   0000005900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRPRT03   0000006000000000000001     @@CLR_LST  NUMBER(3)
FRPRT03   0000006100000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRPRT03   0000006200000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A34)
FRPRT03   0000006300000000000001     @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(A34)
FRPRT03   0000006400000000000001     @@MRG_LSTS FROM_LSTS((3)) INTO_LST(24)  /*DETAIL LIST */
FRPRT03   0000006500000000000001     @@GOTO     LABEL(A36)
FRPRT03   0000006600000000000001A34: @@MRG_LSTS FROM_LSTS((3)) INTO_LST(14)  /*HEADER LIST */
FRPRT03   0000006700000000000001A36: @@INC_IDX  IDX_NAME(CF)
FRPRT03   0000006800000000000001     @@GOTO     LABEL(A30)
FRPRT03   0000006900000000000001A40: @@LABEL
FRPRT03   0000007000000000000001     /* ********** ======================================================= */
FRPRT03   0000007100000000000001     /* ********** ASK FOR THE REPORT TITLE                                */
FRPRT03   0000007200000000000001     /* ********** ======================================================= */
FRPRT03   0000007300000000000001     @@QUESTION PROMPT('Please specify a title for this report') ANSWER(@@CANS005) EXTEND('1234567890123456789012345678901234567890' 'Use from 1 to 40 characters for your title. Use upper and lowercase' 'characters. For additional information and examples use the HELP' 'function key.') HELPIDS(HELP010 HELP020 HELP025 HELP030 HELP040)
FRPRT03   0000007400000000000001     /* ********** ======================================================= */
FRPRT03   0000007500000000000001     /* ********** ASK THE USER HOW TO DESIGN THE PANELS                   */
FRPRT03   0000007600000000000001     /* ********** ======================================================= */
FRPRT03   0000007700000000000001     @@QUESTION PROMPT('Design fields in the header area DOWN the report or ACROSS the report') ANSWER(@@CANS002) EXTEND('Reply DOWN or ACROSS only.' 'If your header area contains 30 (or less) fields, DOWN is the   ' 'recommended value. If your header area contains more than 30' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP020)
FRPRT03   0000007800000000000001     /* ********** ======================================================= */
FRPRT03   0000007900000000000001     /* ********** ASK ABOUT RUNNING IN BATCH                              */
FRPRT03   0000008000000000000001     /* ********** ======================================================= */
FRPRT03   0000008100000000000001     @@QUESTION PROMPT('Do you want this report to run in batch') ANSWER(@@CANS006) EXTEND('Reply Y or N only. For additional information and examples use the ' 'HELP function key.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP025 HELP030 HELP040)
FRPRT03   0000008200000000000001     /* ********** ======================================================= */
FRPRT03   0000008300000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRPRT03   0000008400000000000001     /* ********** ======================================================= */
FRPRT03   0000008500000000000001     @@COMMENT  'Group and line declarations'
FRPRT03   0000008600000000000001     FUNCTION   OPTIONS(*DEFERWRITE *DIRECT)
FRPRT03   0000008700000000000001     OPEN       FILE(*ALL) USE_OPTION(*ONDEMAND)
FRPRT03   0000008800000000000001     DEFINE     FIELD(#FORCETRIG) TYPE(*DEC) LENGTH(7) DECIMALS(0)
FRPRT03   0000008900000000000001     GROUP_BY   NAME(#HEADER) FIELDS(@@LST14)
FRPRT03   0000009000000000000001     GROUP_BY   NAME(#LIST) FIELDS(@@LST24)
FRPRT03   0000009100000000000001     DEF_HEAD   NAME(#HDR01) FIELDS((#REP1PAGE) (#DATE) (#TIME) (#FUNCTION) (#STD_TITLE) @@LST11) DESIGN(*@@CANS002) TRIGGER_BY(*OVERFLOW #FORCETRIG)
FRPRT03   0000009200000000000001     DEF_LINE   NAME(#DET01) FIELDS(@@LST22)
FRPRT03   0000009300000000000001     CHANGE     FIELD(#STD_TITLE) TO('''@@CANS005''')
FRPRT03   0000009400000000000001     /* ********** ======================================================= */
FRPRT03   0000009500000000000001     /* ********** RETRIEVE KEYS OF THE BASE FILE                          */
FRPRT03   0000009600000000000001     /* ********** ======================================================= */
FRPRT03   0000009700000000000001     @@CLR_LST  NUMBER(3)
FRPRT03   0000009800000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRPRT03   0000009900000000000001     @@IF       COND((*IF @@CANS006 *NE Y)) GOTO(Z10)
FRPRT03   0000010000000000000001     @@COMMENT  COMMENT('If this program is running online')
FRPRT03   0000010100000000000001     IF         COND('*JOBMODE = I')
FRPRT03   0000010200000000000001Z10: @@LABEL
FRPRT03   0000010300000000000001     @@COMMENT  COMMENT('Request report print criteria')
FRPRT03   0000010400000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRPRT03   0000010500000000000001     REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC)
FRPRT03   0000010600000000000001     @@GOTO     LABEL(L92)
FRPRT03   0000010700000000000001L91: @@LABEL
FRPRT03   0000010800000000000001     REQUEST    FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRPRT03   0000010900000000000001L92: @@LABEL
FRPRT03   0000011000000000000001     @@IF       COND((*IF @@CANS006 *NE Y)) GOTO(Z20)
FRPRT03   0000011100000000000001     @@COMMENT  COMMENT('Submit batch run of this program')
FRPRT03   0000011200000000000001     SUBMIT     PROCESS(#PROCESS) FUNCTION(#FUNCTION) EXCHANGE(@@LST03) JOB(#FUNCTION)
FRPRT03   0000011300000000000001     @@COMMENT  COMMENT('Else, if this program is running in batch')
FRPRT03   0000011400000000000001     ELSE
FRPRT03   0000011500000000000001Z20: @@LABEL
FRPRT03   0000011600000000000001     /* ********** ======================================================= */
FRPRT03   0000011700000000000001     /* ********** SELECT ALL MATCHING DETAILS FROM THE BASE FILE          */
FRPRT03   0000011800000000000001     /* ********** ======================================================= */
FRPRT03   0000011900000000000001     @@COMMENT  COMMENT('Select required @@FNAME01 details')
FRPRT03   0000012000000000000001     SELECT     FIELDS(#HEADER) FROM_FILE(@@FNAME01) WITH_KEY(@@LST03) NBR_KEYS(*COMPUTE) GENERIC(*YES)
FRPRT03   0000012100000000000001     CHANGE     FIELD(#FORCETRIG) TO('#FORCETRIG + 1')
FRPRT03   0000012200000000000001     /* ********** ======================================================= */
FRPRT03   0000012300000000000001     /* ********** GENERATE FETCHES TO ALL FILES IN THE HEADER AREA        */
FRPRT03   0000012400000000000001     /* ********** ======================================================= */
FRPRT03   0000012500000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT03   0000012600000000000001H10: @@LABEL
FRPRT03   0000012700000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(H20)
FRPRT03   0000012800000000000001     @@IF       COND((*IF @@FAREACF *EQ B)) GOTO(H15)
FRPRT03   0000012900000000000001     @@CLR_LST  NUMBER(3)
FRPRT03   0000013000000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRPRT03   0000013100000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRPRT03   0000013200000000000001     FETCH      FIELDS((#HEADER)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(1)
FRPRT03   0000013300000000000001H15: @@INC_IDX  IDX_NAME(CF)
FRPRT03   0000013400000000000001     @@GOTO     LABEL(H10)
FRPRT03   0000013500000000000001H20: @@LABEL
FRPRT03   0000013600000000000001     /* ********** ======================================================= */
FRPRT03   0000013700000000000001     /* ********** NOW EXTRACT DATA TO BE PLACED INTO THE BROWSE LIST      */
FRPRT03   0000013800000000000001     /* ********** ======================================================= */
FRPRT03   0000013900000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT03   0000014000000000000001     @@SET_IDX  IDX_NAME(SC) TO(0)
FRPRT03   0000014100000000000001A50: @@LABEL
FRPRT03   0000014200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A80)
FRPRT03   0000014300000000000001     @@IF       COND((*IF @@FAREACF *NE B)) GOTO(A78)
FRPRT03   0000014400000000000001     @@CLR_LST  NUMBER(3)
FRPRT03   0000014500000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRPRT03   0000014600000000000001     @@IF       COND((*IF @@FRELRCF *EQ M)) GOTO(A55)
FRPRT03   0000014700000000000001     /* ********** FETCH INTO THE LIST ENTRY                               */
FRPRT03   0000014800000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRPRT03   0000014900000000000001     FETCH      FIELDS((#LIST)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03) KEEP_LAST(1)
FRPRT03   0000015000000000000001     @@GOTO     LABEL(A78)
FRPRT03   0000015100000000000001     /* ********** THE ONE AND ONLY SELECT COMMAND                         */
FRPRT03   0000015200000000000001A55: @@COMMENT  COMMENT('Select all file @@FNAMECF details')
FRPRT03   0000015300000000000001     @@INC_IDX  IDX_NAME(SC)
FRPRT03   0000015400000000000001     SELECT     FIELDS((#LIST)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03)
FRPRT03   0000015500000000000001     @@GOTO     LABEL(A78)
FRPRT03   0000015600000000000001     /* ********** INC INDEX AND LOOP AROUND                               */
FRPRT03   0000015700000000000001A78: @@INC_IDX  IDX_NAME(CF)
FRPRT03   0000015800000000000001     @@GOTO     LABEL(A50)
FRPRT03   0000015900000000000001A80: @@LABEL
FRPRT03   0000016000000000000001     /* ********** ======================================================= */
FRPRT03   0000016100000000000001     /* ********** PRINT THE DETAIL LINE                                   */
FRPRT03   0000016200000000000001     /* ********** ======================================================= */
FRPRT03   0000016300000000000001     @@COMMENT  COMMENT('Print the detail line ')
FRPRT03   0000016400000000000001     PRINT      LINE(#DET01)
FRPRT03   0000016500000000000001     /* ********** ======================================================= */
FRPRT03   0000016600000000000001     /* ********** ENDSELECT FOR THE DETAIL (IF SELECT USED)               */
FRPRT03   0000016700000000000001     /* ********** ======================================================= */
FRPRT03   0000016800000000000001     @@CMP_IDX  IDX_NAME(SC) IDX_VALUE(0) IF_EQ(A90)
FRPRT03   0000016900000000000001     ENDSELECT
FRPRT03   0000017000000000000001A90: @@LABEL
FRPRT03   0000017100000000000001     /* ********** ======================================================= */
FRPRT03   0000017200000000000001     /* ********** ENDSELECT FOR THE OUTER SELECT LOOP ON THE HEADER FILE  */
FRPRT03   0000017300000000000001     /* ********** ======================================================= */
FRPRT03   0000017400000000000001     ENDSELECT
FRPRT03   0000017500000000000001     @@COMMENT  COMMENT('Finish all printing and end program')
FRPRT03   0000017600000000000001     ENDPRINT
FRPRT03   0000017700000000000001     @@IF       COND((*IF @@CANS006 *NE Y)) GOTO(Z30)
FRPRT03   0000017800000000000001     ENDIF
FRPRT03   0000017900000000000001Z30: @@LABEL
FRPRT03   0000018000000000000001     /* ********** ======================================================= */
FRPRT03   0000018100000000000001     /* ********** CLEAR ALL LISTS USED TO SAVE DISK SPACE                 */
FRPRT03   0000018200000000000001     /* ********** ======================================================= */
FRPRT03   0000018300000000000001     @@CLR_LST  NUMBER(1)
FRPRT03   0000018400000000000001     @@CLR_LST  NUMBER(2)
FRPRT03   0000018500000000000001     @@CLR_LST  NUMBER(11)
FRPRT03   0000018600000000000001     @@CLR_LST  NUMBER(14)
FRPRT03   0000018700000000000001     @@CLR_LST  NUMBER(22)
FRPRT03   0000018800000000000001     @@CLR_LST  NUMBER(24)
FRPRT04   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT04   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPRT04   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPRT04   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPRT04   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPRT04   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPRT04   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPRT04   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT04   0000000900000000000001     /* ********** ======================================================= */
FRPRT04   0000001000000000000001     /* ********** ANSWER AND LIST VARIABLE USAGE                          */
FRPRT04   0000001100000000000001     /* ********** ======================================================= */
FRPRT04   0000001200000000000001     /* ********** Name      Description of Usage                          */
FRPRT04   0000001300000000000001     /* ********** ----      --------------------                          */
FRPRT04   0000001400000000000001     /* ********** @@CANS001 Report Title                                  */
FRPRT04   0000001500000000000001     /* ********** @@CANS002 Selection method required                     */
FRPRT04   0000001600000000000001     /* ********** @@CANS003 Used for FIXED expression evaluation          */
FRPRT04   0000001700000000000001     /* ********** @@CANS004 Used for FIXED expression evaluation          */
FRPRT04   0000001800000000000001     /* ********** @@CANS005 Used for RUNTIME expression evaluation        */
FRPRT04   0000001900000000000001     /* ********** @@CANS007 Used for RUNTIME expression evaluation        */
FRPRT04   0000002000000000000001     /* ********** @@CANS008 Used for SORTING ORDER input                  */
FRPRT04   0000002100000000000001     /* ********** @@CANS009 Used for SORTING ORDER input                  */
FRPRT04   0000002200000000000001     /* ********** @@NANS001 Number of expressions / ranges / allowed      */
FRPRT04   0000002300000000000001     /* ********** @@NANS002 Number of saved expressions used              */
FRPRT04   0000002400000000000001     /* ********** @@LST01   List of all fields from all files             */
FRPRT04   0000002500000000000001     /* ********** @@LST02   List of fields from base file only            */
FRPRT04   0000002600000000000001     /* ********** @@LST03   List of keys of base file                     */
FRPRT04   0000002700000000000001     /* ********** @@LST04   List of fields for header of report           */
FRPRT04   0000002800000000000001     /* ********** @@LST05   List of field for detail area of report       */
FRPRT04   0000002900000000000001     /* ********** @@LST07   List of fields to trigger a new page          */
FRPRT04   0000003000000000000001     /* ********** @@LST08   List of fields to select on                   */
FRPRT04   0000003100000000000001     /* ********** @@LST12   List of rela fields from base file only       */
FRPRT04   0000003200000000000001     /* ********** @@LST14   List of sort order of file                    */
FRPRT04   0000003300000000000001     /* ********** @@LST15   List of subtotal levels                       */
FRPRT04   0000003400000000000001     /* ********** @@LST16   List of subtotal fields                       */
FRPRT04   0000003500000000000001     /* ********** @@LST22   List of all fields to be extracted            */
FRPRT04   0000003600000000000001     /* ********** @@LST23   All numeric fields in all files               */
FRPRT04   0000003700000000000001     /* ********** @@LST99   Work list only (short scoped)                 */
FRPRT04   0000003800000000000001     /* ********** CF        Current File Loop Index (short scoped)        */
FRPRT04   0000003900000000000001     /* ********** OQ        Value greater than zero indicates OPNQRYF     */
FRPRT04   0000004000000000000001     /* ********** RT        Count of run time expressions used            */
FRPRT04   0000004100000000000001     /* ********** LV        Low value of range variable                   */
FRPRT04   0000004200000000000001     /* ********** HV        High value of range variable                  */
FRPRT04   0000004300000000000001     /* ********** EN        Expressions in numeric used                   */
FRPRT04   0000004400000000000001     /* ********** EA        Expressions in alphanumeric used              */
FRPRT04   0000004500000000000001     /* ********** EI        Free form expression input required           */
FRPRT04   0000004600000000000001     /* ********** NK        Number of sort leys                           */
FRPRT04   0000004700000000000001     /* ********** SU        Number of subtotal levels                     */
FRPRT04   0000004800000000000001     /* ********** WA        Loop work variable 1                          */
FRPRT04   0000004900000000000001     /* ********** WB        Loop work variable 2                          */
FRPRT04   0000005000000000000001     /* ********** XE - XD   Loop work variables                           */
FRPRT04   0000005100000000000001     /* **********                                                         */
FRPRT04   0000005200000000000001     /* **********                                                         */
FRPRT04   0000005300000000000001     /* ********** ======================================================= */
FRPRT04   0000005400000000000001     /* ********** INITIALSE SOME INDEXES                                  */
FRPRT04   0000005500000000000001     /* ********** ======================================================= */
FRPRT04   0000005600000000000001     @@SET_IDX  IDX_NAME(LV) TO(1)
FRPRT04   0000005700000000000001     @@SET_IDX  IDX_NAME(HV) TO(2)
FRPRT04   0000005800000000000001     @@SET_IDX  IDX_NAME(RT) TO(0)
FRPRT04   0000005900000000000001     @@SET_IDX  IDX_NAME(OQ) TO(0)
FRPRT04   0000006000000000000001     @@SET_IDX  IDX_NAME(EN) TO(0)
FRPRT04   0000006100000000000001     @@SET_IDX  IDX_NAME(EA) TO(0)
FRPRT04   0000006200000000000001     @@SET_IDX  IDX_NAME(EI) TO(0)
FRPRT04   0000006300000000000001     @@SET_IDX  IDX_NAME(NK) TO(0)
FRPRT04   0000006400000000000001     @@SET_IDX  IDX_NAME(SU) TO(0)
FRPRT04   0000006500000000000001     @@SET_IDX  IDX_NAME(SS) TO(0)
FRPRT04   0000006600000000000001     /* ********** ======================================================= */
FRPRT04   0000006700000000000001     /* ********** GET NAMES OF UP TO 50 RELATED FILES                     */
FRPRT04   0000006800000000000001     /* ********** ======================================================= */
FRPRT04   0000006900000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the primary file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000007000000000000001     /* ********** ======================================================= */
FRPRT04   0000007100000000000001     /* ********** LOAD DETAILS OF ALL FIELDS FROM ALL FILES INTO LIST 1   */
FRPRT04   0000007200000000000001     /* ********** LOAD DETAILS OF FIELDS FROM THE BASE FILE INTO LIST 2   */
FRPRT04   0000007300000000000001     /* ********** LOAD DETAILS OF KEYS OF BASE FILE INTO LIST 3           */
FRPRT04   0000007400000000000001     /* ********** ======================================================= */
FRPRT04   0000007500000000000001     @@CLR_LST  NUMBER(1)
FRPRT04   0000007600000000000001     @@CLR_LST  NUMBER(2)
FRPRT04   0000007700000000000001     @@CLR_LST  NUMBER(3)
FRPRT04   0000007800000000000001     @@CLR_LST  NUMBER(12)
FRPRT04   0000007900000000000001     @@CLR_LST  NUMBER(23)
FRPRT04   0000008000000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(2)
FRPRT04   0000008100000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(12) REAL_ONLY(*YES)
FRPRT04   0000008200000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRPRT04   0000008300000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRPRT04   0000008400000000000001A10: @@LABEL
FRPRT04   0000008500000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRPRT04   0000008600000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(1)
FRPRT04   0000008700000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(23) NUM_ONLY(*YES)
FRPRT04   0000008800000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT04   0000008900000000000001     @@GOTO     LABEL(A10)
FRPRT04   0000009000000000000001A20: @@LABEL
FRPRT04   0000009100000000000001     /* ********** ======================================================= */
FRPRT04   0000009200000000000001     /* ********** ASK THE USER TO MAKE A LIST OF HEADER FIELDS IN LIST 4  */
FRPRT04   0000009300000000000001     /* ********** AND DETAIL FIELDS IN LIST 5                             */
FRPRT04   0000009400000000000001     /* ********** ======================================================= */
FRPRT04   0000009500000000000001     @@CLR_LST  NUMBER(4)
FRPRT04   0000009600000000000001     @@CLR_LST  NUMBER(5)
FRPRT04   0000009700000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((5 'Fields to' 'Appear in' 'Detail Lines' *SEQUENCE) (4 'Fields to' 'Appear in' 'Headings' *SEQUENCE *NO)) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000009800000000000001     /* ********** ======================================================= */
FRPRT04   0000009900000000000001     /* ********** START TO BUILD UP MAXIMUM LIST 22 OF ALL FIELDS         */
FRPRT04   0000010000000000000001     /* ********** ======================================================= */
FRPRT04   0000010100000000000001     @@CLR_LST  NUMBER(22)
FRPRT04   0000010200000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(22)
FRPRT04   0000010300000000000001     @@MRG_LSTS FROM_LSTS(4) INTO_LST(22)
FRPRT04   0000010400000000000001     @@MRG_LSTS FROM_LSTS(5) INTO_LST(22)
FRPRT04   0000010500000000000001     /* ********** ======================================================= */
FRPRT04   0000010600000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 22 AS WELL       */
FRPRT04   0000010700000000000001     /* ********** ======================================================= */
FRPRT04   0000010800000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT04   0000010900000000000001A30: @@LABEL
FRPRT04   0000011000000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRPRT04   0000011100000000000001     @@CLR_LST  NUMBER(99)
FRPRT04   0000011200000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(99)
FRPRT04   0000011300000000000001     @@MRG_LSTS FROM_LSTS(99) INTO_LST(22)
FRPRT04   0000011400000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT04   0000011500000000000001     @@GOTO     LABEL(A30)
FRPRT04   0000011600000000000001A40: @@LABEL
FRPRT04   0000011700000000000001     /* ********** ======================================================= */
FRPRT04   0000011800000000000001     /* ********** ASK FOR THE REPORT TITLE                                */
FRPRT04   0000011900000000000001     /* ********** ======================================================= */
FRPRT04   0000012000000000000001     @@QUESTION PROMPT('Please specify a title for this report.') ANSWER(@@CANS001) EXTEND('1234567890123456789012345678901234567890' 'Use from 1 to 40 characters for your title. Use upper and lowercase' 'characters. Do NOT use quote symbols in your title. For more information ' 'about this question, or about this template, use the HELP key or F1.') HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000012100000000000001     /* ********** ======================================================= */
FRPRT04   0000012200000000000001     /* ********** ASK WHAT SORT OF SORT ORDERING IS REQUIRED              */
FRPRT04   0000012300000000000001     /* ********** ======================================================= */
FRPRT04   0000012400000000000001     @@QUESTION PROMPT('How do you want to sort / order information printed on this report ?') ANSWER(@@CANS008) EXTEND('Answer KEYS or SORT where these things mean ....' 'KEYS    : the natural order implied by the keys of this file are to be' '          used to print and total information.' 'SORT    : information in the file needs to be reordered (sorted) into' '          a different order before details are printed or totalled.') LOWER(*NO) VALUES(KEYS SORT) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000012500000000000001     @@CLR_LST  NUMBER(14)
FRPRT04   0000012600000000000001     /* ********** SORT                                                    */
FRPRT04   0000012700000000000001     @@IF       COND((*IF @@CANS008 *EQ KEYS)) GOTO(O10)
FRPRT04   0000012800000000000001     @@MAK_LSTS FROM_LSTS(12) INTO_LSTS((14 'Sort Order' '1=Highest' '99=Lowest' *SEQUENCE)) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000012900000000000001     @@INC_IDX  IDX_NAME(OQ)
FRPRT04   0000013000000000000001     @@GOTO     LABEL(O30)
FRPRT04   0000013100000000000001     /* ********** KEYS                                                    */
FRPRT04   0000013200000000000001O10: @@LABEL
FRPRT04   0000013300000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(14)
FRPRT04   0000013400000000000001     @@GOTO     LABEL(O30)
FRPRT04   0000013500000000000001O30: @@LABEL
FRPRT04   0000013600000000000001     @@SET_IDX  IDX_NAME(NK) TO(@@LNE14)
FRPRT04   0000013700000000000001     @@MRG_LSTS FROM_LSTS(14) INTO_LST(22)
FRPRT04   0000013800000000000001     /* ********** ======================================================= */
FRPRT04   0000013900000000000001     /* ********** ASK ABOUT SUBTOTALLING                                  */
FRPRT04   0000014000000000000001     /* ********** ======================================================= */
FRPRT04   0000014100000000000001     @@CLR_LST  NUMBER(15)
FRPRT04   0000014200000000000001     @@CLR_LST  NUMBER(16)
FRPRT04   0000014300000000000001     @@CLR_LST  NUMBER(17)
FRPRT04   0000014400000000000001     @@CLR_LST  NUMBER(18)
FRPRT04   0000014500000000000001     @@CLR_LST  NUMBER(19)
FRPRT04   0000014600000000000001     @@CLR_LST  NUMBER(20)
FRPRT04   0000014700000000000001     @@CMP_IDX  IDX_NAME(NK) IDX_VALUE(1) IF_LT(STE)
FRPRT04   0000014800000000000001     @@QUESTION PROMPT('Do you want to produce subtotals, counts, maximums, etc on this report ?') ANSWER(@@CANS009) EXTEND('Reply Y if you want to produce subtotals, averages, maximums, etc.' 'Reply N is no subtotals are required.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000014900000000000001     @@IF       COND((*IF @@CANS009 *EQ N)) GOTO(STE)
FRPRT04   0000015000000000000001     @@MRG_LSTS FROM_LSTS((14)) INTO_LST(15)
FRPRT04   0000015100000000000001     /* ********** @@MAK_LSTS FROM_LSTS(14) INTO_LSTS((15 'Levels' 'To Pri                                                                                                                                                                                           nt' 'Totals                                 +                                            */
FRPRT04   0000015200000000000001     /* ********** ' *YESNO *ALL))                                         */
FRPRT04   0000015300000000000001     @@SET_IDX  IDX_NAME(SU) TO(@@LNE15)
FRPRT04   0000015400000000000001     @@MRG_LSTS FROM_LSTS(15) INTO_LST(22)
FRPRT04   0000015500000000000001     @@MAK_LSTS FROM_LSTS(23) INTO_LSTS((16 'Select' 'To' KEEP_TOTAL *YESNO) (17 'Select' 'To' 'KEEP_AVG')) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000015600000000000001     @@MRG_LSTS FROM_LSTS(16) INTO_LST(22)
FRPRT04   0000015700000000000001     @@MRG_LSTS FROM_LSTS(17) INTO_LST(22)
FRPRT04   0000015800000000000001     @@MAK_LSTS FROM_LSTS(23) INTO_LSTS((18 'Select' 'To' KEEP_MIN *YESNO) (19 'Select' 'To' 'KEEP_MAX')) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000015900000000000001     @@MRG_LSTS FROM_LSTS(18) INTO_LST(22)
FRPRT04   0000016000000000000001     @@MRG_LSTS FROM_LSTS(19) INTO_LST(22)
FRPRT04   0000016100000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((20 'Select' 'To' KEEP_COUNT *YESNO))   HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000016200000000000001     @@MRG_LSTS FROM_LSTS(20) INTO_LST(22)
FRPRT04   0000016300000000000001STE: @@LABEL
FRPRT04   0000016400000000000001     /* ********** ======================================================= */
FRPRT04   0000016500000000000001     /* ********** ASK ABOUT PAGE SKIPPING                                 */
FRPRT04   0000016600000000000001     /* ********** ======================================================= */
FRPRT04   0000016700000000000001     @@CLR_LST  NUMBER(7)
FRPRT04   0000016800000000000001     @@CMP_IDX  IDX_NAME(NK) IDX_VALUE(1) IF_LT(PSE)
FRPRT04   0000016900000000000001     @@MAK_LSTS FROM_LSTS(14) INTO_LSTS((7 'New Page' 'Triggers' *N *YESNO *NO)) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000017000000000000001     @@MRG_LSTS FROM_LSTS(7) INTO_LST(22)
FRPRT04   0000017100000000000001PSE: @@LABEL
FRPRT04   0000017200000000000001     /* ********** ======================================================= */
FRPRT04   0000017300000000000001     /* ********** ASK WHAT METHOD OF SELECTION IS REQUIRED                */
FRPRT04   0000017400000000000001     /* ********** ======================================================= */
FRPRT04   0000017500000000000001     @@QUESTION PROMPT('What method of SELECTION do you want to use ?') ANSWER(@@CANS002) EXTEND('Answer NONE, KEYS, FIXED or RUNTIME, where these things mean ....' 'NONE    : no record selection is required. All details will be selected.' 'KEYS    : that full, partial or generic selection by the keys of file' '          @@FNAME01 should be used.' 'FIXED   : means that a fixed selection (defined now) should be used.' 'RUNTIME : means that a variable selection can be specified at run time.') LOWER(*NO) VALUES(NONE KEYS FIXED RUNTIME) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000017600000000000001     /* ********** ======================================================= */
FRPRT04   0000017700000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRPRT04   0000017800000000000001     /* ********** ======================================================= */
FRPRT04   0000017900000000000001     @@COMMENT  '========================='
FRPRT04   0000018000000000000001     @@COMMENT  'Function Declaration Area'
FRPRT04   0000018100000000000001     @@COMMENT  '========================='
FRPRT04   0000018200000000000001     FUNCTION   OPTIONS(*DEFERWRITE *DIRECT)
FRPRT04   0000018300000000000001     OPEN       FILE(*ALL) USE_OPTION(*ONDEMAND)
FRPRT04   0000018400000000000001     /* ********** ======================================================= */
FRPRT04   0000018500000000000001     /* ********** GENERATE ALL SUBTOTAL, ETC WORK FIELDS                  */
FRPRT04   0000018600000000000001     /* ********** ======================================================= */
FRPRT04   0000018700000000000001     @@CMP_IDX  IDX_NAME(SU) IDX_VALUE(1) IF_LT(UA9)
FRPRT04   0000018800000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRPRT04   0000018900000000000001UA1: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(@@LNE15) IF_GT(UA9)
FRPRT04   0000019000000000000001     @@COMMENT  'Level @@LEL15WA/@@INDEXWA work fields'
FRPRT04   0000019100000000000001     DEFINE     FIELD(#LEVEL@@INDEXWA) TYPE(*CHAR) LENGTH(@@INDEXWA)
FRPRT04   0000019200000000000001     USE        BUILTIN(FILLSTRING) WITH_ARGS('''*''') TO_GET(#LEVEL@@INDEXWA)
FRPRT04   0000019300000000000001     /* ********** KEEP_TOTAL VALUES                                       */
FRPRT04   0000019400000000000001     @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000019500000000000001UA2: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE16) IF_GT(UA3)
FRPRT04   0000019600000000000001     DEFINE     FIELD(#TOT_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL16WB)
FRPRT04   0000019700000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000019800000000000001     @@GOTO     LABEL(UA2)
FRPRT04   0000019900000000000001     /* ********** KEEP_MAX VALUES                                         */
FRPRT04   0000020000000000000001UA3: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000020100000000000001UA4: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE17) IF_GT(UA5)
FRPRT04   0000020200000000000001     DEFINE     FIELD(#AVG_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL17WB)
FRPRT04   0000020300000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000020400000000000001     @@GOTO     LABEL(UA4)
FRPRT04   0000020500000000000001     /* ********** KEEP_MIN VALUES                                         */
FRPRT04   0000020600000000000001UA5: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000020700000000000001UA6: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE18) IF_GT(UA7)
FRPRT04   0000020800000000000001     DEFINE     FIELD(#MIN_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL18WB)
FRPRT04   0000020900000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000021000000000000001     @@GOTO     LABEL(UA6)
FRPRT04   0000021100000000000001     /* ********** KEEP_MAX VALUES                                         */
FRPRT04   0000021200000000000001UA7: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000021300000000000001UB1: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE19) IF_GT(UB4)
FRPRT04   0000021400000000000001     DEFINE     FIELD(#MAX_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL19WB)
FRPRT04   0000021500000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000021600000000000001     @@GOTO     LABEL(UB1)
FRPRT04   0000021700000000000001     /* ********** KEEP_MAX COUNT                                          */
FRPRT04   0000021800000000000001UB4: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000021900000000000001UB5: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE20) IF_GT(UA8)
FRPRT04   0000022000000000000001     DEFINE     FIELD(#CNT_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL20WB) TYPE(*DEC) LENGTH(7) DECIMALS(0) EDIT_CODE(3) DEFAULT(0)
FRPRT04   0000022100000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000022200000000000001     @@GOTO     LABEL(UB5)
FRPRT04   0000022300000000000001     /* ********** NEXT SUBTOTAL LEVEL                                     */
FRPRT04   0000022400000000000001UA8: @@INC_IDX  IDX_NAME(WA)
FRPRT04   0000022500000000000001     @@GOTO     LABEL(UA1)
FRPRT04   0000022600000000000001UA9: @@LABEL
FRPRT04   0000022700000000000001     /* ********** ======================================================= */
FRPRT04   0000022800000000000001     /* ********** GENERATE ALL PRINT LINES                                */
FRPRT04   0000022900000000000001     /* ********** ======================================================= */
FRPRT04   0000023000000000000001     @@COMMENT  'Print Lines'
FRPRT04   0000023100000000000001     DEF_HEAD   NAME(#HEAD01) FIELDS(#STD_TITLE #DATE #TIME #REP1PAGE #JOBNAME #USER #JOBNBR @@LST04) TRIGGER_BY(*OVERFLOW @@LST07) DESIGN(*DOWN)
FRPRT04   0000023200000000000001     DEF_LINE   NAME(#DETAIL01) FIELDS(@@LST05)
FRPRT04   0000023300000000000001     /* ********** ======================================================= */
FRPRT04   0000023400000000000001     /* ********** GENERATE ALL BREAK LINES                                */
FRPRT04   0000023500000000000001     /* ********** ======================================================= */
FRPRT04   0000023600000000000001     @@CMP_IDX  IDX_NAME(SU) IDX_VALUE(1) IF_LT(UD9)
FRPRT04   0000023700000000000001     @@SET_IDX  IDX_NAME(WA) TO(@@LNE15)
FRPRT04   0000023800000000000001UC1: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(0) IF_EQ(UD9) IF_LT(UD9)
FRPRT04   0000023900000000000001     @@COMMENT  'Level @@INDEXWA/@@LEL15WA break line'
FRPRT04   0000024000000000000001     @@SET_IDX  IDX_NAME(XA) TO(@@LNE16)
FRPRT04   0000024100000000000001     @@SET_IDX  IDX_NAME(XB) TO(@@LNE17)
FRPRT04   0000024200000000000001     @@SET_IDX  IDX_NAME(XC) TO(@@LNE18)
FRPRT04   0000024300000000000001     @@SET_IDX  IDX_NAME(XD) TO(@@LNE19)
FRPRT04   0000024400000000000001     @@SET_IDX  IDX_NAME(XE) TO(@@LNE20)
FRPRT04   0000024500000000000001     DEF_BREAK  NAME(#BREAK@@INDEXWA) FIELDS((#LEVEL@@INDEXWA *NOID) @@GENNAME/WA/XA/#TOT_ @@GENNAME/WA/XB/#AVG_ @@GENNAME/WA/XC/#MIN_ @@GENNAME/WA/XD/#MAX_ @@GENNAME/WA/XE/#CNT_ ) TRIGGER_BY(@@LSX15/WA)
FRPRT04   0000024600000000000001     @@DEC_IDX  IDX_NAME(WA)
FRPRT04   0000024700000000000001     @@GOTO     LABEL(UC1)
FRPRT04   0000024800000000000001UD9: @@LABEL
FRPRT04   0000024900000000000001     /* ********** ======================================================= */
FRPRT04   0000025000000000000001     /* ********** INITIALISE PROGRAM VARIABLES                            */
FRPRT04   0000025100000000000001     /* ********** ======================================================= */
FRPRT04   0000025200000000000001     /* ********** ======================================================= */
FRPRT04   0000025300000000000001     /* ********** START GENERATING THE PROGRAM MAINLINE                   */
FRPRT04   0000025400000000000001     /* ********** ======================================================= */
FRPRT04   0000025500000000000001     @@COMMENT  COMMENT('==================================')
FRPRT04   0000025600000000000001     @@COMMENT  COMMENT('If this function is running online')
FRPRT04   0000025700000000000001     @@COMMENT  COMMENT('==================================')
FRPRT04   0000025800000000000001     IF         COND('*JOBMODE = I')
FRPRT04   0000025900000000000001     /* ********** ======================================================= */
FRPRT04   0000026000000000000001     /* ********** HANDLE REORDERING OF FILE BY OPNQRYF SORT               */
FRPRT04   0000026100000000000001     /* ********** ======================================================= */
FRPRT04   0000026200000000000001     @@IF       COND((*IF @@CANS008 *EQ KEYS)) GOTO(SOA)
FRPRT04   0000026300000000000001     CHANGE     FIELD(#STD_QORD) TO('@@LSU14')
FRPRT04   0000026400000000000001SOA: @@LABEL
FRPRT04   0000026500000000000001     /* ********** ======================================================= */
FRPRT04   0000026600000000000001     /* ********** HANDLE SELECTION TYPE "KEYS"                            */
FRPRT04   0000026700000000000001     /* ********** ======================================================= */
FRPRT04   0000026800000000000001     @@IF       COND((*IF @@CANS002 *NE KEYS)) GOTO(S10)
FRPRT04   0000026900000000000001     @@COMMENT  COMMENT('Request full/partial/generic selection keys')
FRPRT04   0000027000000000000001     CHANGE     FIELD(#STD_INSTR) TO('''Input full, partial or generic key selection criteria. Press Enter.''')
FRPRT04   0000027100000000000001     CHANGE     FIELD(#STD_INST2) TO(*NULL)
FRPRT04   0000027200000000000001     REQUEST    FIELDS((#STD_INSTR *NOID *OUT) (#STD_INST2 *NOID *OUT) @@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRPRT04   0000027300000000000001     EXCHANGE   FIELDS(@@LST03)
FRPRT04   0000027400000000000001     @@GOTO     LABEL(SEN)
FRPRT04   0000027500000000000001     /* ********** ======================================================= */
FRPRT04   0000027600000000000001     /* ********** HANDLE SELECTION TYPE "FIXED"                           */
FRPRT04   0000027700000000000001     /* ********** ======================================================= */
FRPRT04   0000027800000000000001S10: @@LABEL
FRPRT04   0000027900000000000001     @@IF       COND((*IF @@CANS002 *NE FIXED)) GOTO(S50)
FRPRT04   0000028000000000000001     @@INC_IDX  IDX_NAME(OQ)
FRPRT04   0000028100000000000001     @@COMMENT  COMMENT('Build up fixed selection expression')
FRPRT04   0000028200000000000001     CHANGE     FIELD(#STD_QSEL) TO(*NULL)
FRPRT04   0000028300000000000001S15: @@LABEL
FRPRT04   0000028400000000000001     @@QUESTION PROMPT('Specify up to 40 characters of the FIXED selection expression.') ANSWER(@@CANS003) EXTEND('01234567890123456789012345678901234567890' 'The expression that you specify will be passed directly to the IBM' 'supplied facility called OPNQRYF (Open Query File) so it must be input' 'in a format that is acceptable to OPNQRYF. Do not use '', use " instead.' 'Enter up to 40 characters of the expression. You will be given an option' 'to input more of your expression once you press enter. If you are already' 'continuing an expression, then the previous component will be visible' 'for your reference. It should be overtyped with the continuation details.') HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000028500000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#STD_QSEL '''@@CANS003''') TO_GET(#STD_QSEL)
FRPRT04   0000028600000000000001     @@QUESTION PROMPT('Do you want to continue the FIXED expression that you just entered') ANSWER(@@CANS004) EXTEND('Reply Y (yes) to continue to enter more details of your fixed expression.' 'Reply N (no) to stop. This indicates that your complete fixed expression' 'has now been specified.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000028700000000000001     @@IF       COND((*IF @@CANS004 *EQ Y)) GOTO(S15)
FRPRT04   0000028800000000000001     @@GOTO     LABEL(SEN)
FRPRT04   0000028900000000000001     /* ********** ======================================================= */
FRPRT04   0000029000000000000001     /* ********** HANDLE SELECTION TYPE "RUN TIME"                        */
FRPRT04   0000029100000000000001     /* ********** ======================================================= */
FRPRT04   0000029200000000000001S50: @@LABEL
FRPRT04   0000029300000000000001     @@IF       COND((*IF @@CANS002 *NE RUNTIME)) GOTO(SEN)
FRPRT04   0000029400000000000001     @@QUESTION PROMPT('For the selection of information at RUNTIME what option is to be used ?') ANSWER(@@CANS007) EXTEND('BEGINNER : Means that the user can select details by inputting FORMATTED' '           and VALIDATED list(s) or range(s) of value(s). This is the' '           best option for most beginners.' 'ADVANCED : Means that the user can input a full selection expression that' '         will be passed to the IBM supplied OPNQRYF (Open Query File)' '           facility. This is a more flexible selection option but it does' '           require the user to have some experience with this facility.') LOWER(*NO) VALUES(BEGINNER ADVANCED) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000029500000000000001     @@INC_IDX  IDX_NAME(OQ)
FRPRT04   0000029600000000000001     CHANGE     FIELD(#STD_QSEL) TO(*NULL)
FRPRT04   0000029700000000000001     /* ********** ======================================================= */
FRPRT04   0000029800000000000001     /* ********** HANDLE "ADVANCED" SELECTIONS                            */
FRPRT04   0000029900000000000001     /* ********** ======================================================= */
FRPRT04   0000030000000000000001     @@IF       COND((*IF @@CANS007 *NE ADVANCED)) GOTO(S55)
FRPRT04   0000030100000000000001     @@INC_IDX  IDX_NAME(EI)
FRPRT04   0000030200000000000001     @@QUESTION PROMPT('Do you wish to provide the ADVANCED report save/restore facility ?') ANSWER(@@CANS011) EXTEND('ADVANCED reports allow the user to input free format expressions for' 'use with the OPNQRYF command. Additionally, logic MAY also be generated to' 'allow the user to save the OPNQRYF expression (via the ADD function key)' 'and to later (re)select a previously used expression (via the PROMPT' 'function key). Reply Y if you have READ THE PROVISIONS IN THE HELP TEXT' 'and wish to provide this extra facility. Reply N if you do not wish to' 'provide this additional facility.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000030300000000000001     @@COMMENT  'Get free format expression'
FRPRT04   0000030400000000000001     CHANGE     FIELD(#EXP_LISTN) TO('@@FUNCTION ')
FRPRT04   0000030500000000000001     CHANGE     FIELD(#EXP_LISTZ) TO(200)
FRPRT04   0000030600000000000001     CHANGE     FIELD(#EXP_OPTN) TO('@@CANS011')
FRPRT04   0000030700000000000001     EXCHANGE   FIELDS(#STD_QSEL #STD_QNAM #EXP_OPTN #EXP_LISTN #EXP_LISTZ)
FRPRT04   0000030800000000000001     CALL       PROCESS(*DIRECT) FUNCTION(EXP$LST)
FRPRT04   0000030900000000000001     @@GOTO     SEN
FRPRT04   0000031000000000000001     /* ********** ======================================================= */
FRPRT04   0000031100000000000001     /* ********** HANDLE "BEGINNER" SELECTIONS                            */
FRPRT04   0000031200000000000001     /* ********** ======================================================= */
FRPRT04   0000031300000000000001S55: @@LABEL
FRPRT04   0000031400000000000001     @@CLR_LST  NUMBER(8)
FRPRT04   0000031500000000000001     @@MAK_LSTS FROM_LSTS(12) INTO_LSTS((8 '1 Beginner' 'Selection' 'Field Only' *YESNO))   HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000031600000000000001     @@MRG_LSTS FROM_LSTS(8) INTO_LST(22)
FRPRT04   0000031700000000000001S60: @@LABEL
FRPRT04   0000031800000000000001     @@QUESTION PROMPT('For field @@LEL0801 specify the selection method that the user may use ?') ANSWER(@@CANS006) EXTEND('LIST  : Indicates that the user may specify a list of values for field' '        @@LEL0801 to select information.' 'RANGE : Indicates that the user may specify range(s) of value(s) of' '        @@LEL0801 to select information.' '       they wish to select.') LOWER(*NO) VALUES(LIST RANGE) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000031900000000000001     @@INC_IDX  IDX_NAME(RT)
FRPRT04   0000032000000000000001     /* ********** ======================================================= */
FRPRT04   0000032100000000000001     /* ********** HANDLE "LIST OF VALUES" FOR "BEGINNER"                  */
FRPRT04   0000032200000000000001     /* ********** ======================================================= */
FRPRT04   0000032300000000000001     @@IF       COND((*IF @@CANS006 *NE LIST)) GOTO(S65)
FRPRT04   0000032400000000000001     @@COMMENT  ' '
FRPRT04   0000032500000000000001     @@COMMENT  'Get a list of values for field @@LEL0801'
FRPRT04   0000032600000000000001     @@COMMENT  ' '
FRPRT04   0000032700000000000001     DEF_LIST   NAME(#LIST@@INDEXRT) FIELDS(#@@LEL0801)
FRPRT04   0000032800000000000001     CHANGE     FIELD(#LIST@@INDEXRT) TO(*NULL)
FRPRT04   0000032900000000000001     @@QUESTION PROMPT('For field @@LEL0801 how many values are allowed in the selection LIST ?') ANSWER(@@NANS001) EXTEND('You have indicated that the user will be allowed to select on @@LEL0801' 'by using a selection LIST. How many values should the user be allowed' 'to input into the selection list. Specify a value in the range 1 to 20 and' 'then press enter to proceed.') RANGE((1 20)) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000033000000000000001     INZ_LIST   NAMED(#LIST@@INDEXRT) NUM_ENTRYS(@@NANS001) WITH_MODE(*ADD)
FRPRT04   0000033100000000000001     @@COMMENT  'Input and validate the list of values'
FRPRT04   0000033200000000000001     CHANGE     FIELD(#STD_INSTR) TO('''Specify all values that should be used to select on this field. Press Enter.''')
FRPRT04   0000033300000000000001     DISPLAY    FIELDS((#STD_INSTR *NOID *OUT)) BROWSELIST(#LIST@@INDEXRT) CURSOR_LOC(*ATFIELD #@@LEL0801)
FRPRT04   0000033400000000000001     CHANGE     FIELD(#LISTCOUNT) TO(*NULL)
FRPRT04   0000033500000000000001     SELECTLIST NAMED(#LIST@@INDEXRT) GET_ENTRYS(*NOTNULL)
FRPRT04   0000033600000000000001     CHANGE     FIELD(#LISTCOUNT) TO('#LISTCOUNT + 1')
FRPRT04   0000033700000000000001     ENDSELECT
FRPRT04   0000033800000000000001     @@COMMENT  'Build up the open query file expression'
FRPRT04   0000033900000000000001     IF         COND('#LISTCOUNT *GT 0')
FRPRT04   0000034000000000000001     EXECUTE    SUBROUTINE(EXP_OPEN) WITH_PARMS(1 '''*AND''')
FRPRT04   0000034100000000000001     EXECUTE    SUBROUTINE(EXP_CLEAR) WITH_PARMS(2)
FRPRT04   0000034200000000000001     SELECTLIST NAMED(#LIST@@INDEXRT) GET_ENTRYS(*NOTNULL)
FRPRT04   0000034300000000000001     EXECUTE    SUBROUTINE(EXP_OPEN) WITH_PARMS(2 '''*OR''')
FRPRT04   0000034400000000000001     @@IF       COND((*IF @@LTP0801 *NE A)) GOTO(S62)
FRPRT04   0000034500000000000001     EXECUTE    EXP_ALPHA ('''@@LEL0801''' '''=''' #@@LEL0801)
FRPRT04   0000034600000000000001     @@INC_IDX  IDX_NAME(EA)
FRPRT04   0000034700000000000001     @@GOTO     LABEL(S63)
FRPRT04   0000034800000000000001S62: @@LABEL
FRPRT04   0000034900000000000001     EXECUTE    EXP_NUMBR ('''@@LEL0801''' '''=''' #@@LEL0801)
FRPRT04   0000035000000000000001     @@INC_IDX  IDX_NAME(EN)
FRPRT04   0000035100000000000001S63: @@LABEL
FRPRT04   0000035200000000000001     EXECUTE    SUBROUTINE(EXP_CLOSE)
FRPRT04   0000035300000000000001     ENDSELECT
FRPRT04   0000035400000000000001     EXECUTE    SUBROUTINE(EXP_CLOSE)
FRPRT04   0000035500000000000001     ENDIF
FRPRT04   0000035600000000000001     @@GOTO     S80
FRPRT04   0000035700000000000001     /* ********** ======================================================= */
FRPRT04   0000035800000000000001     /* ********** HANDLE "RANGE OF VALUES" FOR "BEGINNER"                 */
FRPRT04   0000035900000000000001     /* ********** ======================================================= */
FRPRT04   0000036000000000000001S65: @@LABEL
FRPRT04   0000036100000000000001     @@IF       COND((*IF @@CANS006 *NE RANGE)) GOTO(S80)
FRPRT04   0000036200000000000001     @@COMMENT  ' '
FRPRT04   0000036300000000000001     @@COMMENT  'Get range(s) of value(s) for field @@LEL0801'
FRPRT04   0000036400000000000001     @@COMMENT  ' '
FRPRT04   0000036500000000000001     DEFINE     FIELD(#LOW@@INDEXLV)  REFFLD(#@@LEL0801)
FRPRT04   0000036600000000000001     DEFINE     FIELD(#HIGH@@INDEXHV) REFFLD(#@@LEL0801)
FRPRT04   0000036700000000000001     DEF_LIST   NAME(#RANGE@@INDEXRT) FIELDS(#LOW@@INDEXLV #HIGH@@INDEXHV)
FRPRT04   0000036800000000000001     CHANGE     FIELD(#RANGE@@INDEXRT) TO(*NULL)
FRPRT04   0000036900000000000001     @@QUESTION PROMPT('For field @@LEL0801 how many ranges are allowed in the range selection ?') ANSWER(@@NANS001) EXTEND('You have indicated that the user will be allowed to select on @@LEL0801' 'by specifying range(s) of value(s). How many ranges should the user' 'be allowed to input. Specify a value in the range 1 to 20 and then press' 'enter to proceed.') RANGE((1 20)) HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000037000000000000001     INZ_LIST   NAMED(#RANGE@@INDEXRT) NUM_ENTRYS(@@NANS001) WITH_MODE(*ADD)
FRPRT04   0000037100000000000001     @@COMMENT  'Input and validate the range(s) of value(s)'
FRPRT04   0000037200000000000001     CHANGE     FIELD(#STD_INSTR) TO('''Specify all range(s) that should be used to select on this field. Press Enter.''')
FRPRT04   0000037300000000000001     CHANGE     FIELD(#STD_INST2) TO('''Specify low values in the left column and high values in the right column.''')
FRPRT04   0000037400000000000001     DISPLAY    BROWSELIST(#RANGE@@INDEXRT) CURSOR_LOC(*ATFIELD #LOW@@INDEXLV) FIELDS((#STD_INSTR *NOID *OUT)(#STD_INST2 *NOID *OUT))
FRPRT04   0000037500000000000001     CHANGE     FIELD(#LISTCOUNT) TO(*NULL)
FRPRT04   0000037600000000000001     BEGINCHECK
FRPRT04   0000037700000000000001     SELECTLIST NAMED(#RANGE@@INDEXRT) GET_ENTRYS(*NOTNULL)
FRPRT04   0000037800000000000001     CHANGE     FIELD(#LISTCOUNT) TO('#LISTCOUNT + 1')
FRPRT04   0000037900000000000001     BEGINCHECK
FRPRT04   0000038000000000000001     CONDCHECK  FIELD(#LOW@@INDEXLV)             COND('#LOW@@INDEXLV *LE #HIGH@@INDEXHV') MSGTXT('Low value is greater than high value ... selection will not work')
FRPRT04   0000038100000000000001     ENDCHECK   IF_ERROR(*NEXT)
FRPRT04   0000038200000000000001     UPD_ENTRY  IN_LIST(#RANGE@@INDEXRT) WITH_MODE(*ADD)
FRPRT04   0000038300000000000001     ENDSELECT
FRPRT04   0000038400000000000001     ENDCHECK
FRPRT04   0000038500000000000001     @@COMMENT  'Build up the open query file expression'
FRPRT04   0000038600000000000001     IF         COND('#LISTCOUNT *GT 0')
FRPRT04   0000038700000000000001     EXECUTE    SUBROUTINE(EXP_OPEN) WITH_PARMS(1 '''*AND''')
FRPRT04   0000038800000000000001     EXECUTE    SUBROUTINE(EXP_CLEAR) WITH_PARMS(2)
FRPRT04   0000038900000000000001     SELECTLIST NAMED(#RANGE@@INDEXRT) GET_ENTRYS(*NOTNULL)
FRPRT04   0000039000000000000001     EXECUTE    SUBROUTINE(EXP_OPEN) WITH_PARMS(2 '''*OR''')
FRPRT04   0000039100000000000001     EXECUTE    SUBROUTINE(EXP_CLEAR) WITH_PARMS(3)
FRPRT04   0000039200000000000001     @@IF       COND((*IF @@LTP0801 *NE A)) GOTO(S66)
FRPRT04   0000039300000000000001     EXECUTE    SUBROUTINE(EXP_OPEN) WITH_PARMS(3 '''*AND''')
FRPRT04   0000039400000000000001     EXECUTE    SUBROUTINE(EXP_ALPHA) WITH_PARMS('''@@LEL0801''' '''>=''' #LOW@@INDEXLV)
FRPRT04   0000039500000000000001     @@INC_IDX  IDX_NAME(EA)
FRPRT04   0000039600000000000001     EXECUTE    SUBROUTINE(EXP_CLOSE)
FRPRT04   0000039700000000000001     EXECUTE    SUBROUTINE(EXP_OPEN) WITH_PARMS(3 '''*AND''')
FRPRT04   0000039800000000000001     EXECUTE    SUBROUTINE(EXP_ALPHA) WITH_PARMS('''@@LEL0801''' '''<=''' #HIGH@@INDEXHV)
FRPRT04   0000039900000000000001     @@INC_IDX  IDX_NAME(EA)
FRPRT04   0000040000000000000001     EXECUTE    SUBROUTINE(EXP_CLOSE)
FRPRT04   0000040100000000000001     @@GOTO     LABEL(S67)
FRPRT04   0000040200000000000001S66: @@LABEL
FRPRT04   0000040300000000000001     EXECUTE    SUBROUTINE(EXP_OPEN) WITH_PARMS(3 '''*AND''')
FRPRT04   0000040400000000000001     EXECUTE    SUBROUTINE(EXP_NUMBR) WITH_PARMS('''@@LEL0801''' '''>=''' #LOW@@INDEXLV)
FRPRT04   0000040500000000000001     @@INC_IDX  IDX_NAME(EN)
FRPRT04   0000040600000000000001     EXECUTE    SUBROUTINE(EXP_CLOSE)
FRPRT04   0000040700000000000001     EXECUTE    SUBROUTINE(EXP_OPEN) WITH_PARMS(3 '''*AND''')
FRPRT04   0000040800000000000001     EXECUTE    SUBROUTINE(EXP_NUMBR) WITH_PARMS('''@@LEL0801''' '''<=''' #HIGH@@INDEXHV)
FRPRT04   0000040900000000000001     @@INC_IDX  IDX_NAME(EN)
FRPRT04   0000041000000000000001     EXECUTE    SUBROUTINE(EXP_CLOSE)
FRPRT04   0000041100000000000001S67: @@LABEL
FRPRT04   0000041200000000000001     EXECUTE    SUBROUTINE(EXP_CLOSE)
FRPRT04   0000041300000000000001     ENDSELECT
FRPRT04   0000041400000000000001     EXECUTE    SUBROUTINE(EXP_CLOSE)
FRPRT04   0000041500000000000001     ENDIF
FRPRT04   0000041600000000000001     @@INC_IDX  IDX_NAME(LV)
FRPRT04   0000041700000000000001     @@INC_IDX  IDX_NAME(LV)
FRPRT04   0000041800000000000001     @@INC_IDX  IDX_NAME(HV)
FRPRT04   0000041900000000000001     @@INC_IDX  IDX_NAME(HV)
FRPRT04   0000042000000000000001     @@GOTO     LABEL(S80)
FRPRT04   0000042100000000000001     /* ********** ======================================================= */
FRPRT04   0000042200000000000001     /* ********** SEE IF ANOTHER "BEGINNER" FIELD IS REQUIRED             */
FRPRT04   0000042300000000000001     /* ********** ======================================================= */
FRPRT04   0000042400000000000001S80: @@LABEL
FRPRT04   0000042500000000000001     @@QUESTION PROMPT('Do you want to choose another field that the user can select data with ?') ANSWER(@@CANS005) EXTEND('Reply Y (yes) if you want to choose another field that the user can use' 'to select data with.' 'Reply N (no) if you have finished specifying all fields that the user' 'can use to select data with.') LOWER(*NO) VALUES(Y N)   HELPIDS(HELP020 HELP030 HELP040 HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110)
FRPRT04   0000042600000000000001     @@IF       COND((*IF @@CANS005 *EQ Y)) GOTO(S55)
FRPRT04   0000042700000000000001     @@GOTO     LABEL(SEN)
FRPRT04   0000042800000000000001     /* ********** ======================================================= */
FRPRT04   0000042900000000000001     /* ********** END OF SELECTION LIST GENERATION                        */
FRPRT04   0000043000000000000001     /* ********** ======================================================= */
FRPRT04   0000043100000000000001SEN: @@LABEL
FRPRT04   0000043200000000000001     /* ********** ======================================================= */
FRPRT04   0000043300000000000001     /* ********** CONTINUE PROGRAM MAINLINE GENERATION                    */
FRPRT04   0000043400000000000001     /* ********** ======================================================= */
FRPRT04   0000043500000000000001     @@COMMENT  COMMENT('Submit batch run of this function')
FRPRT04   0000043600000000000001     @@CMP_IDX  IDX_NAME(OQ) IDX_VALUE(1) IF_LT(X10)
FRPRT04   0000043700000000000001     EXCHANGE   FIELDS(#STD_QSEL)
FRPRT04   0000043800000000000001     @@IF       COND((*IF @@CANS008 *EQ KEYS)) GOTO(X10)
FRPRT04   0000043900000000000001     EXCHANGE   FIELDS(#STD_QORD)
FRPRT04   0000044000000000000001X10: @@LABEL
FRPRT04   0000044100000000000001     SUBMIT     PROCESS(#PROCESS) FUNCTION(#FUNCTION) JOB(#FUNCTION)
FRPRT04   0000044200000000000001     @@COMMENT  COMMENT('==========================================')
FRPRT04   0000044300000000000001     @@COMMENT  COMMENT('Else, if this function is running in batch')
FRPRT04   0000044400000000000001     @@COMMENT  COMMENT('==========================================')
FRPRT04   0000044500000000000001     ELSE
FRPRT04   0000044600000000000001     @@COMMENT  COMMENT('Main Fetch Group Declared Now')
FRPRT04   0000044700000000000001     GROUP_BY   NAME(#FETCHDATA) FIELDS(@@LST22)
FRPRT04   0000044800000000000001     @@COMMENT  COMMENT('Setup details for batch report run')
FRPRT04   0000044900000000000001     CHANGE     FIELD(#STD_TITLE) TO('''@@CANS001''')
FRPRT04   0000045000000000000001     @@CMP_IDX  IDX_NAME(OQ) IDX_VALUE(1) IF_LT(X15)
FRPRT04   0000045100000000000001     IF_NULL    FIELD(#STD_QSEL)
FRPRT04   0000045200000000000001     CHANGE     FIELD(#STD_QSEL) TO('''*ALL''')
FRPRT04   0000045300000000000001     ENDIF
FRPRT04   0000045400000000000001     IF_NULL    FIELD(#STD_QORD)
FRPRT04   0000045500000000000001     CHANGE     FIELD(#STD_QORD) TO('''*NONE''')
FRPRT04   0000045600000000000001     ENDIF
FRPRT04   0000045700000000000001     @@IF       COND((*IF @@CANS008 *EQ KEYS)) GOTO(X12)
FRPRT04   0000045800000000000001     @@COMMENT  COMMENT('Use OPNQRYF to select and order details')
FRPRT04   0000045900000000000001     OPEN       FILE(@@FNAME01) USE_OPTION(*OPNQRYF) IO_ERROR(L10) QRYSLT(#STD_QSEL) KEYFLD(#STD_QORD)
FRPRT04   0000046000000000000001     @@GOTO     LABEL(X14)
FRPRT04   0000046100000000000001X12: @@LABEL
FRPRT04   0000046200000000000001     @@COMMENT  COMMENT('Use OPNQRYF to select the details')
FRPRT04   0000046300000000000001     OPEN       FILE(@@FNAME01) USE_OPTION(*OPNQRYF) QRYSLT(#STD_QSEL) IO_ERROR(L10)
FRPRT04   0000046400000000000001X14: @@LABEL
FRPRT04   0000046500000000000001     EXECUTE    SUBROUTINE(EXP_STATUS) WITH_PARMS('N')
FRPRT04   0000046600000000000001L10: EXECUTE    SUBROUTINE(EXP_STATUS) WITH_PARMS('Y')
FRPRT04   0000046700000000000001     @@COMMENT  COMMENT('Select required @@FNAME01 details')
FRPRT04   0000046800000000000001     SELECT     FIELDS(#FETCHDATA) FROM_FILE(@@FNAME01)
FRPRT04   0000046900000000000001     @@GOTO     LABEL(X20)
FRPRT04   0000047000000000000001X15: @@LABEL
FRPRT04   0000047100000000000001     /* ********** ======================================================= */
FRPRT04   0000047200000000000001     /* ********** SELECT ALL MATCHING DETAILS FROM THE BASE FILE          */
FRPRT04   0000047300000000000001     /* ********** ======================================================= */
FRPRT04   0000047400000000000001     @@COMMENT  COMMENT('Select required @@FNAME01 details')
FRPRT04   0000047500000000000001     SELECT     FIELDS(#FETCHDATA) FROM_FILE(@@FNAME01) WITH_KEY(@@LST03) NBR_KEYS(*COMPUTE) GENERIC(*YES)
FRPRT04   0000047600000000000001     /* ********** ======================================================= */
FRPRT04   0000047700000000000001     /* ********** FETCH DETAILS FROM ALL SECONDARY FILES                  */
FRPRT04   0000047800000000000001     /* ********** ======================================================= */
FRPRT04   0000047900000000000001X20: @@LABEL
FRPRT04   0000048000000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT04   0000048100000000000001A50: @@LABEL
FRPRT04   0000048200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A60)
FRPRT04   0000048300000000000001     @@CLR_LST  NUMBER(99)
FRPRT04   0000048400000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(99)
FRPRT04   0000048500000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRPRT04   0000048600000000000001     FETCH      FIELDS((#FETCHDATA)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST99) KEEP_LAST(5)
FRPRT04   0000048700000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT04   0000048800000000000001     @@GOTO     LABEL(A50)
FRPRT04   0000048900000000000001A60: @@LABEL
FRPRT04   0000049000000000000001     /* ********** ======================================================= */
FRPRT04   0000049100000000000001     /* ********** GENERATE ALL KEEP_TOTAL, ETC LINES                      */
FRPRT04   0000049200000000000001     /* ********** ======================================================= */
FRPRT04   0000049300000000000001     @@CMP_IDX  IDX_NAME(SU) IDX_VALUE(1) IF_LT(XA9)
FRPRT04   0000049400000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRPRT04   0000049500000000000001XA1: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(@@LNE15) IF_GT(XA9)
FRPRT04   0000049600000000000001     @@COMMENT  'Level @@INDEXWA/@@LEL15WA calculations'
FRPRT04   0000049700000000000001     /* ********** KEEP_TOTAL VALUES                                       */
FRPRT04   0000049800000000000001     @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000049900000000000001XA2: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE16) IF_GT(XA3)
FRPRT04   0000050000000000000001     KEEP_TOTAL OF_FIELD(#@@LEL16WB) IN_FIELD(#TOT_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX15/WA)
FRPRT04   0000050100000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000050200000000000001     @@GOTO     LABEL(XA2)
FRPRT04   0000050300000000000001     /* ********** KEEP_AVERAGE VALUES                                     */
FRPRT04   0000050400000000000001XA3: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000050500000000000001XA4: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE17) IF_GT(XA5)
FRPRT04   0000050600000000000001     KEEP_AVG   OF_FIELD(#@@LEL17WB) IN_FIELD(#AVG_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX15/WA)
FRPRT04   0000050700000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000050800000000000001     @@GOTO     LABEL(XA4)
FRPRT04   0000050900000000000001     /* ********** KEEP_MIN VALUES                                         */
FRPRT04   0000051000000000000001XA5: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000051100000000000001XA6: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE18) IF_GT(XA7)
FRPRT04   0000051200000000000001     KEEP_MIN   OF_FIELD(#@@LEL18WB) IN_FIELD(#MIN_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX15/WA)
FRPRT04   0000051300000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000051400000000000001     @@GOTO     LABEL(XA6)
FRPRT04   0000051500000000000001     /* ********** KEEP_MAX VALUES                                         */
FRPRT04   0000051600000000000001XA7: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000051700000000000001XB1: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE19) IF_GT(XB4)
FRPRT04   0000051800000000000001     KEEP_MAX   OF_FIELD(#@@LEL19WB) IN_FIELD(#MAX_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX15/WA)
FRPRT04   0000051900000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000052000000000000001     @@GOTO     LABEL(XB1)
FRPRT04   0000052100000000000001     /* ********** KEEP_MAX COUNT                                          */
FRPRT04   0000052200000000000001XB4: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT04   0000052300000000000001XB5: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE20) IF_GT(XA8)
FRPRT04   0000052400000000000001     KEEP_COUNT OF_FIELD(#@@LEL20WB) IN_FIELD(#CNT_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX15/WA)
FRPRT04   0000052500000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT04   0000052600000000000001     @@GOTO     LABEL(XB5)
FRPRT04   0000052700000000000001     /* ********** NEXT SUBTOTAL LEVEL                                     */
FRPRT04   0000052800000000000001XA8: @@INC_IDX  IDX_NAME(WA)
FRPRT04   0000052900000000000001     @@GOTO     LABEL(XA1)
FRPRT04   0000053000000000000001XA9: @@LABEL
FRPRT04   0000053100000000000001     /* ********** ======================================================= */
FRPRT04   0000053200000000000001     /* ********** PRINT THE DETAILS                                       */
FRPRT04   0000053300000000000001     /* ********** ======================================================= */
FRPRT04   0000053400000000000001     @@COMMENT  COMMENT('Print the detail line ')
FRPRT04   0000053500000000000001     PRINT      LINE(#DETAIL01)
FRPRT04   0000053600000000000001     ENDSELECT
FRPRT04   0000053700000000000001     @@COMMENT  COMMENT('Finish all printing and end program')
FRPRT04   0000053800000000000001     ENDPRINT
FRPRT04   0000053900000000000001     ENDIF
FRPRT04   0000054000000000000001     @@LABEL
FRPRT04   0000054100000000000001     /* ********** ======================================================= */
FRPRT04   0000054200000000000001     /* ********** GENERATE THE EXPRESSION BUILDER SUBROUTINES             */
FRPRT04   0000054300000000000001     /* ********** ======================================================= */
FRPRT04   0000054400000000000001     @@CMP_IDX  IDX_NAME(RT) IDX_VALUE(1) IF_LT(R10)
FRPRT04   0000054500000000000001     @@COMMENT  '================================================='
FRPRT04   0000054600000000000001     @@COMMENT  'EXP_OPEN : Open a new expression level'
FRPRT04   0000054700000000000001     @@COMMENT  '================================================='
FRPRT04   0000054800000000000001     SUBROUTINE NAME(EXP_OPEN) PARMS((#EXP_LEVEL *RECEIVED) (#EXP_OPER *RECEIVED))
FRPRT04   0000054900000000000001     DEF_LIST   NAME(#EXP_LIST) FIELDS((#EXP_TOTAL)) COUNTER(#EXP_LISTC) TYPE(*WORKING) ENTRYS(10)
FRPRT04   0000055000000000000001     IF_NULL    FIELD(#EXP_LISTC)
FRPRT04   0000055100000000000001     CHANGE     FIELD(#EXP_TOTAL) TO(*NULL)
FRPRT04   0000055200000000000001     INZ_LIST   NAMED(#EXP_LIST) NUM_ENTRYS(5)
FRPRT04   0000055300000000000001     ENDIF
FRPRT04   0000055400000000000001     GET_ENTRY  NUMBER(#EXP_LEVEL) FROM_LIST(#EXP_LIST)
FRPRT04   0000055500000000000001     IF         COND('#EXP_TOTAL *GT 0')
FRPRT04   0000055600000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#STD_QSEL #EXP_OPER) TO_GET(#STD_QSEL)
FRPRT04   0000055700000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#STD_QSEL '''(''') TO_GET(#STD_QSEL)
FRPRT04   0000055800000000000001     ELSE
FRPRT04   0000055900000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL '''(''') TO_GET(#STD_QSEL)
FRPRT04   0000056000000000000001     ENDIF
FRPRT04   0000056100000000000001     CHANGE     FIELD(#EXP_TOTAL) TO('#EXP_TOTAL + 1')
FRPRT04   0000056200000000000001     UPD_ENTRY  IN_LIST(#EXP_LIST)
FRPRT04   0000056300000000000001     ENDROUTINE
FRPRT04   0000056400000000000001     @@COMMENT  '================================================='
FRPRT04   0000056500000000000001     @@COMMENT  'EXP_CLOSE : Close an expression level '
FRPRT04   0000056600000000000001     @@COMMENT  '================================================='
FRPRT04   0000056700000000000001     SUBROUTINE NAME(EXP_CLOSE)
FRPRT04   0000056800000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL ''')''') TO_GET(#STD_QSEL)
FRPRT04   0000056900000000000001     ENDROUTINE
FRPRT04   0000057000000000000001     @@COMMENT  '================================================='
FRPRT04   0000057100000000000001     @@COMMENT  'EXP_CLEAR : Clear an expression level '
FRPRT04   0000057200000000000001     @@COMMENT  '================================================='
FRPRT04   0000057300000000000001     SUBROUTINE NAME(EXP_CLEAR) PARMS((#EXP_LEVEL *RECEIVED))
FRPRT04   0000057400000000000001     GET_ENTRY  NUMBER(#EXP_LEVEL) FROM_LIST(#EXP_LIST)
FRPRT04   0000057500000000000001     CHANGE     FIELD(#EXP_TOTAL) TO(*NULL)
FRPRT04   0000057600000000000001     UPD_ENTRY  IN_LIST(#EXP_LIST)
FRPRT04   0000057700000000000001     ENDROUTINE
FRPRT04   0000057800000000000001     @@CMP_IDX  IDX_NAME(EA) IDX_VALUE(1) IF_LT(ENR)
FRPRT04   0000057900000000000001     @@COMMENT  '================================================='
FRPRT04   0000058000000000000001     @@COMMENT  'EXP_ALPHA : Build an expression for an alpha field'
FRPRT04   0000058100000000000001     @@COMMENT  '================================================='
FRPRT04   0000058200000000000001     SUBROUTINE NAME(EXP_ALPHA) PARMS((#EXP_FLD *RECEIVED) (#EXP_OPER *RECEIVED) (#EXP_AVAL *RECEIVED))
FRPRT04   0000058300000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL #EXP_FLD) TO_GET(#STD_QSEL)
FRPRT04   0000058400000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL #EXP_OPER) TO_GET(#STD_QSEL)
FRPRT04   0000058500000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL '''"''') TO_GET(#STD_QSEL)
FRPRT04   0000058600000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL #EXP_AVAL) TO_GET(#STD_QSEL)
FRPRT04   0000058700000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL '''"''') TO_GET(#STD_QSEL)
FRPRT04   0000058800000000000001     ENDROUTINE
FRPRT04   0000058900000000000001ENR: @@LABEL
FRPRT04   0000059000000000000001     @@CMP_IDX  IDX_NAME(EN) IDX_VALUE(1) IF_LT(R10)
FRPRT04   0000059100000000000001     @@COMMENT  '================================================='
FRPRT04   0000059200000000000001     @@COMMENT  'EXP_NUMBR : Build an expression for a numeric field'
FRPRT04   0000059300000000000001     @@COMMENT  '================================================='
FRPRT04   0000059400000000000001     SUBROUTINE NAME(EXP_NUMBR) PARMS((#EXP_FLD *RECEIVED) (#EXP_OPER *RECEIVED) (#EXP_NVAL *RECEIVED))
FRPRT04   0000059500000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL #EXP_FLD) TO_GET(#STD_QSEL)
FRPRT04   0000059600000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL #EXP_OPER) TO_GET(#STD_QSEL)
FRPRT04   0000059700000000000001     USE        BUILTIN(NUMERIC_STRING) WITH_ARGS(#EXP_NVAL) TO_GET(#EXP_NSTR)
FRPRT04   0000059800000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#STD_QSEL #EXP_NSTR) TO_GET(#STD_QSEL)
FRPRT04   0000059900000000000001     ENDROUTINE
FRPRT04   0000060000000000000001R10: @@LABEL
FRPRT04   0000060100000000000001R20: @@LABEL
FRPRT04   0000060200000000000001     /* ********** ======================================================= */
FRPRT04   0000060300000000000001     /* ********** GENERATE THE EXPRESSION STATUS PRINT SUBROUTINE         */
FRPRT04   0000060400000000000001     /* ********** ======================================================= */
FRPRT04   0000060500000000000001     @@CMP_IDX  IDX_NAME(OQ) IDX_VALUE(1) IF_LT(R30)
FRPRT04   0000060600000000000001     @@COMMENT  '================================================='
FRPRT04   0000060700000000000001     @@COMMENT  'EXP_STATUS : Print OPNQRYF Status Report'
FRPRT04   0000060800000000000001     @@COMMENT  '================================================='
FRPRT04   0000060900000000000001     SUBROUTINE NAME(EXP_STATUS) PARMS((#EXP_ERROR *RECEIVED))
FRPRT04   0000061000000000000001     DEFINE     FIELD(#OVL_QPRT1) TYPE(*CHAR) LENGTH(128) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 1)
FRPRT04   0000061100000000000001     DEFINE     FIELD(#OVL_QPRT2) TYPE(*CHAR) LENGTH(128) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 129)
FRPRT04   0000061200000000000001     DEFINE     FIELD(#OVL_QORD1) TYPE(*CHAR) LENGTH(128) REFFLD(#STD_QORD) TO_OVERLAY(#STD_QORD 1)
FRPRT04   0000061300000000000001     DEFINE     FIELD(#OVL_QORD2) TYPE(*CHAR) LENGTH(128) REFFLD(#STD_QORD) TO_OVERLAY(#STD_QORD 129)
FRPRT04   0000061400000000000001     DEF_HEAD   NAME(#EXP_HEAD) FIELDS((#STD_TITLE) (#DATE) (#TIME) (#REP2PAGE) (#JOBNAME) (#USER) (#JOBNBR) (#OVL_QPRT1 *COLHDG) (#OVL_QPRT2 *NOID) (#OVL_QORD1 *COLHDG) (#OVL_QORD2 *NOID)) FOR_REPORT(2) DESIGN(*DOWN) IDENTIFY(*LABEL)
FRPRT04   0000061500000000000001     DEF_LINE   NAME(#EXP_TEXT) FIELDS((#EXP_EMSG *COLHDG)) FOR_REPORT(2)
FRPRT04   0000061600000000000001     @@COMMENT  'Ignore if report already printed'
FRPRT04   0000061700000000000001     IF         COND('#REP2PAGE = 0')
FRPRT04   0000061800000000000001     @@COMMENT  'Issue generic message'
FRPRT04   0000061900000000000001     IF         COND('#EXP_ERROR = Y')
FRPRT04   0000062000000000000001     MESSAGE    MSGTXT('Fatal error when attempting open of file @@FNAME01 via OPNQRYF')
FRPRT04   0000062100000000000001     ELSE
FRPRT04   0000062200000000000001     MESSAGE    MSGTXT('No errors detected when opening file @@FNAME01 via OPNQRYF')
FRPRT04   0000062300000000000001     ENDIF
FRPRT04   0000062400000000000001     @@COMMENT  'Produce Status Report'
FRPRT04   0000062500000000000001     USE        BUILTIN(GET_MESSAGE) TO_GET(#EXP_ERET #EXP_EMSG)
FRPRT04   0000062600000000000001     DOWHILE    COND('#EXP_ERET = OK')
FRPRT04   0000062700000000000001     PRINT      LINE(#EXP_TEXT) ON_REPORT(2)
FRPRT04   0000062800000000000001     USE        BUILTIN(GET_MESSAGE) TO_GET(#EXP_ERET #EXP_EMSG)
FRPRT04   0000062900000000000001     ENDWHILE
FRPRT04   0000063000000000000001     ENDPRINT   REPORT_NUM(2)
FRPRT04   0000063100000000000001     IF         COND('#EXP_ERROR = Y')
FRPRT04   0000063200000000000001     ABORT      MSGTXT('Fatal error when attempting open of file @@FNAME01 ... see report for details')
FRPRT04   0000063300000000000001     ENDIF
FRPRT04   0000063400000000000001     ENDIF
FRPRT04   0000063500000000000001     ENDROUTINE
FRPRT04   0000063600000000000001R30: @@LABEL
FRPRT04   0000063700000000000001     /* ********** ======================================================= */
FRPRT04   0000063800000000000001     /* ********** CLEAR ALL LISTS USED                                    */
FRPRT04   0000063900000000000001     /* ********** ======================================================= */
FRPRT04   0000064000000000000001     @@CLR_LST  NUMBER(1)
FRPRT04   0000064100000000000001     @@CLR_LST  NUMBER(2)
FRPRT04   0000064200000000000001     @@CLR_LST  NUMBER(3)
FRPRT04   0000064300000000000001     @@CLR_LST  NUMBER(4)
FRPRT04   0000064400000000000001     @@CLR_LST  NUMBER(5)
FRPRT04   0000064500000000000001     @@CLR_LST  NUMBER(7)
FRPRT04   0000064600000000000001     @@CLR_LST  NUMBER(8)
FRPRT04   0000064700000000000001     @@CLR_LST  NUMBER(14)
FRPRT04   0000064800000000000001     @@CLR_LST  NUMBER(15)
FRPRT04   0000064900000000000001     @@CLR_LST  NUMBER(16)
FRPRT04   0000065000000000000001     @@CLR_LST  NUMBER(17)
FRPRT04   0000065100000000000001     @@CLR_LST  NUMBER(18)
FRPRT04   0000065200000000000001     @@CLR_LST  NUMBER(19)
FRPRT04   0000065300000000000001     @@CLR_LST  NUMBER(20)
FRPRT04   0000065400000000000001     @@CLR_LST  NUMBER(22)
FRPRT04   0000065500000000000001     @@CLR_LST  NUMBER(23)
FRPRT04   0000065600000000000001     @@CLR_LST  NUMBER(99)
FRPRT04   0000065700000000000001     /* ********** ======================================================= */
FRPRT04   0000065800000000000001     /* ********** END OF TEMPLATE                                         */
FRPRT04   0000065900000000000001     /* ********** ======================================================= */
FRPRT04EX10000000100000000000001     @@QUESTION PROMPT('Is this function named EXP$LST ?') ANSWER(@@CANS001) EXTEND('This template generates a specific function that MUST be called EXP$LST.' 'Once this function is compiled it can then  be called by the ADVANCED' 'report logic generated by some applications generated by template FRPRT04.' 'If this function is called EXP$LST reply Y to this question. If it is not' 'called EXP$LST, or you do not understand this question, reply N.' 'Use the HELP key for more information.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010)
FRPRT04EX10000000200000000000001     @@IF       COND((*IF @@CANS001 *EQ Y)) GOTO(L20)
FRPRT04EX10000000300000000000001     @@COMMENT  '================================================='
FRPRT04EX10000000400000000000001     @@COMMENT  ' INVALID USE OF TEMPLATE FRPRT04EX1 TERMINATED   '
FRPRT04EX10000000500000000000001     @@COMMENT  '================================================='
FRPRT04EX10000000600000000000001     @@GOTO     LABEL(LEN)
FRPRT04EX10000000700000000000001L20: @@LABEL
FRPRT04EX10000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT04EX10000000900000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPRT04EX10000001000000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPRT04EX10000001100000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPRT04EX10000001200000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPRT04EX10000001300000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPRT04EX10000001400000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPRT04EX10000001500000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT04EX10000001600000000000001     FUNCTION   OPTIONS(*DIRECT *DEFERWRITE *LIGHTUSAGE *NOMESSAGES)
FRPRT04EX10000001700000000000001     @@COMMENT  'Function Declarations       '
FRPRT04EX10000001800000000000001     EXCHANGE   FIELDS(#STD_QSEL #STD_QNAM #EXP_OPTN #EXP_LISTN #EXP_LISTZ) OPTION(*ALWAYS)
FRPRT04EX10000001900000000000001     DEFINE     FIELD(#USE_LIST1) REFFLD(#EXP_LISTN) LENGTH(10)
FRPRT04EX10000002000000000000001     DEFINE     FIELD(#USE_LIST2) REFFLD(#EXP_LISTN) LENGTH(10)
FRPRT04EX10000002100000000000001     DEFINE     FIELD(#WRK_QNAM) REFFLD(#STD_QNAM)
FRPRT04EX10000002200000000000001     DEFINE     FIELD(#WRK_QSEL) REFFLD(#STD_QSEL)
FRPRT04EX10000002300000000000001     DEFINE     FIELD(#WRK_QSEL5) TYPE(*CHAR) LENGTH(55) REFFLD(#STD_QSEL) TO_OVERLAY(#WRK_QSEL 1)
FRPRT04EX10000002400000000000001     DEFINE     FIELD(#OVL_QSEL1) TYPE(*CHAR) LENGTH(78) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 1)
FRPRT04EX10000002500000000000001     DEFINE     FIELD(#OVL_QSEL2) TYPE(*CHAR) LENGTH(78) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 79)
FRPRT04EX10000002600000000000001     DEFINE     FIELD(#OVL_QSEL3) TYPE(*CHAR) LENGTH(78) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 157)
FRPRT04EX10000002700000000000001     DEFINE     FIELD(#OVL_QSEL4) TYPE(*CHAR) LENGTH(22) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 235)
FRPRT04EX10000002800000000000001     DEF_LIST   NAME(#EXP_DLIST) FIELDS((#WRK_QNAM *OUTPUT) (#WRK_QSEL5 *OUTPUT)) SEL_ENTRY(#LISTENTRY)
FRPRT04EX10000002900000000000001     DEF_LIST   NAME(#EXP_WLST1) FIELDS((#WRK_QNAM)) COUNTER(#LISTCOUNT) TYPE(*WORKING) ENTRYS(200)
FRPRT04EX10000003000000000000001     DEF_LIST   NAME(#EXP_WLST2) FIELDS((#WRK_QSEL)) TYPE(*WORKING) ENTRYS(200)
FRPRT04EX10000003100000000000001     DEF_COND   NAME(*SAVEALLOW) COND('#EXP_OPTN = Y')
FRPRT04EX10000003200000000000001     @@COMMENT  'Initialise some work variables'
FRPRT04EX10000003300000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#EXP_LISTN 'E$1') TO_GET(#USE_LIST1)
FRPRT04EX10000003400000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#EXP_LISTN 'E$2') TO_GET(#USE_LIST2)
FRPRT04EX10000003500000000000001     @@COMMENT  'Input Expression Details'
FRPRT04EX10000003600000000000001     DOUNTIL    COND('(#IO$KEY = RA) *AND (#STD_QSEL *NE *BLANKS)')
FRPRT04EX10000003700000000000001     SET_MODE   TO(*DISPLAY)
FRPRT04EX10000003800000000000001     IF         COND(*SAVEALLOW)
FRPRT04EX10000003900000000000001     CHANGE     FIELD(#STD_INSTR) TO('''Input (or prompt) required selection expression. Press enter to submit report.''')
FRPRT04EX10000004000000000000001     ELSE
FRPRT04EX10000004100000000000001     CHANGE     FIELD(#STD_INSTR) TO('''Input required selection expression. Press enter to submit report.''')
FRPRT04EX10000004200000000000001     ENDIF
FRPRT04EX10000004300000000000001     DISPLAY    FIELDS((#STD_INSTR *L5 *P2 *NOID *OUT) (#OVL_QSEL1 *L8 *P2 *NOID *INPUT) (#OVL_QSEL2 *L9 *P2 *NOID *INPUT) (#OVL_QSEL3 *L10 *P2 *NOID *INPUT) (#OVL_QSEL4 *L11 *P2 *NOID *INPUT)) ADD_KEY(*YES *NEXT *SAVEALLOW) PROMPT_KEY(*YES *NEXT *SAVEALLOW) TEXT(('Selection' 7 2) ('Expression . . . .' 7 12)) CURSOR_LOC(*ATFIELD #OVL_QSEL1)
FRPRT04EX10000004400000000000001     IF_KEY     WAS(*ADD)
FRPRT04EX10000004500000000000001     EXECUTE    SUBROUTINE(EXP_SAVE)
FRPRT04EX10000004600000000000001     ELSE
FRPRT04EX10000004700000000000001     IF_KEY     WAS(*PROMPT)
FRPRT04EX10000004800000000000001     EXECUTE    SUBROUTINE(EXP_PROMPT)
FRPRT04EX10000004900000000000001     ENDIF
FRPRT04EX10000005000000000000001     ENDIF
FRPRT04EX10000005100000000000001     ENDUNTIL
FRPRT04EX10000005200000000000001     @@COMMENT  'Return to caller'
FRPRT04EX10000005300000000000001     RETURN
FRPRT04EX10000005400000000000001     @@COMMENT  '================================================='
FRPRT04EX10000005500000000000001     @@COMMENT  'EXP_SAVE  : Save expression with a name          '
FRPRT04EX10000005600000000000001     @@COMMENT  '================================================='
FRPRT04EX10000005700000000000001     SUBROUTINE NAME(EXP_SAVE)
FRPRT04EX10000005800000000000001     @@COMMENT  'Issue a message if no selection present'
FRPRT04EX10000005900000000000001     IF_NULL    FIELD(#STD_QSEL)
FRPRT04EX10000006000000000000001     MESSAGE    MSGTXT('No selection has been specified yet, so it is not possible to save it.')
FRPRT04EX10000006100000000000001     ELSE
FRPRT04EX10000006200000000000001     @@COMMENT  'Restore Previously Saved List'
FRPRT04EX10000006300000000000001     CLR_LIST   NAMED(#EXP_WLST1)
FRPRT04EX10000006400000000000001     CLR_LIST   NAMED(#EXP_WLST2)
FRPRT04EX10000006500000000000001     USE        BUILTIN(RESTORE_SAVED_LIST) WITH_ARGS(#USE_LIST1) TO_GET(#EXP_WLST1)
FRPRT04EX10000006600000000000001     USE        BUILTIN(RESTORE_SAVED_LIST) WITH_ARGS(#USE_LIST2) TO_GET(#EXP_WLST2)
FRPRT04EX10000006700000000000001     @@COMMENT  'Input new / replacement list details'
FRPRT04EX10000006800000000000001     DOUNTIL    COND('(#STD_QNAM *NE *BLANKS) *AND (#STD_QSEL *NE *BLANKS)')
FRPRT04EX10000006900000000000001     CHANGE     FIELD(#STD_INSTR) TO('''Specify or change details as required. Press enter to save/replace details.''')
FRPRT04EX10000007000000000000001     DISPLAY    FIELDS((#STD_INSTR *L5 *P2 *NOID *OUTPUT) (#OVL_QSEL1 *L8 *P2 *NOID *INPUT) (#OVL_QSEL2 *L9 *P2 *NOID *INPUT) (#OVL_QSEL3 *L10 *P2 *NOID *INPUT) (#OVL_QSEL4 *L11 *P2 *NOID *INPUT) (#STD_QNAM *L14 *P31 *NOID *INPUT)) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) TEXT(('Selection' 7 2) ('Expression . . . .' 7 12) ('Saved' 14 2) ('Expression' 14 8) ('Name  . . .' 14 19)) CURSOR_LOC(*ATFIELD #STD_QNAM)
FRPRT04EX10000007100000000000001     ENDUNTIL
FRPRT04EX10000007200000000000001     @@COMMENT  'Attempt to locate details'
FRPRT04EX10000007300000000000001     LOC_ENTRY  IN_LIST(#EXP_WLST1) WHERE('#STD_QNAM = #WRK_QNAM') RET_NUMBER(#LISTENTRY)
FRPRT04EX10000007400000000000001     @@COMMENT  'If found, replace'
FRPRT04EX10000007500000000000001     IF_STATUS  IS(*OKAY)
FRPRT04EX10000007600000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#EXP_WLST2)
FRPRT04EX10000007700000000000001     CHANGE     FIELD(#WRK_QSEL) TO(#STD_QSEL)
FRPRT04EX10000007800000000000001     UPD_ENTRY  IN_LIST(#EXP_WLST2)
FRPRT04EX10000007900000000000001     MESSAGE    MSGTXT('The list of saved expressions has been updated with your changes')
FRPRT04EX10000008000000000000001     @@COMMENT  'Else try to insert (if space available)'
FRPRT04EX10000008100000000000001     ELSE
FRPRT04EX10000008200000000000001     IF         COND('#LISTCOUNT *GE #EXP_LISTZ')
FRPRT04EX10000008300000000000001     MESSAGE    MSGTXT('Space allowed to save expressions is full .... your expression cannot be saved')
FRPRT04EX10000008400000000000001     ELSE
FRPRT04EX10000008500000000000001     CHANGE     FIELD(#WRK_QNAM) TO(#STD_QNAM)
FRPRT04EX10000008600000000000001     CHANGE     FIELD(#WRK_QSEL) TO(#STD_QSEL)
FRPRT04EX10000008700000000000001     ADD_ENTRY  TO_LIST(#EXP_WLST1)
FRPRT04EX10000008800000000000001     ADD_ENTRY  TO_LIST(#EXP_WLST2)
FRPRT04EX10000008900000000000001     MESSAGE    MSGTXT('Your new expression has been added to the list of saved expressions')
FRPRT04EX10000009000000000000001     ENDIF
FRPRT04EX10000009100000000000001     ENDIF
FRPRT04EX10000009200000000000001     @@COMMENT  'Delete and replace the list'
FRPRT04EX10000009300000000000001     USE        BUILTIN(DELETE_SAVED_LIST) WITH_ARGS(#USE_LIST1)
FRPRT04EX10000009400000000000001     USE        BUILTIN(DELETE_SAVED_LIST) WITH_ARGS(#USE_LIST2)
FRPRT04EX10000009500000000000001     USE        BUILTIN(SAVE_LIST) WITH_ARGS(#EXP_WLST1  20 'P' 0 #USE_LIST1) TO_GET(#USE_LIST1)
FRPRT04EX10000009600000000000001     USE        BUILTIN(SAVE_LIST) WITH_ARGS(#EXP_WLST2 256 'P' 0 #USE_LIST2) TO_GET(#USE_LIST2)
FRPRT04EX10000009700000000000001     ENDIF
FRPRT04EX10000009800000000000001     CHANGE     FIELD(#IO$KEY) TO(*NULL)
FRPRT04EX10000009900000000000001     ENDROUTINE
FRPRT04EX10000010000000000000001     @@COMMENT  '================================================='
FRPRT04EX10000010100000000000001     @@COMMENT  'EXP_PROMPT : Prompt a saved expression '
FRPRT04EX10000010200000000000001     @@COMMENT  '================================================='
FRPRT04EX10000010300000000000001     SUBROUTINE NAME(EXP_PROMPT)
FRPRT04EX10000010400000000000001     @@COMMENT  'Restore Previously Saved List'
FRPRT04EX10000010500000000000001     CLR_LIST   NAMED(#EXP_WLST1)
FRPRT04EX10000010600000000000001     CLR_LIST   NAMED(#EXP_WLST2)
FRPRT04EX10000010700000000000001     USE        BUILTIN(RESTORE_SAVED_LIST) WITH_ARGS(#USE_LIST1) TO_GET(#EXP_WLST1)
FRPRT04EX10000010800000000000001     USE        BUILTIN(RESTORE_SAVED_LIST) WITH_ARGS(#USE_LIST2) TO_GET(#EXP_WLST2)
FRPRT04EX10000010900000000000001     @@COMMENT  'If list is empty'
FRPRT04EX10000011000000000000001     IF_NULL    FIELD(#LISTCOUNT)
FRPRT04EX10000011100000000000001     MESSAGE    MSGTXT('There are currently no saved expressions for you to select from')
FRPRT04EX10000011200000000000001     @@COMMENT  'else display and allow selection'
FRPRT04EX10000011300000000000001     ELSE
FRPRT04EX10000011400000000000001     CLR_LIST   NAMED(#EXP_DLIST)
FRPRT04EX10000011500000000000001     CHANGE     FIELD(#LISTENTRY) TO(*NULL)
FRPRT04EX10000011600000000000001     SELECTLIST NAMED(#EXP_WLST1)
FRPRT04EX10000011700000000000001     CHANGE     FIELD(#LISTENTRY) TO('#LISTENTRY + 1')
FRPRT04EX10000011800000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#EXP_WLST2)
FRPRT04EX10000011900000000000001     ADD_ENTRY  TO_LIST(#EXP_DLIST)
FRPRT04EX10000012000000000000001     ENDSELECT
FRPRT04EX10000012100000000000001     DOUNTIL    COND('#LISTENTRY *GT 0')
FRPRT04EX10000012200000000000001     CHANGE     FIELD(#STD_INSTR) TO('''Position cursor on saved expression and press enter to select.''')
FRPRT04EX10000012300000000000001     DISPLAY    FIELDS((#STD_INSTR *L5 *P2 *NOID *OUT)) BROWSELIST(#EXP_DLIST) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) CURSOR_LOC(*ATFIELD #STD_INSTR)
FRPRT04EX10000012400000000000001     @@COMMENT  'If entry selected get details and finish'
FRPRT04EX10000012500000000000001     IF         COND('#LISTENTRY *GT 0')
FRPRT04EX10000012600000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#EXP_WLST1)
FRPRT04EX10000012700000000000001     GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#EXP_WLST2)
FRPRT04EX10000012800000000000001     CHANGE     FIELD(#STD_QNAM) TO(#WRK_QNAM)
FRPRT04EX10000012900000000000001     CHANGE     FIELD(#STD_QSEL) TO(#WRK_QSEL)
FRPRT04EX10000013000000000000001     ENDIF
FRPRT04EX10000013100000000000001     ENDUNTIL
FRPRT04EX10000013200000000000001     ENDIF
FRPRT04EX10000013300000000000001     CHANGE     FIELD(#IO$KEY) TO(*NULL)
FRPRT04EX10000013400000000000001     ENDROUTINE
FRPRT04EX10000013500000000000001LEN: @@LABEL
FRPRT05   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT05   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRPRT05   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRPRT05   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRPRT05   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRPRT05   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRPRT05   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRPRT05   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRPRT05   0000000900000000000001     /* ********** ======================================================= */
FRPRT05   0000001000000000000001     /* ********** ANSWER AND LIST VARIABLE USAGE                          */
FRPRT05   0000001100000000000001     /* ********** ======================================================= */
FRPRT05   0000001200000000000001     /* ********** Name      Description of Usage                          */
FRPRT05   0000001300000000000001     /* ********** ----      --------------------                          */
FRPRT05   0000001400000000000001     /* ********** @@CANS001 Report TIT_(s)                                */
FRPRT05   0000001500000000000001     /* ********** @@CANS007 Optimised for maximum speed                   */
FRPRT05   0000001600000000000001     /* ********** @@CANS008 Used for SORTING ORDER input                  */
FRPRT05   0000001700000000000001     /* ********** @@CANS009 Used for type of drill down report            */
FRPRT05   0000001800000000000001     /* ********** @@CANS010 Used for extra fields in the heading area     */
FRPRT05   0000001900000000000001     /* ********** @@CANS011 Used for extra fileds in detail area          */
FRPRT05   0000002000000000000001     /* ********** @@LST01   List of all fields from all files             */
FRPRT05   0000002100000000000001     /* ********** @@LST02   List of fields from base file only            */
FRPRT05   0000002200000000000001     /* ********** @@LST03   List of keys of base file                     */
FRPRT05   0000002300000000000001     /* ********** @@LST04   List of numeric fields from all files         */
FRPRT05   0000002400000000000001     /* ********** @@LST04   List of numeric fields from all files         */
FRPRT05   0000002500000000000001     /* ********** @@LST14   List of sort order of file                    */
FRPRT05   0000002600000000000001     /* ********** @@LST16   List of KEEP_TOTAL fields                     */
FRPRT05   0000002700000000000001     /* ********** @@CANS16  List 16 alternate column headings             */
FRPRT05   0000002800000000000001     /* ********** @@LST17   List of KEEP_AVG fields                       */
FRPRT05   0000002900000000000001     /* ********** @@CANS17  List 17 alternate column headings             */
FRPRT05   0000003000000000000001     /* ********** @@LST18   List of KEEP_MIN fields                       */
FRPRT05   0000003100000000000001     /* ********** @@CANS18  List 18 alternate column headings             */
FRPRT05   0000003200000000000001     /* ********** @@LST19   List of KEEP_MAX fields                       */
FRPRT05   0000003300000000000001     /* ********** @@CANS19  List 19 alternate column headings             */
FRPRT05   0000003400000000000001     /* ********** @@LST20   List of KEEP_COUNT fields                     */
FRPRT05   0000003500000000000001     /* ********** @@CANS20  List 20 alternate column headings             */
FRPRT05   0000003600000000000001     /* ********** @@LST22   List of all fields to be extracted            */
FRPRT05   0000003700000000000001     /* ********** @@LST98   Work list only                                */
FRPRT05   0000003800000000000001     /* ********** @@LST99   Work list only                                */
FRPRT05   0000003900000000000001     /* ********** CF        Current File Loop Index (short scoped)        */
FRPRT05   0000004000000000000001     /* ********** OQ        Value greater than zero indicates OPNQRYF     */
FRPRT05   0000004100000000000001     /* ********** RT        Count of run time expressions used            */
FRPRT05   0000004200000000000001     /* ********** LV        Low value of range variable                   */
FRPRT05   0000004300000000000001     /* ********** HV        High value of range variable                  */
FRPRT05   0000004400000000000001     /* ********** EN        Expressions in numeric used                   */
FRPRT05   0000004500000000000001     /* ********** EA        Expressions in alphanumeric used              */
FRPRT05   0000004600000000000001     /* ********** EI        Free form expression input required           */
FRPRT05   0000004700000000000001     /* ********** NK        Number of sort leys                           */
FRPRT05   0000004800000000000001     /* ********** SU        Number of subtotal levels                     */
FRPRT05   0000004900000000000001     /* ********** WA        Loop work variable 1                          */
FRPRT05   0000005000000000000001     /* ********** WB        Loop work variable 2                          */
FRPRT05   0000005100000000000001     /* ********** WC        Loop work variable 3                          */
FRPRT05   0000005200000000000001     /* ********** XE - XD   Loop work variables                           */
FRPRT05   0000005300000000000001     /* **********                                                         */
FRPRT05   0000005400000000000001     /* **********                                                         */
FRPRT05   0000005500000000000001     /* ********** ======================================================= */
FRPRT05   0000005600000000000001     /* ********** INITIALSE SOME INDEXES                                  */
FRPRT05   0000005700000000000001     /* ********** ======================================================= */
FRPRT05   0000005800000000000001     @@SET_IDX  IDX_NAME(LV) TO(1)
FRPRT05   0000005900000000000001     @@SET_IDX  IDX_NAME(HV) TO(2)
FRPRT05   0000006000000000000001     @@SET_IDX  IDX_NAME(RT) TO(0)
FRPRT05   0000006100000000000001     @@SET_IDX  IDX_NAME(OQ) TO(0)
FRPRT05   0000006200000000000001     @@SET_IDX  IDX_NAME(EN) TO(0)
FRPRT05   0000006300000000000001     @@SET_IDX  IDX_NAME(EA) TO(0)
FRPRT05   0000006400000000000001     @@SET_IDX  IDX_NAME(EI) TO(0)
FRPRT05   0000006500000000000001     @@SET_IDX  IDX_NAME(NK) TO(0)
FRPRT05   0000006600000000000001     @@SET_IDX  IDX_NAME(SU) TO(0)
FRPRT05   0000006700000000000001     /* ********** ======================================================= */
FRPRT05   0000006800000000000001     /* ********** GET NAMES OF UP TO 50 RELATED FILES                     */
FRPRT05   0000006900000000000001     /* ********** ======================================================= */
FRPRT05   0000007000000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the primary file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000007100000000000001     /* ********** ======================================================= */
FRPRT05   0000007200000000000001     /* ********** LOAD DETAILS OF ALL FIELDS FROM ALL FILES INTO LIST 1   */
FRPRT05   0000007300000000000001     /* ********** LOAD DETAILS OF FIELDS FROM THE BASE FILE INTO LIST 2   */
FRPRT05   0000007400000000000001     /* ********** LOAD DETAILS OF KEYS OF BASE FILE INTO LIST 3           */
FRPRT05   0000007500000000000001     /* ********** ======================================================= */
FRPRT05   0000007600000000000001     @@CLR_LST  NUMBER(1)
FRPRT05   0000007700000000000001     @@CLR_LST  NUMBER(2)
FRPRT05   0000007800000000000001     @@CLR_LST  NUMBER(12)
FRPRT05   0000007900000000000001     @@CLR_LST  NUMBER(3)
FRPRT05   0000008000000000000001     @@CLR_LST  NUMBER(4)
FRPRT05   0000008100000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(2)
FRPRT05   0000008200000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(12) REAL_ONLY(*YES)
FRPRT05   0000008300000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(3)
FRPRT05   0000008400000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRPRT05   0000008500000000000001A10: @@LABEL
FRPRT05   0000008600000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A20)
FRPRT05   0000008700000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(1)
FRPRT05   0000008800000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(4) NUM_ONLY(*YES)
FRPRT05   0000008900000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT05   0000009000000000000001     @@GOTO     LABEL(A10)
FRPRT05   0000009100000000000001A20: @@LABEL
FRPRT05   0000009200000000000001     /* ********** ======================================================= */
FRPRT05   0000009300000000000001     /* ********** START TO BUILD UP MAXIMUM LIST 22 OF ALL FIELDS         */
FRPRT05   0000009400000000000001     /* ********** ======================================================= */
FRPRT05   0000009500000000000001     @@CLR_LST  NUMBER(22)
FRPRT05   0000009600000000000001     @@MRG_LSTS FROM_LSTS(3) INTO_LST(22)
FRPRT05   0000009700000000000001     /* ********** ======================================================= */
FRPRT05   0000009800000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 22 AS WELL       */
FRPRT05   0000009900000000000001     /* ********** ======================================================= */
FRPRT05   0000010000000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT05   0000010100000000000001A30: @@LABEL
FRPRT05   0000010200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A40)
FRPRT05   0000010300000000000001     @@CLR_LST  NUMBER(99)
FRPRT05   0000010400000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(99)
FRPRT05   0000010500000000000001     @@MRG_LSTS FROM_LSTS(99) INTO_LST(22)
FRPRT05   0000010600000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT05   0000010700000000000001     @@GOTO     LABEL(A30)
FRPRT05   0000010800000000000001A40: @@LABEL
FRPRT05   0000010900000000000001     /* ********** ======================================================= */
FRPRT05   0000011000000000000001     /* ********** ASK WHAT SORT OF SORT ORDERING IS REQUIRED              */
FRPRT05   0000011100000000000001     /* ********** ======================================================= */
FRPRT05   0000011200000000000001O05: @@QUESTION PROMPT('How do you want to sort / order information printed on this report ?') ANSWER(@@CANS008) EXTEND('Answer KEYS or SORT where these things mean ....' 'KEYS    : the natural order implied by the keys of this file are to be' '          used to print and total information.' 'SORT    : information in the file needs to be reordered (sorted) into' '          a different order before details are printed or totalled.') LOWER(*NO) VALUES(KEYS SORT) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000011300000000000001     @@CLR_LST  NUMBER(14)
FRPRT05   0000011400000000000001     /* ********** SORT                                                    */
FRPRT05   0000011500000000000001     @@IF       COND((*IF @@CANS008 *EQ KEYS)) GOTO(O10)
FRPRT05   0000011600000000000001     @@MAK_LSTS FROM_LSTS(12) INTO_LSTS((14 'Sort Order' '1=Highest' '99=Lowest' *SEQUENCE))  HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000011700000000000001     @@INC_IDX  IDX_NAME(OQ)
FRPRT05   0000011800000000000001     @@GOTO     LABEL(O30)
FRPRT05   0000011900000000000001     /* ********** KEYS                                                    */
FRPRT05   0000012000000000000001O10: @@LABEL
FRPRT05   0000012100000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(14)
FRPRT05   0000012200000000000001     @@GOTO     LABEL(O30)
FRPRT05   0000012300000000000001O30: @@LABEL
FRPRT05   0000012400000000000001     @@SET_IDX  IDX_NAME(NK) TO(@@LNE14)
FRPRT05   0000012500000000000001     @@CMP_IDX  IDX_NAME(NK) IDX_VALUE(1) IF_LT(O05)
FRPRT05   0000012600000000000001     @@CMP_IDX  IDX_NAME(NK) IDX_VALUE(8) IF_GT(O05)
FRPRT05   0000012700000000000001     @@MRG_LSTS FROM_LSTS(14) INTO_LST(22)
FRPRT05   0000012800000000000001     /* ********** ======================================================= */
FRPRT05   0000012900000000000001     /* ********** ASK ABOUT SUBTOTALLING                                  */
FRPRT05   0000013000000000000001     /* ********** ======================================================= */
FRPRT05   0000013100000000000001     @@CLR_LST  NUMBER(16)
FRPRT05   0000013200000000000001     @@CLR_LST  NUMBER(17)
FRPRT05   0000013300000000000001     @@CLR_LST  NUMBER(18)
FRPRT05   0000013400000000000001     @@CLR_LST  NUMBER(19)
FRPRT05   0000013500000000000001     @@CLR_LST  NUMBER(20)
FRPRT05   0000013600000000000001     @@CMP_IDX  IDX_NAME(NK) IDX_VALUE(1) IF_LT(STE)
FRPRT05   0000013700000000000001     @@SET_IDX  IDX_NAME(SU) TO(@@LNE14)
FRPRT05   0000013800000000000001     @@MRG_LSTS FROM_LSTS(14) INTO_LST(22)
FRPRT05   0000013900000000000001     @@MAK_LSTS FROM_LSTS(4)  INTO_LSTS((16 'Select' 'To' KEEP_TOTAL *YESNO) (17 'Select' 'To' 'KEEP_AVG')) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000014000000000000001     @@MRG_LSTS FROM_LSTS(16) INTO_LST(22)
FRPRT05   0000014100000000000001     @@MRG_LSTS FROM_LSTS(17) INTO_LST(22)
FRPRT05   0000014200000000000001     @@MAK_LSTS FROM_LSTS(4)  INTO_LSTS((18 'Select' 'To' KEEP_MIN *YESNO) (19 'Select' 'To' 'KEEP_MAX')) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000014300000000000001     @@MRG_LSTS FROM_LSTS(18) INTO_LST(22)
FRPRT05   0000014400000000000001     @@MRG_LSTS FROM_LSTS(19) INTO_LST(22)
FRPRT05   0000014500000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((20 'Select' 'To' KEEP_COUNT *YESNO)) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000014600000000000001     @@MRG_LSTS FROM_LSTS(20) INTO_LST(22)
FRPRT05   0000014700000000000001STE: @@LABEL
FRPRT05   0000014800000000000001     /* ********** ======================================================= */
FRPRT05   0000014900000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRPRT05   0000015000000000000001     /* ********** ======================================================= */
FRPRT05   0000015100000000000001     FUNCTION   OPTIONS(*DEFERWRITE *DIRECT)
FRPRT05   0000015200000000000001     OPEN       FILE(*ALL) USE_OPTION(*ONDEMAND)
FRPRT05   0000015300000000000001     /* ********** ======================================================= */
FRPRT05   0000015400000000000001     /* ********** GENERATE ALL SUBTOTAL, ETC WORK FIELDS                  */
FRPRT05   0000015500000000000001     /* ********** ======================================================= */
FRPRT05   0000015600000000000001     @@CMP_IDX  IDX_NAME(SU) IDX_VALUE(1) IF_LT(UA9)
FRPRT05   0000015700000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRPRT05   0000015800000000000001UA1: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(@@LNE14) IF_GT(UA9)
FRPRT05   0000015900000000000001     @@COMMENT  'Level @@INDEXWA/@@LEL14WA Work Fields'
FRPRT05   0000016000000000000001     DEFINE     FIELD(#TIT_@@INDEXWA) REFFLD(#STD_TITLE)
FRPRT05   0000016100000000000001     @@QUESTION PROMPT('Please specify a title for the level @@INDEXWA / @@LEL14WA report') ANSWER(@@CANS001) EXTEND('1234567890123456789012345678901234567890' 'Use from 1 to 40 characters for your title. Use upper and lowercase' 'characters. Do NOT use quote symbols in your title.' 'For more information use HELP.') HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000016200000000000001     CHANGE     FIELD(#TIT_@@INDEXWA) TO('''@@CANS001''')
FRPRT05   0000016300000000000001     /* ********** KEEP_TOTAL VALUES                                       */
FRPRT05   0000016400000000000001     @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000016500000000000001UA2: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE16) IF_GT(UA3)
FRPRT05   0000016600000000000001     @@QUESTION PROMPT('Specify column headings for KEEP_TOTAL of @@LEL16WB (sort level @@LEL14WA)') ANSWER(@@CANS016) EXTEND('''12345678901234567890'' ''12345678901234567890'' ''12345678901234567890''' 'You are using KEEP_TOTAL (ie: keeping a total)' 'of @@LEL16WB (@@LDS16WB)' 'at level @@INDEXWA/@@LEL14WA (@@LDS14WA).' 'Specify up to 3 column headings formatted EXACTLY as shown, OR, leave/make' 'the answer area completely blank to use the system default column' 'headings. Input column headings with care. Refer to associated HELP text' 'for examples. Do NOT use quote symbols other than as delimiters.') HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000016700000000000001     @@IF       COND((*IF @@CANS016 *EQ ' ')) GOTO(TO1)
FRPRT05   0000016800000000000001     DEFINE     FIELD(#TOT_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL16WB) COLHDG(@@CANS016)
FRPRT05   0000016900000000000001     @@GOTO     LABEL(TO2)
FRPRT05   0000017000000000000001TO1: @@LABEL
FRPRT05   0000017100000000000001     DEFINE     FIELD(#TOT_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL16WB)
FRPRT05   0000017200000000000001TO2: @@LABEL
FRPRT05   0000017300000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000017400000000000001     @@GOTO     LABEL(UA2)
FRPRT05   0000017500000000000001     /* ********** KEEP_AVG VALUES                                         */
FRPRT05   0000017600000000000001UA3: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000017700000000000001UA4: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE17) IF_GT(UA5)
FRPRT05   0000017800000000000001     @@QUESTION PROMPT('Specify column headings for KEEP_AVG of @@LEL17WB (sort level @@LEL14WA)') ANSWER(@@CANS017) EXTEND('''12345678901234567890'' ''12345678901234567890'' ''12345678901234567890''' 'You are using KEEP_AVG (ie: keeping an average or simple mean)' 'of @@LEL17WB (@@LDS17WB)' 'at level @@INDEXWA/@@LEL14WA (@@LDS14WA).' 'Specify up to 3 column headings formatted EXACTLY as shown, OR, leave/make' 'the answer area completely blank to use the system default column' 'headings. Input column headings with care. Refer to associated HELP text' 'for examples. Do NOT use quote symbols other than as delimiters.') HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000017900000000000001     @@IF       COND((*IF @@CANS017 *EQ ' ')) GOTO(AV1)
FRPRT05   0000018000000000000001     DEFINE     FIELD(#AVG_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL17WB) COLHDG(@@CANS017)
FRPRT05   0000018100000000000001     @@GOTO     LABEL(AV2)
FRPRT05   0000018200000000000001AV1: @@LABEL
FRPRT05   0000018300000000000001     DEFINE     FIELD(#AVG_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL17WB)
FRPRT05   0000018400000000000001AV2: @@LABEL
FRPRT05   0000018500000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000018600000000000001     @@GOTO     LABEL(UA4)
FRPRT05   0000018700000000000001     /* ********** KEEP_MIN VALUES                                         */
FRPRT05   0000018800000000000001UA5: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000018900000000000001UA6: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE18) IF_GT(UA7)
FRPRT05   0000019000000000000001     @@QUESTION PROMPT('Specify column headings for KEEP_MIN of @@LEL18WB (sort level @@LEL14WA)') ANSWER(@@CANS018) EXTEND('''12345678901234567890'' ''12345678901234567890'' ''12345678901234567890''' 'You are using KEEP_MIN (ie: keeping the minimum value of)' 'of @@LEL18WB (@@LDS18WB)' 'at level @@INDEXWA/@@LEL14WA (@@LDS14WA).' 'Specify up to 3 column headings formatted EXACTLY as shown, OR, leave/make' 'the answer area completely blank to use the system default column' 'headings. Input column headings with care. Refer to associated HELP text' 'for examples. Do NOT use quote symbols other than as delimiters.') HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000019100000000000001     @@IF       COND((*IF @@CANS018 *EQ ' ')) GOTO(MI1)
FRPRT05   0000019200000000000001     DEFINE     FIELD(#MIN_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL18WB) COLHDG(@@CANS018)
FRPRT05   0000019300000000000001     @@GOTO     LABEL(MI2)
FRPRT05   0000019400000000000001MI1: @@LABEL
FRPRT05   0000019500000000000001     DEFINE     FIELD(#MIN_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL18WB)
FRPRT05   0000019600000000000001MI2: @@LABEL
FRPRT05   0000019700000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000019800000000000001     @@GOTO     LABEL(UA6)
FRPRT05   0000019900000000000001     /* ********** KEEP_MAX VALUES                                         */
FRPRT05   0000020000000000000001UA7: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000020100000000000001UB1: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE19) IF_GT(UB4)
FRPRT05   0000020200000000000001     @@QUESTION PROMPT('Specify column headings for KEEP_MAX of @@LEL19WB (sort level @@LEL14WA)') ANSWER(@@CANS019) EXTEND('''12345678901234567890'' ''12345678901234567890'' ''12345678901234567890''' 'You are using KEEP_MAX (ie: keeping the maximum value of)' 'of @@LEL19WB (@@LDS19WB)' 'at level @@INDEXWA/@@LEL14WA (@@LDS14WA).' 'Specify up to 3 column headings formatted EXACTLY as shown, OR, leave/make' 'the answer area completely blank to use the system default column' 'headings. Input column headings with care. Refer to associated HELP text' 'for examples. Do NOT use quote symbols other than as delimiters.') HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000020300000000000001     @@IF       COND((*IF @@CANS019 *EQ ' ')) GOTO(MX1)
FRPRT05   0000020400000000000001     DEFINE     FIELD(#MAX_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL19WB) COLHDG(@@CANS019)
FRPRT05   0000020500000000000001     @@GOTO     LABEL(MX2)
FRPRT05   0000020600000000000001MX1: @@LABEL
FRPRT05   0000020700000000000001     DEFINE     FIELD(#MAX_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL19WB)
FRPRT05   0000020800000000000001MX2: @@LABEL
FRPRT05   0000020900000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000021000000000000001     @@GOTO     LABEL(UB1)
FRPRT05   0000021100000000000001     /* ********** KEEP_COUNT                                              */
FRPRT05   0000021200000000000001UB4: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000021300000000000001UB5: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE20) IF_GT(UA8)
FRPRT05   0000021400000000000001     @@QUESTION PROMPT('Specify column headings for KEEP_COUNT of @@LEL20WB (sort level @@LEL14WA)') ANSWER(@@CANS020) EXTEND('''12345678901234567890'' ''12345678901234567890'' ''12345678901234567890''' 'You are using KEEP_COUNT (ie: counting the different instances of)' 'of @@LEL20WB (@@LDS20WB)' 'at level @@INDEXWA/@@LEL14WA (@@LDS14WA).' 'Specify up to 3 column headings formatted EXACTLY as shown, OR, leave/make' 'the answer area completely blank to use the system default column' 'headings. Input column headings with care. Refer to associated HELP text' 'for examples. Do NOT use quote symbols other than as delimiters.')  HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000021500000000000001     @@IF       COND((*IF @@CANS020 *EQ ' ')) GOTO(CO1)
FRPRT05   0000021600000000000001     DEFINE     FIELD(#CNT_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL20WB) TYPE(*DEC) LENGTH(7) DECIMALS(0) EDIT_CODE(3) DEFAULT(0) COLHDG(@@CANS020)
FRPRT05   0000021700000000000001     @@GOTO     LABEL(CO2)
FRPRT05   0000021800000000000001CO1: @@LABEL
FRPRT05   0000021900000000000001     DEFINE     FIELD(#CNT_@@INDEXWA@@INDEXWB) REFFLD(#@@LEL20WB) TYPE(*DEC) LENGTH(7) DECIMALS(0) EDIT_CODE(3) DEFAULT(0)
FRPRT05   0000022000000000000001CO2: @@LABEL
FRPRT05   0000022100000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000022200000000000001     @@GOTO     LABEL(UB5)
FRPRT05   0000022300000000000001     /* ********** NEXT SUBTOTAL LEVEL                                     */
FRPRT05   0000022400000000000001UA8: @@INC_IDX  IDX_NAME(WA)
FRPRT05   0000022500000000000001     @@GOTO     LABEL(UA1)
FRPRT05   0000022600000000000001UA9: @@LABEL
FRPRT05   0000022700000000000001     /* ********** ======================================================= */
FRPRT05   0000022800000000000001     /* ********** GENERATE ALL BREAK LINES                                */
FRPRT05   0000022900000000000001     /* ********** ======================================================= */
FRPRT05   0000023000000000000001     @@QUESTION PROMPT('For lower level "drill down" reports what type of page control is required') ANSWER(@@CANS009) EXTEND('Reply NEWPAGE or INLINE only, where these things mean :' 'NEWPAGE : Means that a new page should be started when the higher level' '          of sort order changes. This is most effective when a relatively' '          small number of sort levels, with a very high summary rate,' '          are being used.' 'INLINE  : means that an inline heading should be used, rather than a new' ' page, when the next higher level of sort order changes.' 'Use the HELP key for more information and examples.') LOWER(*NO) VALUES(NEWPAGE INLINE) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000023100000000000001     @@CMP_IDX  IDX_NAME(SU) IDX_VALUE(1) IF_LT(UD9)
FRPRT05   0000023200000000000001     @@SET_IDX  IDX_NAME(WB) TO(0)
FRPRT05   0000023300000000000001     @@SET_IDX  IDX_NAME(WC) TO(0)
FRPRT05   0000023400000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRPRT05   0000023500000000000001UC1: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(@@LNE14) IF_GT(UD9)
FRPRT05   0000023600000000000001     @@CLR_LST  NUMBER(99)
FRPRT05   0000023700000000000001     @@CLR_LST  NUMBER(98)
FRPRT05   0000023800000000000001     @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(2) IF_LT(T20)
FRPRT05   0000023900000000000001     @@QUESTION PROMPT('Extra fields in the HEADING area of the level @@INDEXWA/@@LEL14WA report ?') ANSWER(@@CANS010) EXTEND('If you wish to add extra fields to the heading area of this drill down' 'report reply Y, otherwise reply N. The heading area may be the top of each' 'NEWPAGE or as INLINE headings in the report detail area. Note that all' 'relevant sort fields are AUTOMATICALLY included. You need not add them.' 'If you reply Y you will be presented with a list of all fields from all' 'selected files. You may choose your required additional fields from this' 'list. However you MUST NOT select any field that is part of the sort key' 'that you elected to use with this report. This will cause an RDML error.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000024000000000000001     @@IF       COND((*IF @@CANS010 *EQ N)) GOTO(T20)
FRPRT05   0000024100000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((99 'Additional' '  Header' '  Fields' *SEQUENCE *NO)) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000024200000000000001     @@MRG_LSTS FROM_LSTS((99)) INTO_LST(22)
FRPRT05   0000024300000000000001     @@MRG_LSTS FROM_LSTS((99)) INTO_LST(98)
FRPRT05   0000024400000000000001     @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(0) IF_GT(T10)
FRPRT05   0000024500000000000001     @@CLR_LST  NUMBER(99)
FRPRT05   0000024600000000000001T10: @@LABEL
FRPRT05   0000024700000000000001     @@CMP_IDX  IDX_NAME(WC) IDX_VALUE(0) IF_GT(T20)
FRPRT05   0000024800000000000001     @@CLR_LST  NUMBER(98)
FRPRT05   0000024900000000000001T20: @@LABEL
FRPRT05   0000025000000000000001     @@COMMENT  'Level @@INDEXWA/@@LEL14WA Report Lines'
FRPRT05   0000025100000000000001Q01: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(1) IF_GT(Q02)
FRPRT05   0000025200000000000001     DEF_HEAD   NAME(#HED_01) FIELDS((#TIT_01) (#DATE) (#TIME) (#USER) (#REP1PAGE)) TRIGGER_BY(*OVERFLOW) FOR_REPORT(1) DESIGN(*DOWN)
FRPRT05   0000025300000000000001     @@GOTO     LABEL(Q09)
FRPRT05   0000025400000000000001Q02: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(2) IF_GT(Q03)
FRPRT05   0000025500000000000001     DEF_HEAD   NAME(#HED_02) FIELDS((#TIT_02) (#DATE) (#TIME) (#USER) (#REP2PAGE) @@LSX14/WB @@LST99) TRIGGER_BY(*OVERFLOW @@LSX14/WB )  FOR_REPORT(2) DESIGN(*DOWN)
FRPRT05   0000025600000000000001     @@GOTO     LABEL(Q09)
FRPRT05   0000025700000000000001Q03: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(3) IF_GT(Q04)
FRPRT05   0000025800000000000001     DEF_HEAD   NAME(#HED_03) FIELDS((#TIT_03) (#DATE) (#TIME) (#USER) (#REP3PAGE) @@LSX14/WB @@LST99) TRIGGER_BY(*OVERFLOW @@LSX14/WB )  FOR_REPORT(3) DESIGN(*DOWN)
FRPRT05   0000025900000000000001     @@GOTO     LABEL(Q09)
FRPRT05   0000026000000000000001Q04: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(4) IF_GT(Q05)
FRPRT05   0000026100000000000001     DEF_HEAD   NAME(#HED_04) FIELDS((#TIT_04) (#DATE) (#TIME) (#USER) (#REP4PAGE) @@LSX14/WB @@LST99) TRIGGER_BY(*OVERFLOW @@LSX14/WB )  FOR_REPORT(4) DESIGN(*DOWN)
FRPRT05   0000026200000000000001     @@GOTO     LABEL(Q09)
FRPRT05   0000026300000000000001Q05: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(5) IF_GT(Q06)
FRPRT05   0000026400000000000001     DEF_HEAD   NAME(#HED_05) FIELDS((#TIT_05) (#DATE) (#TIME) (#USER) (#REP5PAGE) @@LSX14/WB @@LST99) TRIGGER_BY(*OVERFLOW @@LSX14/WB )  FOR_REPORT(5) DESIGN(*DOWN)
FRPRT05   0000026500000000000001     @@GOTO     LABEL(Q09)
FRPRT05   0000026600000000000001Q06: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(6) IF_GT(Q07)
FRPRT05   0000026700000000000001     DEF_HEAD   NAME(#HED_06) FIELDS((#TIT_06) (#DATE) (#TIME) (#USER) (#REP6PAGE) @@LSX14/WB @@LST99) TRIGGER_BY(*OVERFLOW @@LSX14/WB )  FOR_REPORT(6) DESIGN(*DOWN)
FRPRT05   0000026800000000000001     @@GOTO     LABEL(Q09)
FRPRT05   0000026900000000000001Q07: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(7) IF_GT(Q08)
FRPRT05   0000027000000000000001     DEF_HEAD   NAME(#HED_07) FIELDS((#TIT_07) (#DATE) (#TIME) (#USER) (#REP7PAGE) @@LSX14/WB @@LST99) TRIGGER_BY(*OVERFLOW @@LSX14/WB )  FOR_REPORT(7) DESIGN(*DOWN)
FRPRT05   0000027100000000000001     @@GOTO     LABEL(Q09)
FRPRT05   0000027200000000000001Q08: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(8) IF_GT(Q09)
FRPRT05   0000027300000000000001     DEF_HEAD   NAME(#HED_08) FIELDS((#TIT_08) (#DATE) (#TIME) (#USER) (#REP8PAGE) @@LSX14/WB @@LST99) TRIGGER_BY(*OVERFLOW @@LSX14/WB )  FOR_REPORT(8) DESIGN(*DOWN)
FRPRT05   0000027400000000000001     @@GOTO     LABEL(Q09)
FRPRT05   0000027500000000000001Q09: @@LABEL
FRPRT05   0000027600000000000001     @@CMP_IDX  IDX_NAME(WC) IDX_VALUE(1) IF_LT(H05)
FRPRT05   0000027700000000000001     DEF_BREAK  NAME(#LED_@@INDEXWA) FIELDS(@@LSX14/WC @@LST98) TRIGGER_BY(@@LSX14/WC ) TYPE(*LEADING) FOR_REPORT(@@INDEXWA) SPACE_BEF(2) SPACE_AFT(1) DESIGN(*ACROSS) IDENTIFY(*LABEL)
FRPRT05   0000027800000000000001H05: @@LABEL
FRPRT05   0000027900000000000001     @@CLR_LST  NUMBER(99)
FRPRT05   0000028000000000000001     @@QUESTION PROMPT('Extra fields in the DETAIL area of the level @@INDEXWA/@@LEL14WA report ?') ANSWER(@@CANS011) EXTEND('If you wish to add extra fields to the detail area of this drill down' 'report reply Y, otherwise reply N.' 'Note that the sort level field @@LEL14WA is AUTOMATICALLY included.' 'You do not have to add field @@LEL14WA to the detail area of this report.' 'If you reply Y you will be presented with a list of all fields from all' 'selected files. You may choose your required additional fields from this' 'list. However you MUST NOT select field @@LEL14WA from the list displayed.' 'If you do choose it an RDML error will result.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000028100000000000001     @@IF       COND((*IF @@CANS011 *EQ N)) GOTO(T40)
FRPRT05   0000028200000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((99 'Additional' '  Detail' '  Fields' *SEQUENCE *NO)) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000028300000000000001     @@MRG_LSTS FROM_LSTS((99)) INTO_LST(22)
FRPRT05   0000028400000000000001T40: @@LABEL
FRPRT05   0000028500000000000001     @@SET_IDX  IDX_NAME(XA) TO(@@LNE16)
FRPRT05   0000028600000000000001     @@SET_IDX  IDX_NAME(XB) TO(@@LNE17)
FRPRT05   0000028700000000000001     @@SET_IDX  IDX_NAME(XC) TO(@@LNE18)
FRPRT05   0000028800000000000001     @@SET_IDX  IDX_NAME(XD) TO(@@LNE19)
FRPRT05   0000028900000000000001     @@SET_IDX  IDX_NAME(XE) TO(@@LNE20)
FRPRT05   0000029000000000000001     DEF_BREAK  NAME(#BRK_@@INDEXWA) FIELDS(#@@LEL14WA  @@LST99    @@GENNAME/WA/XA/#TOT_ @@GENNAME/WA/XB/#AVG_ @@GENNAME/WA/XC/#MIN_ @@GENNAME/WA/XD/#MAX_ @@GENNAME/WA/XE/#CNT_ ) TRIGGER_BY(@@LSX14/WA) FOR_REPORT(@@INDEXWA) DESIGN(*ACROSS) IDENTIFY(*COLHDG) SPACE_BEF(1) SPACE_AFT(0)
FRPRT05   0000029100000000000001     @@INC_IDX  IDX_NAME(WA)
FRPRT05   0000029200000000000001     @@IF       COND((*IF @@CANS009 *EQ NEWPAGE)) GOTO(H10)
FRPRT05   0000029300000000000001     @@INC_IDX  IDX_NAME(WC)
FRPRT05   0000029400000000000001     @@GOTO     H20
FRPRT05   0000029500000000000001H10: @@LABEL
FRPRT05   0000029600000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000029700000000000001H20: @@LABEL
FRPRT05   0000029800000000000001     @@GOTO     LABEL(UC1)
FRPRT05   0000029900000000000001UD9: @@LABEL
FRPRT05   0000030000000000000001     @@COMMENT  'Main Processing group'
FRPRT05   0000030100000000000001     GROUP_BY   NAME(#FETCHDATA) FIELDS(@@LST22)
FRPRT05   0000030200000000000001     /* ********** ======================================================= */
FRPRT05   0000030300000000000001     /* ********** INITIALISE PROGRAM VARIABLES                            */
FRPRT05   0000030400000000000001     /* ********** ======================================================= */
FRPRT05   0000030500000000000001     @@QUESTION PROMPT('Should this report use options to maximise its performance ?') ANSWER(@@CANS007) EXTEND('Answer Y (yes) or N (no) only.' 'By answering Y (yes) you will increase the compile time of this report' 'but reduce its execution time once it is compiled.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP050 HELP060 HELP070 HELP080 HELP090 HELP100 HELP110 HELP120 HELP130 HELP140)
FRPRT05   0000030600000000000001     @@IF       COND((*IF @@CANS007 *NE Y)) GOTO(DBA)
FRPRT05   0000030700000000000001     @@COMMENT  'Use *DBOPTIMISE for best performance'
FRPRT05   0000030800000000000001     FUNCTION   OPTIONS(*DBOPTIMISE)
FRPRT05   0000030900000000000001DBA: @@LABEL
FRPRT05   0000031000000000000001     /* ********** ======================================================= */
FRPRT05   0000031100000000000001     /* ********** START GENERATING THE PROGRAM MAINLINE                   */
FRPRT05   0000031200000000000001     /* ********** ======================================================= */
FRPRT05   0000031300000000000001     @@COMMENT  COMMENT('==================================')
FRPRT05   0000031400000000000001     @@COMMENT  COMMENT('If this function is running online')
FRPRT05   0000031500000000000001     @@COMMENT  COMMENT('==================================')
FRPRT05   0000031600000000000001     IF         COND('*JOBMODE = I')
FRPRT05   0000031700000000000001     /* ********** ======================================================= */
FRPRT05   0000031800000000000001     /* ********** HANDLE REORDERING OF FILE BY OPNQRYF SORT               */
FRPRT05   0000031900000000000001     /* ********** ======================================================= */
FRPRT05   0000032000000000000001     @@IF       COND((*IF @@CANS008 *EQ KEYS)) GOTO(SOA)
FRPRT05   0000032100000000000001     CHANGE     FIELD(#STD_QORD) TO('@@LSU14')
FRPRT05   0000032200000000000001     EXCHANGE   FIELDS(#STD_QORD)
FRPRT05   0000032300000000000001SOA: @@LABEL
FRPRT05   0000032400000000000001     @@COMMENT  COMMENT('Submit batch run of this function')
FRPRT05   0000032500000000000001     SUBMIT     PROCESS(#PROCESS) FUNCTION(#FUNCTION) JOB(#FUNCTION)
FRPRT05   0000032600000000000001     @@COMMENT  COMMENT('==========================================')
FRPRT05   0000032700000000000001     @@COMMENT  COMMENT('Else, if this function is running in batch')
FRPRT05   0000032800000000000001     @@COMMENT  COMMENT('==========================================')
FRPRT05   0000032900000000000001     ELSE
FRPRT05   0000033000000000000001     @@IF       COND((*IF @@CANS008 *EQ KEYS)) GOTO(X14)
FRPRT05   0000033100000000000001     @@COMMENT  COMMENT('Use OPNQRYF to order details')
FRPRT05   0000033200000000000001     @@IF       COND((*IF @@CANS007 *NE Y)) GOTO(DBB)
FRPRT05   0000033300000000000001     OPEN       FILE(@@FNAME01) USE_OPTION(*OPNQRYF) KEYFLD(#STD_QORD) OPTIMIZE(*ALLIO) SEQONLY(*YES 50)
FRPRT05   0000033400000000000001     @@GOTO     LABEL(DBC)
FRPRT05   0000033500000000000001DBB: @@LABEL
FRPRT05   0000033600000000000001     OPEN       FILE(@@FNAME01) USE_OPTION(*OPNQRYF) KEYFLD(#STD_QORD)
FRPRT05   0000033700000000000001DBC: @@LABEL
FRPRT05   0000033800000000000001X14: @@LABEL
FRPRT05   0000033900000000000001     @@COMMENT  COMMENT('Select required @@FNAME01 details')
FRPRT05   0000034000000000000001     @@IF       COND((*IF @@CANS007 *NE Y)) GOTO(DBD)
FRPRT05   0000034100000000000001     SELECT     FIELDS((#FETCHDATA)) FROM_FILE(@@FNAME01) OPTIONS(*BLOCK050)
FRPRT05   0000034200000000000001     @@GOTO     LABEL(DBE)
FRPRT05   0000034300000000000001DBD: @@LABEL
FRPRT05   0000034400000000000001     SELECT     FIELDS(#FETCHDATA) FROM_FILE(@@FNAME01)
FRPRT05   0000034500000000000001DBE: @@LABEL
FRPRT05   0000034600000000000001     /* ********** ======================================================= */
FRPRT05   0000034700000000000001     /* ********** FETCH DETAILS FROM ALL SECONDARY FILES                  */
FRPRT05   0000034800000000000001     /* ********** ======================================================= */
FRPRT05   0000034900000000000001X20: @@LABEL
FRPRT05   0000035000000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRPRT05   0000035100000000000001A50: @@LABEL
FRPRT05   0000035200000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(A60)
FRPRT05   0000035300000000000001     @@CLR_LST  NUMBER(99)
FRPRT05   0000035400000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(99)
FRPRT05   0000035500000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRPRT05   0000035600000000000001     FETCH      FIELDS((#FETCHDATA)) FROM_FILE(@@FNAMECF) WITH_KEY(@@LST99) KEEP_LAST(5)
FRPRT05   0000035700000000000001     @@INC_IDX  IDX_NAME(CF)
FRPRT05   0000035800000000000001     @@GOTO     LABEL(A50)
FRPRT05   0000035900000000000001A60: @@LABEL
FRPRT05   0000036000000000000001     /* ********** ======================================================= */
FRPRT05   0000036100000000000001     /* ********** GENERATE ALL KEEP_TOTAL, ETC LINES                      */
FRPRT05   0000036200000000000001     /* ********** ======================================================= */
FRPRT05   0000036300000000000001     @@CMP_IDX  IDX_NAME(SU) IDX_VALUE(1) IF_LT(XA9)
FRPRT05   0000036400000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRPRT05   0000036500000000000001XA1: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(@@LNE14) IF_GT(XA9)
FRPRT05   0000036600000000000001     @@COMMENT  'Level @@INDEXWA/@@LEL14WA work fields'
FRPRT05   0000036700000000000001     /* ********** KEEP_TOTAL VALUES                                       */
FRPRT05   0000036800000000000001     @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000036900000000000001XA2: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE16) IF_GT(XA3)
FRPRT05   0000037000000000000001     KEEP_TOTAL OF_FIELD(#@@LEL16WB) IN_FIELD(#TOT_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX14/WA)
FRPRT05   0000037100000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000037200000000000001     @@GOTO     LABEL(XA2)
FRPRT05   0000037300000000000001     /* ********** KEEP_AVERAGE VALUES                                     */
FRPRT05   0000037400000000000001XA3: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000037500000000000001XA4: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE17) IF_GT(XA5)
FRPRT05   0000037600000000000001     KEEP_AVG   OF_FIELD(#@@LEL17WB) IN_FIELD(#AVG_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX14/WA)
FRPRT05   0000037700000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000037800000000000001     @@GOTO     LABEL(XA4)
FRPRT05   0000037900000000000001     /* ********** KEEP_MIN VALUES                                         */
FRPRT05   0000038000000000000001XA5: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000038100000000000001XA6: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE18) IF_GT(XA7)
FRPRT05   0000038200000000000001     KEEP_MIN   OF_FIELD(#@@LEL18WB) IN_FIELD(#MIN_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX14/WA)
FRPRT05   0000038300000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000038400000000000001     @@GOTO     LABEL(XA6)
FRPRT05   0000038500000000000001     /* ********** KEEP_MAX VALUES                                         */
FRPRT05   0000038600000000000001XA7: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000038700000000000001XB1: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE19) IF_GT(XB4)
FRPRT05   0000038800000000000001     KEEP_MAX   OF_FIELD(#@@LEL19WB) IN_FIELD(#MAX_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX14/WA)
FRPRT05   0000038900000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000039000000000000001     @@GOTO     LABEL(XB1)
FRPRT05   0000039100000000000001     /* ********** KEEP_MAX COUNT                                          */
FRPRT05   0000039200000000000001XB4: @@SET_IDX  IDX_NAME(WB) TO(1)
FRPRT05   0000039300000000000001XB5: @@CMP_IDX  IDX_NAME(WB) IDX_VALUE(@@LNE20) IF_GT(XA8)
FRPRT05   0000039400000000000001     KEEP_COUNT OF_FIELD(#@@LEL20WB) IN_FIELD(#CNT_@@INDEXWA@@INDEXWB) BY_FIELD(@@LSX14/WA)
FRPRT05   0000039500000000000001     @@INC_IDX  IDX_NAME(WB)
FRPRT05   0000039600000000000001     @@GOTO     LABEL(XB5)
FRPRT05   0000039700000000000001     /* ********** NEXT SUBTOTAL LEVEL                                     */
FRPRT05   0000039800000000000001XA8: @@INC_IDX  IDX_NAME(WA)
FRPRT05   0000039900000000000001     @@GOTO     LABEL(XA1)
FRPRT05   0000040000000000000001XA9: @@LABEL
FRPRT05   0000040100000000000001     /* ********** ======================================================= */
FRPRT05   0000040200000000000001     /* ********** PRINT THE DETAILS                                       */
FRPRT05   0000040300000000000001     /* ********** ======================================================= */
FRPRT05   0000040400000000000001     @@COMMENT  COMMENT('Print all break totals')
FRPRT05   0000040500000000000001     @@CMP_IDX  IDX_NAME(SU) IDX_VALUE(1) IF_LT(XF5)
FRPRT05   0000040600000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRPRT05   0000040700000000000001XF3: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(@@LNE14) IF_GT(XF5)
FRPRT05   0000040800000000000001     PRINT      LINE(*BREAKS) ON_REPORT(@@INDEXWA)
FRPRT05   0000040900000000000001     @@INC_IDX  IDX_NAME(WA)
FRPRT05   0000041000000000000001     @@GOTO     LABEL(XF3)
FRPRT05   0000041100000000000001XF5: @@LABEL
FRPRT05   0000041200000000000001     ENDSELECT
FRPRT05   0000041300000000000001     @@COMMENT  COMMENT('Finish all printing and end function')
FRPRT05   0000041400000000000001     @@CMP_IDX  IDX_NAME(SU) IDX_VALUE(1) IF_LT(XG5)
FRPRT05   0000041500000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRPRT05   0000041600000000000001XG3: @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(@@LNE14) IF_GT(XG5)
FRPRT05   0000041700000000000001     ENDPRINT   REPORT_NUM(@@INDEXWA)
FRPRT05   0000041800000000000001     @@INC_IDX  IDX_NAME(WA)
FRPRT05   0000041900000000000001     @@GOTO     LABEL(XG3)
FRPRT05   0000042000000000000001XG5: @@LABEL
FRPRT05   0000042100000000000001     ENDIF
FRPRT05   0000042200000000000001     /* ********** ======================================================= */
FRPRT05   0000042300000000000001     /* ********** CLEAR ALL LISTS USED                                    */
FRPRT05   0000042400000000000001     /* ********** ======================================================= */
FRPRT05   0000042500000000000001     @@CLR_LST  NUMBER(1)
FRPRT05   0000042600000000000001     @@CLR_LST  NUMBER(2)
FRPRT05   0000042700000000000001     @@CLR_LST  NUMBER(3)
FRPRT05   0000042800000000000001     @@CLR_LST  NUMBER(4)
FRPRT05   0000042900000000000001     @@CLR_LST  NUMBER(5)
FRPRT05   0000043000000000000001     @@CLR_LST  NUMBER(7)
FRPRT05   0000043100000000000001     @@CLR_LST  NUMBER(8)
FRPRT05   0000043200000000000001     @@CLR_LST  NUMBER(14)
FRPRT05   0000043300000000000001     @@CLR_LST  NUMBER(16)
FRPRT05   0000043400000000000001     @@CLR_LST  NUMBER(17)
FRPRT05   0000043500000000000001     @@CLR_LST  NUMBER(18)
FRPRT05   0000043600000000000001     @@CLR_LST  NUMBER(19)
FRPRT05   0000043700000000000001     @@CLR_LST  NUMBER(20)
FRPRT05   0000043800000000000001     @@CLR_LST  NUMBER(22)
FRPRT05   0000043900000000000001     @@CLR_LST  NUMBER(99)
FRPRT05   0000044000000000000001     @@CLR_LST  NUMBER(98)
FRPRT05   0000044100000000000001     /* ********** ======================================================= */
FRPRT05   0000044200000000000001     /* ********** END OF TEMPLATE                                         */
FRPRT05   0000044300000000000001     /* ********** ======================================================= */
FRUTIL01  0000000100000000000001     /* ********** ======================================================= */
FRUTIL01  0000000200000000000001     /* ********** CHECK WHETHER THE TEMPLATE SHOULD BE USED AT ALL        */
FRUTIL01  0000000300000000000001     /* ********** ======================================================= */
FRUTIL01  0000000400000000000001     @@QUESTION PROMPT('Should you use this version of this template (please reply Y or N) ?') ANSWER(@@CANS001) EXTEND('You should only use this version of the file transfer utility template' 'against files where ALL the following criteria are met :' '* The aggregate byte length of all real and virtual fields is <= 256.' '* The total of all real and virtual fields is <= 100.' '* The function generated is to be used by developers as a utility only.' '* You understand that this function has been designed for optimal ease of' '  use rather than optimal performance. Generated code does NOT represent' '  an optimal performance solution and should NOT be used in benchmarks.') LOWER(*NO) VALUES(Y N)
FRUTIL01  0000000500000000000001     @@IF       COND((*IF @@CANS001 *NE Y)) GOTO(END)
FRUTIL01  0000000600000000000001     /* ********** ======================================================= */
FRUTIL01  0000000700000000000001     /* ********** GET NAME OF JUST ONE PHYSICAL FILE                      */
FRUTIL01  0000000800000000000001     /* ********** ======================================================= */
FRUTIL01  0000000900000000000001     @@GET_FILS TO(1) PROMPT('Enter the name of the PHYSICAL file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' '**** The chosen file must have one or more PRIMARY KEYS ****') /* ======================================================= */
FRUTIL01  0000001000000000000001     /* ********** GET FIELDS OF CHOSEN FILE INTO LIST 1                   */
FRUTIL01  0000001100000000000001     /* ********** ======================================================= */
FRUTIL01  0000001200000000000001     @@CLR_LST  NUMBER(1)
FRUTIL01  0000001300000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRUTIL01  0000001400000000000001     /* ********** ======================================================= */
FRUTIL01  0000001500000000000001     /* ********** GET KEYS OF CHOSEN FILE INTO LIST 2                     */
FRUTIL01  0000001600000000000001     /* ********** ======================================================= */
FRUTIL01  0000001700000000000001     @@CLR_LST  NUMBER(2)
FRUTIL01  0000001800000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
FRUTIL01  0000001900000000000001     /* ********** ======================================================= */
FRUTIL01  0000002000000000000001     /* ********** ASK ABOUT COMMITMENT CONTROL                            */
FRUTIL01  0000002100000000000001     /* ********** ======================================================= */
FRUTIL01  0000002200000000000001     @@QUESTION PROMPT('Is the file under manual (4GL level) commitment control (reply Y or N) ?') ANSWER(@@CANS002) EXTEND('If the file that you have chosen is normally used under manual (ie: 4GL ' 'level) commitment control reply Y, otherwise reply N.') LOWER(*NO) VALUES(Y N)
FRUTIL01  0000002300000000000001     /* ********** ======================================================= */
FRUTIL01  0000002400000000000001     /* ********** ASK ABOUT DBCS CAPABILITY                               */
FRUTIL01  0000002500000000000001     /* ********** ======================================================= */
FRUTIL01  0000002600000000000001     @@QUESTION PROMPT('Does the file contain DBCS (Double Byte Character) data (reply Y or N) ?') ANSWER(@@CANS003) EXTEND('If the file you have chosen could contain DBCS (Double Byte Character)' 'data reply Y, otherwise reply N.') LOWER(*NO) VALUES(Y N)
FRUTIL01  0000002700000000000001     /* ********** ======================================================= */
FRUTIL01  0000002800000000000001     /* ********** NOW GENERATE THE CODE                                   */
FRUTIL01  0000002900000000000001     /* ********** ======================================================= */
FRUTIL01  0000003000000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL01  0000003100000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1997 ')
FRUTIL01  0000003200000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRUTIL01  0000003300000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRUTIL01  0000003400000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRUTIL01  0000003500000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRUTIL01  0000003600000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRUTIL01  0000003700000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL01  0000003800000000000001     FUNCTION   OPTIONS(*DIRECT *LIGHTUSAGE)
FRUTIL01  0000003900000000000001     @@COMMENT  COMMENT('Local Variables')
FRUTIL01  0000004000000000000001     DEFINE     FIELD(#SC_TEXT01) TYPE(*CHAR) LENGTH(20) DESC('Text String') OUTPUT_ATR(RED) DEFAULT(SOURCE)
FRUTIL01  0000004100000000000001     DEFINE     FIELD(#SC_TEXT02) TYPE(*CHAR) LENGTH(20) DESC('Text String') OUTPUT_ATR(RED) DEFAULT(TARGET)
FRUTIL01  0000004200000000000001     DEFINE     FIELD(#SC_TEXT03) TYPE(*CHAR) LENGTH(60) DESC('Text String') OUTPUT_ATR(RED)
FRUTIL01  0000004300000000000001     CHANGE     FIELD(#SC_TEXT03) TO('''Errors were detected. Use the Messages button to view details.''')
FRUTIL01  0000004400000000000001     DEFINE     FIELD(#SC_SRCTGT) TYPE(*CHAR) LENGTH(6) DESC('Source and Targets List') DEFAULT('''1    1''')
FRUTIL01  0000004500000000000001     DEFINE     FIELD(#SC_SRC400) TYPE(*CHAR) LENGTH(1) LABEL('AS/400 DBMS') INPUT_ATR(RB01) TO_OVERLAY(#SC_SRCTGT)
FRUTIL01  0000004600000000000001     DEFINE     FIELD(#SC_SRCFLT) TYPE(*CHAR) LENGTH(1) LABEL('Perm Flat File') INPUT_ATR(RB01) TO_OVERLAY(#SC_SRCTGT 2)
FRUTIL01  0000004700000000000001     DEFINE     FIELD(#SC_SRCLCL) TYPE(*CHAR) LENGTH(1) LABEL('PC DBMS') INPUT_ATR(RB01) TO_OVERLAY(#SC_SRCTGT 3)
FRUTIL01  0000004800000000000001     DEFINE     FIELD(#SC_TGT400) TYPE(*CHAR) LENGTH(1) LABEL('AS/400 DBMS') INPUT_ATR(RB02) TO_OVERLAY(#SC_SRCTGT 4)
FRUTIL01  0000004900000000000001     DEFINE     FIELD(#SC_TGTFLT) TYPE(*CHAR) LENGTH(1) LABEL('Perm Flat File') INPUT_ATR(RB02) TO_OVERLAY(#SC_SRCTGT 5)
FRUTIL01  0000005000000000000001     DEFINE     FIELD(#SC_TGTLCL) TYPE(*CHAR) LENGTH(1) LABEL('PC DBMS') INPUT_ATR(RB02) TO_OVERLAY(#SC_SRCTGT 6)
FRUTIL01  0000005100000000000001     DEFINE     FIELD(#SC_DEFSRV) TYPE(*CHAR) LENGTH(2) DESC('Return Code') DEFAULT(NO)
FRUTIL01  0000005200000000000001     DEFINE     FIELD(#SC_CONSRV) TYPE(*CHAR) LENGTH(2) DESC('Return Code') DEFAULT(NO)
FRUTIL01  0000005300000000000001     DEFINE     FIELD(#SC_AS4NAM) TYPE(*CHAR) LENGTH(20) DESC('AS/400 Network Name') DEFAULT('APPN.XXXXXXXXXX')
FRUTIL01  0000005400000000000001     DEFINE     FIELD(#SC_AS4MCC) TYPE(*CHAR) LENGTH(1) DESC('Manual Commitment Control') DEFAULT('@@CANS002')
FRUTIL01  0000005500000000000001     DEFINE     FIELD(#SC_AS4DBC) TYPE(*CHAR) LENGTH(1) DESC('DBCS in File') DEFAULT('@@CANS003')
FRUTIL01  0000005600000000000001     DEFINE     FIELD(#SC_AS4CTS) TYPE(*CHAR) LENGTH(10) LABEL('C->S Conv Table') DESC('Client->Server Translation Table') DEFAULT('QEBCDIC')
FRUTIL01  0000005700000000000001     DEFINE     FIELD(#SC_AS4STC) TYPE(*CHAR) LENGTH(10) LABEL('S->C Conv Table') DESC('Server->Client Translation Table') DEFAULT('QASCII')
FRUTIL01  0000005800000000000001     DEF_LIST   NAME(#AS400INF) FIELDS((#SC_AS4NAM) (#SC_AS4CTS) (#SC_AS4STC)) TYPE(*WORKING) ENTRYS(1)
FRUTIL01  0000005900000000000001     DEFINE     FIELD(#SC_AS4USR) TYPE(*CHAR) LENGTH(10) DESC('AS400 User') DEFAULT(*USER)
FRUTIL01  0000006000000000000001     DEFINE     FIELD(#SC_AS4PWD) TYPE(*CHAR) LENGTH(10) DESC('AS400 Password') INPUT_ATR(ND)
FRUTIL01  0000006100000000000001     DEFINE     FIELD(#SC_OUTPUT) TYPE(*CHAR) LENGTH(65) DESC('Output File Name')
FRUTIL01  0000006200000000000001     DEFINE     FIELD(#SC_ERRORS) TYPE(*DEC) LENGTH(7) DECIMALS(0) DESC('Error Count')
FRUTIL01  0000006300000000000001     DEFINE     FIELD(#SC_COUNT) TYPE(*DEC) LENGTH(7) DECIMALS(0) DESC('List Entry Count/Total')
FRUTIL01  0000006400000000000001     DEFINE     FIELD(#SC_RCDCNT) LENGTH(7) DECIMALS(0) REFFLD(#DATE) DESC('Record Count') EDIT_CODE(4) DEFAULT(0)
FRUTIL01  0000006500000000000001     DEFINE     FIELD(#SC_RCDCHR) TYPE(*CHAR) LENGTH(7) DESC('Record Count as characters') TO_OVERLAY(#SC_RCDCNT)
FRUTIL01  0000006600000000000001     DEFINE     FIELD(#SC_RCDL1C) TYPE(*CHAR) LENGTH(1) DESC('Last Digit of Record Count') TO_OVERLAY(#SC_RCDCNT 7)
FRUTIL01  0000006700000000000001     DEFINE     FIELD(#SC_RETCDE) TYPE(*CHAR) LENGTH(2) DESC('Return Code')
FRUTIL01  0000006800000000000001     DEFINE     FIELD(#SC_MSGTXT) TYPE(*CHAR) LENGTH(132) DESC('Message Text')
FRUTIL01  0000006900000000000001     DEF_LIST   NAME(#SC_MSGLST) FIELDS(#SC_MSGTXT) TYPE(*WORKING) ENTRYS(9999)
FRUTIL01  0000007000000000000001     DEF_LIST   NAME(#SC_MSGSTK) FIELDS(#SC_MSGTXT) TYPE(*WORKING) ENTRYS(9999)
FRUTIL01  0000007100000000000001     DEFINE     FIELD(#SC_TMPFIL) TYPE(*CHAR) LENGTH(55) LABEL('Temp Flat File')
FRUTIL01  0000007200000000000001     USE        BUILTIN(OV_QUERY_SYS_INFO) WITH_ARGS(TEMP_DIR) TO_GET(#SC_TMPFIL)
FRUTIL01  0000007300000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#SC_TMPFIL #SC_FILNAM '''.TAB''') TO_GET(#SC_TMPFIL)
FRUTIL01  0000007400000000000001     DEFINE     FIELD(#SC_PRMFIL) TYPE(*CHAR) LENGTH(55) LABEL('Perm Flat File')
FRUTIL01  0000007500000000000001     USE        BUILTIN(OV_QUERY_SYS_INFO) WITH_ARGS(SYS_DIR) TO_GET(#SC_PRMFIL)
FRUTIL01  0000007600000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#SC_PRMFIL #SC_FILNAM '''.TAB''') TO_GET(#SC_PRMFIL)
FRUTIL01  0000007700000000000001     DEF_LIST   NAME(#SC_DATA01) FIELDS(@@LST01) COUNTER(#SC_COUNT) TYPE(*WORKING) ENTRYS(200)
FRUTIL01  0000007800000000000001     GROUP_BY   NAME(#XG_KEYS01) FIELDS(@@LST02)
FRUTIL01  0000007900000000000001     DEFINE     FIELD(#SC_FILNAM) TYPE(*CHAR) LENGTH(10) LABEL('Table Name') DEFAULT(@@FNAME01)
FRUTIL01  0000008000000000000001     DEFINE     FIELD(#SC_FILDES) TYPE(*CHAR) LENGTH(40) LABEL('Description')
FRUTIL01  0000008100000000000001     CHANGE     FIELD(#SC_FILDES) TO('''@@FDESC01''')
FRUTIL01  0000008200000000000001     @@COMMENT  COMMENT('Application Logic')
FRUTIL01  0000008300000000000001     BEGIN_LOOP
FRUTIL01  0000008400000000000001     POP_UP     FIELDS((#SC_TEXT01 *L5 *P2 *NOID *OUT) (#SC_TEXT02 *L5 *P24 *NOID *OUT) (#SC_FILNAM *L3 *P2 *OUT) (#SC_SRC400 *L7 *P2 *IN) (#SC_SRCFLT *L9 *P2 *IN) (#SC_SRCLCL *L11 *P2 *IN) (#SC_TGT400 *L7 *P24 *IN) (#SC_TGTFLT *L9 *P24 *IN) (#SC_TGTLCL *L11 *P24 *IN) (#SC_TMPFIL *L13 *P2 *IN) (#SC_PRMFIL *L14 *P2 *IN) (#SC_FILDES *L3 *P24 *NOID *OUT)) AT_LOC(3 3) WITH_SIZE(74 18) PANEL_ID(*NONE) PANEL_TITL('Table Export or Import Utility') EXIT_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL01  0000008500000000000001     CHANGE     FIELD(#SC_ERRORS) TO(0)
FRUTIL01  0000008600000000000001     CLR_LIST   NAMED(#SC_MSGLST)
FRUTIL01  0000008700000000000001     DOUNTIL    COND('A = A')
FRUTIL01  0000008800000000000001     CASE       OF_FIELD(#SC_SRCTGT)
FRUTIL01  0000008900000000000001     @@COMMENT  COMMENT('AS/400 to Flat File       ')
FRUTIL01  0000009000000000000001     WHEN       VALUE_IS('= ''1   1 ''')
FRUTIL01  0000009100000000000001     EXECUTE    SUBROUTINE(CONNECT)
FRUTIL01  0000009200000000000001     LEAVE      IF('#SC_CONSRV *NE OK')
FRUTIL01  0000009300000000000001     EXECUTE    SUBROUTINE(DBMSTOFLAT) WITH_PARMS(#SC_PRMFIL)
FRUTIL01  0000009400000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL01  0000009500000000000001     @@COMMENT  COMMENT('AS/400 to PC DBMS      ')
FRUTIL01  0000009600000000000001     WHEN       VALUE_IS('= ''1    1''')
FRUTIL01  0000009700000000000001     EXECUTE    SUBROUTINE(CONNECT)
FRUTIL01  0000009800000000000001     LEAVE      IF('#SC_CONSRV *NE OK')
FRUTIL01  0000009900000000000001     EXECUTE    SUBROUTINE(DBMSTOFLAT) WITH_PARMS(#SC_TMPFIL)
FRUTIL01  0000010000000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL01  0000010100000000000001     EXECUTE    SUBROUTINE(FLATTODBMS) WITH_PARMS(#SC_TMPFIL)
FRUTIL01  0000010200000000000001     @@COMMENT  COMMENT('Flat File to AS/400    ')
FRUTIL01  0000010300000000000001     WHEN       VALUE_IS('= '' 1 1  ''')
FRUTIL01  0000010400000000000001     EXECUTE    SUBROUTINE(CONNECT)
FRUTIL01  0000010500000000000001     LEAVE      IF('#SC_CONSRV *NE OK')
FRUTIL01  0000010600000000000001     EXECUTE    SUBROUTINE(FLATTODBMS) WITH_PARMS(#SC_PRMFIL)
FRUTIL01  0000010700000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL01  0000010800000000000001     @@COMMENT  COMMENT('Flat File to PC DBMS   ')
FRUTIL01  0000010900000000000001     WHEN       VALUE_IS('= '' 1   1''')
FRUTIL01  0000011000000000000001     EXECUTE    SUBROUTINE(FLATTODBMS) WITH_PARMS(#SC_PRMFIL)
FRUTIL01  0000011100000000000001     @@COMMENT  COMMENT('PC DBMS to AS/400      ')
FRUTIL01  0000011200000000000001     WHEN       VALUE_IS('= ''  11  ''')
FRUTIL01  0000011300000000000001     EXECUTE    SUBROUTINE(DBMSTOFLAT) WITH_PARMS(#SC_TMPFIL)
FRUTIL01  0000011400000000000001     EXECUTE    SUBROUTINE(CONNECT)
FRUTIL01  0000011500000000000001     LEAVE      IF('#SC_CONSRV *NE OK')
FRUTIL01  0000011600000000000001     EXECUTE    SUBROUTINE(FLATTODBMS) WITH_PARMS(#SC_TMPFIL)
FRUTIL01  0000011700000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL01  0000011800000000000001     @@COMMENT  COMMENT('PC DBMS to Flat        ')
FRUTIL01  0000011900000000000001     WHEN       VALUE_IS('= ''  1 1 ''')
FRUTIL01  0000012000000000000001     EXECUTE    SUBROUTINE(DBMSTOFLAT) WITH_PARMS(#SC_PRMFIL)
FRUTIL01  0000012100000000000001     @@COMMENT  COMMENT('Invalid selection      ')
FRUTIL01  0000012200000000000001     OTHERWISE
FRUTIL01  0000012300000000000001     MESSAGE    MSGTXT('Invalid source/target combination selected')
FRUTIL01  0000012400000000000001     ENDCASE
FRUTIL01  0000012500000000000001     ENDUNTIL
FRUTIL01  0000012600000000000001     IF         COND('#SC_ERRORS *GT 0')
FRUTIL01  0000012700000000000001     SELECTLIST NAMED(#SC_MSGLST)
FRUTIL01  0000012800000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#SC_MSGTXT)
FRUTIL01  0000012900000000000001     ENDSELECT
FRUTIL01  0000013000000000000001     POP_UP     FIELDS((#SC_TEXT03 *L3 *P2 *NOID *OUT)) AT_LOC(6 3) WITH_SIZE(64 07) PANEL_ID(*NONE) PANEL_TITL('Import/Export Error(s)') EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL01  0000013100000000000001     ENDIF
FRUTIL01  0000013200000000000001     END_LOOP
FRUTIL01  0000013300000000000001     @@COMMENT  COMMENT('Convert DBMS data into flat file')
FRUTIL01  0000013400000000000001     SUBROUTINE NAME(DBMSTOFLAT) PARMS((#SC_OUTPUT *RECEIVED))
FRUTIL01  0000013500000000000001     CLR_LIST   NAMED(#SC_DATA01)
FRUTIL01  0000013600000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL01  0000013700000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Transferring contents of AS/400 table''' #SC_FILNAM '''into PC flat file''' #SC_OUTPUT)
FRUTIL01  0000013800000000000001     ELSE
FRUTIL01  0000013900000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Transferring contents of PC DBMS table''' #SC_FILNAM '''into PC flat file''' #SC_OUTPUT)
FRUTIL01  0000014000000000000001     ENDIF
FRUTIL01  0000014100000000000001     CHANGE     FIELD(#SC_RCDCNT) TO(0)
FRUTIL01  0000014200000000000001     SELECT     FIELDS(*ALL) FROM_FILE(@@FNAME01)
FRUTIL01  0000014300000000000001     CHANGE     FIELD(#SC_RCDCNT) TO('#SC_RCDCNT + 1')
FRUTIL01  0000014400000000000001     ADD_ENTRY  TO_LIST(#SC_DATA01)
FRUTIL01  0000014500000000000001     IF         COND('#SC_COUNT = 200')
FRUTIL01  0000014600000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N) TO_GET(#SC_RETCDE)
FRUTIL01  0000014700000000000001     CLR_LIST   NAMED(#SC_DATA01)
FRUTIL01  0000014800000000000001     IF         COND('#SC_RETCDE *NE OK')
FRUTIL01  0000014900000000000001     CHANGE     FIELD(#SC_ERRORS) TO('#SC_ERRORS + 1')
FRUTIL01  0000015000000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Fatal Error detected when writing to flat file''' #SC_OUTPUT *BLANKS *BLANKS)
FRUTIL01  0000015100000000000001     LEAVE
FRUTIL01  0000015200000000000001     ENDIF
FRUTIL01  0000015300000000000001     ENDIF
FRUTIL01  0000015400000000000001     IF         COND('#SC_RCDL1C = ''0''')
FRUTIL01  0000015500000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS(#SC_RCDCHR '''Rows transferred''' *BLANKS *BLANKS)
FRUTIL01  0000015600000000000001     ENDIF
FRUTIL01  0000015700000000000001     ENDSELECT
FRUTIL01  0000015800000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y) TO_GET(#SC_RETCDE)
FRUTIL01  0000015900000000000001     IF         COND('#SC_RETCDE *NE OK')
FRUTIL01  0000016000000000000001     CHANGE     FIELD(#SC_ERRORS) TO('#SC_ERRORS + 1')
FRUTIL01  0000016100000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Fatal Error detected when writing to flat file''' #SC_OUTPUT *BLANKS *BLANKS)
FRUTIL01  0000016200000000000001     ENDIF
FRUTIL01  0000016300000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS(#SC_RCDCHR '''Rows transferred''' *BLANKS *BLANKS)
FRUTIL01  0000016400000000000001     ENDROUTINE
FRUTIL01  0000016500000000000001     @@COMMENT  COMMENT('Convert flat file into DBMS data')
FRUTIL01  0000016600000000000001     SUBROUTINE NAME(FLATTODBMS) PARMS((#SC_OUTPUT *RECEIVED))
FRUTIL01  0000016700000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL01  0000016800000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Updating contents of PC flat file''' #SC_OUTPUT '''into AS/400 table''' #SC_FILNAM)
FRUTIL01  0000016900000000000001     ELSE
FRUTIL01  0000017000000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Updating contents of PC flat file''' #SC_OUTPUT '''into PC DBMS table''' #SC_FILNAM)
FRUTIL01  0000017100000000000001     ENDIF
FRUTIL01  0000017200000000000001     CHANGE     FIELD(#SC_RCDCNT) TO(0)
FRUTIL01  0000017300000000000001     DOUNTIL    COND('#SC_RETCDE = EF')
FRUTIL01  0000017400000000000001     CLR_LIST   NAMED(#SC_DATA01)
FRUTIL01  0000017500000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N) TO_GET(#SC_RETCDE)
FRUTIL01  0000017600000000000001     IF         COND('#SC_RETCDE = ER')
FRUTIL01  0000017700000000000001     CHANGE     FIELD(#SC_ERRORS) TO('#SC_ERRORS + 1')
FRUTIL01  0000017800000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Fatal Error detected when reading flat file''' #SC_OUTPUT *BLANKS *BLANKS)
FRUTIL01  0000017900000000000001     LEAVE
FRUTIL01  0000018000000000000001     ENDIF
FRUTIL01  0000018100000000000001     EXECUTE    SUBROUTINE(FLATUPDATE)
FRUTIL01  0000018200000000000001     ENDUNTIL
FRUTIL01  0000018300000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS(#SC_RCDCHR '''Rows updated''' *BLANKS *BLANKS)
FRUTIL01  0000018400000000000001     ENDROUTINE
FRUTIL01  0000018500000000000001     @@COMMENT  COMMENT('Update DBMS from data in working list')
FRUTIL01  0000018600000000000001     SUBROUTINE NAME(FLATUPDATE)
FRUTIL01  0000018700000000000001     SELECTLIST NAMED(#SC_DATA01)
FRUTIL01  0000018800000000000001     CHANGE     FIELD(#SC_RCDCNT) TO('#SC_RCDCNT + 1')
FRUTIL01  0000018900000000000001     FETCH      FIELDS((#XG_KEYS01)) FROM_FILE(@@FNAME01) WITH_KEY(#XG_KEYS01)
FRUTIL01  0000019000000000000001     IF_STATUS  IS(*OKAY)
FRUTIL01  0000019100000000000001     UPDATE     FIELDS(*ALL) IN_FILE(@@FNAME01) VAL_ERROR(*NEXT)
FRUTIL01  0000019200000000000001     ELSE
FRUTIL01  0000019300000000000001     INSERT     FIELDS(*ALL) TO_FILE(@@FNAME01) VAL_ERROR(*NEXT)
FRUTIL01  0000019400000000000001     ENDIF
FRUTIL01  0000019500000000000001     IF_STATUS  IS_NOT(*OKAY)
FRUTIL01  0000019600000000000001     CHANGE     FIELD(#SC_ERRORS) TO('#SC_ERRORS + 1')
FRUTIL01  0000019700000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Previous Error(s) were''' '''detected when processing row number ''' #SC_RCDCHR *BLANKS)
FRUTIL01  0000019800000000000001     @@IF       COND((*IF @@CANS002 *NE Y)) GOTO(L90)
FRUTIL01  0000019900000000000001     ELSE
FRUTIL01  0000020000000000000001     COMMIT
FRUTIL01  0000020100000000000001L90: /* **********                                                         */
FRUTIL01  0000020200000000000001     ENDIF
FRUTIL01  0000020300000000000001     IF         COND('#SC_RCDL1C = ''0''')
FRUTIL01  0000020400000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS(#SC_RCDCHR '''Rows updated''' *BLANKS *BLANKS)
FRUTIL01  0000020500000000000001     ENDIF
FRUTIL01  0000020600000000000001     ENDSELECT
FRUTIL01  0000020700000000000001     ENDROUTINE
FRUTIL01  0000020800000000000001     @@COMMENT  COMMENT('Connect to AS/400 server')
FRUTIL01  0000020900000000000001     SUBROUTINE NAME(CONNECT)
FRUTIL01  0000021000000000000001     CHANGE     FIELD(#SC_AS4PWD) TO(*NULL)
FRUTIL01  0000021100000000000001     CLR_LIST   NAMED(#AS400INF)
FRUTIL01  0000021200000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#AS400INF '''AS400INF.DTA'''  T) TO_GET(#SC_RETCDE)
FRUTIL01  0000021300000000000001     USE        BUILTIN(CLR_MESSAGES)
FRUTIL01  0000021400000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#AS400INF)
FRUTIL01  0000021500000000000001     DOWHILE    COND('(#SC_DEFSRV *NE OK) *OR (#SC_CONSRV *NE OK)')
FRUTIL01  0000021600000000000001     POP_UP     FIELDS((#SC_AS4NAM *L3 *P2 *IN) (#SC_AS4PWD *L7 *P2 *IN) (#SC_AS4USR *L5 *P2 *OUT) (#SC_AS4CTS *L9 *P2 *IN)  (#SC_AS4STC *L11 *P2 *IN))  DESIGN(*DOWN) IDENTIFY(*LABEL) AT_LOC(9 38) WITH_SIZE(40 15) PANEL_ID(*NONE) PANEL_TITL('Connect to AS/400 Server') EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) CURSOR_LOC(*ATFIELD #SC_AS4PWD)
FRUTIL01  0000021700000000000001     USE        BUILTIN(DEFINE_OS_400_SERVER) WITH_ARGS(AS400 #SC_AS4NAM #SC_AS4MCC #SC_AS4DBC Y Y '''20''' #SC_AS4CTS #SC_AS4STC) TO_GET(#SC_DEFSRV)
FRUTIL01  0000021800000000000001     IF         COND('(#SC_DEFSRV = OK) *AND (#SC_CONSRV *NE OK)')
FRUTIL01  0000021900000000000001     USE        BUILTIN(CONNECT_SERVER) WITH_ARGS(AS400 #SC_AS4PWD) TO_GET(#SC_CONSRV)
FRUTIL01  0000022000000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL01  0000022100000000000001     USE        BUILTIN(CONNECT_FILE) WITH_ARGS('''*''' AS400 100 1000000)
FRUTIL01  0000022200000000000001     ENDIF
FRUTIL01  0000022300000000000001     ENDIF
FRUTIL01  0000022400000000000001     ENDWHILE
FRUTIL01  0000022500000000000001     CLR_LIST   NAMED(#AS400INF)
FRUTIL01  0000022600000000000001     ADD_ENTRY  TO_LIST(#AS400INF)
FRUTIL01  0000022700000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#AS400INF '''AS400INF.DTA'''  T) TO_GET(#SC_RETCDE)
FRUTIL01  0000022800000000000001     ENDROUTINE
FRUTIL01  0000022900000000000001     @@COMMENT  COMMENT('Disconnect from AS/400 server')
FRUTIL01  0000023000000000000001     SUBROUTINE NAME(DISCONNECT)
FRUTIL01  0000023100000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL01  0000023200000000000001     USE        BUILTIN(DISCONNECT_FILE) WITH_ARGS('''*''' AS400)
FRUTIL01  0000023300000000000001     USE        BUILTIN(DISCONNECT_SERVER) WITH_ARGS(AS400) TO_GET(#SC_CONSRV)
FRUTIL01  0000023400000000000001     CHANGE     FIELD(#SC_CONSRV) TO(NO)
FRUTIL01  0000023500000000000001     ENDIF
FRUTIL01  0000023600000000000001     ENDROUTINE
FRUTIL01  0000023700000000000001     @@COMMENT  COMMENT('Issue and record status message(s)')
FRUTIL01  0000023800000000000001     SUBROUTINE NAME(SHOWSTATUS) PARMS((#SC_SUBV01 *RECEIVED) (#SC_SUBV02 *RECEIVED) (#SC_SUBV03 *RECEIVED) (#SC_SUBV04 *RECEIVED))
FRUTIL01  0000023900000000000001     DEFINE     FIELD(#SC_SUBV01) TYPE(*CHAR) LENGTH(60) DESC('Substitution Variable 1')
FRUTIL01  0000024000000000000001     DEFINE     FIELD(#SC_SUBV02) TYPE(*CHAR) LENGTH(60) DESC('Substitution Variable 2')
FRUTIL01  0000024100000000000001     DEFINE     FIELD(#SC_SUBV03) TYPE(*CHAR) LENGTH(60) DESC('Substitution Variable 3')
FRUTIL01  0000024200000000000001     DEFINE     FIELD(#SC_SUBV04) TYPE(*CHAR) LENGTH(60) DESC('Substitution Variable 4')
FRUTIL01  0000024300000000000001     DEFINE     FIELD(#SC_MSGCDE) TYPE(*CHAR) LENGTH(2) DESC('Return Code')
FRUTIL01  0000024400000000000001     @@COMMENT  COMMENT('Route/log messages already on queue')
FRUTIL01  0000024500000000000001     CLR_LIST   NAMED(#SC_MSGSTK)
FRUTIL01  0000024600000000000001     USE        BUILTIN(GET_MESSAGE) TO_GET(#SC_MSGCDE #SC_MSGTXT)
FRUTIL01  0000024700000000000001     DOWHILE    COND('#SC_MSGCDE = OK')
FRUTIL01  0000024800000000000001     ADD_ENTRY  TO_LIST(#SC_MSGLST)
FRUTIL01  0000024900000000000001     ADD_ENTRY  TO_LIST(#SC_MSGSTK)
FRUTIL01  0000025000000000000001     USE        BUILTIN(GET_MESSAGE) TO_GET(#SC_MSGCDE #SC_MSGTXT)
FRUTIL01  0000025100000000000001     ENDWHILE
FRUTIL01  0000025200000000000001     SELECTLIST NAMED(#SC_MSGSTK)
FRUTIL01  0000025300000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#SC_MSGTXT) TYPE(*STATUS)
FRUTIL01  0000025400000000000001     ENDSELECT
FRUTIL01  0000025500000000000001     @@COMMENT  COMMENT('Now handle the message requested caller')
FRUTIL01  0000025600000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#SC_SUBV01 #SC_SUBV02 #SC_SUBV03 #SC_SUBV04) TO_GET(#SC_MSGTXT)
FRUTIL01  0000025700000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#SC_MSGTXT) TYPE(*STATUS)
FRUTIL01  0000025800000000000001     ADD_ENTRY  TO_LIST(#SC_MSGLST)
FRUTIL01  0000025900000000000001     @@COMMENT  COMMENT(' ')
FRUTIL01  0000026000000000000001     ENDROUTINE
FRUTIL01  0000026100000000000001     /* ********** ======================================================= */
FRUTIL01  0000026200000000000001     /* ********** CLEAR ALL LISTS USED                                    */
FRUTIL01  0000026300000000000001     /* ********** ======================================================= */
FRUTIL01  0000026400000000000001END: @@CLR_LST  NUMBER(1)
FRUTIL01  0000026500000000000001     @@CLR_LST  NUMBER(2)
FRUTIL02  0000000100000000000001     /* ********** ======================================================= */
FRUTIL02  0000000200000000000001     /* ********** GET NAME OF JUST ONE PHYSICAL FILE                      */
FRUTIL02  0000000300000000000001     /* ********** ======================================================= */
FRUTIL02  0000000400000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) PROMPT('Enter the name of the file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed the' 'file required may be selectedfrom the list.' '**** The chosen file must have one or more UNIQUE Primary Keys ****') HELPIDS(HELP010)
FRUTIL02  0000000500000000000001     /* ********** ======================================================= */
FRUTIL02  0000000600000000000001     /* ********** GET THE NUMBER OF APPENDAGE LISTS REQUIRED              */
FRUTIL02  0000000700000000000001     /* ********** ======================================================= */
FRUTIL02  0000000800000000000001     @@QUESTION PROMPT('How many Appendage Lists are required for the selected file ? (0 - 10)') ANSWER(@@NANS001) EXTEND('The Primary and Appendage lists must meet the following criteria:' '* The aggregate byte length of all real and virtual fields is <= 256.' '* The total of all real and virtual fields is <= 100.' '* The function generated is to be used by developers as a utility only.' '* You understand that this function has been designed for optimal ease of' '  use rather than optimal performance. Generated code does NOT represent' '  an optimal performance solution and should NOT be used in benchmarks.') LOWER(*NO) RANGE((0 10)) HELPIDS(HELP010)
FRUTIL02  0000000900000000000001     /* ********** ======================================================= */
FRUTIL02  0000001000000000000001     /* ********** GET FIELDS OF CHOSEN FILE INTO LIST 1                   */
FRUTIL02  0000001100000000000001     /* ********** ======================================================= */
FRUTIL02  0000001200000000000001     @@CLR_LST  NUMBER(1)
FRUTIL02  0000001300000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRUTIL02  0000001400000000000001     /* ********** ======================================================= */
FRUTIL02  0000001500000000000001     /* ********** GET KEYS OF CHOSEN FILE INTO LIST 2                     */
FRUTIL02  0000001600000000000001     /* ********** ======================================================= */
FRUTIL02  0000001700000000000001     @@CLR_LST  NUMBER(2)
FRUTIL02  0000001800000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
FRUTIL02  0000001900000000000001     /* ********** ======================================================= */
FRUTIL02  0000002000000000000001     /* ********** NOW GENERATE THE CODE                                   */
FRUTIL02  0000002100000000000001     /* ********** ======================================================= */
FRUTIL02  0000002200000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000002300000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1997 ')
FRUTIL02  0000002400000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRUTIL02  0000002500000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRUTIL02  0000002600000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRUTIL02  0000002700000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRUTIL02  0000002800000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRUTIL02  0000002900000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000003000000000000001     FUNCTION   OPTIONS(*DIRECT *LIGHTUSAGE)
FRUTIL02  0000003100000000000001     @@COMMENT  COMMENT('Local Variables')
FRUTIL02  0000003200000000000001     DEFINE     FIELD(#SC_TEXT01) TYPE(*CHAR) LENGTH(20) DESC('Text String') OUTPUT_ATR(RED) DEFAULT(SOURCE)
FRUTIL02  0000003300000000000001     DEFINE     FIELD(#SC_TEXT02) TYPE(*CHAR) LENGTH(20) DESC('Text String') OUTPUT_ATR(RED) DEFAULT(TARGET)
FRUTIL02  0000003400000000000001     DEFINE     FIELD(#SC_TEXT03) TYPE(*CHAR) LENGTH(60) DESC('Text String') OUTPUT_ATR(RED)
FRUTIL02  0000003500000000000001     CHANGE     FIELD(#SC_TEXT03) TO('''Errors were detected. Use the Messages button to view details.''')
FRUTIL02  0000003600000000000001     DEFINE     FIELD(#SC_SRCTGT) TYPE(*CHAR) LENGTH(6) DESC('Source and Targets List')
FRUTIL02  0000003700000000000001     DEFINE     FIELD(#SC_SRC400) TYPE(*CHAR) LENGTH(1) LABEL('AS/400 DBMS') INPUT_ATR(RB01) TO_OVERLAY(#SC_SRCTGT)
FRUTIL02  0000003800000000000001     DEFINE     FIELD(#SC_SRCFLT) TYPE(*CHAR) LENGTH(1) LABEL('Perm Flat File') INPUT_ATR(RB01) TO_OVERLAY(#SC_SRCTGT 2)
FRUTIL02  0000003900000000000001     DEFINE     FIELD(#SC_SRCLCL) TYPE(*CHAR) LENGTH(1) LABEL('PC DBMS') INPUT_ATR(RB01) TO_OVERLAY(#SC_SRCTGT 3)
FRUTIL02  0000004000000000000001     DEFINE     FIELD(#SC_TGT400) TYPE(*CHAR) LENGTH(1) LABEL('AS/400 DBMS') INPUT_ATR(RB02) TO_OVERLAY(#SC_SRCTGT 4)
FRUTIL02  0000004100000000000001     DEFINE     FIELD(#SC_TGTFLT) TYPE(*CHAR) LENGTH(1) LABEL('Perm Flat File') INPUT_ATR(RB02) TO_OVERLAY(#SC_SRCTGT 5)
FRUTIL02  0000004200000000000001     DEFINE     FIELD(#SC_TGTLCL) TYPE(*CHAR) LENGTH(1) LABEL('PC DBMS') INPUT_ATR(RB02) TO_OVERLAY(#SC_SRCTGT 6)
FRUTIL02  0000004300000000000001     DEFINE     FIELD(#SC_DEFSRV) TYPE(*CHAR) LENGTH(2) DESC('Return Code') DEFAULT(NO)
FRUTIL02  0000004400000000000001     DEFINE     FIELD(#SC_CONSRV) TYPE(*CHAR) LENGTH(2) DESC('Return Code') DEFAULT(NO)
FRUTIL02  0000004500000000000001     DEFINE     FIELD(#SC_AS4NAM) TYPE(*CHAR) LENGTH(20) DESC('AS/400 Network Name') DEFAULT('APPN.XXXXXXXXXX')
FRUTIL02  0000004600000000000001     DEFINE     FIELD(#SC_AS4USR) TYPE(*CHAR) LENGTH(10) DESC('AS400 User') DEFAULT(*USER)
FRUTIL02  0000004700000000000001     DEFINE     FIELD(#SC_AS4PWD) TYPE(*CHAR) LENGTH(10) DESC('AS400 Password') INPUT_ATR(ND)
FRUTIL02  0000004800000000000001     DEFINE     FIELD(#SC_OUTPUT) TYPE(*CHAR) LENGTH(65) DESC('Output File Name')
FRUTIL02  0000004900000000000001     DEFINE     FIELD(#SC_ERRORS) TYPE(*DEC) LENGTH(7) DECIMALS(0) DESC('Error Count')
FRUTIL02  0000005000000000000001     DEFINE     FIELD(#SC_COUNT) TYPE(*DEC)  LENGTH(7) DECIMALS(0) DESC('List Entry Count/Total')
FRUTIL02  0000005100000000000001     DEFINE     FIELD(#SC_RCDCNT) LENGTH(7)  DECIMALS(0) REFFLD(#DATE) DESC('Record Count') EDIT_CODE(4) DEFAULT(0)
FRUTIL02  0000005200000000000001     DEFINE     FIELD(#SC_RCDCHR) TYPE(*CHAR) LENGTH(7) DESC('Record Count as characters') TO_OVERLAY(#SC_RCDCNT)
FRUTIL02  0000005300000000000001     DEFINE     FIELD(#SC_RCDL1C) TYPE(*CHAR) LENGTH(1) DESC('Last Digit of Record Count') TO_OVERLAY(#SC_RCDCNT 7)
FRUTIL02  0000005400000000000001     DEFINE     FIELD(#SC_RETCDE) TYPE(*CHAR) LENGTH(2) DESC('Return Code')
FRUTIL02  0000005500000000000001     DEFINE     FIELD(#SC_MSGTXT) TYPE(*CHAR) LENGTH(132) DESC('Message Text')
FRUTIL02  0000005600000000000001     DEF_LIST   NAME(#SC_MSGLST) FIELDS(#SC_MSGTXT) TYPE(*WORKING) ENTRYS(9999)
FRUTIL02  0000005700000000000001     DEF_LIST   NAME(#SC_MSGSTK) FIELDS(#SC_MSGTXT) TYPE(*WORKING) ENTRYS(9999)
FRUTIL02  0000005800000000000001     DEFINE     FIELD(#SC_TMPFIL) TYPE(*CHAR) LENGTH(55) LABEL('Temp Flat File')
FRUTIL02  0000005900000000000001     USE        BUILTIN(OV_QUERY_SYS_INFO) WITH_ARGS(TEMP_DIR) TO_GET(#SC_TMPFIL)
FRUTIL02  0000006000000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#SC_TMPFIL #SC_FILNAM '''.TAB''') TO_GET(#SC_TMPFIL)
FRUTIL02  0000006100000000000001     DEFINE     FIELD(#SC_PRMFIL) TYPE(*CHAR) LENGTH(55) LABEL('Perm Flat File')
FRUTIL02  0000006200000000000001     USE        BUILTIN(OV_QUERY_SYS_INFO) WITH_ARGS(SYS_DIR) TO_GET(#SC_PRMFIL)
FRUTIL02  0000006300000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#SC_PRMFIL #SC_FILNAM '''.TAB''') TO_GET(#SC_PRMFIL)
FRUTIL02  0000006400000000000001     DEFINE     FIELD(#SC_APPND) TYPE(*CHAR) LENGTH(1) LABEL('Append Field') DESC('Append Field') DEFAULT(A)
FRUTIL02  0000006500000000000001     DEFINE     FIELD(#SC_SELOPT) TYPE(*CHAR) LENGTH(20) DESC('Selection Option') DEFAULT(N)
FRUTIL02  0000006600000000000001     DEFINE     FIELD(#SC_SELPOS) TYPE(*DEC) LENGTH(7) DECIMALS(0) DESC('Selection  Position') DEFAULT(0)
FRUTIL02  0000006700000000000001     DEFINE     FIELD(#SC_SELVAL) TYPE(*CHAR) LENGTH(256) DESC('Selection Compare ') DEFAULT(*BLANKS)
FRUTIL02  0000006800000000000001     DEFINE     FIELD(#SC_II) TYPE(*DEC)  LENGTH(7) DECIMALS(0) DESC('List Entry Index')
FRUTIL02  0000006900000000000001     /* ********** ======================================================= */
FRUTIL02  0000007000000000000001     /* ********** BUILD THE PRIMARY LIST                                  */
FRUTIL02  0000007100000000000001     /* ********** ======================================================= */
FRUTIL02  0000007200000000000001     @@IF       COND((*IF @@NANS001 *EQ 0)) GOTO(AP0)
FRUTIL02  0000007300000000000001     @@CLR_LST  NUMBER(3)
FRUTIL02  0000007400000000000001     @@MAK_LSTS FROM_LSTS(01) INTO_LSTS((03 'Fields for' 'Primary' 'List')) HELPIDS(HELP010)
FRUTIL02  0000007500000000000001     DEF_LIST   NAME(#SC_DATA01) FIELDS(@@LST03) COUNTER(#SC_COUNT) TYPE(*WORKING) ENTRYS(200)
FRUTIL02  0000007600000000000001     @@GOTO     LABEL(APS)
FRUTIL02  0000007700000000000001AP0: @@LABEL
FRUTIL02  0000007800000000000001     DEF_LIST   NAME(#SC_DATA01) FIELDS(@@LST01) COUNTER(#SC_COUNT) TYPE(*WORKING) ENTRYS(200)
FRUTIL02  0000007900000000000001     @@GOTO     LABEL(APZ)
FRUTIL02  0000008000000000000001     /* ********** ======================================================= */
FRUTIL02  0000008100000000000001     /* ********** BUILD THE APPENDAGE LISTS                               */
FRUTIL02  0000008200000000000001     /* ********** ======================================================= */
FRUTIL02  0000008300000000000001APS: @@SET_IDX  IDX_NAME(NN) TO(0)
FRUTIL02  0000008400000000000001APL: @@INC_IDX  IDX_NAME(NN)
FRUTIL02  0000008500000000000001     @@CMP_IDX  IDX_NAME(NN) IDX_VALUE(@@NANS001) IF_GT(APZ)
FRUTIL02  0000008600000000000001     @@CLR_LST  NUMBER(3)
FRUTIL02  0000008700000000000001     @@MAK_LSTS FROM_LSTS(01) INTO_LSTS((03 'Fields for' 'Appendage' 'List')) HELPIDS(HELP010)
FRUTIL02  0000008800000000000001     DEF_LIST   NAME(#SC_APL@@INDEXNN) FIELDS(#SC_APPND @@LST03) TYPE(*WORKING) ENTRYS(200)
FRUTIL02  0000008900000000000001     DEF_LIST   NAME(#SC_APF@@INDEXNN) FIELDS(@@LST03) TYPE(*WORKING) ENTRYS(200)
FRUTIL02  0000009000000000000001     @@GOTO     LABEL(APL)
FRUTIL02  0000009100000000000001APZ: @@LABEL
FRUTIL02  0000009200000000000001     GROUP_BY   NAME(#XG_KEYS01) FIELDS(@@LST02)
FRUTIL02  0000009300000000000001     DEFINE     FIELD(#SC_FILNAM) TYPE(*CHAR) LENGTH(10) LABEL('Table Name') DEFAULT(@@FNAME01)
FRUTIL02  0000009400000000000001     DEFINE     FIELD(#SC_FILDES) TYPE(*CHAR) LENGTH(40) LABEL('Description')
FRUTIL02  0000009500000000000001     CHANGE     FIELD(#SC_FILDES) TO('''@@FDESC01''')
FRUTIL02  0000009600000000000001     @@COMMENT  COMMENT('Application Logic')
FRUTIL02  0000009700000000000001     BEGIN_LOOP
FRUTIL02  0000009800000000000001     POP_UP     FIELDS((#SC_TEXT01 *L5 *P2 *NOID *OUT) (#SC_TEXT02 *L5 *P24 *NOID *OUT) (#SC_FILNAM *L3 *P2 *OUT) (#SC_SRC400 *L7 *P2 *IN) (#SC_SRCFLT *L9 *P2 *IN) (#SC_SRCLCL *L11 *P2 *IN) (#SC_TGT400 *L7 *P24 *IN) (#SC_TGTFLT *L9 *P24 *IN) (#SC_TGTLCL *L11 *P24 *IN) (#SC_TMPFIL *L13 *P2 *IN) (#SC_PRMFIL *L14 *P2 *IN) (#SC_FILDES *L3 *P24 *NOID *OUT)) AT_LOC(3 3) WITH_SIZE(74 18) PANEL_TITL('Table Export or Import Utility') EXIT_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL02  0000009900000000000001     CHANGE     FIELD(#SC_ERRORS) TO(0)
FRUTIL02  0000010000000000000001     CLR_LIST   NAMED(#SC_MSGLST)
FRUTIL02  0000010100000000000001     @@COMMENT  COMMENT(' ')
FRUTIL02  0000010200000000000001     CASE       OF_FIELD(#SC_SRCTGT)
FRUTIL02  0000010300000000000001     @@COMMENT  COMMENT('AS/400 to Flat File       ')
FRUTIL02  0000010400000000000001     WHEN       VALUE_IS('= ''1   1 ''')
FRUTIL02  0000010500000000000001     EXECUTE    SUBROUTINE(CONNECT)
FRUTIL02  0000010600000000000001     LEAVE      IF('#SC_CONSRV *NE OK')
FRUTIL02  0000010700000000000001     EXECUTE    SUBROUTINE(DBMSTOFLAT) WITH_PARMS(#SC_PRMFIL)
FRUTIL02  0000010800000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL02  0000010900000000000001     @@COMMENT  COMMENT('AS/400 to PC DBMS      ')
FRUTIL02  0000011000000000000001     WHEN       VALUE_IS('= ''1    1''')
FRUTIL02  0000011100000000000001     EXECUTE    SUBROUTINE(CONNECT)
FRUTIL02  0000011200000000000001     LEAVE      IF('#SC_CONSRV *NE OK')
FRUTIL02  0000011300000000000001     EXECUTE    SUBROUTINE(DBMSTOFLAT) WITH_PARMS(#SC_TMPFIL)
FRUTIL02  0000011400000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL02  0000011500000000000001     EXECUTE    SUBROUTINE(FLATTODBMS) WITH_PARMS(#SC_TMPFIL)
FRUTIL02  0000011600000000000001     @@COMMENT  COMMENT('Flat File to AS/400    ')
FRUTIL02  0000011700000000000001     WHEN       VALUE_IS('= '' 1 1  ''')
FRUTIL02  0000011800000000000001     EXECUTE    SUBROUTINE(CONNECT)
FRUTIL02  0000011900000000000001     LEAVE      IF('#SC_CONSRV *NE OK')
FRUTIL02  0000012000000000000001     EXECUTE    SUBROUTINE(FLATTODBMS) WITH_PARMS(#SC_PRMFIL)
FRUTIL02  0000012100000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL02  0000012200000000000001     @@COMMENT  COMMENT('Flat File to PC DBMS   ')
FRUTIL02  0000012300000000000001     WHEN       VALUE_IS('= '' 1   1''')
FRUTIL02  0000012400000000000001     EXECUTE    SUBROUTINE(FLATTODBMS) WITH_PARMS(#SC_PRMFIL)
FRUTIL02  0000012500000000000001     @@COMMENT  COMMENT('PC DBMS to AS/400      ')
FRUTIL02  0000012600000000000001     WHEN       VALUE_IS('= ''  11  ''')
FRUTIL02  0000012700000000000001     EXECUTE    SUBROUTINE(DBMSTOFLAT) WITH_PARMS(#SC_TMPFIL)
FRUTIL02  0000012800000000000001     EXECUTE    SUBROUTINE(CONNECT)
FRUTIL02  0000012900000000000001     LEAVE      IF('#SC_CONSRV *NE OK')
FRUTIL02  0000013000000000000001     EXECUTE    SUBROUTINE(FLATTODBMS) WITH_PARMS(#SC_TMPFIL)
FRUTIL02  0000013100000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL02  0000013200000000000001     @@COMMENT  COMMENT('PC DBMS to Flat        ')
FRUTIL02  0000013300000000000001     WHEN       VALUE_IS('= ''  1 1 ''')
FRUTIL02  0000013400000000000001     EXECUTE    SUBROUTINE(DBMSTOFLAT) WITH_PARMS(#SC_PRMFIL)
FRUTIL02  0000013500000000000001     @@COMMENT  COMMENT('Invalid selection      ')
FRUTIL02  0000013600000000000001     OTHERWISE
FRUTIL02  0000013700000000000001     MESSAGE    MSGTXT('Invalid source/target combination selected')
FRUTIL02  0000013800000000000001     ENDCASE
FRUTIL02  0000013900000000000001     @@COMMENT  COMMENT(' ')
FRUTIL02  0000014000000000000001     IF         COND('#SC_ERRORS *GT 0')
FRUTIL02  0000014100000000000001     SELECTLIST NAMED(#SC_MSGLST)
FRUTIL02  0000014200000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#SC_MSGTXT)
FRUTIL02  0000014300000000000001     ENDSELECT
FRUTIL02  0000014400000000000001     POP_UP     FIELDS((#SC_TEXT03 *L3 *P2 *NOID *OUT)) AT_LOC(6 3) WITH_SIZE(64 07) PANEL_TITL('Import/Export Error(s)') EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL02  0000014500000000000001     ENDIF
FRUTIL02  0000014600000000000001     END_LOOP
FRUTIL02  0000014700000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000014800000000000001     @@COMMENT  COMMENT('Convert DBMS data into flat file')
FRUTIL02  0000014900000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000015000000000000001     SUBROUTINE NAME(DBMSTOFLAT) PARMS((#SC_OUTPUT *RECEIVED))
FRUTIL02  0000015100000000000001     CLR_LIST   NAMED(#SC_DATA01)
FRUTIL02  0000015200000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL02  0000015300000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Transferring contents of AS/400 table''' #SC_FILNAM '''into PC flat file''' #SC_OUTPUT)
FRUTIL02  0000015400000000000001     ELSE
FRUTIL02  0000015500000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Transferring contents of PC DBMS table''' #SC_FILNAM '''into PC flat file''' #SC_OUTPUT)
FRUTIL02  0000015600000000000001     ENDIF
FRUTIL02  0000015700000000000001     CHANGE     FIELD(#SC_RCDCNT) TO(0)
FRUTIL02  0000015800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(@@FNAME01)
FRUTIL02  0000015900000000000001     CHANGE     FIELD(#SC_RCDCNT) TO('#SC_RCDCNT + 1')
FRUTIL02  0000016000000000000001     ADD_ENTRY  TO_LIST(#SC_DATA01)
FRUTIL02  0000016100000000000001     /* ********** ======================================================= */
FRUTIL02  0000016200000000000001     /* ********** LOAD ANY REQUIRED APPENDAGE LISTS                       */
FRUTIL02  0000016300000000000001     /* ********** ======================================================= */
FRUTIL02  0000016400000000000001     @@SET_IDX  IDX_NAME(NN) TO(0)
FRUTIL02  0000016500000000000001ALL: @@INC_IDX  IDX_NAME(NN)
FRUTIL02  0000016600000000000001     @@CMP_IDX  IDX_NAME(NN) IDX_VALUE(@@NANS001) IF_GT(ALZ)
FRUTIL02  0000016700000000000001     ADD_ENTRY  TO_LIST(#SC_APL@@INDEXNN)
FRUTIL02  0000016800000000000001     @@GOTO     LABEL(ALL)
FRUTIL02  0000016900000000000001ALZ: @@LABEL
FRUTIL02  0000017000000000000001     IF         COND('#SC_COUNT = 200')
FRUTIL02  0000017100000000000001     /* ********** ======================================================= */
FRUTIL02  0000017200000000000001     /* ********** DO THE APPROPRIATE TRANSFORM LIST                       */
FRUTIL02  0000017300000000000001     /* ********** ======================================================= */
FRUTIL02  0000017400000000000001     @@IF       COND((*IF @@NANS001 *EQ 0)) GOTO(LN0)
FRUTIL02  0000017500000000000001     @@IF       COND((*IF @@NANS001 *EQ 1)) GOTO(LN1)
FRUTIL02  0000017600000000000001     @@IF       COND((*IF @@NANS001 *EQ 2)) GOTO(LN2)
FRUTIL02  0000017700000000000001     @@IF       COND((*IF @@NANS001 *EQ 3)) GOTO(LN3)
FRUTIL02  0000017800000000000001     @@IF       COND((*IF @@NANS001 *EQ 4)) GOTO(LN4)
FRUTIL02  0000017900000000000001     @@IF       COND((*IF @@NANS001 *EQ 5)) GOTO(LN5)
FRUTIL02  0000018000000000000001     @@IF       COND((*IF @@NANS001 *EQ 6)) GOTO(LN6)
FRUTIL02  0000018100000000000001     @@IF       COND((*IF @@NANS001 *EQ 7)) GOTO(LN7)
FRUTIL02  0000018200000000000001     @@IF       COND((*IF @@NANS001 *EQ 8)) GOTO(LN8)
FRUTIL02  0000018300000000000001     @@IF       COND((*IF @@NANS001 *EQ 9)) GOTO(LN9)
FRUTIL02  0000018400000000000001     @@IF       COND((*IF @@NANS001 *EQ 10)) GOTO(LNA)
FRUTIL02  0000018500000000000001LN0: @@LABEL
FRUTIL02  0000018600000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N) TO_GET(#SC_RETCDE)
FRUTIL02  0000018700000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000018800000000000001LN1: @@LABEL
FRUTIL02  0000018900000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01) TO_GET(#SC_RETCDE)
FRUTIL02  0000019000000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000019100000000000001LN2: @@LABEL
FRUTIL02  0000019200000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02) TO_GET(#SC_RETCDE)
FRUTIL02  0000019300000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000019400000000000001LN3: @@LABEL
FRUTIL02  0000019500000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02 #SC_APL03) TO_GET(#SC_RETCDE)
FRUTIL02  0000019600000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000019700000000000001LN4: @@LABEL
FRUTIL02  0000019800000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04) TO_GET(#SC_RETCDE)
FRUTIL02  0000019900000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000020000000000000001LN5: @@LABEL
FRUTIL02  0000020100000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05) TO_GET(#SC_RETCDE)
FRUTIL02  0000020200000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000020300000000000001LN6: @@LABEL
FRUTIL02  0000020400000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06) TO_GET(#SC_RETCDE)
FRUTIL02  0000020500000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000020600000000000001LN7: @@LABEL
FRUTIL02  0000020700000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06 #SC_APL07) TO_GET(#SC_RETCDE)
FRUTIL02  0000020800000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000020900000000000001LN8: @@LABEL
FRUTIL02  0000021000000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06 #SC_APL07 #SC_APL08) TO_GET(#SC_RETCDE)
FRUTIL02  0000021100000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000021200000000000001LN9: @@LABEL
FRUTIL02  0000021300000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06 #SC_APL07 #SC_APL08 #SC_APL09) TO_GET(#SC_RETCDE)
FRUTIL02  0000021400000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000021500000000000001LNA: @@LABEL
FRUTIL02  0000021600000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06 #SC_APL07 #SC_APL08 #SC_APL09 #SC_APL10) TO_GET(#SC_RETCDE)
FRUTIL02  0000021700000000000001LNZ: @@LABEL
FRUTIL02  0000021800000000000001     CLR_LIST   NAMED(#SC_DATA01)
FRUTIL02  0000021900000000000001     /* ********** ======================================================= */
FRUTIL02  0000022000000000000001     /* ********** CLEAR APPENDAGE LISTS                                   */
FRUTIL02  0000022100000000000001     /* ********** ======================================================= */
FRUTIL02  0000022200000000000001     @@SET_IDX  IDX_NAME(NN) TO(0)
FRUTIL02  0000022300000000000001CLL: @@INC_IDX  IDX_NAME(NN)
FRUTIL02  0000022400000000000001     @@CMP_IDX  IDX_NAME(NN) IDX_VALUE(@@NANS001) IF_GT(CLZ)
FRUTIL02  0000022500000000000001     CLR_LIST   NAMED(#SC_APL@@INDEXNN)
FRUTIL02  0000022600000000000001     @@GOTO     LABEL(CLL)
FRUTIL02  0000022700000000000001CLZ: @@LABEL
FRUTIL02  0000022800000000000001     IF         COND('#SC_RETCDE *NE OK')
FRUTIL02  0000022900000000000001     CHANGE     FIELD(#SC_ERRORS) TO('#SC_ERRORS + 1')
FRUTIL02  0000023000000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Fatal Error detected when writing to flat file''' #SC_OUTPUT *BLANKS *BLANKS)
FRUTIL02  0000023100000000000001     LEAVE
FRUTIL02  0000023200000000000001     ENDIF
FRUTIL02  0000023300000000000001     ENDIF
FRUTIL02  0000023400000000000001     IF         COND('#SC_RCDL1C = ''0''')
FRUTIL02  0000023500000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS(#SC_RCDCHR '''Rows transferred''' *BLANKS *BLANKS)
FRUTIL02  0000023600000000000001     ENDIF
FRUTIL02  0000023700000000000001     ENDSELECT
FRUTIL02  0000023800000000000001     /* ********** ======================================================= */
FRUTIL02  0000023900000000000001     /* ********** DO THE APPROPRIATE TRANSFORM LIST                       */
FRUTIL02  0000024000000000000001     /* ********** ======================================================= */
FRUTIL02  0000024100000000000001     @@IF       COND((*IF @@NANS001 *EQ 0)) GOTO(LY0)
FRUTIL02  0000024200000000000001     @@IF       COND((*IF @@NANS001 *EQ 1)) GOTO(LY1)
FRUTIL02  0000024300000000000001     @@IF       COND((*IF @@NANS001 *EQ 2)) GOTO(LY2)
FRUTIL02  0000024400000000000001     @@IF       COND((*IF @@NANS001 *EQ 3)) GOTO(LY3)
FRUTIL02  0000024500000000000001     @@IF       COND((*IF @@NANS001 *EQ 4)) GOTO(LY4)
FRUTIL02  0000024600000000000001     @@IF       COND((*IF @@NANS001 *EQ 5)) GOTO(LY5)
FRUTIL02  0000024700000000000001     @@IF       COND((*IF @@NANS001 *EQ 6)) GOTO(LY6)
FRUTIL02  0000024800000000000001     @@IF       COND((*IF @@NANS001 *EQ 7)) GOTO(LY7)
FRUTIL02  0000024900000000000001     @@IF       COND((*IF @@NANS001 *EQ 8)) GOTO(LY8)
FRUTIL02  0000025000000000000001     @@IF       COND((*IF @@NANS001 *EQ 9)) GOTO(LY9)
FRUTIL02  0000025100000000000001     @@IF       COND((*IF @@NANS001 *EQ 10)) GOTO(LYA)
FRUTIL02  0000025200000000000001LY0: @@LABEL
FRUTIL02  0000025300000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y) TO_GET(#SC_RETCDE)
FRUTIL02  0000025400000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000025500000000000001LY1: @@LABEL
FRUTIL02  0000025600000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01) TO_GET(#SC_RETCDE)
FRUTIL02  0000025700000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000025800000000000001LY2: @@LABEL
FRUTIL02  0000025900000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02) TO_GET(#SC_RETCDE)
FRUTIL02  0000026000000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000026100000000000001LY3: @@LABEL
FRUTIL02  0000026200000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02 #SC_APL03) TO_GET(#SC_RETCDE)
FRUTIL02  0000026300000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000026400000000000001LY4: @@LABEL
FRUTIL02  0000026500000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04) TO_GET(#SC_RETCDE)
FRUTIL02  0000026600000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000026700000000000001LY5: @@LABEL
FRUTIL02  0000026800000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05) TO_GET(#SC_RETCDE)
FRUTIL02  0000026900000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000027000000000000001LY6: @@LABEL
FRUTIL02  0000027100000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06) TO_GET(#SC_RETCDE)
FRUTIL02  0000027200000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000027300000000000001LY7: @@LABEL
FRUTIL02  0000027400000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06 #SC_APL07) TO_GET(#SC_RETCDE)
FRUTIL02  0000027500000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000027600000000000001LY8: @@LABEL
FRUTIL02  0000027700000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06 #SC_APL07 #SC_APL08) TO_GET(#SC_RETCDE)
FRUTIL02  0000027800000000000001     @@GOTO     LABEL(LYZ)
FRUTIL02  0000027900000000000001LY9: @@LABEL
FRUTIL02  0000028000000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06 #SC_APL07 #SC_APL08 #SC_APL09) TO_GET(#SC_RETCDE)
FRUTIL02  0000028100000000000001     @@GOTO     LABEL(LNZ)
FRUTIL02  0000028200000000000001LYA: @@LABEL
FRUTIL02  0000028300000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' Y #SC_APL01 #SC_APL02 #SC_APL03 #SC_APL04 #SC_APL05 #SC_APL06 #SC_APL07 #SC_APL08 #SC_APL09 #SC_APL10) TO_GET(#SC_RETCDE)
FRUTIL02  0000028400000000000001LYZ: @@LABEL
FRUTIL02  0000028500000000000001     IF         COND('#SC_RETCDE *NE OK')
FRUTIL02  0000028600000000000001     CHANGE     FIELD(#SC_ERRORS) TO('#SC_ERRORS + 1')
FRUTIL02  0000028700000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Fatal Error detected when writing to flat file''' #SC_OUTPUT *BLANKS *BLANKS)
FRUTIL02  0000028800000000000001     ENDIF
FRUTIL02  0000028900000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS(#SC_RCDCHR '''Rows transferred''' *BLANKS *BLANKS)
FRUTIL02  0000029000000000000001     ENDROUTINE
FRUTIL02  0000029100000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000029200000000000001     @@COMMENT  COMMENT('Convert flat file into DBMS data')
FRUTIL02  0000029300000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000029400000000000001     SUBROUTINE NAME(FLATTODBMS) PARMS((#SC_OUTPUT *RECEIVED))
FRUTIL02  0000029500000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL02  0000029600000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Updating contents of PC flat file''' #SC_OUTPUT '''into AS/400 table''' #SC_FILNAM)
FRUTIL02  0000029700000000000001     ELSE
FRUTIL02  0000029800000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Updating contents of PC flat file''' #SC_OUTPUT '''into PC DBMS table''' #SC_FILNAM)
FRUTIL02  0000029900000000000001     ENDIF
FRUTIL02  0000030000000000000001     CHANGE     FIELD(#SC_RCDCNT) TO(0)
FRUTIL02  0000030100000000000001     DOUNTIL    COND('#SC_RETCDE = EF')
FRUTIL02  0000030200000000000001     CLR_LIST   NAMED(#SC_DATA01)
FRUTIL02  0000030300000000000001     /* ********** ======================================================= */
FRUTIL02  0000030400000000000001     /* ********** CLEAR APPENDAGE LISTS                                   */
FRUTIL02  0000030500000000000001     /* ********** ======================================================= */
FRUTIL02  0000030600000000000001     @@SET_IDX  IDX_NAME(NN) TO(0)
FRUTIL02  0000030700000000000001CFL: @@INC_IDX  IDX_NAME(NN)
FRUTIL02  0000030800000000000001     @@CMP_IDX  IDX_NAME(NN) IDX_VALUE(@@NANS001) IF_GT(CFZ)
FRUTIL02  0000030900000000000001     CLR_LIST   NAMED(#SC_APF@@INDEXNN)
FRUTIL02  0000031000000000000001     @@GOTO     LABEL(CFL)
FRUTIL02  0000031100000000000001CFZ: @@LABEL
FRUTIL02  0000031200000000000001     /* ********** ======================================================= */
FRUTIL02  0000031300000000000001     /* ********** DO THE APPROPRIATE TRANSFORM FILE                       */
FRUTIL02  0000031400000000000001     /* ********** ======================================================= */
FRUTIL02  0000031500000000000001     @@IF       COND((*IF @@NANS001 *EQ 0)) GOTO(FN0)
FRUTIL02  0000031600000000000001     @@IF       COND((*IF @@NANS001 *EQ 1)) GOTO(FN1)
FRUTIL02  0000031700000000000001     @@IF       COND((*IF @@NANS001 *EQ 2)) GOTO(FN2)
FRUTIL02  0000031800000000000001     @@IF       COND((*IF @@NANS001 *EQ 3)) GOTO(FN3)
FRUTIL02  0000031900000000000001     @@IF       COND((*IF @@NANS001 *EQ 4)) GOTO(FN4)
FRUTIL02  0000032000000000000001     @@IF       COND((*IF @@NANS001 *EQ 5)) GOTO(FN5)
FRUTIL02  0000032100000000000001     @@IF       COND((*IF @@NANS001 *EQ 6)) GOTO(FN6)
FRUTIL02  0000032200000000000001     @@IF       COND((*IF @@NANS001 *EQ 7)) GOTO(FN7)
FRUTIL02  0000032300000000000001     @@IF       COND((*IF @@NANS001 *EQ 8)) GOTO(FN8)
FRUTIL02  0000032400000000000001     @@IF       COND((*IF @@NANS001 *EQ 9)) GOTO(FN9)
FRUTIL02  0000032500000000000001     @@IF       COND((*IF @@NANS001 *EQ 10)) GOTO(FNA)
FRUTIL02  0000032600000000000001FN0: @@LABEL
FRUTIL02  0000032700000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N) TO_GET(#SC_RETCDE)
FRUTIL02  0000032800000000000001     @@GOTO     FNZ
FRUTIL02  0000032900000000000001FN1: @@LABEL
FRUTIL02  0000033000000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01) TO_GET(#SC_RETCDE)
FRUTIL02  0000033100000000000001     @@GOTO     FNZ
FRUTIL02  0000033200000000000001FN2: @@LABEL
FRUTIL02  0000033300000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02) TO_GET(#SC_RETCDE)
FRUTIL02  0000033400000000000001     @@GOTO     FNZ
FRUTIL02  0000033500000000000001FN3: @@LABEL
FRUTIL02  0000033600000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02 #SC_APF03) TO_GET(#SC_RETCDE)
FRUTIL02  0000033700000000000001     @@GOTO     FNZ
FRUTIL02  0000033800000000000001FN4: @@LABEL
FRUTIL02  0000033900000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02 #SC_APF03 #SC_APF04) TO_GET(#SC_RETCDE)
FRUTIL02  0000034000000000000001     @@GOTO     FNZ
FRUTIL02  0000034100000000000001FN5: @@LABEL
FRUTIL02  0000034200000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02 #SC_APF03 #SC_APF04 #SC_APF05) TO_GET(#SC_RETCDE)
FRUTIL02  0000034300000000000001     @@GOTO     FNZ
FRUTIL02  0000034400000000000001FN6: @@LABEL
FRUTIL02  0000034500000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02 #SC_APF03 #SC_APF04 #SC_APF05 #SC_APF06) TO_GET(#SC_RETCDE)
FRUTIL02  0000034600000000000001     @@GOTO     FNZ
FRUTIL02  0000034700000000000001FN7: @@LABEL
FRUTIL02  0000034800000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02 #SC_APF03 #SC_APF04 #SC_APF05 #SC_APF06 #SC_APF07) TO_GET(#SC_RETCDE)
FRUTIL02  0000034900000000000001     @@GOTO     FNZ
FRUTIL02  0000035000000000000001FN8: @@LABEL
FRUTIL02  0000035100000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02 #SC_APF03 #SC_APF04 #SC_APF05 #SC_APF06 #SC_APF07 #SC_APF08) TO_GET(#SC_RETCDE)
FRUTIL02  0000035200000000000001     @@GOTO     FNZ
FRUTIL02  0000035300000000000001FN9: @@LABEL
FRUTIL02  0000035400000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02 #SC_APF03 #SC_APF04 #SC_APF05 #SC_APF06 #SC_APF07 #SC_APF08 #SC_APF09) TO_GET(#SC_RETCDE)
FRUTIL02  0000035500000000000001     @@GOTO     FNZ
FRUTIL02  0000035600000000000001FNA: @@LABEL
FRUTIL02  0000035700000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DATA01 #SC_OUTPUT T B Y '''.''' N #SC_SELOPT #SC_SELPOS #SC_SELVAL #SC_APF01 #SC_APF02 #SC_APF03 #SC_APF04 #SC_APF05 #SC_APF06 #SC_APF07 #SC_APF08 #SC_APF09 #SC_APF10) TO_GET(#SC_RETCDE)
FRUTIL02  0000035800000000000001FNZ: @@LABEL
FRUTIL02  0000035900000000000001     IF         COND('#SC_RETCDE = ER')
FRUTIL02  0000036000000000000001     CHANGE     FIELD(#SC_ERRORS) TO('#SC_ERRORS + 1')
FRUTIL02  0000036100000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Fatal Error detected when reading flat file''' #SC_OUTPUT *BLANKS *BLANKS)
FRUTIL02  0000036200000000000001     LEAVE
FRUTIL02  0000036300000000000001     ENDIF
FRUTIL02  0000036400000000000001     EXECUTE    SUBROUTINE(FLATUPDATE)
FRUTIL02  0000036500000000000001     ENDUNTIL
FRUTIL02  0000036600000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS(#SC_RCDCHR '''Rows updated''' *BLANKS *BLANKS)
FRUTIL02  0000036700000000000001     ENDROUTINE
FRUTIL02  0000036800000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000036900000000000001     @@COMMENT  COMMENT('Update DBMS from data in working list')
FRUTIL02  0000037000000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000037100000000000001     SUBROUTINE NAME(FLATUPDATE)
FRUTIL02  0000037200000000000001     CHANGE     FIELD(#SC_II) TO(1)
FRUTIL02  0000037300000000000001     DOWHILE    COND('#SC_II *LE #SC_COUNT')
FRUTIL02  0000037400000000000001     GET_ENTRY  NUMBER(#SC_II) FROM_LIST(#SC_DATA01)
FRUTIL02  0000037500000000000001     /* ********** ======================================================= */
FRUTIL02  0000037600000000000001     /* ********** GET MATCHING APPENDAGE LIST ENTRIES                     */
FRUTIL02  0000037700000000000001     /* ********** ======================================================= */
FRUTIL02  0000037800000000000001     @@SET_IDX  IDX_NAME(NN) TO(0)
FRUTIL02  0000037900000000000001GEL: @@INC_IDX  IDX_NAME(NN)
FRUTIL02  0000038000000000000001     @@CMP_IDX  IDX_NAME(NN) IDX_VALUE(@@NANS001) IF_GT(GEZ)
FRUTIL02  0000038100000000000001     GET_ENTRY  NUMBER(#SC_II) FROM_LIST(#SC_APF@@INDEXNN)
FRUTIL02  0000038200000000000001     @@GOTO     LABEL(GEL)
FRUTIL02  0000038300000000000001GEZ: @@LABEL
FRUTIL02  0000038400000000000001     CHANGE     FIELD(#SC_RCDCNT) TO('#SC_RCDCNT + 1')
FRUTIL02  0000038500000000000001     FETCH      FIELDS((#XG_KEYS01)) FROM_FILE(@@FNAME01) WITH_KEY(#XG_KEYS01)
FRUTIL02  0000038600000000000001     IF_STATUS  IS(*OKAY)
FRUTIL02  0000038700000000000001     UPDATE     FIELDS(*ALL) IN_FILE(@@FNAME01) VAL_ERROR(*NEXT)
FRUTIL02  0000038800000000000001     ELSE
FRUTIL02  0000038900000000000001     INSERT     FIELDS(*ALL) TO_FILE(@@FNAME01) VAL_ERROR(*NEXT)
FRUTIL02  0000039000000000000001     ENDIF
FRUTIL02  0000039100000000000001     IF_STATUS  IS_NOT(*OKAY)
FRUTIL02  0000039200000000000001     CHANGE     FIELD(#SC_ERRORS) TO('#SC_ERRORS + 1')
FRUTIL02  0000039300000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS('''Previous Error(s) were''' '''detected when processing row number ''' #SC_RCDCHR *BLANKS)
FRUTIL02  0000039400000000000001     ENDIF
FRUTIL02  0000039500000000000001     IF         COND('#SC_RCDL1C = ''0''')
FRUTIL02  0000039600000000000001     EXECUTE    SUBROUTINE(SHOWSTATUS) WITH_PARMS(#SC_RCDCHR '''Rows updated''' *BLANKS *BLANKS)
FRUTIL02  0000039700000000000001     ENDIF
FRUTIL02  0000039800000000000001     CHANGE     FIELD(#SC_II) TO('#SC_II + 1')
FRUTIL02  0000039900000000000001     ENDWHILE
FRUTIL02  0000040000000000000001     ENDROUTINE
FRUTIL02  0000040100000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000040200000000000001     @@COMMENT  COMMENT('Connect to AS/400 server')
FRUTIL02  0000040300000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000040400000000000001     SUBROUTINE NAME(CONNECT)
FRUTIL02  0000040500000000000001     CHANGE     FIELD(#SC_AS4PWD) TO(*NULL)
FRUTIL02  0000040600000000000001     DOWHILE    COND('(#SC_DEFSRV *NE OK) *OR (#SC_CONSRV *NE OK)')
FRUTIL02  0000040700000000000001     POP_UP     FIELDS((#SC_AS4NAM *L3 *P2 *IN) (#SC_AS4PWD *L7 *P2 *IN) (#SC_AS4USR *L5 *P2 *OUT)) DESIGN(*DOWN) IDENTIFY(*LABEL) AT_LOC(13 38) WITH_SIZE(40 11) PANEL_TITL('Connect to AS/400 Server') EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO)
FRUTIL02  0000040800000000000001     USE        BUILTIN(DEFINE_OS_400_SERVER) WITH_ARGS(AS400 #SC_AS4NAM N) TO_GET(#SC_DEFSRV)
FRUTIL02  0000040900000000000001     IF         COND('(#SC_DEFSRV = OK) *AND (#SC_CONSRV *NE OK)')
FRUTIL02  0000041000000000000001     USE        BUILTIN(CONNECT_SERVER) WITH_ARGS(AS400 #SC_AS4PWD) TO_GET(#SC_CONSRV)
FRUTIL02  0000041100000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL02  0000041200000000000001     USE        BUILTIN(CONNECT_FILE) WITH_ARGS('''*''' AS400)
FRUTIL02  0000041300000000000001     ENDIF
FRUTIL02  0000041400000000000001     ENDIF
FRUTIL02  0000041500000000000001     ENDWHILE
FRUTIL02  0000041600000000000001     ENDROUTINE
FRUTIL02  0000041700000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000041800000000000001     @@COMMENT  COMMENT('Disconnect from AS/400 server')
FRUTIL02  0000041900000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000042000000000000001     SUBROUTINE NAME(DISCONNECT)
FRUTIL02  0000042100000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL02  0000042200000000000001     USE        BUILTIN(DISCONNECT_FILE) WITH_ARGS('''*''' AS400)
FRUTIL02  0000042300000000000001     USE        BUILTIN(DISCONNECT_SERVER) WITH_ARGS(AS400) TO_GET(#SC_CONSRV)
FRUTIL02  0000042400000000000001     CHANGE     FIELD(#SC_CONSRV) TO(NO)
FRUTIL02  0000042500000000000001     ENDIF
FRUTIL02  0000042600000000000001     ENDROUTINE
FRUTIL02  0000042700000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000042800000000000001     @@COMMENT  COMMENT('Issue and record status message(s)')
FRUTIL02  0000042900000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL02  0000043000000000000001     SUBROUTINE NAME(SHOWSTATUS) PARMS((#SC_SUBV01 *RECEIVED) (#SC_SUBV02 *RECEIVED) (#SC_SUBV03 *RECEIVED) (#SC_SUBV04 *RECEIVED))
FRUTIL02  0000043100000000000001     DEFINE     FIELD(#SC_SUBV01) TYPE(*CHAR) LENGTH(60) DESC('Substitution Variable 1')
FRUTIL02  0000043200000000000001     DEFINE     FIELD(#SC_SUBV02) TYPE(*CHAR) LENGTH(60) DESC('Substitution Variable 2')
FRUTIL02  0000043300000000000001     DEFINE     FIELD(#SC_SUBV03) TYPE(*CHAR) LENGTH(60) DESC('Substitution Variable 3')
FRUTIL02  0000043400000000000001     DEFINE     FIELD(#SC_SUBV04) TYPE(*CHAR) LENGTH(60) DESC('Substitution Variable 4')
FRUTIL02  0000043500000000000001     DEFINE     FIELD(#SC_MSGCDE) TYPE(*CHAR) LENGTH(2) DESC('Return Code')
FRUTIL02  0000043600000000000001     @@COMMENT  COMMENT('Route/log messages already on queue')
FRUTIL02  0000043700000000000001     CLR_LIST   NAMED(#SC_MSGSTK)
FRUTIL02  0000043800000000000001     USE        BUILTIN(GET_MESSAGE) TO_GET(#SC_MSGCDE #SC_MSGTXT)
FRUTIL02  0000043900000000000001     DOWHILE    COND('#SC_MSGCDE = OK')
FRUTIL02  0000044000000000000001     ADD_ENTRY  TO_LIST(#SC_MSGLST)
FRUTIL02  0000044100000000000001     ADD_ENTRY  TO_LIST(#SC_MSGSTK)
FRUTIL02  0000044200000000000001     USE        BUILTIN(GET_MESSAGE) TO_GET(#SC_MSGCDE #SC_MSGTXT)
FRUTIL02  0000044300000000000001     ENDWHILE
FRUTIL02  0000044400000000000001     SELECTLIST NAMED(#SC_MSGSTK)
FRUTIL02  0000044500000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#SC_MSGTXT) TYPE(*STATUS)
FRUTIL02  0000044600000000000001     ENDSELECT
FRUTIL02  0000044700000000000001     @@COMMENT  COMMENT('Now handle the message requested caller')
FRUTIL02  0000044800000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#SC_SUBV01 #SC_SUBV02 #SC_SUBV03 #SC_SUBV04) TO_GET(#SC_MSGTXT)
FRUTIL02  0000044900000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#SC_MSGTXT) TYPE(*STATUS)
FRUTIL02  0000045000000000000001     ADD_ENTRY  TO_LIST(#SC_MSGLST)
FRUTIL02  0000045100000000000001     @@COMMENT  COMMENT(' ')
FRUTIL02  0000045200000000000001     ENDROUTINE
FRUTIL02  0000045300000000000001     /* ********** ======================================================= */
FRUTIL02  0000045400000000000001     /* ********** CLEAR ALL LISTS USED                                    */
FRUTIL02  0000045500000000000001     /* ********** ======================================================= */
FRUTIL02  0000045600000000000001END: @@CLR_LST  NUMBER(1)
FRUTIL02  0000045700000000000001     @@CLR_LST  NUMBER(2)
FRUTIL02  0000045800000000000001     @@CLR_LST  NUMBER(3)
FRUTIL03  0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1997 ')
FRUTIL03  0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRUTIL03  0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRUTIL03  0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRUTIL03  0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRUTIL03  0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRUTIL03  0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000000900000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000001000000000000001     /* ********** BEGINNING OF TEMPLATE STATEMENTS                        */
FRUTIL03  0000001100000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000001200000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000001300000000000001     /* ********** ASK IF USER SHOULD CHOOSE SERVER FOR CONNECTION         */
FRUTIL03  0000001400000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000001500000000000001     @@QUESTION PROMPT('Specify the server type(s) to be used for the connection. (A, O, or B)') ANSWER(@@CANS003) EXTEND('"A" An AS/400 Server will be used for the connection' '"O"  An Other Server will be used for the connection' '"B" the user will be able to choose the type of Server to use') LOWER(*NO) VALUES(A O B) HELPIDS(HELP010)
FRUTIL03  0000001600000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000001700000000000001     /* ********** ASK IF USER IS TO SPECIFY FILES FOR CONNECTION          */
FRUTIL03  0000001800000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000001900000000000001     @@QUESTION PROMPT('Allow user to specify the files on the Server to connect to? (Y/N)') ANSWER(@@CANS001) EXTEND('"Y" will add a display in which the user will be able to specify the list' 'of files to be connected to on the Server' '"N" will automatically connect to all files on the Server') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010)
FRUTIL03  0000002000000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000002100000000000001     /* ********** ASK IF USER IS TO CHOOSE PROCESS TO EXECUTE             */
FRUTIL03  0000002200000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000002300000000000001     @@QUESTION PROMPT('Allow user to specify the PROCESS to execute? (Y/N)') ANSWER(@@CANS002) EXTEND('"Y" will add a display in which the user will be able to select the ' 'PROCESS to execute.' '"N" a specific PROCESS to execute will be requested by this template') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010)
FRUTIL03  0000002400000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000002500000000000001     /* ********** GET NAME OF PROCESS TO EXECUTE                          */
FRUTIL03  0000002600000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000002700000000000001     @@IF       COND((*IF @@CANS002 *EQ Y)) GOTO(QUA)
FRUTIL03  0000002800000000000001     @@QUESTION PROMPT('Enter the name of the PROCESS to execute after connecting to the Server.') ANSWER(@@CANS004) LOWER(*NO) HELPIDS(HELP010)
FRUTIL03  0000002900000000000001QUA: @@LABEL
FRUTIL03  0000003000000000000001     FUNCTION   OPTIONS(*DIRECT *LIGHTUSAGE)
FRUTIL03  0000003100000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000003200000000000001     @@COMMENT  COMMENT('Local Variables')
FRUTIL03  0000003300000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000003400000000000001     DEFINE     FIELD(#SC_TEXT01) TYPE(*CHAR) LENGTH(50) DESC('Text String')
FRUTIL03  0000003500000000000001     DEFINE     FIELD(#SC_TEXT02) TYPE(*CHAR) LENGTH(50) DESC('Text String') OUTPUT_ATR(RED)
FRUTIL03  0000003600000000000001     DEFINE     FIELD(#SC_TEXT03) TYPE(*CHAR) LENGTH(50) DESC('Text String')
FRUTIL03  0000003700000000000001     CHANGE     FIELD(#SC_TEXT01) TO('''Enter the list of files to connect to:''')
FRUTIL03  0000003800000000000001     CHANGE     FIELD(#SC_TEXT02) TO('''"*" connects to all files''')
FRUTIL03  0000003900000000000001     CHANGE     FIELD(#SC_TEXT03) TO('''"FF*" connects to all files starting with "FF"''')
FRUTIL03  0000004000000000000001     DEFINE     FIELD(#SC_DEFSRV) TYPE(*CHAR) LENGTH(2) DESC('Return Code') DEFAULT(NO)
FRUTIL03  0000004100000000000001     DEFINE     FIELD(#SC_CONSRV) TYPE(*CHAR) LENGTH(2) DESC('Return Code') DEFAULT(NO)
FRUTIL03  0000004200000000000001     DEFINE     FIELD(#SC_DISCON) TYPE(*CHAR) LENGTH(1) LABEL('Disconnect ?') DEFAULT(N)
FRUTIL03  0000004300000000000001     DEFINE     FIELD(#SC_AS4FIL) TYPE(*CHAR) LENGTH(10) DESC('Connect File') COLHDG('Connect' 'to' 'File')
FRUTIL03  0000004400000000000001     DEFINE     FIELD(#SC_AS4NAM) TYPE(*CHAR) LENGTH(20) DESC('AS/400 Network Name') DEFAULT('APPN.XXXXXXXXXX')
FRUTIL03  0000004500000000000001     DEFINE     FIELD(#SC_AS4USR) TYPE(*CHAR) LENGTH(10) DESC('AS400 User') DEFAULT(*USER)
FRUTIL03  0000004600000000000001     DEFINE     FIELD(#SC_AS4PWD) TYPE(*CHAR) LENGTH(10) DESC('AS400 Password') INPUT_ATR(ND)
FRUTIL03  0000004700000000000001     DEFINE     FIELD(#SC_DFOSRV) TYPE(*CHAR) LENGTH(2) DESC('Return Code') DEFAULT(NO)
FRUTIL03  0000004800000000000001     DEFINE     FIELD(#SC_CNOSRV) TYPE(*CHAR) LENGTH(2) DESC('Return Code') DEFAULT(NO)
FRUTIL03  0000004900000000000001     DEFINE     FIELD(#SC_OTHFIL) TYPE(*CHAR) LENGTH(10) DESC('Connect File') COLHDG('Connect' 'to' 'File')
FRUTIL03  0000005000000000000001     DEFINE     FIELD(#SC_OTHNAM) TYPE(*CHAR) LENGTH(20) DESC('Server Name') DEFAULT(' ')
FRUTIL03  0000005100000000000001     DEFINE     FIELD(#SC_OTHUSR) TYPE(*CHAR) LENGTH(10) DESC('Server User') DEFAULT(*USER)
FRUTIL03  0000005200000000000001     DEFINE     FIELD(#SC_OTHPWD) TYPE(*CHAR) LENGTH(10) DESC('Server Password') INPUT_ATR(ND)
FRUTIL03  0000005300000000000001     DEFINE     FIELD(#SC_OXEXCP) TYPE(*CHAR) LENGTH(256) DESC('X_RUN Overrides')
FRUTIL03  0000005400000000000001     DEFINE     FIELD(#SC_OXEXC1) TYPE(*CHAR) LENGTH(60) DESC('X_RUN Overrides') COLHDG('X_RUN Overrides') INPUT_ATR(LC) TO_OVERLAY(#SC_OXEXCP)
FRUTIL03  0000005500000000000001     DEFINE     FIELD(#SC_OXEXC2) TYPE(*CHAR) LENGTH(60) DESC('X_RUN Overrides') INPUT_ATR(LC) TO_OVERLAY(#SC_OXEXCP 61)
FRUTIL03  0000005600000000000001     DEFINE     FIELD(#SC_OXEXC3) TYPE(*CHAR) LENGTH(60) DESC('X_RUN Overrides') INPUT_ATR(LC) TO_OVERLAY(#SC_OXEXCP 121)
FRUTIL03  0000005700000000000001     DEFINE     FIELD(#SC_OXEXC4) TYPE(*CHAR) LENGTH(60) DESC('X_RUN Overrides') INPUT_ATR(LC) TO_OVERLAY(#SC_OXEXCP 181)
FRUTIL03  0000005800000000000001     DEFINE     FIELD(#SC_RETCDE) TYPE(*CHAR) LENGTH(2) DESC('Return Code')
FRUTIL03  0000005900000000000001     DEFINE     FIELD(#SC_FILCNT) REFFLD(#LISTCOUNT) DESC('File Count')
FRUTIL03  0000006000000000000001     DEFINE     FIELD(#SC_CNAS) TYPE(*CHAR) LENGTH(1) LABEL('AS/400 Server') INPUT_ATR(RB01)
FRUTIL03  0000006100000000000001     DEFINE     FIELD(#SC_CNOTH) TYPE(*CHAR) LENGTH(1) LABEL('Other Server') INPUT_ATR(RB01)
FRUTIL03  0000006200000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000006300000000000001     /* ********** DEFINE LIST ONLY IF NEEDED                              */
FRUTIL03  0000006400000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000006500000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000006600000000000001     @@COMMENT  COMMENT('Lists')
FRUTIL03  0000006700000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000006800000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000006900000000000001     /* ********** FILES ON AS/400                                         */
FRUTIL03  0000007000000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000007100000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(DFA)
FRUTIL03  0000007200000000000001     @@IF       COND((*IF @@CANS003 *NE A) (*AND @@CANS003 *NE B)) GOTO(DFB)
FRUTIL03  0000007300000000000001     DEF_LIST   NAME(#SC_CNFILA) FIELDS((#SC_AS4FIL *P4))
FRUTIL03  0000007400000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000007500000000000001     /* ********** FILES ON OTHER                                          */
FRUTIL03  0000007600000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000007700000000000001DFB: @@IF       COND((*IF @@CANS003 *NE O) (*AND @@CANS003 *NE B)) GOTO(DFA)
FRUTIL03  0000007800000000000001     DEF_LIST   NAME(#SC_CNFILO) FIELDS((#SC_OTHFIL *P4))
FRUTIL03  0000007900000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000008000000000000001     /* ********** WORKING LIST FOR OTHER                                  */
FRUTIL03  0000008100000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000008200000000000001DFA: @@IF       COND((*IF @@CANS003 *NE O) (*AND @@CANS003 *NE B)) GOTO(DFC)
FRUTIL03  0000008300000000000001     DEF_LIST   NAME(#SC_DFTOVR) FIELDS(#SC_OXEXCP) TYPE(*WORKING)
FRUTIL03  0000008400000000000001DFC: @@LABEL
FRUTIL03  0000008500000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000008600000000000001     @@COMMENT  COMMENT('Function Mainline')
FRUTIL03  0000008700000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000008800000000000001     @@COMMENT  COMMENT(' ')
FRUTIL03  0000008900000000000001     @@IF       COND((*IF @@CANS003 *NE O)) GOTO(STA)
FRUTIL03  0000009000000000000001     CHANGE     FIELD(#SC_CNOTH) TO(*RADBUTTONSELECTED)
FRUTIL03  0000009100000000000001     @@GOTO     LABEL(STB)
FRUTIL03  0000009200000000000001STA: @@LABEL
FRUTIL03  0000009300000000000001     CHANGE     FIELD(#SC_CNAS) TO(*RADBUTTONSELECTED)
FRUTIL03  0000009400000000000001STB: @@LABEL
FRUTIL03  0000009500000000000001     @@IF       COND((*IF @@CANS003 *NE B)) GOTO(CTA)
FRUTIL03  0000009600000000000001     POP_UP     FIELDS((#SC_CNAS *INP) (#SC_CNOTH *INP)) DESIGN(*DOWN) EXIT_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL03  0000009700000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000009800000000000001     /* ********** CONNECT TO AS400                                        */
FRUTIL03  0000009900000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000010000000000000001CTA: @@IF       COND((*IF @@CANS003 *NE A) (*AND @@CANS003 *NE B)) GOTO(ESA)
FRUTIL03  0000010100000000000001     IF         COND('#SC_CNAS *EQ *RADBUTTONSELECTED')
FRUTIL03  0000010200000000000001     EXECUTE    SUBROUTINE(CONNECTA)
FRUTIL03  0000010300000000000001     ENDIF
FRUTIL03  0000010400000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000010500000000000001     /* ********** CONNECT TO OTHER                                        */
FRUTIL03  0000010600000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000010700000000000001ESA: @@IF       COND((*IF @@CANS003 *NE O) (*AND @@CANS003 *NE B)) GOTO(ESB)
FRUTIL03  0000010800000000000001     IF         COND('#SC_CNOTH *EQ *RADBUTTONSELECTED')
FRUTIL03  0000010900000000000001     EXECUTE    SUBROUTINE(CONNECTO)
FRUTIL03  0000011000000000000001     ENDIF
FRUTIL03  0000011100000000000001ESB: @@LABEL
FRUTIL03  0000011200000000000001     @@COMMENT  COMMENT(' ')
FRUTIL03  0000011300000000000001     DOWHILE    COND('#SC_DISCON *EQ N')
FRUTIL03  0000011400000000000001     EXECUTE    CALL_PROC
FRUTIL03  0000011500000000000001     POP_UP     FIELDS((#SC_DISCON *L3 *P2 *INPUT)) AT_LOC(8 22) WITH_SIZE(29 08) PANEL_TITL('Disconnect from Server?') EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL03  0000011600000000000001     BEGINCHECK
FRUTIL03  0000011700000000000001     VALUECHECK FIELD(#SC_DISCON) WITH_LIST(Y N) MSGTXT('Must be Y or N')
FRUTIL03  0000011800000000000001     ENDCHECK
FRUTIL03  0000011900000000000001     ENDWHILE
FRUTIL03  0000012000000000000001     EXECUTE    SUBROUTINE(DISCONNECT)
FRUTIL03  0000012100000000000001     @@COMMENT  COMMENT(' ')
FRUTIL03  0000012200000000000001     @@IF       COND((*IF @@CANS003 *NE A) (*AND @@CANS003 *NE B)) GOTO(PSA)
FRUTIL03  0000012300000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000012400000000000001     @@COMMENT  COMMENT('Connect to AS/400 server')
FRUTIL03  0000012500000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000012600000000000001     SUBROUTINE NAME(CONNECTA)
FRUTIL03  0000012700000000000001     @@COMMENT  COMMENT(' ')
FRUTIL03  0000012800000000000001     CHANGE     FIELD(#SC_AS4PWD) TO(*NULL)
FRUTIL03  0000012900000000000001     DOWHILE    COND('(#SC_DEFSRV *NE OK) *OR (#SC_CONSRV *NE OK)')
FRUTIL03  0000013000000000000001     POP_UP     FIELDS((#SC_AS4NAM *L3 *P2 *IN) (#SC_AS4PWD *L7 *P2 *IN) (#SC_AS4USR *L5 *P2 *OUT)) DESIGN(*DOWN) IDENTIFY(*LABEL) AT_LOC(2 3) WITH_SIZE(40 11) PANEL_TITL('Connect to AS/400 Server') EXIT_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL03  0000013100000000000001     USE        BUILTIN(DEFINE_OS_400_SERVER) WITH_ARGS(AS400 #SC_AS4NAM N) TO_GET(#SC_DEFSRV)
FRUTIL03  0000013200000000000001     IF         COND('(#SC_DEFSRV = OK) *AND (#SC_CONSRV *NE OK)')
FRUTIL03  0000013300000000000001     USE        BUILTIN(CONNECT_SERVER) WITH_ARGS(AS400 #SC_AS4PWD) TO_GET(#SC_CONSRV)
FRUTIL03  0000013400000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL03  0000013500000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(CNA)
FRUTIL03  0000013600000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000013700000000000001     /* ********** USER WILL SPECIFY FILES FOR CONNECTION                  */
FRUTIL03  0000013800000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000013900000000000001     CHANGE     FIELD(#SC_AS4FIL) TO(*BLANKS)
FRUTIL03  0000014000000000000001     CHANGE     FIELD(#SC_FILCNT) TO(*ZERO)
FRUTIL03  0000014100000000000001     INZ_LIST   NAMED(#SC_CNFILA) NUM_ENTRYS(500) WITH_MODE(*ADD)
FRUTIL03  0000014200000000000001     DOWHILE    COND('#SC_FILCNT *LE 0')
FRUTIL03  0000014300000000000001     POP_UP     FIELDS((#SC_TEXT01 *L2 *P2 *NOID) (#SC_TEXT02 *L3 *P5 *NOID) (#SC_TEXT03 *L4 *P5 *NOID)) AT_LOC(2 3) WITH_SIZE(57 22) PANEL_TITL('Select Files for AS/400 Server') BROWSELIST(#SC_CNFILA) EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL03  0000014400000000000001     SELECTLIST NAMED(#SC_CNFILA) GET_ENTRYS(*NOTNULL)
FRUTIL03  0000014500000000000001     CHANGE     FIELD(#SC_FILCNT) TO('#SC_FILCNT + 1')
FRUTIL03  0000014600000000000001     USE        BUILTIN(CONNECT_FILE) WITH_ARGS(#SC_AS4FIL AS400)
FRUTIL03  0000014700000000000001     ENDSELECT
FRUTIL03  0000014800000000000001     ENDWHILE
FRUTIL03  0000014900000000000001     @@GOTO     CNZ
FRUTIL03  0000015000000000000001CNA: @@LABEL
FRUTIL03  0000015100000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000015200000000000001     /* ********** ALL FILES WILL BE USED FOR CONNECTION                   */
FRUTIL03  0000015300000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000015400000000000001     USE        BUILTIN(CONNECT_FILE) WITH_ARGS('*' AS400)
FRUTIL03  0000015500000000000001CNZ: @@LABEL
FRUTIL03  0000015600000000000001     ENDIF
FRUTIL03  0000015700000000000001     ENDIF
FRUTIL03  0000015800000000000001     ENDWHILE
FRUTIL03  0000015900000000000001     ENDROUTINE
FRUTIL03  0000016000000000000001     @@COMMENT  COMMENT(' ')
FRUTIL03  0000016100000000000001PSA: @@IF       COND((*IF @@CANS003 *NE O) (*AND @@CANS003 *NE B)) GOTO(PSB)
FRUTIL03  0000016200000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000016300000000000001     @@COMMENT  COMMENT('Connect to OTHER server')
FRUTIL03  0000016400000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000016500000000000001     SUBROUTINE NAME(CONNECTO)
FRUTIL03  0000016600000000000001     @@COMMENT  COMMENT(' ')
FRUTIL03  0000016700000000000001     CHANGE     FIELD(#SC_OTHPWD) TO(*NULL)
FRUTIL03  0000016800000000000001     DOWHILE    COND('(#SC_DFOSRV *NE OK) *OR (#SC_CNOSRV *NE OK)')
FRUTIL03  0000016900000000000001     EXECUTE    SUBROUTINE(GET_DFTOVR)
FRUTIL03  0000017000000000000001     POP_UP     FIELDS((#SC_OTHNAM *L3 *P2 *IN) (#SC_OTHPWD *L7 *P2 *IN) (#SC_OTHUSR *L5 *P2 *OUT) (#SC_OXEXC1 *L9 *P2 *COL *IN) (#SC_OXEXC2 *L11 *P2 *NOID *IN) (#SC_OXEXC3 *L12 *P2 *NOID *IN) (#SC_OXEXC4 *L13 *P2 *NOID *IN)) DESIGN(*DOWN) IDENTIFY(*LABEL) AT_LOC(2 3) WITH_SIZE(64 17) PANEL_TITL('Connect to Other Server') EXIT_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL03  0000017100000000000001     EXECUTE    SUBROUTINE(PUT_DFTOVR)
FRUTIL03  0000017200000000000001     USE        BUILTIN(DEFINE_OTHER_SERVER) WITH_ARGS(OTHER #SC_OTHNAM N Y #SC_OXEXCP) TO_GET(#SC_DFOSRV)
FRUTIL03  0000017300000000000001     IF         COND('(#SC_DFOSRV = OK) *AND (#SC_CNOSRV *NE OK)')
FRUTIL03  0000017400000000000001     USE        BUILTIN(CONNECT_SERVER) WITH_ARGS(OTHER #SC_OTHPWD) TO_GET(#SC_CNOSRV)
FRUTIL03  0000017500000000000001     IF         COND('#SC_CNOSRV = OK')
FRUTIL03  0000017600000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(COA)
FRUTIL03  0000017700000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000017800000000000001     /* ********** USER WILL SPECIFY FILES FOR CONNECTION                  */
FRUTIL03  0000017900000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000018000000000000001     CHANGE     FIELD(#SC_OTHFIL) TO(*BLANKS)
FRUTIL03  0000018100000000000001     CHANGE     FIELD(#SC_FILCNT) TO(*ZERO)
FRUTIL03  0000018200000000000001     INZ_LIST   NAMED(#SC_CNFILO) NUM_ENTRYS(500) WITH_MODE(*ADD)
FRUTIL03  0000018300000000000001     DOWHILE    COND('#SC_FILCNT *LE 0')
FRUTIL03  0000018400000000000001     POP_UP     FIELDS((#SC_TEXT01 *L2 *P2 *NOID) (#SC_TEXT02 *L3 *P5 *NOID) (#SC_TEXT03 *L4 *P5 *NOID)) AT_LOC(2 3) WITH_SIZE(57 22) PANEL_TITL('Select Files for Other Server') BROWSELIST(#SC_CNFILO) EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL03  0000018500000000000001     SELECTLIST NAMED(#SC_CNFILO) GET_ENTRYS(*NOTNULL)
FRUTIL03  0000018600000000000001     CHANGE     FIELD(#SC_FILCNT) TO('#SC_FILCNT + 1')
FRUTIL03  0000018700000000000001     USE        BUILTIN(CONNECT_FILE) WITH_ARGS(#SC_OTHFIL OTHER)
FRUTIL03  0000018800000000000001     ENDSELECT
FRUTIL03  0000018900000000000001     ENDWHILE
FRUTIL03  0000019000000000000001     @@GOTO     COZ
FRUTIL03  0000019100000000000001COA: @@LABEL
FRUTIL03  0000019200000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000019300000000000001     /* ********** ALL FILES WILL BE USED FOR CONNECTION                   */
FRUTIL03  0000019400000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000019500000000000001     USE        BUILTIN(CONNECT_FILE) WITH_ARGS('*' OTHER)
FRUTIL03  0000019600000000000001COZ: @@LABEL
FRUTIL03  0000019700000000000001     ENDIF
FRUTIL03  0000019800000000000001     ENDIF
FRUTIL03  0000019900000000000001     ENDWHILE
FRUTIL03  0000020000000000000001     ENDROUTINE
FRUTIL03  0000020100000000000001PSB: @@LABEL
FRUTIL03  0000020200000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000020300000000000001     @@COMMENT  COMMENT('Disconnect from Servers')
FRUTIL03  0000020400000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000020500000000000001     SUBROUTINE NAME(DISCONNECT)
FRUTIL03  0000020600000000000001     @@COMMENT  COMMENT(' ')
FRUTIL03  0000020700000000000001     IF         COND('#SC_CONSRV = OK')
FRUTIL03  0000020800000000000001     USE        BUILTIN(DISCONNECT_FILE) WITH_ARGS('*' AS400)
FRUTIL03  0000020900000000000001     USE        BUILTIN(DISCONNECT_SERVER) WITH_ARGS(AS400) TO_GET(#SC_CONSRV)
FRUTIL03  0000021000000000000001     CHANGE     FIELD(#SC_CONSRV) TO(NO)
FRUTIL03  0000021100000000000001     ENDIF
FRUTIL03  0000021200000000000001     IF         COND('#SC_CNOSRV = OK')
FRUTIL03  0000021300000000000001     USE        BUILTIN(DISCONNECT_FILE) WITH_ARGS('*' OTHER)
FRUTIL03  0000021400000000000001     USE        BUILTIN(DISCONNECT_SERVER) WITH_ARGS(OTHER) TO_GET(#SC_CNOSRV)
FRUTIL03  0000021500000000000001     CHANGE     FIELD(#SC_CNOSRV) TO(NO)
FRUTIL03  0000021600000000000001     ENDIF
FRUTIL03  0000021700000000000001     ENDROUTINE
FRUTIL03  0000021800000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000021900000000000001     @@COMMENT  COMMENT('Call a Process to Run')
FRUTIL03  0000022000000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000022100000000000001     SUBROUTINE NAME(CALL_PROC)
FRUTIL03  0000022200000000000001     @@COMMENT  COMMENT(' ')
FRUTIL03  0000022300000000000001     @@IF       COND((*IF @@CANS002 *EQ N)) GOTO(CPA)
FRUTIL03  0000022400000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000022500000000000001     /* ********** USER TO SELECT THE PROCESS TO EXECUTE                   */
FRUTIL03  0000022600000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000022700000000000001     DEFINE     FIELD(#SC_DD1ST) TYPE(*CHAR) LENGTH(1) DESC('First entry?') DEFAULT(N)
FRUTIL03  0000022800000000000001     DEFINE     FIELD(#SC_PRC) REFFLD(#PROCESS) LABEL('Next Process') DESC('Next Process') INPUT_ATR(DDFL)
FRUTIL03  0000022900000000000001     DEFINE     FIELD(#SC_PRC$) REFFLD(#PROCESS) LABEL('Next Process') DESC('Next Process')
FRUTIL03  0000023000000000000001     DEFINE     FIELD(#SC_PRCD) TYPE(*CHAR) LENGTH(40) LABEL('Process Desc') DESC('Process Description')
FRUTIL03  0000023100000000000001     DEFINE     FIELD(#SC_PRCF) TYPE(*CHAR) LENGTH(10) LABEL('Filler')
FRUTIL03  0000023200000000000001     DEF_LIST   NAME(#SC_PRCLST) FIELDS((#SC_PRC) (#SC_PRCD) (#SC_PRCF)) TYPE(*WORKING) ENTRYS(2500)
FRUTIL03  0000023300000000000001     USE        BUILTIN(DROP_DD_VALUES) WITH_ARGS(DDFL) TO_GET(#SC_RETCDE)
FRUTIL03  0000023400000000000001     CHANGE     FIELD(#SC_DD1ST) TO(N)
FRUTIL03  0000023500000000000001     USE        BUILTIN(GET_PROCESS_LIST) WITH_ARGS(' ') TO_GET(#SC_PRCLST)
FRUTIL03  0000023600000000000001     SELECTLIST NAMED(#SC_PRCLST)
FRUTIL03  0000023700000000000001     IF         COND('#SC_DD1ST *EQ N')
FRUTIL03  0000023800000000000001     CHANGE     FIELD(#SC_PRC$) TO(#SC_PRC)
FRUTIL03  0000023900000000000001     CHANGE     FIELD(#SC_DD1ST) TO(Y)
FRUTIL03  0000024000000000000001     ENDIF
FRUTIL03  0000024100000000000001     USE        BUILTIN(ADD_DD_VALUES) WITH_ARGS(DDFL *DFT #SC_PRC) TO_GET(#SC_RETCDE)
FRUTIL03  0000024200000000000001     ENDSELECT
FRUTIL03  0000024300000000000001     CHANGE     FIELD(#SC_PRC) TO(#SC_PRC$)
FRUTIL03  0000024400000000000001     POP_UP     FIELDS((#SC_PRC *L3 *P2 *IN)) AT_LOC(6 22) WITH_SIZE(33 18) PANEL_TITL('Select Process to Execute') EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRUTIL03  0000024500000000000001     CALL       PROCESS(#SC_PRC) EXIT_USED(*NEXT) MENU_USED(*NEXT)
FRUTIL03  0000024600000000000001     @@GOTO     CPZ
FRUTIL03  0000024700000000000001CPA: @@LABEL
FRUTIL03  0000024800000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000024900000000000001     /* ********** SPECIFIC PROCESS DEFINED FOR EXECUTION                  */
FRUTIL03  0000025000000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000025100000000000001     CALL       PROCESS(@@CANS004) EXIT_USED(*NEXT) MENU_USED(*NEXT)
FRUTIL03  0000025200000000000001CPZ: @@LABEL
FRUTIL03  0000025300000000000001     ENDROUTINE
FRUTIL03  0000025400000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000025500000000000001     /* ********** PUT / GET X_RUN OVERRIDES FOR OTHER                     */
FRUTIL03  0000025600000000000001     /* ********** ------------------------------------------------        */
FRUTIL03  0000025700000000000001     @@IF       COND((*IF @@CANS003 *NE O) (*AND @@CANS003 *NE B)) GOTO(PSC)
FRUTIL03  0000025800000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000025900000000000001     @@COMMENT  COMMENT('Get X_RUN Defaulted Overrides')
FRUTIL03  0000026000000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000026100000000000001     SUBROUTINE NAME(GET_DFTOVR)
FRUTIL03  0000026200000000000001     CLR_LIST   NAMED(#SC_DFTOVR)
FRUTIL03  0000026300000000000001     USE        BUILTIN(TRANSFORM_FILE) WITH_ARGS(#SC_DFTOVR *FUNCTION T I Y *BLANK Y) TO_GET(#SC_RETCDE)
FRUTIL03  0000026400000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SC_DFTOVR)
FRUTIL03  0000026500000000000001     ENDROUTINE
FRUTIL03  0000026600000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000026700000000000001     @@COMMENT  COMMENT('Put X_RUN Defaulted Overrides')
FRUTIL03  0000026800000000000001     @@COMMENT  COMMENT('=======================================================')
FRUTIL03  0000026900000000000001     SUBROUTINE NAME(PUT_DFTOVR)
FRUTIL03  0000027000000000000001     CLR_LIST   NAMED(#SC_DFTOVR)
FRUTIL03  0000027100000000000001     ADD_ENTRY  TO_LIST(#SC_DFTOVR)
FRUTIL03  0000027200000000000001     USE        BUILTIN(TRANSFORM_LIST) WITH_ARGS(#SC_DFTOVR *FUNCTION T I Y *BLANK) TO_GET(#SC_RETCDE)
FRUTIL03  0000027300000000000001     ENDROUTINE
FRUTIL03  0000027400000000000001PSC: @@LABEL
FRWEBADD010000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRWEBADD010000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1999 ')
FRWEBADD010000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRWEBADD010000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRWEBADD010000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRWEBADD010000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRWEBADD010000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRWEBADD010000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRWEBADD010000000900000000000001     /* ********** ======================================================= */
FRWEBADD010000001000000000000001     /* ********** ASK FOR THE "WORD"                                      */
FRWEBADD010000001100000000000001     /* ********** ======================================================= */
FRWEBADD010000001200000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT this data entry program works with') ANSWER(@@CANS001) EXTEND('123456789012345678' 'The word you specify here is used to build messages that appear on the' 'data entry screen. You should use ONE word only, use lowercase' 'characters only and only use singular form (eg: "customer", "employee"' '"order"). Do NOT use more than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010 HELP020)
FRWEBADD010000001300000000000001     /* ********** ======================================================= */
FRWEBADD010000001400000000000001     /* ********** GET NAME OF JUST ONE PHYSICAL FILE                      */
FRWEBADD010000001500000000000001     /* ********** ======================================================= */
FRWEBADD010000001600000000000001     @@GET_FILS TO(1) PROMPT('Enter the name of the PHYSICAL file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP010 HELP020)
FRWEBADD010000001700000000000001     /* ********** ======================================================= */
FRWEBADD010000001800000000000001     /* ********** GET FIELDS OF CHOSEN FILE INTO LIST 1                   */
FRWEBADD010000001900000000000001     /* ********** ======================================================= */
FRWEBADD010000002000000000000001     @@CLR_LST  NUMBER(1)
FRWEBADD010000002100000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRWEBADD010000002200000000000001     /* ********** ======================================================= */
FRWEBADD010000002300000000000001     /* ********** GET KEYS OF CHOSEN FILE INTO LIST 2                     */
FRWEBADD010000002400000000000001     /* ********** ======================================================= */
FRWEBADD010000002500000000000001     @@CLR_LST  NUMBER(2)
FRWEBADD010000002600000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
FRWEBADD010000002700000000000001     /* ********** ======================================================= */
FRWEBADD010000002800000000000001     /* ********** GET USER TO CHOOSE FIELDS TO APPEAR ON PANEL            */
FRWEBADD010000002900000000000001     /* ********** AND PUT RESULTS INTO LIST 3                             */
FRWEBADD010000003000000000000001     /* ********** ======================================================= */
FRWEBADD010000003100000000000001     @@CLR_LST  NUMBER(3)
FRWEBADD010000003200000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(2) INTO_LSTS((3 'Fields to' 'Appear on' 'Entry Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020)
FRWEBADD010000003300000000000001     /* ********** ======================================================= */
FRWEBADD010000003400000000000001     /* ********** GET USER TO CHOOSE FIELDS TO WORK WITH IN PROGRAM       */
FRWEBADD010000003500000000000001     /* ********** AND PUT RESULTS INTO LIST 4                             */
FRWEBADD010000003600000000000001     /* ********** ======================================================= */
FRWEBADD010000003700000000000001     @@CLR_LST  NUMBER(4)
FRWEBADD010000003800000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((4 'Fields to   ' 'Work with  ' 'in Program ' *YESNO *NO)) HELPIDS(HELP010 HELP020)
FRWEBADD010000003900000000000001     /* ********** ======================================================= */
FRWEBADD010000004000000000000001     /* ********** MERGE FIELDS IN LIST 4 INTO LIST 3 AS *HIDDEN           */
FRWEBADD010000004100000000000001     /* ********** ======================================================= */
FRWEBADD010000004200000000000001     @@MRG_LSTS FROM_LSTS((4 *HIDDEN)) INTO_LST(3)
FRWEBADD010000004300000000000001     /* ********** ======================================================= */
FRWEBADD010000004400000000000001     /* ********** GENERATE THE RDML PROGRAM                               */
FRWEBADD010000004500000000000001     /* ********** ======================================================= */
FRWEBADD010000004600000000000001     @@COMMENT  'Function control options'
FRWEBADD010000004700000000000001     FUNCTION   OPTIONS(*DIRECT *WEBEVENT)
FRWEBADD010000004800000000000001     @@COMMENT  'Group and field declarations'
FRWEBADD010000004900000000000001     GROUP_BY   NAME(#PANELDATA) FIELDS((#STDNEXT *HIDDEN) (#STDRENTRY *HIDDEN) @@LST03)
FRWEBADD010000005000000000000001     IF         COND('#STDRENTRY *EQ N')
FRWEBADD010000005100000000000001     @@COMMENT  'Perform any program level validation here'
FRWEBADD010000005200000000000001     BEGINCHECK
FRWEBADD010000005300000000000001     ENDCHECK   IF_ERROR(T01)
FRWEBADD010000005400000000000001     @@COMMENT  'Attempt to insert data into the data base'
FRWEBADD010000005500000000000001     INSERT     FIELDS((#PANELDATA)) TO_FILE(@@FNAME01) VAL_ERROR(T01)
FRWEBADD010000005600000000000001     @@COMMENT  'If okay, reset fields and issue accepted message'
FRWEBADD010000005700000000000001     CHANGE     FIELD(#PANELDATA) TO(*DEFAULT)
FRWEBADD010000005800000000000001     MESSAGE    MSGID(DCU0011) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWEBADD010000005900000000000001     ELSE
FRWEBADD010000006000000000000001     @@COMMENT  'Issue initial data entry message'
FRWEBADD010000006100000000000001     MESSAGE    MSGID(DCU0010) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWEBADD010000006200000000000001     ENDIF
FRWEBADD010000006300000000000001     @@COMMENT  'Request user inputs or corrects details'
FRWEBADD010000006400000000000001T01: REQUEST    FIELDS((#PANELDATA)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRWEBADD010000006500000000000001     /* ********** ======================================================= */
FRWEBADD010000006600000000000001     /* ********** CLEAR ALL LISTS USED                                    */
FRWEBADD010000006700000000000001     /* ********** ======================================================= */
FRWEBADD010000006800000000000001D02: @@CLR_LST  NUMBER(1)
FRWEBADD010000006900000000000001     @@CLR_LST  NUMBER(2)
FRWEBADD010000007000000000000001     @@CLR_LST  NUMBER(3)
FRWEBADD010000007100000000000001     @@CLR_LST  NUMBER(4)
FRWEBENQ010000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRWEBENQ010000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1999 ')
FRWEBENQ010000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRWEBENQ010000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRWEBENQ010000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRWEBENQ010000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRWEBENQ010000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRWEBENQ010000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRWEBENQ010000000900000000000001     /* ********** ======================================================= */
FRWEBENQ010000001000000000000001     /* ********** GET NAME OF FILE TO BE SEARCHED AND DISPLAYED.          */
FRWEBENQ010000001100000000000001     /* ********** ======================================================= */
FRWEBENQ010000001200000000000001     @@GET_FILS FROM(1) TO(1) PHY_ONLY(*NO) PROMPT('Enter the name of the file to be used') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' 'Use the Help key for more details about this template.') HELPIDS(HELP010 HELP020)
FRWEBENQ010000001300000000000001     /* ********** ======================================================= */
FRWEBENQ010000001400000000000001     /* ********** GET FIELDS IN SELECTED FILE.                            */
FRWEBENQ010000001500000000000001     /* ********** ======================================================= */
FRWEBENQ010000001600000000000001     @@CLR_LST  NUMBER(1)
FRWEBENQ010000001700000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRWEBENQ010000001800000000000001     /* ********** ======================================================= */
FRWEBENQ010000001900000000000001     /* ********** GET KEY FIELDS OF SELECTED FILE & ASK FOR SEARCH KEYS   */
FRWEBENQ010000002000000000000001     /* ********** ======================================================= */
FRWEBENQ010000002100000000000001     @@CLR_LST  NUMBER(2)
FRWEBENQ010000002200000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
FRWEBENQ010000002300000000000001     @@CLR_LST  NUMBER(5)
FRWEBENQ010000002400000000000001     @@MAK_LSTS FROM_LSTS(2) INTO_LSTS((5 'Select keys' 'to use' 'for search')) HELPIDS(HELP010 HELP020)
FRWEBENQ010000002500000000000001     /* ********** ======================================================= */
FRWEBENQ010000002600000000000001     /* ********** ASK FOR FIELDS TO BE DISPLAYED IN BROWSE LIST.          */
FRWEBENQ010000002700000000000001     /* ********** ======================================================= */
FRWEBENQ010000002800000000000001     @@CLR_LST  NUMBER(3)
FRWEBENQ010000002900000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(2) INTO_LSTS((3 'Fields to' 'appear in' 'browse list' *SEQUENCE *FORCE)) HELPIDS(HELP010 HELP020)
FRWEBENQ010000003000000000000001     /* ********** ======================================================= */
FRWEBENQ010000003100000000000001     /* ********** ASK FOR NUMBER OF ENTRIES PER PAGE IN BROWSE LIST.      */
FRWEBENQ010000003200000000000001     /* ********** ======================================================= */
FRWEBENQ010000003300000000000001     @@QUESTION PROMPT('How many entries per page') ANSWER(@@NANS001) EXTEND('Enter the number of entries to be displayed in each page of the browse ' 'list. The browse list will be scrolled backward and forward this' 'number of entries.' 'The value must be a numeric value.') HELPIDS(HELP010 HELP020)
FRWEBENQ010000003400000000000001     /* ********** ======================================================= */
FRWEBENQ010000003500000000000001     /* ********** ASK FOR FIELDS TO BE DISPLAYED IN DETAIL DISPLAY.       */
FRWEBENQ010000003600000000000001     /* ********** ======================================================= */
FRWEBENQ010000003700000000000001     @@CLR_LST  NUMBER(4)
FRWEBENQ010000003800000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(2) INTO_LSTS((4 'Fields to' 'appear in' 'detail' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020)
FRWEBENQ010000003900000000000001     /* ********** ======================================================= */
FRWEBENQ010000004000000000000001     /* ********** ASK FOR UNIQUE PREFIX FOR WORK FIELDS.                  */
FRWEBENQ010000004100000000000001     /* ********** ======================================================= */
FRWEBENQ010000004200000000000001     @@QUESTION PROMPT('What is the 2 character unique prefix') ANSWER(@@CANS002) EXTEND('Enter a TWO character prefix that will be used for working fields in the' 'generated function.') LOWER(*NO) HELPIDS(HELP010 HELP020)
FRWEBENQ010000004300000000000001     /* ********** ======================================================= */
FRWEBENQ010000004400000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRWEBENQ010000004500000000000001     /* ********** ======================================================= */
FRWEBENQ010000004600000000000001     @@COMMENT  'Function control options'
FRWEBENQ010000004700000000000001     FUNCTION   OPTIONS(*WEBEVENT *DIRECT)
FRWEBENQ010000004800000000000001     @@COMMENT  ' '
FRWEBENQ010000004900000000000001     @@COMMENT  'Group and field definitions'
FRWEBENQ010000005000000000000001     GROUP_BY   NAME(#@@FNAME01) FIELDS(@@LST04)
FRWEBENQ010000005100000000000001     DEFINE     FIELD(#@@CANS002COUNT) REFFLD(#LISTCOUNT)
FRWEBENQ010000005200000000000001     DEFINE     FIELD(#@@CANS002TCOUNT) REFFLD(#LISTCOUNT)
FRWEBENQ010000005300000000000001     DEFINE     FIELD(#@@CANS002ENTRY) REFFLD(#LISTCOUNT)
FRWEBENQ010000005400000000000001     DEFINE     FIELD(#@@CANS002EEND) REFFLD(#LISTCOUNT)
FRWEBENQ010000005500000000000001     DEFINE     FIELD(#@@CANS002PAGE) REFFLD(#LISTCOUNT) DEFAULT(@@NANS001)
FRWEBENQ010000005600000000000001     DEF_LIST   NAME(#@@CANS002LIST) FIELDS(@@LST03 (#PRIFILRRN *HIDDEN)) COUNTER(#@@CANS002COUNT)
FRWEBENQ010000005700000000000001     DEF_LIST   NAME(#@@CANS002LIST2) FIELDS((#STDSELECT *HIDDEN)      @@LST03 (#PRIFILRRN *HIDDEN))
FRWEBENQ010000005800000000000001     @@COMMENT  ' '
FRWEBENQ010000005900000000000001     @@COMMENT  'Determine action to take according to STDRENTRY flag'
FRWEBENQ010000006000000000000001     CASE       OF_FIELD(#STDRENTRY)
FRWEBENQ010000006100000000000001     @@COMMENT  ' '
FRWEBENQ010000006200000000000001     @@COMMENT  'Request selection criteria'
FRWEBENQ010000006300000000000001     WHEN       VALUE_IS('= *blank')
FRWEBENQ010000006400000000000001L1 : REQUEST    FIELDS((#STDNEXT *HIDDEN) (#STDRENTRY *HIDDEN) @@LST05) EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRWEBENQ010000006500000000000001     @@COMMENT  ' '
FRWEBENQ010000006600000000000001     @@COMMENT  'Display detailed information'
FRWEBENQ010000006700000000000001     WHEN       VALUE_IS('= D')
FRWEBENQ010000006800000000000001     GET_ENTRY  NUMBER(#STDROWNUM) FROM_LIST(#@@CANS002LIST2)
FRWEBENQ010000006900000000000001     @@IF       COND((*IF @@FTYPE01 *EQ L)) GOTO(J01)
FRWEBENQ010000007000000000000001     FETCH      FIELDS((#@@FNAME01)) FROM_FILE(@@FNAME01) WITH_RRN(#PRIFILRRN)
FRWEBENQ010000007100000000000001     @@GOTO     LABEL(J02)
FRWEBENQ010000007200000000000001J01: @@LABEL
FRWEBENQ010000007300000000000001     FETCH      FIELDS((#@@FNAME01)) FROM_FILE(@@FBASP01) WITH_RRN(#PRIFILRRN)
FRWEBENQ010000007400000000000001J02: @@LABEL
FRWEBENQ010000007500000000000001     DISPLAY    FIELDS(#@@FNAME01) EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRWEBENQ010000007600000000000001     @@COMMENT  ' '
FRWEBENQ010000007700000000000001     @@COMMENT  'Build list according to selection criteria and'
FRWEBENQ010000007800000000000001     @@COMMENT  'build the first page for display'
FRWEBENQ010000007900000000000001     WHEN       VALUE_IS('= N')
FRWEBENQ010000008000000000000001     CHANGE     FIELD(#STDRENTRY) TO(M)
FRWEBENQ010000008100000000000001     CLR_LIST   NAMED(#@@CANS002LIST)
FRWEBENQ010000008200000000000001     CLR_LIST   NAMED(#@@CANS002LIST2)
FRWEBENQ010000008300000000000001     SELECT     FIELDS((#@@CANS002LIST)) FROM_FILE(@@FNAME01) WITH_KEY(@@LST05) GENERIC(*YES) RETURN_RRN(#PRIFILRRN)
FRWEBENQ010000008400000000000001     ADD_ENTRY  TO_LIST(#@@CANS002LIST)
FRWEBENQ010000008500000000000001     IF         COND('#@@CANS002COUNT <= #@@CANS002PAGE')
FRWEBENQ010000008600000000000001     ADD_ENTRY  TO_LIST(#@@CANS002LIST2)
FRWEBENQ010000008700000000000001     ENDIF
FRWEBENQ010000008800000000000001     ENDSELECT
FRWEBENQ010000008900000000000001     IF         COND('#@@CANS002COUNT > 0')
FRWEBENQ010000009000000000000001     CHANGE     FIELD(#@@CANS002TCOUNT) TO(1)
FRWEBENQ010000009100000000000001     ELSE
FRWEBENQ010000009200000000000001     CHANGE     FIELD(#@@CANS002TCOUNT) TO(0)
FRWEBENQ010000009300000000000001     MESSAGE    MSGID(DEM0046) MSGF(DC@M01)
FRWEBENQ010000009400000000000001     GOTO       LABEL(L1)
FRWEBENQ010000009500000000000001     ENDIF
FRWEBENQ010000009600000000000001     @@COMMENT  ' '
FRWEBENQ010000009700000000000001     @@COMMENT  'Build the next page for display.'
FRWEBENQ010000009800000000000001     WHEN       VALUE_IS('= M')
FRWEBENQ010000009900000000000001     CLR_LIST   NAMED(#@@CANS002LIST2)
FRWEBENQ010000010000000000000001     CHANGE     FIELD(#@@CANS002TCOUNT) TO('#@@CANS002TCOUNT + #@@CANS002PAGE')
FRWEBENQ010000010100000000000001     CHANGE     FIELD(#@@CANS002EEND) TO('(#@@CANS002TCOUNT + #@@CANS002PAGE) - 1')
FRWEBENQ010000010200000000000001     IF         COND('#@@CANS002EEND > #@@CANS002COUNT')
FRWEBENQ010000010300000000000001     CHANGE     FIELD(#@@CANS002EEND) TO(#@@CANS002COUNT)
FRWEBENQ010000010400000000000001     ENDIF
FRWEBENQ010000010500000000000001     BEGIN_LOOP USING(#@@CANS002ENTRY) FROM(#@@CANS002TCOUNT) TO(#@@CANS002EEND)
FRWEBENQ010000010600000000000001     GET_ENTRY  NUMBER(#@@CANS002ENTRY) FROM_LIST(#@@CANS002LIST)
FRWEBENQ010000010700000000000001     ADD_ENTRY  TO_LIST(#@@CANS002LIST2)
FRWEBENQ010000010800000000000001     END_LOOP
FRWEBENQ010000010900000000000001     @@COMMENT  ' '
FRWEBENQ010000011000000000000001     @@COMMENT  'Build the previous page for display.'
FRWEBENQ010000011100000000000001     WHEN       VALUE_IS('= P')
FRWEBENQ010000011200000000000001     CLR_LIST   NAMED(#@@CANS002LIST2)
FRWEBENQ010000011300000000000001     CHANGE     FIELD(#@@CANS002TCOUNT) TO('#@@CANS002TCOUNT - #@@CANS002PAGE')
FRWEBENQ010000011400000000000001     CHANGE     FIELD(#@@CANS002EEND) TO('(#@@CANS002TCOUNT + #@@CANS002PAGE) - 1')
FRWEBENQ010000011500000000000001     BEGIN_LOOP USING(#@@CANS002ENTRY) FROM(#@@CANS002TCOUNT) TO(#@@CANS002EEND)
FRWEBENQ010000011600000000000001     GET_ENTRY  NUMBER(#@@CANS002ENTRY) FROM_LIST(#@@CANS002LIST)
FRWEBENQ010000011700000000000001     ADD_ENTRY  TO_LIST(#@@CANS002LIST2)
FRWEBENQ010000011800000000000001     END_LOOP
FRWEBENQ010000011900000000000001     @@COMMENT  ' '
FRWEBENQ010000012000000000000001     ENDCASE
FRWEBENQ010000012100000000000001     @@COMMENT  ' '
FRWEBENQ010000012200000000000001     @@COMMENT  'Enable the next and previous page buttons.'
FRWEBENQ010000012300000000000001     CHANGE     FIELD(#STDMORE #STDPREV) TO(*BLANK)
FRWEBENQ010000012400000000000001     IF         COND('(#@@CANS002TCOUNT + #@@CANS002PAGE) *LE #@@CANS002COUNT')
FRWEBENQ010000012500000000000001     CHANGE     FIELD(#STDMORE) TO(Y)
FRWEBENQ010000012600000000000001     ENDIF
FRWEBENQ010000012700000000000001     IF         COND('(#@@CANS002TCOUNT - #@@CANS002PAGE) *GT 0')
FRWEBENQ010000012800000000000001     CHANGE     FIELD(#STDPREV) TO(Y)
FRWEBENQ010000012900000000000001     ENDIF
FRWEBENQ010000013000000000000001     @@COMMENT  ' '
FRWEBENQ010000013100000000000001     @@COMMENT  'Display page of data for selection.'
FRWEBENQ010000013200000000000001     REQUEST    FIELDS((#@@CANS002PAGE *HIDDEN) (#@@CANS002TCOUNT *HIDDEN) (#STDRENTRY *HIDDEN) (#STDPREV *HIDDEN) (#STDMORE *HIDDEN) (#STDSEARCH *HIDDEN) (#STDROWNUM *HIDDEN)) BROWSELIST(#@@CANS002LIST2) EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRWEBENQ010000013300000000000001     @@COMMENT  ' '
FRWEBENQ010000013400000000000001     @@COMMENT  'Dummy display for additional browse list.'
FRWEBENQ010000013500000000000001     DISPLAY    BROWSELIST(#@@CANS002LIST) EXIT_KEY(*NO) MENU_KEY(*NO) PROMPT_KEY(*NO)
FRWEBENQ010000013600000000000001     @@CLR_LST  NUMBER(01)
FRWEBENQ010000013700000000000001     @@CLR_LST  NUMBER(02)
FRWEBENQ010000013800000000000001     @@CLR_LST  NUMBER(03)
FRWEBENQ010000013900000000000001     @@CLR_LST  NUMBER(04)
FRWEBENQ010000014000000000000001     @@CLR_LST  NUMBER(05)
FRWRK01   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRWRK01   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRWRK01   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRWRK01   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRWRK01   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRWRK01   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRWRK01   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000000900000000000001     /* ********** ======================================================= */
FRWRK01   0000001000000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRWRK01   0000001100000000000001     /* ********** ======================================================= */
FRWRK01   0000001200000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer Y or N only.' 'If you specify Y, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000001300000000000001     /* ********** ======================================================= */
FRWRK01   0000001400000000000001     /* ********** ASK FOR THE "OBJECT"                                    */
FRWRK01   0000001500000000000001     /* ********** ======================================================= */
FRWRK01   0000001600000000000001     @@QUESTION PROMPT('Supply a word that describes what "object" this function will work with') ANSWER(@@CANS001) EXTEND('123456789012345' 'The word you specify here is used to build messages that appear on the' 'screen panels. You should use ONE word only, use upper and lower case' 'characters, and only use singular form (eg: "Customer", "Employee",' '"Order"). Do NOT use more than 15 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000001700000000000001     /* ********** ======================================================= */
FRWRK01   0000001800000000000001     /* ********** GET FILES TO WORK WITH                                  */
FRWRK01   0000001900000000000001     /* ********** ======================================================= */
FRWRK01   0000002000000000000001     @@GET_FILS TO(50) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the base file to be used by this application.') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' 'After choosing the base file, choose ALL OTHER RELATED FILES that' 'will be used in the DETAILED DISPLAY routine. Use the HELP key for more' 'details of this template and the type of applications it can create.') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000002100000000000001     /* ********** ======================================================= */
FRWRK01   0000002200000000000001     /* ********** ASK ABOUT AN AUTOMATIC ADD ROUTINE                      */
FRWRK01   0000002300000000000001     /* ********** ======================================================= */
FRWRK01   0000002400000000000001     @@QUESTION PROMPT('Do you want an automatically generated ADD routine ?') ANSWER(@@CANS002) EXTEND('Reply Y or N only to this question.' 'If you reply Y (yes) an automatically generated routine to add data' 'to the base file will be produced. It may not completely service' 'your requirements, but you can extend its functionality later.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000002500000000000001     /* ********** ======================================================= */
FRWRK01   0000002600000000000001     /* ********** ASK ABOUT AN AUTOMATIC DISPLAY ROUTINE                  */
FRWRK01   0000002700000000000001     /* ********** ======================================================= */
FRWRK01   0000002800000000000001     @@QUESTION PROMPT('Do you want an automatically generated DETAILED DISPLAY routine') ANSWER(@@CANS003) EXTEND('Reply Y or N only to this question.' 'If you reply Y (yes) an automatically generated routine to display' 'data from the base file AND other files chosen will be produced.' 'It may not completely satisfy your requirements, but you can change it' 'later. Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000002900000000000001     /* ********** ======================================================= */
FRWRK01   0000003000000000000001     /* ********** ASK ABOUT AN AUTOMATIC CHANGE ROUTINE                   */
FRWRK01   0000003100000000000001     /* ********** ======================================================= */
FRWRK01   0000003200000000000001     @@QUESTION PROMPT('Do you want an automatically generated EDIT / CHANGE routine') ANSWER(@@CANS004) EXTEND('Reply Y or N only to this question.' 'If you reply Y (yes) an automatically generated routine to edit data' 'in the base file will be produced. It may not completely service' 'your requirements, but you can extend its functionality later.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000003300000000000001     /* ********** ======================================================= */
FRWRK01   0000003400000000000001     /* ********** ASK ABOUT AN AUTOMATIC DELETE ROUTINE                   */
FRWRK01   0000003500000000000001     /* ********** ======================================================= */
FRWRK01   0000003600000000000001     @@QUESTION PROMPT('Do you want an automatically generated DELETE routine') ANSWER(@@CANS005) EXTEND('Reply Y or N only to this question.' 'If you reply Y (yes) an automatically generated routine to delete data' 'from the base file will be produced. It may not completely service' 'your requirements, but you can extend its functionality later.' 'Use the HELP function key for more information and examples.') VALUES(Y N) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070) LOWER(*NO)
FRWRK01   0000003700000000000001     /* ********** ======================================================= */
FRWRK01   0000003800000000000001     /* ********** ASK FOR THE ANY USER DEFINED ROUTINES                   */
FRWRK01   0000003900000000000001     /* ********** ======================================================= */
FRWRK01   0000004000000000000001     @@QUESTION PROMPT('How many USER DEFINED "work with" routines do you want ?') ANSWER(@@NANS001) EXTEND('LANSA will automatically prepare a number of standard "work with"' 'routines. However, you can cause the RDML function to be generated' 'with provision for up to 9 extra user defined "work with"' 'routines and then fill in the actual RDML code required later.' 'Use the HELP function key for more information and examples.') RANGE((0 9)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000004100000000000001     /* ********** ======================================================= */
FRWRK01   0000004200000000000001     /* ********** GET FULL DETAILS OF USER DEFINED ROUTINE                */
FRWRK01   0000004300000000000001     /* ********** ======================================================= */
FRWRK01   0000004400000000000001     @@SET_IDX  IDX_NAME(UC) TO(1)
FRWRK01   0000004500000000000001     @@SET_IDX  IDX_NAME(UO) TO(20)
FRWRK01   0000004600000000000001     @@SET_IDX  IDX_NAME(UD) TO(30)
FRWRK01   0000004700000000000001     @@SET_IDX  IDX_NAME(UR) TO(40)
FRWRK01   0000004800000000000001L01: @@CMP_IDX  IDX_NAME(UC) IDX_VALUE(@@NANS001) IF_GT(L02)
FRWRK01   0000004900000000000001     @@QUESTION PROMPT('For your user defined routine, specify the associated OPTION NUMBER') ANSWER(@@NANS0UO) EXTEND('Specify the option number that the user will have to enter beside' 'an entry in the "work with" browse list to invoke your user defined' 'routine. Use the HELP key for more information and examples') RANGE((1 99)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000005000000000000001     @@QUESTION PROMPT('For option @@NANS0UO, specify the DESCRIPTION to use') ANSWER(@@CANS0UD) EXTEND('Specify the description of option @@NANS0UO that will be shown on the' 'panel instruction line(s).' 'Use the HELP key for more information and examples') HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000005100000000000001     @@QUESTION PROMPT('For option @@NANS0UO=@@CANS0UD specify the SUBROUTINE NAME to be used') ANSWER(@@CANS0UR) EXTEND('Specify the name that should be used for the subroutine that will' 'be generated into the RDML function to handle option @@NANS0UO.' 'Use the HELP key for more information and examples') LOWER(*NO) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000005200000000000001     @@INC_IDX  IDX_NAME(UC)
FRWRK01   0000005300000000000001     @@INC_IDX  IDX_NAME(UO)
FRWRK01   0000005400000000000001     @@INC_IDX  IDX_NAME(UD)
FRWRK01   0000005500000000000001     @@INC_IDX  IDX_NAME(UR)
FRWRK01   0000005600000000000001     @@GOTO     LABEL(L01)
FRWRK01   0000005700000000000001L02: @@LABEL
FRWRK01   0000005800000000000001     /* ********** ======================================================= */
FRWRK01   0000005900000000000001     /* ********** START TO GENERATE THE RDML FUNCTION                     */
FRWRK01   0000006000000000000001     /* ********** ======================================================= */
FRWRK01   0000006100000000000001     @@COMMENT  COMMENT('Options, work variables and browse lists')
FRWRK01   0000006200000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000006300000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRWRK01   0000006400000000000001     OPEN       FILE(*ALL) USE_OPTION(*ONDEMAND)
FRWRK01   0000006500000000000001     DEFINE     FIELD(#REQUEST) TYPE(*CHAR) LENGTH(1)
FRWRK01   0000006600000000000001     DEFINE     FIELD(#PB$INST) TYPE(*CHAR) LENGTH(50) INPUT_ATR(PBIN) OUTPUT_ATR(PBIN)
FRWRK01   0000006700000000000001     DEFINE     FIELD(#PB$OPT1) TYPE(*CHAR) LENGTH(70)  INPUT_ATR(PBIN) OUTPUT_ATR(PBIN)
FRWRK01   0000006800000000000001     DEFINE     FIELD(#PB$OPT2) TYPE(*CHAR) LENGTH(70)  INPUT_ATR(PBIN) OUTPUT_ATR(PBIN)
FRWRK01   0000006900000000000001     DEFINE     FIELD(#USEOPTION) TYPE(*DEC) LENGTH(2) DECIMALS(0) LABEL('Option ........') DESC('Option number') COLHDG('Opt') EDIT_CODE(4) INPUT_ATR(PBEN) OUTPUT_ATR(PBCN)
FRWRK01   0000007000000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000007100000000000001     @@COMMENT  COMMENT('Function Mainline')
FRWRK01   0000007200000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000007300000000000001     CHANGE     FIELD(#PB$INST) TO('''Type options (and @@CANS001), press Enter.''')
FRWRK01   0000007400000000000001     CHANGE     FIELD(#PB$OPT1 #PB$OPT2) TO(*BLANKS)
FRWRK01   0000007500000000000001     @@IF       COND((*IF @@CANS002 *NE Y)) GOTO(L04)
FRWRK01   0000007600000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#PB$OPT1 '''1=Create''') TO_GET(#PB$OPT1)
FRWRK01   0000007700000000000001L04: @@LABEL
FRWRK01   0000007800000000000001     @@IF       COND((*IF @@CANS004 *NE Y)) GOTO(L08)
FRWRK01   0000007900000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#PB$OPT1 '''2=Change''') TO_GET(#PB$OPT1)
FRWRK01   0000008000000000000001L08: @@LABEL
FRWRK01   0000008100000000000001     @@IF       COND((*IF @@CANS005 *NE Y)) GOTO(L10)
FRWRK01   0000008200000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#PB$OPT1 '''4=Delete''') TO_GET(#PB$OPT1)
FRWRK01   0000008300000000000001L10: @@LABEL
FRWRK01   0000008400000000000001     @@IF       COND((*IF @@CANS003 *NE Y)) GOTO(L06)
FRWRK01   0000008500000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#PB$OPT1 '''8=Details''') TO_GET(#PB$OPT1)
FRWRK01   0000008600000000000001L06: @@LABEL
FRWRK01   0000008700000000000001     @@SET_IDX  IDX_NAME(UC) TO(1)
FRWRK01   0000008800000000000001     @@SET_IDX  IDX_NAME(UO) TO(20)
FRWRK01   0000008900000000000001     @@SET_IDX  IDX_NAME(UD) TO(30)
FRWRK01   0000009000000000000001     @@SET_IDX  IDX_NAME(UR) TO(40)
FRWRK01   0000009100000000000001L11: @@CMP_IDX  IDX_NAME(UC) IDX_VALUE(@@NANS001) IF_GT(L12)
FRWRK01   0000009200000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#PB$OPT2 '''@@NANS0UO=@@CANS0UD''') TO_GET(#PB$OPT2)
FRWRK01   0000009300000000000001     @@INC_IDX  IDX_NAME(UC)
FRWRK01   0000009400000000000001     @@INC_IDX  IDX_NAME(UO)
FRWRK01   0000009500000000000001     @@INC_IDX  IDX_NAME(UD)
FRWRK01   0000009600000000000001     @@INC_IDX  IDX_NAME(UR)
FRWRK01   0000009700000000000001     @@GOTO     LABEL(L11)
FRWRK01   0000009800000000000001L12: @@LABEL
FRWRK01   0000009900000000000001     EXECUTE    SUBROUTINE(OBJ_BROWSE) WITH_PARMS('Y')
FRWRK01   0000010000000000000001     DOWHILE    COND('#IO$KEY = RA')
FRWRK01   0000010100000000000001     CHANGE     FIELD(#REQUEST) TO(N)
FRWRK01   0000010200000000000001     SELECTLIST NAMED(#OBJLIST) GET_ENTRYS(*SELECT)
FRWRK01   0000010300000000000001     CASE       OF_FIELD(#USEOPTION)
FRWRK01   0000010400000000000001     @@IF       COND((*IF @@CANS002 *NE Y)) GOTO(L14)
FRWRK01   0000010500000000000001     WHEN       VALUE_IS('= 1')
FRWRK01   0000010600000000000001     EXECUTE    SUBROUTINE(ADD$DATA)
FRWRK01   0000010700000000000001L14: @@LABEL
FRWRK01   0000010800000000000001     @@IF       COND((*IF @@CANS003 *NE Y)) GOTO(L16)
FRWRK01   0000010900000000000001     WHEN       VALUE_IS('= 8')
FRWRK01   0000011000000000000001     EXECUTE    SUBROUTINE(WORK$DATA) WITH_PARMS('DIS')
FRWRK01   0000011100000000000001L16: @@LABEL
FRWRK01   0000011200000000000001     @@IF       COND((*IF @@CANS004 *NE Y)) GOTO(L18)
FRWRK01   0000011300000000000001     WHEN       VALUE_IS('= 2')
FRWRK01   0000011400000000000001     EXECUTE    SUBROUTINE(WORK$DATA) WITH_PARMS('CHG')
FRWRK01   0000011500000000000001L18: @@LABEL
FRWRK01   0000011600000000000001     @@IF       COND((*IF @@CANS005 *NE Y)) GOTO(L20)
FRWRK01   0000011700000000000001     WHEN       VALUE_IS('= 4')
FRWRK01   0000011800000000000001     EXECUTE    SUBROUTINE(WORK$DATA) WITH_PARMS('DLT')
FRWRK01   0000011900000000000001L20: @@LABEL
FRWRK01   0000012000000000000001     @@SET_IDX  IDX_NAME(UC) TO(1)
FRWRK01   0000012100000000000001     @@SET_IDX  IDX_NAME(UO) TO(20)
FRWRK01   0000012200000000000001     @@SET_IDX  IDX_NAME(UD) TO(30)
FRWRK01   0000012300000000000001     @@SET_IDX  IDX_NAME(UR) TO(40)
FRWRK01   0000012400000000000001L22: @@CMP_IDX  IDX_NAME(UC) IDX_VALUE(@@NANS001) IF_GT(L24)
FRWRK01   0000012500000000000001     WHEN       VALUE_IS('= @@NANS0UO')
FRWRK01   0000012600000000000001     EXECUTE    SUBROUTINE(@@CANS0UR)
FRWRK01   0000012700000000000001     @@INC_IDX  IDX_NAME(UC)
FRWRK01   0000012800000000000001     @@INC_IDX  IDX_NAME(UO)
FRWRK01   0000012900000000000001     @@INC_IDX  IDX_NAME(UD)
FRWRK01   0000013000000000000001     @@INC_IDX  IDX_NAME(UR)
FRWRK01   0000013100000000000001     @@GOTO     LABEL(L22)
FRWRK01   0000013200000000000001L24: @@LABEL
FRWRK01   0000013300000000000001     OTHERWISE
FRWRK01   0000013400000000000001     MESSAGE    MSGID(DCU0014) MSGF(DC@M01) MSGDTA(#USEOPTION)
FRWRK01   0000013500000000000001     ENDCASE
FRWRK01   0000013600000000000001     ENDSELECT
FRWRK01   0000013700000000000001     EXECUTE    SUBROUTINE(OBJ_BROWSE) WITH_PARMS(#REQUEST)
FRWRK01   0000013800000000000001     ENDWHILE
FRWRK01   0000013900000000000001     /* ********** ======================================================= */
FRWRK01   0000014000000000000001     /* ********** ALLOW USER TO CHOOSE FIELDS FOR THE BROWSE PANEL        */
FRWRK01   0000014100000000000001     /* ********** ======================================================= */
FRWRK01   0000014200000000000001     @@CLR_LST  NUMBER(1)
FRWRK01   0000014300000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRWRK01   0000014400000000000001     @@CLR_LST  NUMBER(2)
FRWRK01   0000014500000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields to' 'Display on' 'Browse Panel' *SEQUENCE)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000014600000000000001     @@CLR_LST  NUMBER(3)
FRWRK01   0000014700000000000001     @@RTV_KEYS OF_FILE(01) INTO_LST(3)
FRWRK01   0000014800000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000014900000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ_BROWSE')
FRWRK01   0000015000000000000001     @@COMMENT  COMMENT('Description....: Browse from @@FNAME01 (page at a time)')
FRWRK01   0000015100000000000001     @@COMMENT  COMMENT('Parameters ....: Name      Typ Len  Description')
FRWRK01   0000015200000000000001     @@COMMENT  COMMENT('                 ----      --- ---  -----------')
FRWRK01   0000015300000000000001     @@COMMENT  COMMENT('                 #OBJREQ  CHAR   1  Request key(s)')
FRWRK01   0000015400000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000015500000000000001     SUBROUTINE NAME(OBJ_BROWSE) PARMS((#OBJREQ *RECEIVED))
FRWRK01   0000015600000000000001     DEFINE     FIELD(#OBJREQ) TYPE(*CHAR) LENGTH(1)
FRWRK01   0000015700000000000001     DEF_LIST   NAME(#LASTREQ) FIELDS(@@LST03) TYPE(*WORKING) ENTRYS(1)
FRWRK01   0000015800000000000001     DEF_LIST   #OBJLIST  FIELDS((#USEOPTION *SELECT) (#PRIFILRRN *HIDDEN) @@LST02) PAGE_SIZE(#LISTPAGE) COUNTER(#LISTCOUNT)  TOP_ENTRY(#LISTTOP)      SCROLL_TXT(#LISTPOS)
FRWRK01   0000015900000000000001     DEF_LIST   NAME(#SAVLIST) FIELDS(@@LST02) TYPE(*WORKING) ENTRYS(1)
FRWRK01   0000016000000000000001     @@COMMENT  COMMENT('Repeat until records found and selection made')
FRWRK01   0000016100000000000001     DOUNTIL    COND('(#LISTCOUNT *GT 0) *AND (#IO$KEY *EQ RA)')
FRWRK01   0000016200000000000001     @@IF       COND((*IF @@CANS002 *NE Y)) GOTO(B14)
FRWRK01   0000016300000000000001     @@COMMENT  COMMENT('Put in first entry for add')
FRWRK01   0000016400000000000001     CHANGE     FIELD(#OBJLIST) TO(*NULL)
FRWRK01   0000016500000000000001     INZ_LIST   NAMED(#OBJLIST) NUM_ENTRYS(1) WITH_MODE(*ADD)
FRWRK01   0000016600000000000001     @@GOTO     LABEL(B16)
FRWRK01   0000016700000000000001B14: @@LABEL
FRWRK01   0000016800000000000001     @@COMMENT  COMMENT('Clear all records from the list')
FRWRK01   0000016900000000000001     CLR_LIST   NAMED(#OBJLIST)
FRWRK01   0000017000000000000001B16: @@LABEL
FRWRK01   0000017100000000000001     @@COMMENT  COMMENT('Retrieve last search made criteria')
FRWRK01   0000017200000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#LASTREQ)
FRWRK01   0000017300000000000001     @@COMMENT  COMMENT('Request details if required')
FRWRK01   0000017400000000000001     IF         COND('#OBJREQ = Y')
FRWRK01   0000017500000000000001     SET_MODE   TO(*CHANGE)
FRWRK01   0000017600000000000001     POP_UP     FIELDS(@@LST03) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(10 14) WITH_SIZE(52 11) PANEL_TITL('Request @@CANS001s to Work With') EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) CURSOR_LOC(*ATFIELD #@@LEL0301)
FRWRK01   0000017700000000000001     @@COMMENT  COMMENT('Save last search made criteria')
FRWRK01   0000017800000000000001     CLR_LIST   NAMED(#LASTREQ)
FRWRK01   0000017900000000000001     ADD_ENTRY  TO_LIST(#LASTREQ)
FRWRK01   0000018000000000000001     ENDIF
FRWRK01   0000018100000000000001     CHANGE     FIELD(#OBJREQ) TO(Y)
FRWRK01   0000018200000000000001     @@COMMENT  COMMENT('Build list of matching records')
FRWRK01   0000018300000000000001     @@COMMENT  COMMENT('and display using page at a time logic')
FRWRK01   0000018400000000000001     CHANGE     FIELD(#IO$KEY) TO(UP)
FRWRK01   0000018500000000000001     SELECT     FIELDS((#OBJLIST))       FROM_FILE(@@FNAME01) WHERE('#IO$KEY *EQ UP') WITH_KEY(@@LST03) NBR_KEYS(*COMPUTE) GENERIC(*YES) OPTIONS(*ENDWHERE) RETURN_RRN(#PRIFILRRN)
FRWRK01   0000018600000000000001     EXECUTE    SUBROUTINE(OBJDISP) WITH_PARMS('''More...''')
FRWRK01   0000018700000000000001     ADD_ENTRY  TO_LIST(#OBJLIST) WITH_MODE(*DISPLAY)
FRWRK01   0000018800000000000001     ENDSELECT
FRWRK01   0000018900000000000001     IF         '(#LISTCOUNT = 0)'
FRWRK01   0000019000000000000001     MESSAGE    'No details found matching search request'
FRWRK01   0000019100000000000001     ELSE
FRWRK01   0000019200000000000001     EXECUTE    SUBROUTINE(OBJDISP) WITH_PARMS('''Bottom''')
FRWRK01   0000019300000000000001     ENDIF
FRWRK01   0000019400000000000001     ENDUNTIL
FRWRK01   0000019500000000000001     @@COMMENT  COMMENT(' ')
FRWRK01   0000019600000000000001     ENDROUTINE
FRWRK01   0000019700000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000019800000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJDISP')
FRWRK01   0000019900000000000001     @@COMMENT  COMMENT('Description....: Browse from @@FNAME01 (page at a time)')
FRWRK01   0000020000000000000001     @@COMMENT  COMMENT('Parameters ....: Name      Typ Len  Description')
FRWRK01   0000020100000000000001     @@COMMENT  COMMENT('                 ----      --- ---  -----------')
FRWRK01   0000020200000000000001     @@COMMENT  COMMENT('                 #LISTPOS    A   7      Browse position')
FRWRK01   0000020300000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000020400000000000001     SUBROUTINE NAME(OBJDISP) PARMS((#LISTPOS))
FRWRK01   0000020500000000000001     @@COMMENT  'Display if at bottom of list or on a page boundary'
FRWRK01   0000020600000000000001     CHANGE     FIELD(#LISTREMN) TO('#LISTCOUNT / #LISTPAGE')
FRWRK01   0000020700000000000001     IF         COND('(#IO$KEY *EQ UP) *AND ((#LISTPOS *EQ ''Bottom'') *OR ((#LISTREMN *EQ 0) *AND (#LISTCOUNT *NE 0)))')
FRWRK01   0000020800000000000001     DOUNTIL    COND('(#LISTPOS *NE ''Bottom'') *OR (#IO$KEY *NE UP)')
FRWRK01   0000020900000000000001     SET_MODE   TO(*DISPLAY)
FRWRK01   0000021000000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L95)
FRWRK01   0000021100000000000001     DISPLAY    FIELDS((#PB$INST *OUTPUT *L3 *P2 *NOID) (#PB$OPT1 *OUTPUT *L5 *P4 *NOID) (#PB$OPT2 *OUTPUT *L6 *P4 *NOID)) BROWSELIST(#OBJLIST) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) USER_KEYS((*ROLLUP)) PANEL_TITL('Work with @@CANS001s')
FRWRK01   0000021200000000000001     @@GOTO     LABEL(L96)
FRWRK01   0000021300000000000001L95: @@LABEL
FRWRK01   0000021400000000000001     DISPLAY    FIELDS((#PB$INST *OUTPUT *L5 *P2 *NOID) (#PB$OPT1 *OUTPUT *L7 *P4 *NOID) (#PB$OPT2 *OUTPUT *L8 *P4 *NOID)) BROWSELIST(#OBJLIST) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) USER_KEYS((*ROLLUP)) PANEL_TITL('Work with @@CANS001s') CURSOR_LOC(*ATFIELD #@@LEL0201)
FRWRK01   0000021500000000000001L96: @@LABEL
FRWRK01   0000021600000000000001     ENDUNTIL
FRWRK01   0000021700000000000001     CHANGE     #LISTTOP '#LISTTOP + #LISTPAGE'
FRWRK01   0000021800000000000001     ENDIF
FRWRK01   0000021900000000000001     ENDROUTINE
FRWRK01   0000022000000000000001     /* ********** ======================================================= */
FRWRK01   0000022100000000000001     /* ********** GENERATE THE ADD$DATA ROUTINE (IF REQUIRED)             */
FRWRK01   0000022200000000000001     /* ********** ======================================================= */
FRWRK01   0000022300000000000001     @@IF       COND((*IF @@CANS002 *NE Y)) GOTO(A99)
FRWRK01   0000022400000000000001     /* ********** ======================================================= */
FRWRK01   0000022500000000000001     /* ********** GET FIELDS OF CHOSEN FILE INTO LIST 1                   */
FRWRK01   0000022600000000000001     /* ********** ======================================================= */
FRWRK01   0000022700000000000001     @@CLR_LST  NUMBER(1)
FRWRK01   0000022800000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRWRK01   0000022900000000000001     /* ********** ======================================================= */
FRWRK01   0000023000000000000001     /* ********** GET KEYS OF CHOSEN FILE INTO LIST 2                     */
FRWRK01   0000023100000000000001     /* ********** ======================================================= */
FRWRK01   0000023200000000000001     @@CLR_LST  NUMBER(2)
FRWRK01   0000023300000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
FRWRK01   0000023400000000000001     /* ********** ======================================================= */
FRWRK01   0000023500000000000001     /* ********** GET USER TO CHOOSE FIELDS TO APPEAR ON PANEL            */
FRWRK01   0000023600000000000001     /* ********** AND PUT RESULTS INTO LIST 3                             */
FRWRK01   0000023700000000000001     /* ********** ======================================================= */
FRWRK01   0000023800000000000001     @@CLR_LST  NUMBER(3)
FRWRK01   0000023900000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(2) INTO_LSTS((3 'Fields to' 'Appear on' 'Add Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000024000000000000001     /* ********** ======================================================= */
FRWRK01   0000024100000000000001     /* ********** GET USER TO CHOOSE FIELDS TO WORK WITH IN FUNCTION      */
FRWRK01   0000024200000000000001     /* ********** AND PUT RESULTS INTO LIST 4                             */
FRWRK01   0000024300000000000001     /* ********** ======================================================= */
FRWRK01   0000024400000000000001     @@CLR_LST  NUMBER(4)
FRWRK01   0000024500000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((4 'Fields to   ' 'Work with  ' 'in Function' *YESNO *NO)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000024600000000000001     /* ********** ======================================================= */
FRWRK01   0000024700000000000001     /* ********** MERGE FIELDS IN LIST 4 INTO LIST 3 AS *HIDDEN           */
FRWRK01   0000024800000000000001     /* ********** ======================================================= */
FRWRK01   0000024900000000000001     @@MRG_LSTS FROM_LSTS((4 *HIDDEN)) INTO_LST(3)
FRWRK01   0000025000000000000001     /* ********** ======================================================= */
FRWRK01   0000025100000000000001     /* ********** ASK HOW THE PANEL IS TO BE DESIGNED                     */
FRWRK01   0000025200000000000001     /* ********** ======================================================= */
FRWRK01   0000025300000000000001     @@QUESTION PROMPT('Design fields on the ADD panel DOWN the screen or ACROSS the screen') ANSWER(@@CANS022) EXTEND('Reply DOWN or ACROSS only.' 'If your ADD panel contains 17 (or less) fields, DOWN is the   ' 'recommended value. If your ADD panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000025400000000000001     /* ********** ======================================================= */
FRWRK01   0000025500000000000001     /* ********** GENERATE THE RDML FUNCTION                              */
FRWRK01   0000025600000000000001     /* ********** ======================================================= */
FRWRK01   0000025700000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000025800000000000001     @@COMMENT  COMMENT('Subroutine ....: ADD$DATA')
FRWRK01   0000025900000000000001     @@COMMENT  COMMENT('Description....: Add new data to @@FNAME01')
FRWRK01   0000026000000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000026100000000000001     SUBROUTINE NAME(ADD$DATA)
FRWRK01   0000026200000000000001     @@COMMENT  'Group and field declarations'
FRWRK01   0000026300000000000001     GROUP_BY   NAME(#ADD$DATA) FIELDS(@@LST03)
FRWRK01   0000026400000000000001     @@COMMENT  'Issue initial data entry message, prepare display'
FRWRK01   0000026500000000000001     MESSAGE    MSGID(DCU0010) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWRK01   0000026600000000000001     CLR_LIST   NAMED(#SAVLIST)
FRWRK01   0000026700000000000001     ADD_ENTRY  TO_LIST(#SAVLIST)
FRWRK01   0000026800000000000001     CHANGE     FIELD(#ADD$DATA) TO(*DEFAULT)
FRWRK01   0000026900000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#SAVLIST)
FRWRK01   0000027000000000000001     @@COMMENT  'Do data entry until terminated by CANCEL'
FRWRK01   0000027100000000000001     BEGIN_LOOP
FRWRK01   0000027200000000000001     @@COMMENT  'Request user inputs or corrects details'
FRWRK01   0000027300000000000001     @@IF       COND((*IF @@CANS022 *NE DOWN)) GOTO(R01)
FRWRK01   0000027400000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRWRK01   0000027500000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L91)
FRWRK01   0000027600000000000001     REQUEST    FIELDS(#ADD$DATA)  DESIGN(*DOWN) IDENTIFY(*DESC)       EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Create New @@CANS001')
FRWRK01   0000027700000000000001     @@GOTO     LABEL(R02)
FRWRK01   0000027800000000000001L91: @@LABEL
FRWRK01   0000027900000000000001     REQUEST    FIELDS((#ADD$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Create New @@CANS001') CURSOR_LOC(*ATFIELD #@@LEL0301)
FRWRK01   0000028000000000000001     @@GOTO     LABEL(R02)
FRWRK01   0000028100000000000001R01: @@IF       COND((*IF @@CANS022 *NE ACROSS)) GOTO(R02)
FRWRK01   0000028200000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L92)
FRWRK01   0000028300000000000001     REQUEST    FIELDS(#ADD$DATA)  DESIGN(*ACROSS) IDENTIFY(*LABEL)    EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Create New @@CANS001')
FRWRK01   0000028400000000000001     @@GOTO     LABEL(R02)
FRWRK01   0000028500000000000001L92: @@LABEL
FRWRK01   0000028600000000000001     REQUEST    FIELDS((#ADD$DATA)) DESIGN(*ACROSS) IDENTIFY(*LABEL) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Create New @@CANS001') CURSOR_LOC(*ATFIELD #@@LEL0301)
FRWRK01   0000028700000000000001R02: @@COMMENT  'Perform any function level validation here'
FRWRK01   0000028800000000000001     BEGINCHECK
FRWRK01   0000028900000000000001     ENDCHECK
FRWRK01   0000029000000000000001     @@COMMENT  'Attempt to insert data into the data base'
FRWRK01   0000029100000000000001     INSERT     FIELDS((#ADD$DATA)) TO_FILE(@@FNAME01)
FRWRK01   0000029200000000000001     @@COMMENT  'If okay, reset fields and issue accepted message'
FRWRK01   0000029300000000000001     CHANGE     FIELD(#ADD$DATA) TO(*DEFAULT)
FRWRK01   0000029400000000000001     CHANGE     FIELD(#REQUEST) TO(Y)
FRWRK01   0000029500000000000001     MESSAGE    MSGID(DCU0011) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWRK01   0000029600000000000001     END_LOOP
FRWRK01   0000029700000000000001     ENDROUTINE
FRWRK01   0000029800000000000001A99: @@LABEL
FRWRK01   0000029900000000000001     /* ********** ======================================================= */
FRWRK01   0000030000000000000001     /* ********** GENERATE THE WORK$DATA ROUTINE (IF REQUIRED)            */
FRWRK01   0000030100000000000001     /* ********** ======================================================= */
FRWRK01   0000030200000000000001     @@IF       COND((*IF @@CANS003 *EQ Y)) GOTO(D05)
FRWRK01   0000030300000000000001     @@IF       COND((*IF @@CANS004 *EQ Y)) GOTO(D05)
FRWRK01   0000030400000000000001     @@IF       COND((*IF @@CANS005 *EQ Y)) GOTO(D05)
FRWRK01   0000030500000000000001     @@GOTO     LABEL(D99)
FRWRK01   0000030600000000000001D05: @@LABEL
FRWRK01   0000030700000000000001     /* ********** ======================================================= */
FRWRK01   0000030800000000000001     /* ********** LOAD DETAILS OF ALL FIELDS FROM ALL FILES INTO LIST 1   */
FRWRK01   0000030900000000000001     /* ********** ======================================================= */
FRWRK01   0000031000000000000001     @@CLR_LST  NUMBER(1)
FRWRK01   0000031100000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRWRK01   0000031200000000000001D10: @@LABEL
FRWRK01   0000031300000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(D20)
FRWRK01   0000031400000000000001     @@CLR_LST  NUMBER(2)
FRWRK01   0000031500000000000001     @@RTV_FLDS FROM_FILE(CF) INTO_LST(2)
FRWRK01   0000031600000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(1) IF_GT(D15)
FRWRK01   0000031700000000000001     /* ********** FROM BASE FILE                                          */
FRWRK01   0000031800000000000001     @@MRG_LSTS FROM_LSTS((2)) INTO_LST(1)
FRWRK01   0000031900000000000001     @@GOTO     LABEL(D18)
FRWRK01   0000032000000000000001     /* ********** FROM SECONDARY FILE                                     */
FRWRK01   0000032100000000000001D15: @@MRG_LSTS FROM_LSTS((2 *OUTPUT)) INTO_LST(1)
FRWRK01   0000032200000000000001D18: @@INC_IDX  IDX_NAME(CF)
FRWRK01   0000032300000000000001     @@GOTO     LABEL(D10)
FRWRK01   0000032400000000000001D20: @@LABEL
FRWRK01   0000032500000000000001     /* ********** ======================================================= */
FRWRK01   0000032600000000000001     /* ********** ASK THE USER TO MAKE A LIST OF ALL FIELDS IN LIST 2     */
FRWRK01   0000032700000000000001     /* ********** ======================================================= */
FRWRK01   0000032800000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields for' 'Det/Chg/Dlt' 'Screen Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK01   0000032900000000000001     /* ********** ======================================================= */
FRWRK01   0000033000000000000001     /* ********** ASK THE USER HOW TO DESIGN THE PANELS                   */
FRWRK01   0000033100000000000001     /* ********** ======================================================= */
FRWRK01   0000033200000000000001     @@QUESTION PROMPT('Design fields on the detail/change/delete panel DOWN or ACROSS') ANSWER(@@CANS022) EXTEND('Reply DOWN or ACROSS only.' 'If your panel contains 17 (or less) fields, DOWN is the   ' 'recommended value. If your panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP020 HELP030 HELP040 HELP060 HELP070)
FRWRK01   0000033300000000000001     /* ********** ======================================================= */
FRWRK01   0000033400000000000001     /* ********** MERGE ALL RELATED KEY FIELDS INTO LIST 2 AS *HIDDEN     */
FRWRK01   0000033500000000000001     /* ********** ======================================================= */
FRWRK01   0000033600000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRWRK01   0000033700000000000001D30: @@LABEL
FRWRK01   0000033800000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(D40)
FRWRK01   0000033900000000000001     @@CLR_LST  NUMBER(3)
FRWRK01   0000034000000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRWRK01   0000034100000000000001     @@MRG_LSTS FROM_LSTS((3 *HIDDEN)) INTO_LST(2)
FRWRK01   0000034200000000000001     @@INC_IDX  IDX_NAME(CF)
FRWRK01   0000034300000000000001     @@GOTO     LABEL(D30)
FRWRK01   0000034400000000000001D40: @@LABEL
FRWRK01   0000034500000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000034600000000000001     @@COMMENT  COMMENT('Subroutine ....: WORK$DTA')
FRWRK01   0000034700000000000001     @@COMMENT  COMMENT('Description....: Work with detailed data from @@FNAME01')
FRWRK01   0000034800000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000034900000000000001     SUBROUTINE NAME(WORK$DATA) PARMS(#WORK$OPT)
FRWRK01   0000035000000000000001     /* ********** ======================================================= */
FRWRK01   0000035100000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRWRK01   0000035200000000000001     /* ********** ======================================================= */
FRWRK01   0000035300000000000001     @@COMMENT  'Group and field definitions'
FRWRK01   0000035400000000000001     DEFINE     FIELD(#WORK$OPT) TYPE(*CHAR) LENGTH(3)
FRWRK01   0000035500000000000001     GROUP_BY   NAME(#WORK$DATA) FIELDS(@@LST02)
FRWRK01   0000035600000000000001     @@COMMENT  COMMENT('Fetch file @@FNAME01 details ')
FRWRK01   0000035700000000000001     CHANGE     FIELD(#WORK$DATA) TO(*NAVAIL)
FRWRK01   0000035800000000000001     FETCH      FIELDS((#WORK$DATA)) FROM_FILE(@@FBASP01) WITH_RRN(#PRIFILRRN)
FRWRK01   0000035900000000000001     IF_STATUS  IS_NOT(*OKAY)
FRWRK01   0000036000000000000001     MESSAGE    MSGID(DCU0016) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWRK01   0000036100000000000001     RETURN
FRWRK01   0000036200000000000001     ENDIF
FRWRK01   0000036300000000000001     /* ********** ======================================================= */
FRWRK01   0000036400000000000001     /* ********** FETCH DETAILS FROM ALL SECONDARY FILES                  */
FRWRK01   0000036500000000000001     /* ********** ======================================================= */
FRWRK01   0000036600000000000001     @@SET_IDX  IDX_NAME(CF) TO(2)
FRWRK01   0000036700000000000001D50: @@LABEL
FRWRK01   0000036800000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@TFMX) IF_GT(D60)
FRWRK01   0000036900000000000001     @@CLR_LST  NUMBER(3)
FRWRK01   0000037000000000000001     @@RTV_RELN OF_FILE(CF) INTO_LST(3)
FRWRK01   0000037100000000000001     @@COMMENT  COMMENT('Fetch file @@FNAMECF details     ')
FRWRK01   0000037200000000000001     FETCH      FIELDS(#WORK$DATA)  FROM_FILE(@@FNAMECF) WITH_KEY(@@LST03)
FRWRK01   0000037300000000000001     @@INC_IDX  IDX_NAME(CF)
FRWRK01   0000037400000000000001     @@GOTO     LABEL(D50)
FRWRK01   0000037500000000000001D60: @@LABEL
FRWRK01   0000037600000000000001     /* ********** ======================================================= */
FRWRK01   0000037700000000000001     /* ********** SET MODE CORRECTLY                                      */
FRWRK01   0000037800000000000001     /* ********** ======================================================= */
FRWRK01   0000037900000000000001     @@COMMENT  COMMENT('Set screen to correct mode ')
FRWRK01   0000038000000000000001     CASE       OF_FIELD(#WORK$OPT)
FRWRK01   0000038100000000000001     @@IF       COND((*IF @@CANS003 *NE Y)) GOTO(D70)
FRWRK01   0000038200000000000001     WHEN       VALUE_IS('= DIS')
FRWRK01   0000038300000000000001     SET_MODE   TO(*DISPLAY)
FRWRK01   0000038400000000000001D70: @@LABEL
FRWRK01   0000038500000000000001     @@IF       COND((*IF @@CANS004 *NE Y)) GOTO(D72)
FRWRK01   0000038600000000000001     WHEN       VALUE_IS('= CHG')
FRWRK01   0000038700000000000001     SET_MODE   TO(*CHANGE)
FRWRK01   0000038800000000000001D72: @@LABEL
FRWRK01   0000038900000000000001     @@IF       COND((*IF @@CANS005 *NE Y)) GOTO(D74)
FRWRK01   0000039000000000000001     WHEN       VALUE_IS('= DLT')
FRWRK01   0000039100000000000001     SET_MODE   TO(*DELETE)
FRWRK01   0000039200000000000001     MESSAGE    MSGID(DCU0015) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWRK01   0000039300000000000001D74: @@LABEL
FRWRK01   0000039400000000000001     OTHERWISE
FRWRK01   0000039500000000000001     RETURN
FRWRK01   0000039600000000000001     ENDCASE
FRWRK01   0000039700000000000001     /* ********** ======================================================= */
FRWRK01   0000039800000000000001     /* ********** DISPLAY DETAILS                                         */
FRWRK01   0000039900000000000001     /* ********** ======================================================= */
FRWRK01   0000040000000000000001     @@COMMENT  COMMENT('Display results to the user      ')
FRWRK01   0000040100000000000001     @@IF       COND((*IF @@CANS022 *NE DOWN)) GOTO(D01)
FRWRK01   0000040200000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L93)
FRWRK01   0000040300000000000001     DISPLAY    FIELDS((#WORK$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Work with @@CANS001 Details')
FRWRK01   0000040400000000000001     @@GOTO     LABEL(D02)
FRWRK01   0000040500000000000001L93: @@LABEL
FRWRK01   0000040600000000000001     DISPLAY    FIELDS((#WORK$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Work with @@CANS001 Details') CURSOR_LOC(*ATFIELD #@@LEL0201)
FRWRK01   0000040700000000000001     @@GOTO     LABEL(D02)
FRWRK01   0000040800000000000001D01: @@IF       COND((*IF @@CANS022 *NE ACROSS)) GOTO(D02)
FRWRK01   0000040900000000000001     @@IF       COND((*IF @@CANS091 *EQ Y)) GOTO(L94)
FRWRK01   0000041000000000000001     DISPLAY    FIELDS((#WORK$DATA)) DESIGN(*ACROSS) IDENTIFY(*LABEL) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Work with @@CANS001 Details')
FRWRK01   0000041100000000000001     @@GOTO     LABEL(D02)
FRWRK01   0000041200000000000001L94: @@LABEL
FRWRK01   0000041300000000000001     DISPLAY    FIELDS((#WORK$DATA)) DESIGN(*ACROSS) IDENTIFY(*LABEL) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Work with @@CANS001 Details') CURSOR_LOC(*ATFIELD #@@LEL0201)
FRWRK01   0000041400000000000001D02: @@IF       COND((*IF @@CANS004 *NE Y)) GOTO(D80)
FRWRK01   0000041500000000000001     IF_MODE    *CHANGE
FRWRK01   0000041600000000000001     UPDATE     FIELDS((#WORK$DATA)) IN_FILE(@@FBASP01)
FRWRK01   0000041700000000000001     CHANGE     FIELD(#REQUEST) TO(Y)
FRWRK01   0000041800000000000001     ENDIF
FRWRK01   0000041900000000000001D80: @@LABEL
FRWRK01   0000042000000000000001     @@IF       COND((*IF @@CANS005 *NE Y)) GOTO(D82)
FRWRK01   0000042100000000000001     IF_MODE    *DELETE
FRWRK01   0000042200000000000001     DELETE     FROM_FILE(@@FBASP01)
FRWRK01   0000042300000000000001     CHANGE     FIELD(#REQUEST) TO(Y)
FRWRK01   0000042400000000000001     ENDIF
FRWRK01   0000042500000000000001D82: @@LABEL
FRWRK01   0000042600000000000001     ENDROUTINE
FRWRK01   0000042700000000000001D99: @@LABEL
FRWRK01   0000042800000000000001     /* ********** ======================================================= */
FRWRK01   0000042900000000000001     /* ********** GENERATE ALL REQUIRED USER DEFINED ROUTINES             */
FRWRK01   0000043000000000000001     /* ********** ======================================================= */
FRWRK01   0000043100000000000001     @@SET_IDX  IDX_NAME(UC) TO(1)
FRWRK01   0000043200000000000001     @@SET_IDX  IDX_NAME(UO) TO(20)
FRWRK01   0000043300000000000001     @@SET_IDX  IDX_NAME(UD) TO(30)
FRWRK01   0000043400000000000001     @@SET_IDX  IDX_NAME(UR) TO(40)
FRWRK01   0000043500000000000001U02: @@CMP_IDX  IDX_NAME(UC) IDX_VALUE(@@NANS001) IF_GT(U99)
FRWRK01   0000043600000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000043700000000000001     @@COMMENT  COMMENT('Subroutine ....: @@CANS0UR')
FRWRK01   0000043800000000000001     @@COMMENT  COMMENT('Description....: Handle "@@NANS0UO = @@CANS0UD" request')
FRWRK01   0000043900000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK01   0000044000000000000001     SUBROUTINE NAME(@@CANS0UR)
FRWRK01   0000044100000000000001     MESSAGE    MSGTXT('Option @@NANS0UO=@@CANS0UD subroutine @@CANS0UR invoked') TYPE(*WINDOW)
FRWRK01   0000044200000000000001     ENDROUTINE
FRWRK01   0000044300000000000001     @@INC_IDX  IDX_NAME(UC)
FRWRK01   0000044400000000000001     @@INC_IDX  IDX_NAME(UO)
FRWRK01   0000044500000000000001     @@INC_IDX  IDX_NAME(UD)
FRWRK01   0000044600000000000001     @@INC_IDX  IDX_NAME(UR)
FRWRK01   0000044700000000000001     @@GOTO     LABEL(U02)
FRWRK01   0000044800000000000001U99: @@LABEL
FRWRK01   0000044900000000000001     /* ********** ------------------------------------------------        */
FRWRK01   0000045000000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
FRWRK01   0000045100000000000001     /* ********** ------------------------------------------------        */
FRWRK01   0000045200000000000001     @@CLR_LST  NUMBER(1)
FRWRK01   0000045300000000000001     @@CLR_LST  NUMBER(2)
FRWRK01   0000045400000000000001     @@CLR_LST  NUMBER(3)
FRWRK01   0000045500000000000001     @@CLR_LST  NUMBER(4)
FRWRK01   0000045600000000000001     @@CLR_LST  NUMBER(5)
FRWRK02   0000000100000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000000200000000000001     @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
FRWRK02   0000000300000000000001     @@COMMENT  COMMENT('Process .......: @@PROCESS ')
FRWRK02   0000000400000000000001     @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
FRWRK02   0000000500000000000001     @@COMMENT  COMMENT('Created by ....: @@USER    ')
FRWRK02   0000000600000000000001     @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
FRWRK02   0000000700000000000001     @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
FRWRK02   0000000800000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000000900000000000001     /* ********** ======================================================= */
FRWRK02   0000001000000000000001     /* ********** ASK IF FUNCTION IS TO BE RUN UNDER "ACTION BAR"         */
FRWRK02   0000001100000000000001     /* ********** ======================================================= */
FRWRK02   0000001200000000000001     @@QUESTION PROMPT('Do you want this function to be part of an ACTION-BAR style process?') ANSWER(@@CANS091) EXTEND('Answer YES or NO only.' 'If you specify YES, the cursor will be placed on the first field of the' 'screen(s) rather than in the action bar area.') LOWER(*NO) VALUES(YES NO) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000001300000000000001     /* ********** ======================================================= */
FRWRK02   0000001400000000000001     /* ********** ASK FOR THE "OBJECT"                                    */
FRWRK02   0000001500000000000001     /* ********** ======================================================= */
FRWRK02   0000001600000000000001     @@QUESTION PROMPT('Supply a word that describes what "object" this function will work with') ANSWER(@@CANS001) EXTEND('123456789012345' 'The word you specify here is used to build messages that appear on the' 'screen panels. You should use ONE word only, use upper and lower case' 'characters, and only use singular form (eg: "Customer", "Employee",' '"Order"). Do NOT use more than 15 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000001700000000000001     /* ********** ======================================================= */
FRWRK02   0000001800000000000001     /* ********** ASK ABOUT ABOUT MORE VIEWS OF THE SAME FILE             */
FRWRK02   0000001900000000000001     /* ********** ======================================================= */
FRWRK02   0000002000000000000001     @@SET_IDX  IDX_NAME(AF) TO(0)
FRWRK02   0000002100000000000001     @@CLR_LST  NUMBER(71)
FRWRK02   0000002200000000000001     @@CLR_LST  NUMBER(72)
FRWRK02   0000002300000000000001     @@CLR_LST  NUMBER(73)
FRWRK02   0000002400000000000001     @@CLR_LST  NUMBER(74)
FRWRK02   0000002500000000000001     @@CLR_LST  NUMBER(75)
FRWRK02   0000002600000000000001     @@CLR_LST  NUMBER(81)
FRWRK02   0000002700000000000001     /* ********** FILE NAME INPUT LOOP                                    */
FRWRK02   0000002800000000000001AFA: @@LABEL
FRWRK02   0000002900000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(5) IF_EQ(AFZ)
FRWRK02   0000003000000000000001     @@INC_IDX  IDX_NAME(AF)
FRWRK02   0000003100000000000001AFE: @@LABEL
FRWRK02   0000003200000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(1) IF_EQ(AF1)
FRWRK02   0000003300000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(2) IF_EQ(AF2)
FRWRK02   0000003400000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(3) IF_EQ(AF3)
FRWRK02   0000003500000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(4) IF_EQ(AF4)
FRWRK02   0000003600000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(5) IF_EQ(AF5)
FRWRK02   0000003700000000000001     @@GOTO     LABEL(AFZ)
FRWRK02   0000003800000000000001     /* ********** FILE NUMBER 1                                           */
FRWRK02   0000003900000000000001AF1: @@LABEL
FRWRK02   0000004000000000000001     @@GET_FILS FROM(1) TO(1) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the 1st search file to be used by this application.') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.') HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000004100000000000001     @@CLR_LST  NUMBER(71)
FRWRK02   0000004200000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(71)
FRWRK02   0000004300000000000001     @@SET_IDX  IDX_NAME(WK) TO(@@LNE71)
FRWRK02   0000004400000000000001     @@CMP_IDX  IDX_NAME(WK) IDX_VALUE(1) IF_LT(AF1)
FRWRK02   0000004500000000000001     @@MRG_LSTS FROM_LSTS((71)) INTO_LST(81)
FRWRK02   0000004600000000000001     @@QUESTION PROMPT('What should selecting @@CANS001s via @@FNAME01 be described as ?') ANSWER(@@CANS071) EXTEND('123456789012345678901234567890' 'To identify the selection of @@CANS001s by using the file @@FNAME01 on ' 'generated screen panels, please provide a brief description that uses' 'upper and lowercase characters and does not contain any quote ('') symbols' 'For example : Select by Name, Select by Department, Select by Customer.') LOWER(*YES) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000004700000000000001     @@GOTO     LABEL(AFN)
FRWRK02   0000004800000000000001     /* ********** FILE NUMBER 2                                           */
FRWRK02   0000004900000000000001AF2: @@LABEL
FRWRK02   0000005000000000000001     @@GET_FILS FROM(2) TO(2) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the 2nd search file to be used by this application.') EXTEND('The file name you specify here may be a physical or logical file, but it' 'MUST share the same underlying data set as ALL other files already chosen.') HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000005100000000000001     @@CLR_LST  NUMBER(72)
FRWRK02   0000005200000000000001     @@RTV_KEYS OF_FILE(2) INTO_LST(72)
FRWRK02   0000005300000000000001     @@SET_IDX  IDX_NAME(WK) TO(@@LNE72)
FRWRK02   0000005400000000000001     @@CMP_IDX  IDX_NAME(WK) IDX_VALUE(1) IF_LT(AF2)
FRWRK02   0000005500000000000001     @@MRG_LSTS FROM_LSTS((72)) INTO_LST(81)
FRWRK02   0000005600000000000001     @@QUESTION PROMPT('What should selecting @@CANS001s via @@FNAME02 be described as ?') ANSWER(@@CANS072) EXTEND('123456789012345678901234567890' 'To identify the selection of @@CANS001s by using the file @@FNAME02 on ' 'generated screen panels, please provide a brief desrcription that uses' 'upper and lowercase characters and does not contain any quote ('') symbols' 'For example : Select by Name, Select by Department, Select by Customer.') LOWER(*YES) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000005700000000000001     @@GOTO     LABEL(AFN)
FRWRK02   0000005800000000000001     /* ********** FILE NUMBER 3                                           */
FRWRK02   0000005900000000000001AF3: @@LABEL
FRWRK02   0000006000000000000001     @@GET_FILS FROM(3) TO(3) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the 3rd search file to be used by this application.') EXTEND('The file name you specify here may be a physical or logical file, but it' 'MUST share the same underlying data set as ALL other files already chosen.') HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000006100000000000001     @@CLR_LST  NUMBER(73)
FRWRK02   0000006200000000000001     @@RTV_KEYS OF_FILE(3) INTO_LST(73)
FRWRK02   0000006300000000000001     @@SET_IDX  IDX_NAME(WK) TO(@@LNE73)
FRWRK02   0000006400000000000001     @@CMP_IDX  IDX_NAME(WK) IDX_VALUE(1) IF_LT(AF3)
FRWRK02   0000006500000000000001     @@MRG_LSTS FROM_LSTS((73)) INTO_LST(81)
FRWRK02   0000006600000000000001     @@QUESTION PROMPT('What should selecting @@CANS001s via @@FNAME03 be described as ?') ANSWER(@@CANS073) EXTEND('123456789012345678901234567890' 'To identify the selection of @@CANS001s by using the file @@FNAME03 on ' 'generated screen panels, please provide a brief desrcription that uses' 'upper and lowercase characters and does not contain any quote ('') symbols' 'For example : Select by Name, Select by Department, Select by Customer.') LOWER(*YES) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000006700000000000001     @@GOTO     LABEL(AFN)
FRWRK02   0000006800000000000001     /* ********** FILE NUMBER 4                                           */
FRWRK02   0000006900000000000001AF4: @@LABEL
FRWRK02   0000007000000000000001     @@GET_FILS FROM(4) TO(4) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the 4th search file to be used by this application.') EXTEND('The file name you specify here may be a physical or logical file, but it' 'MUST share the same underlying data set as ALL other files already chosen.') HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000007100000000000001     @@CLR_LST  NUMBER(74)
FRWRK02   0000007200000000000001     @@RTV_KEYS OF_FILE(4) INTO_LST(74)
FRWRK02   0000007300000000000001     @@SET_IDX  IDX_NAME(WK) TO(@@LNE74)
FRWRK02   0000007400000000000001     @@CMP_IDX  IDX_NAME(WK) IDX_VALUE(1) IF_LT(AF4)
FRWRK02   0000007500000000000001     @@MRG_LSTS FROM_LSTS((74)) INTO_LST(81)
FRWRK02   0000007600000000000001     @@QUESTION PROMPT('What should selecting @@CANS001s via @@FNAME04 be described as ?') ANSWER(@@CANS074) EXTEND('123456789012345678901234567890' 'To identify the selection of @@CANS001s by using the file @@FNAME04 on ' 'generated screen panels, please provide a brief desrcription that uses' 'upper and lowercase characters and does not contain any quote ('') symbols' 'For example : Select by Name, Select by Department, Select by Customer.') LOWER(*YES)  HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000007700000000000001     @@GOTO     LABEL(AFN)
FRWRK02   0000007800000000000001     /* ********** FILE NUMBER 5                                           */
FRWRK02   0000007900000000000001AF5: @@LABEL
FRWRK02   0000008000000000000001     @@GET_FILS FROM(5) TO(5) PHY_ONLY(*NO) SGL_ONLY(*YES) PROMPT('Enter the name of the 5th search file to be used by this application.') EXTEND('The file name you specify here may be a physical or logical file, but it' 'MUST share the same underlying data set as ALL other files already chosen.') HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000008100000000000001     @@CLR_LST  NUMBER(75)
FRWRK02   0000008200000000000001     @@RTV_KEYS OF_FILE(5) INTO_LST(75)
FRWRK02   0000008300000000000001     @@SET_IDX  IDX_NAME(WK) TO(@@LNE75)
FRWRK02   0000008400000000000001     @@CMP_IDX  IDX_NAME(WK) IDX_VALUE(1) IF_LT(AF5)
FRWRK02   0000008500000000000001     @@MRG_LSTS FROM_LSTS((75)) INTO_LST(81)
FRWRK02   0000008600000000000001     @@QUESTION PROMPT('What should selecting @@CANS001s via @@FNAME05 be described as ?') ANSWER(@@CANS075) EXTEND('123456789012345678901234567890' 'To identify the selection of @@CANS001s by using the file @@FNAME05 on ' 'generated screen panels, please provide a brief desrcription that uses' 'upper and lowercase characters and does not contain any quote ('') symbols' 'For example : Select by Name, Select by Department, Select by Customer.') LOWER(*YES) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000008700000000000001     @@GOTO     LABEL(AFN)
FRWRK02   0000008800000000000001     /* ********** NEXT FILE                                               */
FRWRK02   0000008900000000000001AFN: @@LABEL
FRWRK02   0000009000000000000001     @@QUESTION PROMPT('Do you want to use another view of the same underlying physical data ?') ANSWER(@@CANS007) EXTEND('Reply YES or NO only to this question.' 'This template has been specially constructed to support "work withs" by' 'multiple logical views of the same set of underlying physical data.' 'In fact, you MUST choose at least 2 views of the same data.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(YES NO) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000009100000000000001     @@IF       COND((*IF @@CANS007 *NE YES)) GOTO(AFZ)
FRWRK02   0000009200000000000001     @@GOTO     LABEL(AFA)
FRWRK02   0000009300000000000001     /* ********** END OF FILE INPUTTING LOOP                              */
FRWRK02   0000009400000000000001AFZ: @@LABEL
FRWRK02   0000009500000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(2) IF_LT(AFE)
FRWRK02   0000009600000000000001     /* ********** ======================================================= */
FRWRK02   0000009700000000000001     /* ********** ASK ABOUT AN AUTOMATIC ADD ROUTINE                      */
FRWRK02   0000009800000000000001     /* ********** ======================================================= */
FRWRK02   0000009900000000000001     @@QUESTION PROMPT('Do you want an automatically generated ADD routine ?') ANSWER(@@CANS002) EXTEND('Reply YES or NO only to this question.' 'If you reply YES (yes) an automatically generated routine to add data' 'to the base file will be produced. It may not completely service' 'your requirements, but you can extend its functionality later.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(YES NO) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000010000000000000001     /* ********** ======================================================= */
FRWRK02   0000010100000000000001     /* ********** ASK ABOUT AN AUTOMATIC DISPLAY ROUTINE                  */
FRWRK02   0000010200000000000001     /* ********** ======================================================= */
FRWRK02   0000010300000000000001     @@QUESTION PROMPT('Do you want an automatically generated DETAILED DISPLAY routine') ANSWER(@@CANS003) EXTEND('Reply YES or NO only to this question.' 'If you reply YES an automatically generated routine to display' 'data from the base file AND other files chosen will be produced.' 'It may not completely satisfy your requirements, but you can change it' 'later. Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(YES NO) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000010400000000000001     /* ********** ======================================================= */
FRWRK02   0000010500000000000001     /* ********** ASK ABOUT AN AUTOMATIC CHANGE ROUTINE                   */
FRWRK02   0000010600000000000001     /* ********** ======================================================= */
FRWRK02   0000010700000000000001     @@QUESTION PROMPT('Do you want an automatically generated EDIT / CHANGE routine') ANSWER(@@CANS004) EXTEND('Reply YES or NO only to this question.' 'If you reply YES an automatically generated routine to edit data' 'in the base file will be produced. It may not completely service' 'your requirements, but you can extend its functionality later.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(YES NO) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000010800000000000001     /* ********** ======================================================= */
FRWRK02   0000010900000000000001     /* ********** ASK ABOUT AN AUTOMATIC DELETE ROUTINE                   */
FRWRK02   0000011000000000000001     /* ********** ======================================================= */
FRWRK02   0000011100000000000001     @@QUESTION PROMPT('Do you want an automatically generated DELETE routine') ANSWER(@@CANS005) EXTEND('Reply YES or NO only to this question.' 'If you reply YES an automatically generated routine to delete data' 'from the base file will be produced. It may not completely service' 'your requirements, but you can extend its functionality later.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(YES NO) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000011200000000000001     /* ********** ======================================================= */
FRWRK02   0000011300000000000001     /* ********** ASK FOR THE ANY USER DEFINED ROUTINES                   */
FRWRK02   0000011400000000000001     /* ********** ======================================================= */
FRWRK02   0000011500000000000001     @@QUESTION PROMPT('How many USER DEFINED "work with" routines do you want ?') ANSWER(@@NANS001) EXTEND('LANSA will automatically prepare a number of standard "work with"' 'routines. However, you can cause the RDML function to be generated' 'with provision for up to 9 extra user defined "work with"' 'routines and then fill in the actual RDML code required later.' 'Use the HELP function key for more information and examples.') RANGE((0 9)) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000011600000000000001     /* ********** ======================================================= */
FRWRK02   0000011700000000000001     /* ********** GET FULL DETAILS OF USER DEFINED ROUTINE                */
FRWRK02   0000011800000000000001     /* ********** ======================================================= */
FRWRK02   0000011900000000000001     @@SET_IDX  IDX_NAME(UC) TO(1)
FRWRK02   0000012000000000000001     @@SET_IDX  IDX_NAME(UO) TO(20)
FRWRK02   0000012100000000000001     @@SET_IDX  IDX_NAME(UD) TO(30)
FRWRK02   0000012200000000000001     @@SET_IDX  IDX_NAME(UR) TO(40)
FRWRK02   0000012300000000000001L01: @@CMP_IDX  IDX_NAME(UC) IDX_VALUE(@@NANS001) IF_GT(L02)
FRWRK02   0000012400000000000001     @@QUESTION PROMPT('For your user defined routine, specify the associated OPTION NUMBER') ANSWER(@@NANS0UO) EXTEND('Specify the option number that the user will have to enter beside' 'an entry in the "work with" browse list to invoke your user defined' 'routine. Use the HELP key for more information and examples') RANGE((1 99)) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000012500000000000001     @@QUESTION PROMPT('For option @@NANS0UO, specify the DESCRIPTION to use') ANSWER(@@CANS0UD) EXTEND('Specify the description of option @@NANS0UO that will be shown on the' 'panel instruction line(s).' 'Use the HELP key for more information and examples') HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000012600000000000001     @@QUESTION PROMPT('For option @@NANS0UO=@@CANS0UD specify the SUBROUTINE NAME to be used') ANSWER(@@CANS0UR) EXTEND('Specify the name that should be used for the subroutine that will' 'be generated into the RDML function to handle option @@NANS0UO.' 'Use the HELP key for more information and examples') LOWER(*NO) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000012700000000000001     @@INC_IDX  IDX_NAME(UC)
FRWRK02   0000012800000000000001     @@INC_IDX  IDX_NAME(UO)
FRWRK02   0000012900000000000001     @@INC_IDX  IDX_NAME(UD)
FRWRK02   0000013000000000000001     @@INC_IDX  IDX_NAME(UR)
FRWRK02   0000013100000000000001     @@GOTO     LABEL(L01)
FRWRK02   0000013200000000000001L02: @@LABEL
FRWRK02   0000013300000000000001     /* ********** ======================================================= */
FRWRK02   0000013400000000000001     /* ********** START TO GENERATE THE RDML FUNCTION                     */
FRWRK02   0000013500000000000001     /* ********** ======================================================= */
FRWRK02   0000013600000000000001     @@COMMENT  COMMENT('Options, work variables and browse lists')
FRWRK02   0000013700000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000013800000000000001     FUNCTION   OPTIONS(*NOMESSAGES *DEFERWRITE *DIRECT)
FRWRK02   0000013900000000000001     OPEN       FILE(*ALL) USE_OPTION(*ONDEMAND)
FRWRK02   0000014000000000000001     DEFINE     FIELD(#REQUEST) TYPE(*CHAR) LENGTH(1)
FRWRK02   0000014100000000000001     DEFINE     FIELD(#PB$INST) TYPE(*CHAR) LENGTH(50) INPUT_ATR(PBIN) OUTPUT_ATR(PBIN)
FRWRK02   0000014200000000000001     CHANGE     FIELD(#PB$INST) TO('''Type options, press Enter.''')
FRWRK02   0000014300000000000001     DEFINE     FIELD(#PB$OPT1) TYPE(*CHAR) LENGTH(70)  INPUT_ATR(PBIN) OUTPUT_ATR(PBIN)
FRWRK02   0000014400000000000001     DEFINE     FIELD(#PB$OPT2) TYPE(*CHAR) LENGTH(70)  INPUT_ATR(PBIN) OUTPUT_ATR(PBIN)
FRWRK02   0000014500000000000001     CHANGE     FIELD(#PB$OPT1 #PB$OPT2) TO(*BLANKS)
FRWRK02   0000014600000000000001     DEFINE     FIELD(#USEOPTION) TYPE(*DEC) LENGTH(2) DECIMALS(0) LABEL('Option ........') DESC('Option number') COLHDG('Opt') EDIT_CODE(4) INPUT_ATR(PBEN) OUTPUT_ATR(PBCN)
FRWRK02   0000014700000000000001     DEFINE     FIELD(#OBJ$OPTNO) REFFLD(#USEOPTION) COLHDG(' ')
FRWRK02   0000014800000000000001     DEFINE     FIELD(#OBJ$OPTDE) TYPE(*CHAR) LENGTH(20) COLHDG(' ')
FRWRK02   0000014900000000000001     DEFINE     FIELD(#OBJ$OPTSE) REFFLD(#LISTENTRY)
FRWRK02   0000015000000000000001     DEF_LIST   NAME(#OBJ$OPTLS) FIELDS((#OBJ$OPTNO *OUTPUT) (#OBJ$OPTDE *OUTPUT)) ENTRYS(15) SEL_ENTRY(#OBJ$OPTSE)
FRWRK02   0000015100000000000001     CLR_LIST   NAMED(#OBJ$OPTLS)
FRWRK02   0000015200000000000001     DEFINE     FIELD(#FS$INST) TYPE(*CHAR) LENGTH(30) INPUT_ATR(PBIN) OUTPUT_ATR(PBIN)
FRWRK02   0000015300000000000001     CHANGE     FIELD(#FS$INST) TO('''Use cursor to select ....''')
FRWRK02   0000015400000000000001     DEFINE     FIELD(#FS$ROW) TYPE(*DEC) LENGTH(3) DECIMALS(0) DEFAULT(8)
FRWRK02   0000015500000000000001     DEFINE     FIELD(#FS$SEL) REFFLD(#FS$ROW)
FRWRK02   0000015600000000000001     DEFINE     FIELD(#FS$COL) TYPE(*DEC) LENGTH(3) DECIMALS(0) DEFAULT(8)
FRWRK02   0000015700000000000001     /* ********** DEFINE ALL INPUT AREAS FOR THE FILE SELECTION POP_UP    */
FRWRK02   0000015800000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRWRK02   0000015900000000000001     @@SET_IDX  IDX_NAME(WB) TO(71)
FRWRK02   0000016000000000000001AAL: @@LABEL
FRWRK02   0000016100000000000001     @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(AF) IF_GT(AAE)
FRWRK02   0000016200000000000001     DEFINE     FIELD(#FS$OPT@@INDEXWA) TYPE(*CHAR) LENGTH(30)
FRWRK02   0000016300000000000001     CHANGE     FIELD(#FS$OPT@@INDEXWA) TO('''@@CANS0WB''')
FRWRK02   0000016400000000000001     @@INC_IDX  IDX_NAME(WA)
FRWRK02   0000016500000000000001     @@INC_IDX  IDX_NAME(WB)
FRWRK02   0000016600000000000001     @@GOTO     LABEL(AAL)
FRWRK02   0000016700000000000001AAE: @@LABEL
FRWRK02   0000016800000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000016900000000000001     @@COMMENT  COMMENT('Function Mainline')
FRWRK02   0000017000000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000017100000000000001L04: @@LABEL
FRWRK02   0000017200000000000001     @@IF       COND((*IF @@CANS004 *NE YES)) GOTO(L08)
FRWRK02   0000017300000000000001     EXECUTE    SUBROUTINE(OBJ$OPTION) WITH_PARMS(2 '''Change''' #PB$OPT1)
FRWRK02   0000017400000000000001L08: @@LABEL
FRWRK02   0000017500000000000001     @@IF       COND((*IF @@CANS005 *NE YES)) GOTO(L10)
FRWRK02   0000017600000000000001     EXECUTE    SUBROUTINE(OBJ$OPTION) WITH_PARMS(4 '''Delete''' #PB$OPT1)
FRWRK02   0000017700000000000001L10: @@LABEL
FRWRK02   0000017800000000000001     @@IF       COND((*IF @@CANS003 *NE YES)) GOTO(L06)
FRWRK02   0000017900000000000001     EXECUTE    SUBROUTINE(OBJ$OPTION) WITH_PARMS(8 '''Details''' #PB$OPT1)
FRWRK02   0000018000000000000001L06: @@LABEL
FRWRK02   0000018100000000000001     @@SET_IDX  IDX_NAME(UC) TO(1)
FRWRK02   0000018200000000000001     @@SET_IDX  IDX_NAME(UO) TO(20)
FRWRK02   0000018300000000000001     @@SET_IDX  IDX_NAME(UD) TO(30)
FRWRK02   0000018400000000000001     @@SET_IDX  IDX_NAME(UR) TO(40)
FRWRK02   0000018500000000000001L11: @@CMP_IDX  IDX_NAME(UC) IDX_VALUE(@@NANS001) IF_GT(L12)
FRWRK02   0000018600000000000001     EXECUTE    SUBROUTINE(OBJ$OPTION) WITH_PARMS(@@NANS0UO '''@@CANS0UD''' #PB$OPT2)
FRWRK02   0000018700000000000001     @@INC_IDX  IDX_NAME(UC)
FRWRK02   0000018800000000000001     @@INC_IDX  IDX_NAME(UO)
FRWRK02   0000018900000000000001     @@INC_IDX  IDX_NAME(UD)
FRWRK02   0000019000000000000001     @@INC_IDX  IDX_NAME(UR)
FRWRK02   0000019100000000000001     @@GOTO     LABEL(L11)
FRWRK02   0000019200000000000001L12: @@LABEL
FRWRK02   0000019300000000000001     EXECUTE    SUBROUTINE(OBJ_BROWSE) WITH_PARMS('Y')
FRWRK02   0000019400000000000001     DOWHILE    COND('#IO$KEY = RA')
FRWRK02   0000019500000000000001     CHANGE     FIELD(#REQUEST) TO(N)
FRWRK02   0000019600000000000001     SELECTLIST NAMED(#OBJ_LIST)
FRWRK02   0000019700000000000001     @@COMMENT  COMMENT('Handle option input by "point and click"')
FRWRK02   0000019800000000000001     IF         COND('(#USEOPTION = 0) *AND (#LISTENTRY = #ENTRYNUM)')
FRWRK02   0000019900000000000001     EXECUTE    SUBROUTINE(OBJ$SELECT)
FRWRK02   0000020000000000000001     ENDIF
FRWRK02   0000020100000000000001     @@COMMENT  COMMENT('Only process entries with non-blank values')
FRWRK02   0000020200000000000001     IF         COND('#USEOPTION *NE 0')
FRWRK02   0000020300000000000001     CHANGE     FIELD(#LISTENTRY) TO(*NULL)
FRWRK02   0000020400000000000001     CASE       OF_FIELD(#USEOPTION)
FRWRK02   0000020500000000000001L14: @@LABEL
FRWRK02   0000020600000000000001     @@IF       COND((*IF @@CANS003 *NE YES)) GOTO(L16)
FRWRK02   0000020700000000000001     WHEN       VALUE_IS('= 8')
FRWRK02   0000020800000000000001     EXECUTE    SUBROUTINE(OBJ_WORK) WITH_PARMS('DIS')
FRWRK02   0000020900000000000001L16: @@LABEL
FRWRK02   0000021000000000000001     @@IF       COND((*IF @@CANS004 *NE YES)) GOTO(L18)
FRWRK02   0000021100000000000001     WHEN       VALUE_IS('= 2')
FRWRK02   0000021200000000000001     EXECUTE    SUBROUTINE(OBJ_WORK) WITH_PARMS('CHG')
FRWRK02   0000021300000000000001L18: @@LABEL
FRWRK02   0000021400000000000001     @@IF       COND((*IF @@CANS005 *NE YES)) GOTO(L20)
FRWRK02   0000021500000000000001     WHEN       VALUE_IS('= 4')
FRWRK02   0000021600000000000001     EXECUTE    SUBROUTINE(OBJ_WORK) WITH_PARMS('DLT')
FRWRK02   0000021700000000000001L20: @@LABEL
FRWRK02   0000021800000000000001     @@SET_IDX  IDX_NAME(UC) TO(1)
FRWRK02   0000021900000000000001     @@SET_IDX  IDX_NAME(UO) TO(20)
FRWRK02   0000022000000000000001     @@SET_IDX  IDX_NAME(UD) TO(30)
FRWRK02   0000022100000000000001     @@SET_IDX  IDX_NAME(UR) TO(40)
FRWRK02   0000022200000000000001L22: @@CMP_IDX  IDX_NAME(UC) IDX_VALUE(@@NANS001) IF_GT(L24)
FRWRK02   0000022300000000000001     WHEN       VALUE_IS('= @@NANS0UO')
FRWRK02   0000022400000000000001     EXECUTE    SUBROUTINE(@@CANS0UR)
FRWRK02   0000022500000000000001     @@INC_IDX  IDX_NAME(UC)
FRWRK02   0000022600000000000001     @@INC_IDX  IDX_NAME(UO)
FRWRK02   0000022700000000000001     @@INC_IDX  IDX_NAME(UD)
FRWRK02   0000022800000000000001     @@INC_IDX  IDX_NAME(UR)
FRWRK02   0000022900000000000001     @@GOTO     LABEL(L22)
FRWRK02   0000023000000000000001L24: @@LABEL
FRWRK02   0000023100000000000001     OTHERWISE
FRWRK02   0000023200000000000001     MESSAGE    MSGID(DCU0014) MSGF(DC@M01) MSGDTA(#USEOPTION)
FRWRK02   0000023300000000000001     ENDCASE
FRWRK02   0000023400000000000001     ENDIF
FRWRK02   0000023500000000000001     ENDSELECT
FRWRK02   0000023600000000000001     EXECUTE    SUBROUTINE(OBJ_BROWSE) WITH_PARMS(#REQUEST)
FRWRK02   0000023700000000000001     ENDWHILE
FRWRK02   0000023800000000000001     /* ********** ======================================================= */
FRWRK02   0000023900000000000001     /* ********** ALLOW USER TO CHOOSE FIELDS FOR THE BROWSE PANEL        */
FRWRK02   0000024000000000000001     /* ********** ======================================================= */
FRWRK02   0000024100000000000001     @@CLR_LST  NUMBER(1)
FRWRK02   0000024200000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRWRK02   0000024300000000000001     @@CLR_LST  NUMBER(2)
FRWRK02   0000024400000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields to' 'Display on' 'Browse Panel' *SEQUENCE)) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000024500000000000001     /* ********** ======================================================= */
FRWRK02   0000024600000000000001     /* ********** MERGE IN ALL UNSELECTED FILE KEYS AS HIDDEN FIELDS      */
FRWRK02   0000024700000000000001     /* ********** ======================================================= */
FRWRK02   0000024800000000000001     @@GOTO     AGE
FRWRK02   0000024900000000000001     /* ********** THIS LOGIC NOT IMPLEMENTED                              */
FRWRK02   0000025000000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRWRK02   0000025100000000000001AGL: @@LABEL
FRWRK02   0000025200000000000001     @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(AF) IF_GT(AGE)
FRWRK02   0000025300000000000001     @@CLR_LST  NUMBER(99)
FRWRK02   0000025400000000000001     @@RTV_KEYS OF_FILE(WA) INTO_LST(99)
FRWRK02   0000025500000000000001     @@MRG_LSTS FROM_LSTS((99 *HIDDEN)) INTO_LST(2)
FRWRK02   0000025600000000000001     @@INC_IDX  IDX_NAME(WA)
FRWRK02   0000025700000000000001     @@GOTO     LABEL(AGL)
FRWRK02   0000025800000000000001AGE: @@LABEL
FRWRK02   0000025900000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000026000000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ_BROWSE')
FRWRK02   0000026100000000000001     @@COMMENT  COMMENT('Description....: Browse from files (page at a time)')
FRWRK02   0000026200000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000026300000000000001     SUBROUTINE NAME(OBJ_BROWSE) PARMS((#OBJREQ *RECEIVED))
FRWRK02   0000026400000000000001     DEFINE     FIELD(#OBJREQ) TYPE(*CHAR) LENGTH(1)
FRWRK02   0000026500000000000001     DEFINE     FIELD(#ENTRYNUM) REFFLD(#LISTCOUNT)
FRWRK02   0000026600000000000001     DEF_LIST   NAME(#LASTREQ) FIELDS(@@LST81) TYPE(*WORKING) ENTRYS(1)
FRWRK02   0000026700000000000001     DEF_LIST   NAME(#OBJ_LIST) FIELDS((#USEOPTION *SELECT) (#PRIFILRRN *HIDDEN) (#ENTRYNUM *HIDDEN) @@LST02) COUNTER(#LISTCOUNT) ENTRYS(200) PAGE_SIZE(#LISTPAGE) TOP_ENTRY(#LISTTOP) SEL_ENTRY(#LISTENTRY) SCROLL_TXT(#LISTPOS)
FRWRK02   0000026800000000000001     @@COMMENT  COMMENT('Repeat until records found and selection made')
FRWRK02   0000026900000000000001     DOUNTIL    COND('(#LISTCOUNT *GT 0) *AND (#IO$KEY *EQ RA)')
FRWRK02   0000027000000000000001     @@COMMENT  COMMENT('Clear all details from the list')
FRWRK02   0000027100000000000001     CLR_LIST   NAMED(#OBJ_LIST)
FRWRK02   0000027200000000000001B16: @@LABEL
FRWRK02   0000027300000000000001     @@COMMENT  COMMENT('Retrieve last search made criteria')
FRWRK02   0000027400000000000001     GET_ENTRY  NUMBER(1) FROM_LIST(#LASTREQ)
FRWRK02   0000027500000000000001     @@COMMENT  COMMENT('Request details if required')
FRWRK02   0000027600000000000001     DOWHILE    COND('#OBJREQ = Y')
FRWRK02   0000027700000000000001     CHANGE     FIELD(#OBJREQ) TO('N')
FRWRK02   0000027800000000000001     SET_MODE   TO(*DISPLAY)
FRWRK02   0000027900000000000001     /* ********** PUT OUT THE SELECTION TYPE POP_UP                       */
FRWRK02   0000028000000000000001FSP: DOUNTIL    COND('(#FS$SEL *GE 1) *AND (#FS$SEL *LE @@INDEXAF)')
FRWRK02   0000028100000000000001ABL: @@LABEL
FRWRK02   0000028200000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(1) IF_EQ(AB1)
FRWRK02   0000028300000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(2) IF_EQ(AB2)
FRWRK02   0000028400000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(3) IF_EQ(AB3)
FRWRK02   0000028500000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(4) IF_EQ(AB4)
FRWRK02   0000028600000000000001     @@CMP_IDX  IDX_NAME(AF) IDX_VALUE(5) IF_EQ(AB5)
FRWRK02   0000028700000000000001AB1: @@LABEL
FRWRK02   0000028800000000000001     POP_UP     FIELDS((#FS$INST *L003 *P003 *NOID *OUT) (#FS$OPT01 *L005 *P003 *NOID *OUT)) AT_LOC(04 07) WITH_SIZE(35 8) PANEL_TITL('Select @@CANS001(s)') EXIT_KEY(*NO) MENU_KEY(*YES *MENU)   ADD_KEY(*@@CANS002) CURSOR_LOC(#FS$ROW #FS$COL) PROMPT_KEY(*NO)
FRWRK02   0000028900000000000001     @@GOTO     LABEL(ABE)
FRWRK02   0000029000000000000001AB2: @@LABEL
FRWRK02   0000029100000000000001     POP_UP     FIELDS((#FS$INST *L003 *P003 *NOID *OUT) (#FS$OPT01 *L005 *P003 *NOID *OUT) (#FS$OPT02 *L006 *P003 *NOID *OUT)) AT_LOC(04 07) WITH_SIZE(35 9) PANEL_TITL('Select @@CANS001(s)') EXIT_KEY(*NO) MENU_KEY(*YES *MENU)   ADD_KEY(*@@CANS002) CURSOR_LOC(#FS$ROW #FS$COL) PROMPT_KEY(*NO)
FRWRK02   0000029200000000000001     @@GOTO     LABEL(ABE)
FRWRK02   0000029300000000000001AB3: @@LABEL
FRWRK02   0000029400000000000001     POP_UP     FIELDS((#FS$INST *L003 *P003 *NOID *OUT) (#FS$OPT01 *L005 *P003 *NOID *OUT) (#FS$OPT02 *L006 *P003 *NOID *OUT) (#FS$OPT03 *L007 *P003 *NOID *OUT)) AT_LOC(04 07) WITH_SIZE(35 10) PANEL_TITL('Select @@CANS001(s)') EXIT_KEY(*NO) MENU_KEY(*YES *MENU)   ADD_KEY(*@@CANS002) CURSOR_LOC(#FS$ROW #FS$COL) PROMPT_KEY(*NO)
FRWRK02   0000029500000000000001     @@GOTO     LABEL(ABE)
FRWRK02   0000029600000000000001AB4: @@LABEL
FRWRK02   0000029700000000000001     POP_UP     FIELDS((#FS$INST *L003 *P003 *NOID *OUT) (#FS$OPT01 *L005 *P003 *NOID *OUT) (#FS$OPT02 *L006 *P003 *NOID *OUT) (#FS$OPT03 *L007 *P003 *NOID *OUT) (#FS$OPT04 *L008 *P003 *NOID *OUT)) AT_LOC(04 07) WITH_SIZE(35 11) PANEL_TITL('Select @@CANS001(s)') EXIT_KEY(*NO) MENU_KEY(*YES *MENU)   ADD_KEY(*@@CANS002) CURSOR_LOC(#FS$ROW #FS$COL) PROMPT_KEY(*NO)
FRWRK02   0000029800000000000001     @@GOTO     LABEL(ABE)
FRWRK02   0000029900000000000001AB5: @@LABEL
FRWRK02   0000030000000000000001     POP_UP     FIELDS((#FS$INST *L003 *P003 *NOID *OUT) (#FS$OPT01 *L005 *P003 *NOID *OUT) (#FS$OPT02 *L006 *P003 *NOID *OUT) (#FS$OPT03 *L007 *P003 *NOID *OUT) (#FS$OPT04 *L008 *P003 *NOID *OUT) (#FS$OPT05 *L009 *P003 *NOID *OUT)) AT_LOC(04 07) WITH_SIZE(35 12) PANEL_TITL('Select @@CANS001(s)') EXIT_KEY(*NO) MENU_KEY(*YES *MENU)   ADD_KEY(*@@CANS002) CURSOR_LOC(#FS$ROW #FS$COL) PROMPT_KEY(*NO)
FRWRK02   0000030100000000000001     @@GOTO     LABEL(ABE)
FRWRK02   0000030200000000000001ABE: @@LABEL
FRWRK02   0000030300000000000001     CHANGE     FIELD(#FS$SEL) TO('#FS$ROW - 7')
FRWRK02   0000030400000000000001     @@IF       COND((*IF @@CANS002 *NE YES)) GOTO(C2C)
FRWRK02   0000030500000000000001     @@COMMENT  COMMENT('Handle ADD key (if used)')
FRWRK02   0000030600000000000001     IF_KEY     WAS(*ADD)
FRWRK02   0000030700000000000001     CHANGE     FIELD(#FS$SEL) TO(*NULL)
FRWRK02   0000030800000000000001     EXECUTE    SUBROUTINE(OBJ_CREATE)
FRWRK02   0000030900000000000001     ENDIF
FRWRK02   0000031000000000000001C2C: @@LABEL
FRWRK02   0000031100000000000001     ENDUNTIL
FRWRK02   0000031200000000000001     /* ********** NOW HANDLE THE ACTUAL SELECTION                         */
FRWRK02   0000031300000000000001     SET_MODE   TO(*DISPLAY)
FRWRK02   0000031400000000000001     CASE       OF_FIELD(#FS$SEL)
FRWRK02   0000031500000000000001     /* **********                                                         */
FRWRK02   0000031600000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRWRK02   0000031700000000000001     @@SET_IDX  IDX_NAME(WB) TO(71)
FRWRK02   0000031800000000000001ADL: @@LABEL
FRWRK02   0000031900000000000001     @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(AF) IF_GT(ADE)
FRWRK02   0000032000000000000001     @@COMMENT  COMMENT('Get search values for @@FNAMEWA')
FRWRK02   0000032100000000000001     @@CLR_LST  NUMBER(99)
FRWRK02   0000032200000000000001     @@MRG_LSTS FROM_LSTS((WB *INPUT)) INTO_LST(99)
FRWRK02   0000032300000000000001     WHEN       VALUE_IS('= @@INDEXWA')
FRWRK02   0000032400000000000001     POP_UP     FIELDS(@@LST99) DESIGN(*DOWN) IDENTIFY(*DESC) AT_LOC(10 6)  WITH_SIZE(70 11) PANEL_TITL('Select @@CANS0WB') EXIT_KEY(*NO) MENU_KEY(*YES FSP) CURSOR_LOC(*ATFIELD #@@LELWB01) ADD_KEY(*@@CANS002)
FRWRK02   0000032500000000000001     @@INC_IDX  IDX_NAME(WA)
FRWRK02   0000032600000000000001     @@INC_IDX  IDX_NAME(WB)
FRWRK02   0000032700000000000001     @@GOTO     LABEL(ADL)
FRWRK02   0000032800000000000001ADE: @@LABEL
FRWRK02   0000032900000000000001     /* **********                                                         */
FRWRK02   0000033000000000000001     ENDCASE
FRWRK02   0000033100000000000001     INZ_LIST   NAMED(#LASTREQ)
FRWRK02   0000033200000000000001     @@IF       COND((*IF @@CANS002 *NE YES)) GOTO(C2A)
FRWRK02   0000033300000000000001     IF_KEY     WAS(*ADD)
FRWRK02   0000033400000000000001     EXECUTE    SUBROUTINE(OBJ_CREATE)
FRWRK02   0000033500000000000001     CHANGE     FIELD(#OBJREQ) TO('Y')
FRWRK02   0000033600000000000001     ENDIF
FRWRK02   0000033700000000000001C2A: @@LABEL
FRWRK02   0000033800000000000001     ENDWHILE
FRWRK02   0000033900000000000001     @@COMMENT  COMMENT('Build list of matching records')
FRWRK02   0000034000000000000001     CHANGE     FIELD(#OBJREQ) TO(Y)
FRWRK02   0000034100000000000001     @@COMMENT  COMMENT('and display using page at a time logic')
FRWRK02   0000034200000000000001     CHANGE     FIELD(#IO$KEY) TO(UP)
FRWRK02   0000034300000000000001     /* **********                                                         */
FRWRK02   0000034400000000000001     CASE       OF_FIELD(#FS$SEL)
FRWRK02   0000034500000000000001     /* **********                                                         */
FRWRK02   0000034600000000000001     @@SET_IDX  IDX_NAME(WA) TO(1)
FRWRK02   0000034700000000000001     @@SET_IDX  IDX_NAME(WB) TO(71)
FRWRK02   0000034800000000000001AEL: @@LABEL
FRWRK02   0000034900000000000001     @@CMP_IDX  IDX_NAME(WA) IDX_VALUE(AF) IF_GT(AEE)
FRWRK02   0000035000000000000001     @@COMMENT  COMMENT('Search on @@FNAMEWA')
FRWRK02   0000035100000000000001     WHEN       VALUE_IS('= @@INDEXWA')
FRWRK02   0000035200000000000001     SELECT     FIELDS((#OBJ_LIST)) FROM_FILE(@@FNAMEWA) WHERE('#IO$KEY *EQ UP') WITH_KEY(@@LSTWB) NBR_KEYS(*COMPUTE) GENERIC(*YES) RETURN_RRN(#PRIFILRRN) OPTIONS(*ENDWHERE)
FRWRK02   0000035300000000000001     EXECUTE    SUBROUTINE(OBJ_DSPLY) WITH_PARMS('''More...''')
FRWRK02   0000035400000000000001     EXECUTE    SUBROUTINE(OBJ_STORE)
FRWRK02   0000035500000000000001     ENDSELECT
FRWRK02   0000035600000000000001     @@INC_IDX  IDX_NAME(WA)
FRWRK02   0000035700000000000001     @@INC_IDX  IDX_NAME(WB)
FRWRK02   0000035800000000000001     @@GOTO     LABEL(AEL)
FRWRK02   0000035900000000000001AEE: @@LABEL
FRWRK02   0000036000000000000001     /* **********                                                         */
FRWRK02   0000036100000000000001     ENDCASE
FRWRK02   0000036200000000000001     /* **********                                                         */
FRWRK02   0000036300000000000001     IF         COND('#IO$KEY = UP')
FRWRK02   0000036400000000000001     IF         '(#LISTCOUNT = 0)'
FRWRK02   0000036500000000000001     MESSAGE    'No @@CANS001s found'
FRWRK02   0000036600000000000001     ELSE
FRWRK02   0000036700000000000001     EXECUTE    SUBROUTINE(OBJ_DSPLY) WITH_PARMS('''Bottom''')
FRWRK02   0000036800000000000001     ENDIF
FRWRK02   0000036900000000000001     ENDIF
FRWRK02   0000037000000000000001     ENDUNTIL
FRWRK02   0000037100000000000001     @@COMMENT  COMMENT(' ')
FRWRK02   0000037200000000000001     ENDROUTINE
FRWRK02   0000037300000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000037400000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ_STORE')
FRWRK02   0000037500000000000001     @@COMMENT  COMMENT('Description....: Add a new entry to object list')
FRWRK02   0000037600000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000037700000000000001     SUBROUTINE NAME(OBJ_STORE)
FRWRK02   0000037800000000000001     CHANGE     FIELD(#ENTRYNUM) TO('#LISTCOUNT + 1')
FRWRK02   0000037900000000000001     ADD_ENTRY  TO_LIST(#OBJ_LIST) WITH_MODE(*DISPLAY)
FRWRK02   0000038000000000000001     ENDROUTINE
FRWRK02   0000038100000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000038200000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ_DSPLY')
FRWRK02   0000038300000000000001     @@COMMENT  COMMENT('Description....: Browse from @@FNAME01 (page at a time)')
FRWRK02   0000038400000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000038500000000000001     SUBROUTINE NAME(OBJ_DSPLY) PARMS((#LISTPOS))
FRWRK02   0000038600000000000001     @@COMMENT  'Display if at bottom of list or on a page boundary'
FRWRK02   0000038700000000000001     CHANGE     FIELD(#LISTREMN) TO('#LISTCOUNT / #LISTPAGE')
FRWRK02   0000038800000000000001     IF         COND('(#IO$KEY *EQ UP) *AND ((#LISTPOS *EQ ''Bottom'') *OR ((#LISTREMN *EQ 0) *AND (#LISTCOUNT *NE 0)))')
FRWRK02   0000038900000000000001     DOUNTIL    COND('(#LISTPOS *NE ''Bottom'') *OR (#IO$KEY *NE UP)')
FRWRK02   0000039000000000000001     SET_MODE   TO(*DISPLAY)
FRWRK02   0000039100000000000001     @@IF       COND((*IF @@CANS091 *EQ YES)) GOTO(L95)
FRWRK02   0000039200000000000001     DISPLAY    FIELDS((#PB$INST *OUTPUT *L3 *P2 *NOID) (#PB$OPT1 *OUTPUT *L5 *P4 *NOID) (#PB$OPT2 *OUTPUT *L6 *P4 *NOID))    BROWSELIST(#OBJ_LIST) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN)    USER_KEYS((*ROLLUP)) PANEL_TITL('Work with @@CANS001s') CURSOR_LOC(*ATFIELD #USEOPTION)              ADD_KEY(*@@CANS002) PROMPT_KEY(*NO)
FRWRK02   0000039300000000000001     @@GOTO     LABEL(L96)
FRWRK02   0000039400000000000001L95: @@LABEL
FRWRK02   0000039500000000000001     DISPLAY    FIELDS((#PB$INST *OUTPUT *L5 *P2 *NOID) (#PB$OPT1 *OUTPUT *L7 *P4 *NOID) (#PB$OPT2 *OUTPUT *L8 *P4 *NOID))    BROWSELIST(#OBJ_LIST) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN)    USER_KEYS((*ROLLUP)) PANEL_TITL('Work with @@CANS001s') CURSOR_LOC(*ATFIELD #USEOPTION)              ADD_KEY(*@@CANS002) PROMPT_KEY(*NO)
FRWRK02   0000039600000000000001L96: @@LABEL
FRWRK02   0000039700000000000001     @@IF       COND((*IF @@CANS002 *NE YES)) GOTO(C2B)
FRWRK02   0000039800000000000001     @@COMMENT  COMMENT('Handle ADD key (if used)')
FRWRK02   0000039900000000000001     IF_KEY     WAS(*ADD)
FRWRK02   0000040000000000000001     EXECUTE    SUBROUTINE(OBJ_CREATE)
FRWRK02   0000040100000000000001     CHANGE     FIELD(#OBJREQ) TO('Y')
FRWRK02   0000040200000000000001     ENDIF
FRWRK02   0000040300000000000001C2B: @@LABEL
FRWRK02   0000040400000000000001     ENDUNTIL
FRWRK02   0000040500000000000001     CHANGE     #LISTTOP '#LISTTOP + #LISTPAGE'
FRWRK02   0000040600000000000001     ENDIF
FRWRK02   0000040700000000000001     ENDROUTINE
FRWRK02   0000040800000000000001     /* ********** ======================================================= */
FRWRK02   0000040900000000000001     /* ********** GENERATE THE OBJ_CREATE ROUTINE (IF REQUIRED)           */
FRWRK02   0000041000000000000001     /* ********** ======================================================= */
FRWRK02   0000041100000000000001     @@IF       COND((*IF @@CANS002 *NE YES)) GOTO(A99)
FRWRK02   0000041200000000000001     /* ********** ======================================================= */
FRWRK02   0000041300000000000001     /* ********** GET FIELDS OF CHOSEN FILE INTO LIST 1                   */
FRWRK02   0000041400000000000001     /* ********** ======================================================= */
FRWRK02   0000041500000000000001     @@CLR_LST  NUMBER(1)
FRWRK02   0000041600000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
FRWRK02   0000041700000000000001     /* ********** ======================================================= */
FRWRK02   0000041800000000000001     /* ********** GET KEYS OF CHOSEN FILE INTO LIST 2                     */
FRWRK02   0000041900000000000001     /* ********** ======================================================= */
FRWRK02   0000042000000000000001     @@CLR_LST  NUMBER(2)
FRWRK02   0000042100000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
FRWRK02   0000042200000000000001     /* ********** ======================================================= */
FRWRK02   0000042300000000000001     /* ********** GET USER TO CHOOSE FIELDS TO APPEAR ON PANEL            */
FRWRK02   0000042400000000000001     /* ********** AND PUT RESULTS INTO LIST 3                             */
FRWRK02   0000042500000000000001     /* ********** ======================================================= */
FRWRK02   0000042600000000000001     @@CLR_LST  NUMBER(3)
FRWRK02   0000042700000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(2) INTO_LSTS((3 'Fields to' 'Appear on' 'Add Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000042800000000000001     /* ********** ======================================================= */
FRWRK02   0000042900000000000001     /* ********** GET USER TO CHOOSE FIELDS TO WORK WITH IN FUNCTION      */
FRWRK02   0000043000000000000001     /* ********** AND PUT RESULTS INTO LIST 4                             */
FRWRK02   0000043100000000000001     /* ********** ======================================================= */
FRWRK02   0000043200000000000001     @@CLR_LST  NUMBER(4)
FRWRK02   0000043300000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((4 'Fields to   ' 'Work with  ' 'in Function' *YESNO *NO)) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000043400000000000001     /* ********** ======================================================= */
FRWRK02   0000043500000000000001     /* ********** MERGE FIELDS IN LIST 4 INTO LIST 3 AS *HIDDEN           */
FRWRK02   0000043600000000000001     /* ********** ======================================================= */
FRWRK02   0000043700000000000001     @@MRG_LSTS FROM_LSTS((4 *HIDDEN)) INTO_LST(3)
FRWRK02   0000043800000000000001     /* ********** ======================================================= */
FRWRK02   0000043900000000000001     /* ********** ASK HOW THE PANEL IS TO BE DESIGNED                     */
FRWRK02   0000044000000000000001     /* ********** ======================================================= */
FRWRK02   0000044100000000000001     @@QUESTION PROMPT('Design fields on the ADD panel DOWN the screen or ACROSS the screen') ANSWER(@@CANS022) EXTEND('Reply DOWN or ACROSS only.' 'If your ADD panel contains 17 (or less) fields, DOWN is the   ' 'recommended value. If your ADD panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000044200000000000001     /* ********** ======================================================= */
FRWRK02   0000044300000000000001     /* ********** GENERATE THE RDML FUNCTION                              */
FRWRK02   0000044400000000000001     /* ********** ======================================================= */
FRWRK02   0000044500000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000044600000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ_CREATE')
FRWRK02   0000044700000000000001     @@COMMENT  COMMENT('Description....: Add new data to @@FNAME01')
FRWRK02   0000044800000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000044900000000000001     SUBROUTINE NAME(OBJ_CREATE)
FRWRK02   0000045000000000000001     @@COMMENT  'Group and field declarations'
FRWRK02   0000045100000000000001     GROUP_BY   NAME(#ADD$DATA) FIELDS(@@LST03)
FRWRK02   0000045200000000000001     @@COMMENT  'Issue initial data entry message'
FRWRK02   0000045300000000000001     MESSAGE    MSGID(DCU0010) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWRK02   0000045400000000000001     @@COMMENT  'Do data entry until terminated by CANCEL'
FRWRK02   0000045500000000000001     BEGIN_LOOP
FRWRK02   0000045600000000000001     @@COMMENT  'Change all fields to their defaults'
FRWRK02   0000045700000000000001     CHANGE     FIELD(#ADD$DATA) TO(*DEFAULT)
FRWRK02   0000045800000000000001     @@COMMENT  'Request user inputs (or corrects) details'
FRWRK02   0000045900000000000001     @@IF       COND((*IF @@CANS022 *NE DOWN)) GOTO(R01)
FRWRK02   0000046000000000000001     /* ********** Request and Display with action bar needs CURSOR_LOC    */
FRWRK02   0000046100000000000001     @@IF       COND((*IF @@CANS091 *EQ YES)) GOTO(L91)
FRWRK02   0000046200000000000001     REQUEST    FIELDS(#ADD$DATA)  DESIGN(*DOWN) IDENTIFY(*DESC)       EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Create New @@CANS001')  CURSOR_LOC(*ATFIELD #@@LEL0301)
FRWRK02   0000046300000000000001     @@GOTO     LABEL(R02)
FRWRK02   0000046400000000000001L91: @@LABEL
FRWRK02   0000046500000000000001     REQUEST    FIELDS((#ADD$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Create New @@CANS001') CURSOR_LOC(*ATFIELD #@@LEL0301)
FRWRK02   0000046600000000000001     @@GOTO     LABEL(R02)
FRWRK02   0000046700000000000001R01: @@IF       COND((*IF @@CANS022 *NE ACROSS)) GOTO(R02)
FRWRK02   0000046800000000000001     @@IF       COND((*IF @@CANS091 *EQ YES)) GOTO(L92)
FRWRK02   0000046900000000000001     REQUEST    FIELDS(#ADD$DATA)  DESIGN(*ACROSS) IDENTIFY(*LABEL)    EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Create New @@CANS001')
FRWRK02   0000047000000000000001     @@GOTO     LABEL(R02)
FRWRK02   0000047100000000000001L92: @@LABEL
FRWRK02   0000047200000000000001     REQUEST    FIELDS((#ADD$DATA)) DESIGN(*ACROSS) IDENTIFY(*LABEL) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Create New @@CANS001') CURSOR_LOC(*ATFIELD #@@LEL0301)
FRWRK02   0000047300000000000001R02: @@COMMENT  'Perform any function level validation here'
FRWRK02   0000047400000000000001     BEGINCHECK
FRWRK02   0000047500000000000001     ENDCHECK
FRWRK02   0000047600000000000001     @@COMMENT  'Attempt to insert data into the data base'
FRWRK02   0000047700000000000001     INSERT     FIELDS((#ADD$DATA)) TO_FILE(@@FNAME01)
FRWRK02   0000047800000000000001     @@COMMENT  'If okay, issue accepted message'
FRWRK02   0000047900000000000001     CHANGE     FIELD(#REQUEST) TO(Y)
FRWRK02   0000048000000000000001     MESSAGE    MSGID(DCU0011) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWRK02   0000048100000000000001     END_LOOP
FRWRK02   0000048200000000000001     ENDROUTINE
FRWRK02   0000048300000000000001A99: @@LABEL
FRWRK02   0000048400000000000001     /* ********** ======================================================= */
FRWRK02   0000048500000000000001     /* ********** GENERATE THE OBJ_WORK ROUTINE (IF REQUIRED)             */
FRWRK02   0000048600000000000001     /* ********** ======================================================= */
FRWRK02   0000048700000000000001     @@IF       COND((*IF @@CANS003 *EQ YES)) GOTO(D05)
FRWRK02   0000048800000000000001     @@IF       COND((*IF @@CANS004 *EQ YES)) GOTO(D05)
FRWRK02   0000048900000000000001     @@IF       COND((*IF @@CANS005 *EQ YES)) GOTO(D05)
FRWRK02   0000049000000000000001     @@GOTO     LABEL(D99)
FRWRK02   0000049100000000000001D05: @@LABEL
FRWRK02   0000049200000000000001     /* ********** ======================================================= */
FRWRK02   0000049300000000000001     /* ********** LOAD DETAILS OF ALL FIELDS FROM ALL FILES INTO LIST 1   */
FRWRK02   0000049400000000000001     /* ********** ======================================================= */
FRWRK02   0000049500000000000001     @@CLR_LST  NUMBER(1)
FRWRK02   0000049600000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
FRWRK02   0000049700000000000001     @@CLR_LST  NUMBER(2)
FRWRK02   0000049800000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(2)
FRWRK02   0000049900000000000001     @@MRG_LSTS FROM_LSTS((2)) INTO_LST(1)
FRWRK02   0000050000000000000001     /* ********** ======================================================= */
FRWRK02   0000050100000000000001     /* ********** ASK THE USER TO MAKE A LIST OF ALL FIELDS IN LIST 2     */
FRWRK02   0000050200000000000001     /* ********** ======================================================= */
FRWRK02   0000050300000000000001     @@CLR_LST  NUMBER(2)
FRWRK02   0000050400000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Fields for' 'Det/Chg/Dlt' 'Screen Panel' *SEQUENCE *ALL)) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP050 HELP060 HELP070)
FRWRK02   0000050500000000000001     /* ********** ======================================================= */
FRWRK02   0000050600000000000001     /* ********** ASK THE USER HOW TO DESIGN THE PANELS                   */
FRWRK02   0000050700000000000001     /* ********** ======================================================= */
FRWRK02   0000050800000000000001     @@QUESTION PROMPT('Design fields on the detail/change/delete panel DOWN or ACROSS') ANSWER(@@CANS022) EXTEND('Reply DOWN or ACROSS only.' 'If your panel contains 17 (or less) fields, DOWN is the   ' 'recommended value. If your panel contains more than 17' 'fields, ACROSS is the recommended value.' 'Use the HELP function key for more information and examples.') LOWER(*NO) VALUES(DOWN ACROSS) HELPIDS(HELP010 HELP015 HELP020 HELP030 HELP040 HELP060 HELP070)
FRWRK02   0000050900000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000051000000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ_WORK')
FRWRK02   0000051100000000000001     @@COMMENT  COMMENT('Description....: Work with detailed data from @@FNAME01')
FRWRK02   0000051200000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000051300000000000001     SUBROUTINE NAME(OBJ_WORK) PARMS(#WORK$OPT)
FRWRK02   0000051400000000000001     /* ********** ======================================================= */
FRWRK02   0000051500000000000001     /* ********** GENERATED RDML CODE STARTS HERE                         */
FRWRK02   0000051600000000000001     /* ********** ======================================================= */
FRWRK02   0000051700000000000001     @@COMMENT  'Group and field definitions'
FRWRK02   0000051800000000000001     DEFINE     FIELD(#WORK$OPT) TYPE(*CHAR) LENGTH(3)
FRWRK02   0000051900000000000001     GROUP_BY   NAME(#WORK$DATA) FIELDS(@@LST02)
FRWRK02   0000052000000000000001     @@COMMENT  COMMENT('Fetch file @@FNAME01 details ')
FRWRK02   0000052100000000000001     CHANGE     FIELD(#WORK$DATA) TO(*NAVAIL)
FRWRK02   0000052200000000000001     FETCH      FIELDS((#WORK$DATA)) FROM_FILE(@@FBASP01) WITH_RRN(#PRIFILRRN)
FRWRK02   0000052300000000000001     IF_STATUS  IS_NOT(*OKAY)
FRWRK02   0000052400000000000001     MESSAGE    MSGID(DCU0016) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWRK02   0000052500000000000001     RETURN
FRWRK02   0000052600000000000001     ENDIF
FRWRK02   0000052700000000000001     /* ********** ======================================================= */
FRWRK02   0000052800000000000001     /* ********** SET MODE CORRECTLY                                      */
FRWRK02   0000052900000000000001     /* ********** ======================================================= */
FRWRK02   0000053000000000000001     @@COMMENT  COMMENT('Set screen to correct mode ')
FRWRK02   0000053100000000000001     CASE       OF_FIELD(#WORK$OPT)
FRWRK02   0000053200000000000001     @@IF       COND((*IF @@CANS003 *NE YES)) GOTO(D70)
FRWRK02   0000053300000000000001     WHEN       VALUE_IS('= DIS')
FRWRK02   0000053400000000000001     SET_MODE   TO(*DISPLAY)
FRWRK02   0000053500000000000001D70: @@LABEL
FRWRK02   0000053600000000000001     @@IF       COND((*IF @@CANS004 *NE YES)) GOTO(D72)
FRWRK02   0000053700000000000001     WHEN       VALUE_IS('= CHG')
FRWRK02   0000053800000000000001     SET_MODE   TO(*CHANGE)
FRWRK02   0000053900000000000001D72: @@LABEL
FRWRK02   0000054000000000000001     @@IF       COND((*IF @@CANS005 *NE YES)) GOTO(D74)
FRWRK02   0000054100000000000001     WHEN       VALUE_IS('= DLT')
FRWRK02   0000054200000000000001     SET_MODE   TO(*DELETE)
FRWRK02   0000054300000000000001     MESSAGE    MSGID(DCU0015) MSGF(DC@M01) MSGDTA('''@@CANS001''')
FRWRK02   0000054400000000000001D74: @@LABEL
FRWRK02   0000054500000000000001     OTHERWISE
FRWRK02   0000054600000000000001     RETURN
FRWRK02   0000054700000000000001     ENDCASE
FRWRK02   0000054800000000000001     /* ********** ======================================================= */
FRWRK02   0000054900000000000001     /* ********** DISPLAY DETAILS                                         */
FRWRK02   0000055000000000000001     /* ********** ======================================================= */
FRWRK02   0000055100000000000001     @@COMMENT  COMMENT('Display results to the user      ')
FRWRK02   0000055200000000000001     @@IF       COND((*IF @@CANS022 *NE DOWN)) GOTO(D01)
FRWRK02   0000055300000000000001     @@IF       COND((*IF @@CANS091 *EQ YES)) GOTO(L93)
FRWRK02   0000055400000000000001     DISPLAY    FIELDS((#WORK$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Work with @@CANS001 Details')
FRWRK02   0000055500000000000001     @@GOTO     LABEL(D02)
FRWRK02   0000055600000000000001L93: @@LABEL
FRWRK02   0000055700000000000001     DISPLAY    FIELDS((#WORK$DATA)) DESIGN(*DOWN) IDENTIFY(*DESC) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Work with @@CANS001 Details') CURSOR_LOC(*ATFIELD #@@LEL0201)
FRWRK02   0000055800000000000001     @@GOTO     LABEL(D02)
FRWRK02   0000055900000000000001D01: @@IF       COND((*IF @@CANS022 *NE ACROSS)) GOTO(D02)
FRWRK02   0000056000000000000001     @@IF       COND((*IF @@CANS091 *EQ YES)) GOTO(L94)
FRWRK02   0000056100000000000001     DISPLAY    FIELDS((#WORK$DATA)) DESIGN(*ACROSS) IDENTIFY(*LABEL) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Work with @@CANS001 Details')
FRWRK02   0000056200000000000001     @@GOTO     LABEL(D02)
FRWRK02   0000056300000000000001L94: @@LABEL
FRWRK02   0000056400000000000001     DISPLAY    FIELDS((#WORK$DATA)) DESIGN(*ACROSS) IDENTIFY(*LABEL) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PANEL_TITL('Work with @@CANS001 Details') CURSOR_LOC(*ATFIELD #@@LEL0201)
FRWRK02   0000056500000000000001D02: @@IF       COND((*IF @@CANS004 *NE YES)) GOTO(D80)
FRWRK02   0000056600000000000001     IF_MODE    *CHANGE
FRWRK02   0000056700000000000001     UPDATE     FIELDS((#WORK$DATA)) IN_FILE(@@FBASP01)
FRWRK02   0000056800000000000001     CHANGE     FIELD(#REQUEST) TO(Y)
FRWRK02   0000056900000000000001     ENDIF
FRWRK02   0000057000000000000001D80: @@LABEL
FRWRK02   0000057100000000000001     @@IF       COND((*IF @@CANS005 *NE YES)) GOTO(D82)
FRWRK02   0000057200000000000001     IF_MODE    *DELETE
FRWRK02   0000057300000000000001     DELETE     FROM_FILE(@@FBASP01)
FRWRK02   0000057400000000000001     CHANGE     FIELD(#REQUEST) TO(Y)
FRWRK02   0000057500000000000001     ENDIF
FRWRK02   0000057600000000000001D82: @@LABEL
FRWRK02   0000057700000000000001     ENDROUTINE
FRWRK02   0000057800000000000001D99: @@LABEL
FRWRK02   0000057900000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000058000000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ$OPTION')
FRWRK02   0000058100000000000001     @@COMMENT  COMMENT('Description....: Save list of selection options')
FRWRK02   0000058200000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000058300000000000001     SUBROUTINE NAME(OBJ$OPTION) PARMS((#OBJ$OPTNO *RECEIVED) (#OBJ$OPTDE *RECEIVED) (#OBJ$OPTAR *BOTH))
FRWRK02   0000058400000000000001     DEFINE     FIELD(#OBJ$OPTAR) TYPE(*CHAR) LENGTH(100)
FRWRK02   0000058500000000000001     DEFINE     FIELD(#OBJ$OPTWK) TYPE(*CHAR) LENGTH(30)
FRWRK02   0000058600000000000001     @@COMMENT  COMMENT(' ')
FRWRK02   0000058700000000000001     USE        BUILTIN(NUMERIC_STRING) WITH_ARGS(#OBJ$OPTNO) TO_GET(#OBJ$OPTWK)
FRWRK02   0000058800000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#OBJ$OPTWK '''=''' #OBJ$OPTDE) TO_GET(#OBJ$OPTWK)
FRWRK02   0000058900000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#OBJ$OPTAR #OBJ$OPTWK) TO_GET(#OBJ$OPTAR)
FRWRK02   0000059000000000000001     ADD_ENTRY  TO_LIST(#OBJ$OPTLS) WITH_MODE(*DISPLAY)
FRWRK02   0000059100000000000001     ENDROUTINE
FRWRK02   0000059200000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000059300000000000001     @@COMMENT  COMMENT('Subroutine ....: OBJ$SELECT')
FRWRK02   0000059400000000000001     @@COMMENT  COMMENT('Description....: Select option from list of options')
FRWRK02   0000059500000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000059600000000000001     SUBROUTINE NAME(OBJ$SELECT)
FRWRK02   0000059700000000000001     DEFINE     FIELD(#OS$ROW) TYPE(*DEC) LENGTH(3) DECIMALS(0) DEFAULT(9)
FRWRK02   0000059800000000000001     DEFINE     FIELD(#OS$COL) TYPE(*DEC) LENGTH(3) DECIMALS(0) DEFAULT(51)
FRWRK02   0000059900000000000001     CHANGE     FIELD(#USEOPTION #LISTENTRY) TO(*NULL)
FRWRK02   0000060000000000000001     @@COMMENT  COMMENT(' ')
FRWRK02   0000060100000000000001     DOUNTIL    COND('#OBJ$OPTSE *GT 0')
FRWRK02   0000060200000000000001     POP_UP     AT_LOC(9 51) PANEL_TITL('Select Option') BROWSELIST(#OBJ$OPTLS) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) CURSOR_LOC(#OS$ROW #OS$COL)
FRWRK02   0000060300000000000001     IF         COND('#OBJ$OPTSE *GT 0')
FRWRK02   0000060400000000000001     GET_ENTRY  NUMBER(#OBJ$OPTSE) FROM_LIST(#OBJ$OPTLS)
FRWRK02   0000060500000000000001     CHANGE     FIELD(#USEOPTION) TO(#OBJ$OPTNO)
FRWRK02   0000060600000000000001     ENDIF
FRWRK02   0000060700000000000001     ENDUNTIL
FRWRK02   0000060800000000000001     ENDROUTINE
FRWRK02   0000060900000000000001     /* ********** ======================================================= */
FRWRK02   0000061000000000000001     /* ********** GENERATE ALL REQUIRED USER DEFINED ROUTINES             */
FRWRK02   0000061100000000000001     /* ********** ======================================================= */
FRWRK02   0000061200000000000001     @@SET_IDX  IDX_NAME(UC) TO(1)
FRWRK02   0000061300000000000001     @@SET_IDX  IDX_NAME(UO) TO(20)
FRWRK02   0000061400000000000001     @@SET_IDX  IDX_NAME(UD) TO(30)
FRWRK02   0000061500000000000001     @@SET_IDX  IDX_NAME(UR) TO(40)
FRWRK02   0000061600000000000001U02: @@CMP_IDX  IDX_NAME(UC) IDX_VALUE(@@NANS001) IF_GT(U99)
FRWRK02   0000061700000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000061800000000000001     @@COMMENT  COMMENT('Subroutine ....: @@CANS0UR')
FRWRK02   0000061900000000000001     @@COMMENT  COMMENT('Description....: Handle "@@NANS0UO = @@CANS0UD" request')
FRWRK02   0000062000000000000001     @@COMMENT  COMMENT('=======================================================')
FRWRK02   0000062100000000000001     SUBROUTINE NAME(@@CANS0UR)
FRWRK02   0000062200000000000001     @@COMMENT  COMMENT(' ')
FRWRK02   0000062300000000000001     @@COMMENT  COMMENT('Fill in details of CALL to external function')
FRWRK02   0000062400000000000001     @@COMMENT  COMMENT('that will handle Option @@NANS0UO=@@CANS0UD')
FRWRK02   0000062500000000000001     @@COMMENT  COMMENT(' ')
FRWRK02   0000062600000000000001     @@COMMENT  COMMENT('Use of an external function with exchanged')
FRWRK02   0000062700000000000001     @@COMMENT  COMMENT('variables is recommended in ALL CASES except')
FRWRK02   0000062800000000000001     @@COMMENT  COMMENT('where option @@NANS0UO has VERY heavy rates')
FRWRK02   0000062900000000000001     @@COMMENT  COMMENT('of usage, in which case its logic should be')
FRWRK02   0000063000000000000001     @@COMMENT  COMMENT('generated directly into this subroutine.')
FRWRK02   0000063100000000000001     @@COMMENT  COMMENT(' ')
FRWRK02   0000063200000000000001     @@COMMENT  COMMENT('Remove IF, ENDIF and MESSAGE commands')
FRWRK02   0000063300000000000001     @@COMMENT  COMMENT('Replace XXXXXXX with correct function name')
FRWRK02   0000063400000000000001     @@COMMENT  COMMENT('Add EXCHANGE before CALL (as needed by called function)')
FRWRK02   0000063500000000000001     @@COMMENT  COMMENT(' ')
FRWRK02   0000063600000000000001     IF         COND('A = B')
FRWRK02   0000063700000000000001     CALL       PROCESS(*DIRECT) FUNCTION(XXXXXXX) EXIT_USED(*NEXT) MENU_USED(*NEXT)
FRWRK02   0000063800000000000001     ENDIF
FRWRK02   0000063900000000000001     MESSAGE    MSGTXT('Option @@NANS0UO=@@CANS0UD subroutine @@CANS0UR invoked')
FRWRK02   0000064000000000000001     ENDROUTINE
FRWRK02   0000064100000000000001     @@INC_IDX  IDX_NAME(UC)
FRWRK02   0000064200000000000001     @@INC_IDX  IDX_NAME(UO)
FRWRK02   0000064300000000000001     @@INC_IDX  IDX_NAME(UD)
FRWRK02   0000064400000000000001     @@INC_IDX  IDX_NAME(UR)
FRWRK02   0000064500000000000001     @@GOTO     LABEL(U02)
FRWRK02   0000064600000000000001U99: @@LABEL
FRWRK02   0000064700000000000001     /* ********** ------------------------------------------------        */
FRWRK02   0000064800000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
FRWRK02   0000064900000000000001     /* ********** ------------------------------------------------        */
FRWRK02   0000065000000000000001     @@CLR_LST  NUMBER(1)
FRWRK02   0000065100000000000001     @@CLR_LST  NUMBER(2)
FRWRK02   0000065200000000000001     @@CLR_LST  NUMBER(3)
FRWRK02   0000065300000000000001     @@CLR_LST  NUMBER(4)
FRWRK02   0000065400000000000001     @@CLR_LST  NUMBER(5)
JSMSKEL   0000000100000000000001     @@COMMENT  '===================================================='
JSMSKEL   0000000200000000000001     @@COMMENT  ' Process ........:  @@PROCESS  '
JSMSKEL   0000000300000000000001     @@COMMENT  ' Function .......:  @@FUNCTION '
JSMSKEL   0000000400000000000001     @@COMMENT  ' Created on .....:  @@DATE  at  @@TIME  '
JSMSKEL   0000000500000000000001     @@COMMENT  ' Description ....:  @@FUNCDES  '
JSMSKEL   0000000600000000000001     @@COMMENT  ' Template........:  JSMSKEL    '
JSMSKEL   0000000700000000000001     @@COMMENT  '===================================================='
JSMSKEL   0000000800000000000001     FUNCTION   OPTIONS(*DIRECT)
JSMSKEL   0000000900000000000001     @@COMMENT  '                               '
JSMSKEL   0000001000000000000001     @@COMMENT  ' OPEN JSM AND VERIFY STATUS '
JSMSKEL   0000001100000000000001     USE        BUILTIN(JSM_OPEN) TO_GET(#JSMSTS #JSMMSG)
JSMSKEL   0000001200000000000001     EXECUTE    SUBROUTINE(CHECK_STS)
JSMSKEL   0000001300000000000001     @@COMMENT  '                               '
JSMSKEL   0000001400000000000001     @@QUESTION PROMPT('Do you wish to load a JSM Service?') ANSWER(@@CANS001) EXTEND('If yes, type in the name of the Service to load, for example HTTPCLIENT.') LOWER(*NO)
JSMSKEL   0000001500000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(L01)
JSMSKEL   0000001600000000000001     @@COMMENT  'BUILD THE SERVICE LOAD COMMAND  '
JSMSKEL   0000001700000000000001     CHANGE     FIELD(#JSMCMD) TO(SERVICE_LOAD)
JSMSKEL   0000001800000000000001     EXECUTE    SUBROUTINE(KEYWRD) WITH_PARMS('''SERVICE''' '@@CANS001' )
JSMSKEL   0000001900000000000001     USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
JSMSKEL   0000002000000000000001     EXECUTE    SUBROUTINE(CHECK_STS)
JSMSKEL   0000002100000000000001L01: @@LABEL
JSMSKEL   0000002200000000000001     @@COMMENT  '                                 '
JSMSKEL   0000002300000000000001     @@COMMENT  '    YOUR OWN LOGIC HERE          '
JSMSKEL   0000002400000000000001     @@COMMENT  '                                 '
JSMSKEL   0000002500000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(L02)
JSMSKEL   0000002600000000000001     @@COMMENT  'UNLOAD SERVICE                   '
JSMSKEL   0000002700000000000001     CHANGE     FIELD(#JSMCMD) TO(SERVICE_UNLOAD)
JSMSKEL   0000002800000000000001     USE        BUILTIN(JSM_COMMAND) WITH_ARGS(SERVICE_UNLOAD) TO_GET(#JSMSTS #JSMMSG)
JSMSKEL   0000002900000000000001     EXECUTE    SUBROUTINE(CHECK_STS)
JSMSKEL   0000003000000000000001L02: @@LABEL
JSMSKEL   0000003100000000000001     @@COMMENT  'CLOSE JSM AND VERIFY STATUS '
JSMSKEL   0000003200000000000001     USE        BUILTIN(JSM_CLOSE) TO_GET(#JSMSTS #JSMMSG)
JSMSKEL   0000003300000000000001     EXECUTE    SUBROUTINE(CHECK_STS)
JSMSKEL   0000003400000000000001     @@COMMENT  '                                 '
JSMSKEL   0000003500000000000001     RETURN
JSMSKEL   0000003600000000000001     @@COMMENT  '                                 '
JSMSKEL   0000003700000000000001     @@COMMENT  'Subroutine to build JSM commands. existing JSM command'
JSMSKEL   0000003800000000000001     @@COMMENT  '                                 '
JSMSKEL   0000003900000000000001     SUBROUTINE NAME(KEYWRD) PARMS((#KEYWORD *RECEIVED) (#KEYW_VAL1 *RECEIVED))
JSMSKEL   0000004000000000000001     DEFINE     FIELD(#KEYWORD) REFFLD(#STD_TEXT)
JSMSKEL   0000004100000000000001     DEFINE     FIELD(#KEYW_VAL1) REFFLD(#STD_TEXTL)
JSMSKEL   0000004200000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#JSMCMD #KEYWORD) TO_GET(#JSMCMD)
JSMSKEL   0000004300000000000001     USE        BUILTIN(TCONCAT) WITH_ARGS(#JSMCMD '''(''' #KEYW_VAL1 ''')''') TO_GET(#JSMCMD)
JSMSKEL   0000004400000000000001     ENDROUTINE
JSMSKEL   0000004500000000000001     @@COMMENT  '                                  '
JSMSKEL   0000004600000000000001     @@COMMENT  ' Check the status of the JSM command issued'
JSMSKEL   0000004700000000000001     @@COMMENT  '                                  '
JSMSKEL   0000004800000000000001     SUBROUTINE NAME(CHECK_STS)
JSMSKEL   0000004900000000000001     @@COMMENT  '                                  '
JSMSKEL   0000005000000000000001     DEFINE     FIELD(#MSGDTA) TYPE(*CHAR) LENGTH(132)
JSMSKEL   0000005100000000000001     @@COMMENT  '                                  '
JSMSKEL   0000005200000000000001     IF         COND('#JSMSTS *NE OK')
JSMSKEL   0000005300000000000001     @@COMMENT  '                                  '
JSMSKEL   0000005400000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS('''Error Status Code: ''' #JSMSTS) TO_GET(#MSGDTA)
JSMSKEL   0000005500000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#MSGDTA)
JSMSKEL   0000005600000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS('''Error Message: ''' #JSMMSG) TO_GET(#MSGDTA)
JSMSKEL   0000005700000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#MSGDTA)
JSMSKEL   0000005800000000000001     ENDIF
JSMSKEL   0000005900000000000001     @@COMMENT  '                                   '
JSMSKEL   0000006000000000000001     ENDROUTINE
JSMXSKEL  0000000100000000000001     @@COMMENT  '===================================================='
JSMXSKEL  0000000200000000000001     @@COMMENT  ' Process ........:  @@PROCESS  '
JSMXSKEL  0000000300000000000001     @@COMMENT  ' Function .......:  @@FUNCTION '
JSMXSKEL  0000000400000000000001     @@COMMENT  ' Created on .....:  @@DATE  at  @@TIME  '
JSMXSKEL  0000000500000000000001     @@COMMENT  ' Description ....:  @@FUNCDES  '
JSMXSKEL  0000000600000000000001     @@COMMENT  ' Template........:  JSMXSKEL    '
JSMXSKEL  0000000700000000000001     @@COMMENT  '===================================================='
JSMXSKEL  0000000800000000000001     FUNCTION   OPTIONS(*DIRECT)
JSMXSKEL  0000000900000000000001     @@COMMENT  '                               '
JSMXSKEL  0000001000000000000001     @@COMMENT  ' OPEN JSM AND VERIFY STATUS '
JSMXSKEL  0000001100000000000001     USE        BUILTIN(JSMX_OPEN) TO_GET(#JSMSTS #JSMMSG #jsmxhdle1)
JSMXSKEL  0000001200000000000001     EXECUTE    SUBROUTINE(CHECK_STS) WITH_PARMS(#jsmxhdle1)
JSMXSKEL  0000001300000000000001     @@COMMENT  '                               '
JSMXSKEL  0000001400000000000001     @@QUESTION PROMPT('Do you wish to load a JSM Service?') ANSWER(@@CANS001) EXTEND('If yes, type in the name of the Service to load, for example HTTPCLIENT.') LOWER(*NO)
JSMXSKEL  0000001500000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(L01)
JSMXSKEL  0000001600000000000001     @@COMMENT  'BUILD THE SERVICE LOAD COMMAND  '
JSMXSKEL  0000001700000000000001     #JSMXCMD   := 'SERVICE_LOAD'
JSMXSKEL  0000001800000000000001     EXECUTE    SUBROUTINE(KEYWRD) WITH_PARMS(#JSMXCMD 'SERVICE' '@@CANS001')
JSMXSKEL  0000001900000000000001     USE        BUILTIN(JSMX_COMMAND) WITH_ARGS(#JSMXHDLE1 #JSMXCMD) TO_GET(#JSMSTS #JSMMSG)
JSMXSKEL  0000002000000000000001     EXECUTE    SUBROUTINE(CHECK_STS) WITH_PARMS(#JSMXHDLE1)
JSMXSKEL  0000002100000000000001L01: @@LABEL
JSMXSKEL  0000002200000000000001     @@COMMENT  '                                 '
JSMXSKEL  0000002300000000000001     @@COMMENT  '    YOUR OWN LOGIC HERE          '
JSMXSKEL  0000002400000000000001     @@COMMENT  '                                 '
JSMXSKEL  0000002500000000000001     @@IF       COND((*IF @@CANS001 *EQ ' ')) GOTO(L02)
JSMXSKEL  0000002600000000000001     @@COMMENT  'UNLOAD SERVICE                   '
JSMXSKEL  0000002700000000000001     #JSMXCMD   := 'SERVICE_UNLOAD'
JSMXSKEL  0000002800000000000001     USE        BUILTIN(JSMX_COMMAND) WITH_ARGS(#JSMXHDLE1 #JSMXCMD) TO_GET(#JSMSTS #JSMMSG)
JSMXSKEL  0000002900000000000001     EXECUTE    SUBROUTINE(CHECK_STS) WITH_PARMS(#JSMXHDLE1)
JSMXSKEL  0000003000000000000001L02: @@LABEL
JSMXSKEL  0000003100000000000001     @@COMMENT  'CLOSE JSM AND VERIFY STATUS '
JSMXSKEL  0000003200000000000001     USE        BUILTIN(JSMX_CLOSE) WITH_ARGS(#JSMXHDLE1) TO_GET(#JSMSTS #JSMMSG)
JSMXSKEL  0000003300000000000001     EXECUTE    SUBROUTINE(CHECK_STS) WITH_PARMS(#JSMXHDLE1)
JSMXSKEL  0000003400000000000001     @@COMMENT  '                                 '
JSMXSKEL  0000003500000000000001     RETURN
JSMXSKEL  0000003600000000000001     @@COMMENT  '                                 '
JSMXSKEL  0000003700000000000001     @@COMMENT  'Subroutine to build JSM commands. existing JSM command'
JSMXSKEL  0000003800000000000001     @@COMMENT  '                                 '
JSMXSKEL  0000003900000000000001     SUBROUTINE NAME(KEYWRD) PARMS((#W_CMDX *BOTH) (#W_KEYWRD *RECEIVED) (#W_KEYVAL *RECEIVED))
JSMXSKEL  0000004000000000000001     DEFINE     FIELD(#W_CMDX) REFFLD(#JSMXCMD)
JSMXSKEL  0000004100000000000001     DEFINE     FIELD(#W_KEYWRD) REFFLD(#STD_TEXT)
JSMXSKEL  0000004200000000000001     DEFINE     FIELD(#W_KEYVAL) REFFLD(#STD_TEXTL)
JSMXSKEL  0000004300000000000001     #W_CMDX    += ' ' + #W_KEYWRD + '(' + #W_KEYVAL + ')'
JSMXSKEL  0000004400000000000001     ENDROUTINE
JSMXSKEL  0000004500000000000001     @@COMMENT  '                                  '
JSMXSKEL  0000004600000000000001     @@COMMENT  ' Check the status of the JSM command issued'
JSMXSKEL  0000004700000000000001     @@COMMENT  '                                  '
JSMXSKEL  0000004800000000000001     SUBROUTINE NAME(CHECK_STS) PARMS(#W_HDLE)
JSMXSKEL  0000004900000000000001     @@COMMENT  '                                  '
JSMXSKEL  0000005000000000000001     DEFINE     FIELD(#MSGDTA) TYPE(*CHAR) LENGTH(132)
JSMXSKEL  0000005100000000000001     DEFINE     FIELD(#W_HDLE) TYPE(*CHAR) LENGTH(4)
JSMXSKEL  0000005200000000000001     @@COMMENT  '                                  '
JSMXSKEL  0000005300000000000001     IF         COND('#JSMSTS *NE OK')
JSMXSKEL  0000005400000000000001     @@COMMENT  '                                  '
JSMXSKEL  0000005500000000000001     #MSGDTA    := 'Error Status Code: ' + #JSMSTS
JSMXSKEL  0000005600000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#MSGDTA)
JSMXSKEL  0000005700000000000001     #MSGDTA    := 'Error Message: ' + #JSMMSG
JSMXSKEL  0000005800000000000001     MESSAGE    MSGID(DCM9899) MSGF(DC@M01) MSGDTA(#MSGDTA)
JSMXSKEL  0000005900000000000001     ENDIF
JSMXSKEL  0000006000000000000001     @@COMMENT  '                                   '
JSMXSKEL  0000006100000000000001     ENDROUTINE
JSMXSKEL  0000006200000000000001 
VL_BASEBOB0000000100000000000001     @@QUESTION PROMPT('Do you wish to continue?') ANSWER(@@CANS001) EXTEND('This template produces a skeleton Business Object Browser.' 'It is based on the demonstration personnel system.' 'Please read the comments supplied in the code carefully' 'and replace the file and fields shown by the ones you wish to use.' 'You should execute templates VL_BASEBOF and VL_BASEBOD first so that' 'the Business Object Detailers and Filter exist before making ' 'reference to them in this form.' 'See help for further information.') LOWER(*NO) HELPIDS(HELP010)
VL_BASEBOB0000000200000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(E99)
VL_BASEBOB0000000300000000000001     @@ROUTEBEG
VL_BASEBOB0000000400000000000001     BEGIN_COM  BORDERICONS(Maximize+Minimize+SystemMenu) CAPTION('Business Object Browser') HEIGHT(373) LEFT(10) TOP(135) VISUALSTYLE(#VS_NORM) WIDTH(492)
VL_BASEBOB0000000500000000000001     @@ROUTEDEF
VL_BASEBOB0000000600000000000001     /* **********                                                         */
VL_BASEBOB0000000700000000000001     /* ********** Business Object Browser Template                        */
VL_BASEBOB0000000800000000000001     /* ********** Version  1.0                                            */
VL_BASEBOB0000000900000000000001     /* **********                                                         */
VL_BASEBOB0000001000000000000001     /* **********                                                         */
VL_BASEBOB0000001100000000000001     /* ********** Tree view of Business Objects.                          */
VL_BASEBOB0000001200000000000001     /* ********** Open component tab of editor.                           */
VL_BASEBOB0000001300000000000001     /* ********** Replace source fields of tree view columns with         */
VL_BASEBOB0000001400000000000001     /* ********** appropriate names in the property sheet.                */
VL_BASEBOB0000001500000000000001     /* **********                                                         */
VL_BASEBOB0000001600000000000001     DEFINE_COM CLASS(#PRIM_TRVW) NAME(#TREEVIEW) DISPLAYPOSITION(2) HEIGHT(239) LEFT(0) MANAGECHILDREN(True) PARENT(#COM_OWNER) POPUPMENU(#PMNU_1) TABPOSITION(3) TOP(63)WIDTH(185)
VL_BASEBOB0000001700000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_1) KEYPOSITION(1) LEVEL(1) PARENT(#TREEVIEW) SORTPOSITION(2) SOURCE(#DEPTMENT) VISIBLE(False)
VL_BASEBOB0000001800000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_2) DISPLAYPOSITION(1) LEVEL(1) PARENT(#TREEVIEW) SORTPOSITION(1) SOURCE(#DEPTDESC)
VL_BASEBOB0000001900000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_3) KEYPOSITION(1) LEVEL(2) PARENT(#TREEVIEW) SOURCE(#SECTION) VISIBLE(False)
VL_BASEBOB0000002000000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_4) DISPLAYPOSITION(1) LEVEL(2) PARENT(#TREEVIEW) SORTPOSITION(1) SOURCE(#SECDESC)
VL_BASEBOB0000002100000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_5) KEYPOSITION(1) LEVEL(3) PARENT(#TREEVIEW) SOURCE(#EMPNO) VISIBLE(False)
VL_BASEBOB0000002200000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_6) DISPLAYPOSITION(1) LEVEL(3) PARENT(#TREEVIEW) SOURCE(#FULLNAME)
VL_BASEBOB0000002300000000000001     /* **********                                                         */
VL_BASEBOB0000002400000000000001     /* ********** The detail list view shows the details of the children  */
VL_BASEBOB0000002500000000000001     /* ********** of the current tree object.                             */
VL_BASEBOB0000002600000000000001     /* ********** The columns are hidden and displayed as appropriate.    */
VL_BASEBOB0000002700000000000001     /* **********                                                         */
VL_BASEBOB0000002800000000000001     DEFINE_COM CLASS(#PRIM_LTVW) NAME(#LTVW_1) DISPLAYPOSITION(3) HEIGHT(239) LEFT(186) PARENT(#COM_OWNER) TABPOSITION(2) TOP(63) WIDTH(296)
VL_BASEBOB0000002900000000000001     /* **********                                                         */
VL_BASEBOB0000003000000000000001     /* ********** Child details of level 1.                               */
VL_BASEBOB0000003100000000000001     /* ********** Replace source fields of list view columns with         */
VL_BASEBOB0000003200000000000001     /* ********** appropriate names.                                      */
VL_BASEBOB0000003300000000000001     /* **********                                                         */
VL_BASEBOB0000003400000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_21) CAPTION('Level 2') CAPTIONTYPE(Caption) DISPLAYPOSITION(2) PARENT(#LTVW_1) SOURCE(#SECTION) WIDTH(20)
VL_BASEBOB0000003500000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_22) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#SECDESC) VISIBLE(False) WIDTH(50)
VL_BASEBOB0000003600000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_23) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#SECPHBUS) VISIBLE(False) WIDTH(20)
VL_BASEBOB0000003700000000000001     /* **********                                                         */
VL_BASEBOB0000003800000000000001     /* ********** Child details of level 2.                               */
VL_BASEBOB0000003900000000000001     /* ********** Replace source fields of list view columns with         */
VL_BASEBOB0000004000000000000001     /* ********** appropriate names.                                      */
VL_BASEBOB0000004100000000000001     /* **********                                                         */
VL_BASEBOB0000004200000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_31) CAPTION('Code') CAPTIONTYPE(Caption) DISPLAYPOSITION(1) PARENT(#LTVW_1) SOURCE(#EMPNO) WIDTH(20)
VL_BASEBOB0000004300000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_32) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#SURNAME) VISIBLE(False) WIDTH(50)
VL_BASEBOB0000004400000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_33) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#SALARY) VISIBLE(False) WIDTH(30)
VL_BASEBOB0000004500000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_34) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#STARTDTE) VISIBLE(False) WIDTH(30)
VL_BASEBOB0000004600000000000001     /* **********                                                         */
VL_BASEBOB0000004700000000000001     /* ********** Timer used for layout manager emulation.                */
VL_BASEBOB0000004800000000000001     /* **********                                                         */
VL_BASEBOB0000004900000000000001     DEFINE_COM CLASS(#PRIM_TIMR) NAME(#TIMR_1) INTERVAL(0)
VL_BASEBOB0000005000000000000001     /* **********                                                         */
VL_BASEBOB0000005100000000000001     /* ********** Status bar to display validation and other messages.    */
VL_BASEBOB0000005200000000000001     /* **********                                                         */
VL_BASEBOB0000005300000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) DISPLAYPOSITION(4) HEIGHT(25) LEFT(0) MESSAGEPOSITION(1) PARENT(#COM_OWNER) TABPOSITION(4) TOP(302) WIDTH(484)
VL_BASEBOB0000005400000000000001     /* **********                                                         */
VL_BASEBOB0000005500000000000001     /* ********** These group boxes and labels are displayed at the top   */
VL_BASEBOB0000005600000000000001     /* ********** of the tree and detail list.                            */
VL_BASEBOB0000005700000000000001     /* ********** Change captions if required.                            */
VL_BASEBOB0000005800000000000001     /* **********                                                         */
VL_BASEBOB0000005900000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#LSTTL1) DISPLAYPOSITION(6) HEIGHT(26) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(6) TABSTOP(False) TOP(37) WIDTH(187)
VL_BASEBOB0000006000000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#LSTTL2) DISPLAYPOSITION(5) HEIGHT(26) LEFT(186) PARENT(#COM_OWNER) TABPOSITION(5) TABSTOP(False) TOP(37) WIDTH(300)
VL_BASEBOB0000006100000000000001     DEFINE_COM CLASS(#PRIM_LABL) NAME(#LABL_1) CAPTION('AllObjects') DISPLAYPOSITION(1) HEIGHT(12) LEFT(6) PARENT(#LSTTL1) TABPOSITION(1) TABSTOP(False) TOP(8) WIDTH(150)
VL_BASEBOB0000006200000000000001     DEFINE_COM CLASS(#PRIM_LABL) NAME(#LABL_2) CAPTION('Contents of') DISPLAYPOSITION(1) HEIGHT(12) LEFT(6) PARENT(#LSTTL2) TABPOSITION(1) TABSTOP(False) TOP(8) WIDTH(250)
VL_BASEBOB0000006300000000000001     /* **********                                                         */
VL_BASEBOB0000006400000000000001     /* ********** This group box acts as the tool bar.                    */
VL_BASEBOB0000006500000000000001     /* ********** It contains the selection combo box and tool bar        */
VL_BASEBOB0000006600000000000001     /* ********** buttons.                                                */
VL_BASEBOB0000006700000000000001     /* **********                                                         */
VL_BASEBOB0000006800000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#TOOLS) DISPLAYPOSITION(7) HEIGHT(37) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(7) TABSTOP(False) TOP(0) WIDTH(485)
VL_BASEBOB0000006900000000000001     DEFINE_COM CLASS(#PRIM_CMBX) NAME(#CMBX_1) DISPLAYPOSITION(2) HEIGHT(22) LEFT(4) PARENT(#TOOLS) TABPOSITION(2)WIDTH(185)
VL_BASEBOB0000007000000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBCL_1) DISPLAYPOSITION(1) PARENT(#CMBX_1) SOURCE(#DEPTDESC) WIDTH(20)
VL_BASEBOB0000007100000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBCL_2) PARENT(#CMBX_1) SOURCE(#DEPTMENT) VISIBLE(False) WIDTH(20)
VL_BASEBOB0000007200000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_NEW) DISPLAYPOSITION(7) HEIGHT(22) HINT('Create new object') IMAGE(#VB_NEW) LEFT(195) PARENT(#TOOLS) TABPOSITION(7) WIDTH(22)
VL_BASEBOB0000007300000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_SAV) DISPLAYPOSITION(5) HEIGHT(22) HINT('Save changed data') IMAGE(#VB_SAVE) LEFT(218) PARENT(#TOOLS) TABPOSITION(5) WIDTH(22)
VL_BASEBOB0000007400000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_DEL) DISPLAYPOSITION(6) ENABLED(False) HEIGHT(22) HINT('Delete currentobject') IMAGE(#VB_DELETE) LEFT(241) PARENT(#TOOLS) TABPOSITION(6) WIDTH(22)
VL_BASEBOB0000007500000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_CUT) DISPLAYPOSITION(1) ENABLED(False) HEIGHT(22) HINT('CUT') IMAGE(#VB_CUT) LEFT(287) PARENT(#TOOLS) TABPOSITION(1) WIDTH(22)
VL_BASEBOB0000007600000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_PST) DISPLAYPOSITION(4) ENABLED(False) HEIGHT(22) HINT('PASTE') IMAGE(#VB_PASTE) LEFT(310) PARENT(#TOOLS) TABPOSITION(4) WIDTH(22)
VL_BASEBOB0000007700000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_CLS) DISPLAYPOSITION(3) HEIGHT(22) HINT('Close Application') IMAGE(#VB_CLOSE) LEFT(356) PARENT(#TOOLS) TABPOSITION(3) WIDTH(22)
VL_BASEBOB0000007800000000000001     /* **********                                                         */
VL_BASEBOB0000007900000000000001     /* ********** Standard menu bar.                                      */
VL_BASEBOB0000008000000000000001     /* ********** Change caption names as required.                       */
VL_BASEBOB0000008100000000000001     /* **********                                                         */
VL_BASEBOB0000008200000000000001     DEFINE_COM CLASS(#PRIM_MBAR) NAME(#MBAR_1) PARENT(#COM_OWNER)
VL_BASEBOB0000008300000000000001     /* **********                                                         */
VL_BASEBOB0000008400000000000001     /* ********** Object menu                                             */
VL_BASEBOB0000008500000000000001     /* **********                                                         */
VL_BASEBOB0000008600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_OBJ) CAPTION('&Object') DISPLAYPOSITION(1) PARENT(#MBAR_1)
VL_BASEBOB0000008700000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_1) PARENT(#MI_OBJ)
VL_BASEBOB0000008800000000000001     /* **********                                                         */
VL_BASEBOB0000008900000000000001     /* ********** New sub menu                                            */
VL_BASEBOB0000009000000000000001     /* **********                                                         */
VL_BASEBOB0000009100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_NEW) CAPTION('&New') DISPLAYPOSITION(1) PARENT(#SMNU_1)
VL_BASEBOB0000009200000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_NEW) PARENT(#MI_NEW)
VL_BASEBOB0000009300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MINW_1) CAPTION('Level 1') DISPLAYPOSITION(1) PARENT(#SMNU_NEW)
VL_BASEBOB0000009400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MINW_2) CAPTION('Level 2') DISPLAYPOSITION(2) ENABLED(False) PARENT(#SMNU_NEW)
VL_BASEBOB0000009500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MINW_3) CAPTION('Level 3') DISPLAYPOSITION(3) ENABLED(False) PARENT(#SMNU_NEW)
VL_BASEBOB0000009600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_SAV) CAPTION('&Save') DISPLAYPOSITION(2) PARENT(#SMNU_1)
VL_BASEBOB0000009700000000000001     /* **********                                                         */
VL_BASEBOB0000009800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_3) CAPTION('-')DISPLAYPOSITION(3) PARENT(#SMNU_1)
VL_BASEBOB0000009900000000000001     /* **********                                                         */
VL_BASEBOB0000010000000000000001     /* ********** If validation rules exist enable delete menu option.    */
VL_BASEBOB0000010100000000000001     /* **********                                                         */
VL_BASEBOB0000010200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_4) CAPTION('&Delete') DISPLAYPOSITION(4) ENABLED(False) PARENT(#SMNU_1)
VL_BASEBOB0000010300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_5) CAPTION('D&etails') DEFAULT(True) DISPLAYPOSITION(5) PARENT(#SMNU_1)
VL_BASEBOB0000010400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_6) CAPTION('-')DISPLAYPOSITION(6) PARENT(#SMNU_1)
VL_BASEBOB0000010500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_7) CAPTION('&Close') DISPLAYPOSITION(7) PARENT(#SMNU_1)
VL_BASEBOB0000010600000000000001     /* **********                                                         */
VL_BASEBOB0000010700000000000001     /* ********** Edit menu                                               */
VL_BASEBOB0000010800000000000001     /* **********                                                         */
VL_BASEBOB0000010900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_EDT) CAPTION('&Edit') DISPLAYPOSITION(2) PARENT(#MBAR_1)
VL_BASEBOB0000011000000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_2) PARENT(#MI_EDT)
VL_BASEBOB0000011100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_CUT) CAPTION('Cu&t') DISPLAYPOSITION(1) ENABLED(False) PARENT(#SMNU_2)
VL_BASEBOB0000011200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_PST) CAPTION('&Paste') DISPLAYPOSITION(2) ENABLED(False) PARENT(#SMNU_2)
VL_BASEBOB0000011300000000000001     /* **********                                                         */
VL_BASEBOB0000011400000000000001     /* ********** View menu                                               */
VL_BASEBOB0000011500000000000001     /* **********                                                         */
VL_BASEBOB0000011600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_VW) CAPTION('&View') DISPLAYPOSITION(3) PARENT(#MBAR_1)
VL_BASEBOB0000011700000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_3) PARENT(#MI_VW)
VL_BASEBOB0000011800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_RFSH) CAPTION('&Refresh') DISPLAYPOSITION(1) PARENT(#SMNU_3)
VL_BASEBOB0000011900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_FLTR) CAPTION('&Filter') DISPLAYPOSITION(2) PARENT(#SMNU_3)
VL_BASEBOB0000012000000000000001     /* **********                                                         */
VL_BASEBOB0000012100000000000001     /* ********** Tools menu                                              */
VL_BASEBOB0000012200000000000001     /* **********                                                         */
VL_BASEBOB0000012300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_TLS) CAPTION('&Tools') DISPLAYPOSITION(4) PARENT(#MBAR_1)
VL_BASEBOB0000012400000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_4) PARENT(#MI_TLS)
VL_BASEBOB0000012500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_CNCT) CAPTION('&Connect') DISPLAYPOSITION(1) PARENT(#SMNU_4)
VL_BASEBOB0000012600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_DCNCT) CAPTION('&Disconnect') DISPLAYPOSITION(2) PARENT(#SMNU_4)
VL_BASEBOB0000012700000000000001     /* **********                                                         */
VL_BASEBOB0000012800000000000001     /* ********** Help menu                                               */
VL_BASEBOB0000012900000000000001     /* **********                                                         */
VL_BASEBOB0000013000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_HLP) CAPTION('&Help') DISPLAYPOSITION(5) PARENT(#MBAR_1)
VL_BASEBOB0000013100000000000001     /* **********                                                         */
VL_BASEBOB0000013200000000000001     /* ********** Standard pop up menu.                                   */
VL_BASEBOB0000013300000000000001     /* ********** Change caption names as required.                       */
VL_BASEBOB0000013400000000000001     /* **********                                                         */
VL_BASEBOB0000013500000000000001     DEFINE_COM CLASS(#PRIM_PMNU) NAME(#PMNU_1)
VL_BASEBOB0000013600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIP_DTL) CAPTION('&Details') DEFAULT(True) DISPLAYPOSITION(1) PARENT(#PMNU_1)
VL_BASEBOB0000013700000000000001     /* **********                                                         */
VL_BASEBOB0000013800000000000001     /* ********** If validation rules exist enable delete menu option.    */
VL_BASEBOB0000013900000000000001     /* **********                                                         */
VL_BASEBOB0000014000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIP_DLT) CAPTION('D&elete') DISPLAYPOSITION(2) ENABLED(False) PARENT(#PMNU_1)
VL_BASEBOB0000014100000000000001     /* **********                                                         */
VL_BASEBOB0000014200000000000001     /* ********** New sub menu                                            */
VL_BASEBOB0000014300000000000001     /* **********                                                         */
VL_BASEBOB0000014400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIP_NEW) CAPTION('&New') DISPLAYPOSITION(3) PARENT(#PMNU_1)
VL_BASEBOB0000014500000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_PNEW) PARENT(#MIP_NEW)
VL_BASEBOB0000014600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIPNW_1) CAPTION('Level 1') DISPLAYPOSITION(1) PARENT(#SMNU_PNEW)
VL_BASEBOB0000014700000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIPNW_2) CAPTION('Level 2') DISPLAYPOSITION(2) ENABLED(False) PARENT(#SMNU_PNEW)
VL_BASEBOB0000014800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIPNW_3) CAPTION('Level 3') DISPLAYPOSITION(3) ENABLED(False) PARENT(#SMNU_PNEW)
VL_BASEBOB0000014900000000000001     /* **********                                                         */
VL_BASEBOB0000015000000000000001     /* ********** The Level 3 list shows a view of just the level 3       */
VL_BASEBOB0000015100000000000001     /* ********** objects. It is made visible by selection in the filter  */
VL_BASEBOB0000015200000000000001     /* ********** form.                                                   */
VL_BASEBOB0000015300000000000001     /* ********** Change the source field names for each column.          */
VL_BASEBOB0000015400000000000001     /* **********                                                         */
VL_BASEBOB0000015500000000000001     DEFINE_COM CLASS(#PRIM_LTVW) NAME(#LVL3LST) DISPLAYPOSITION(1) HEIGHT(239) LEFT(0) PARENT(#COM_OWNER) POPUPMENU(#PMNU_1) TABPOSITION(1) TOP(64) VISIBLE(False) VISUALSTYLE(#VS_NORM) WIDTH(185)
VL_BASEBOB0000015600000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_61) CAPTION('Name 1') CAPTIONTYPE(Caption) DISPLAYPOSITION(1) MINIMUMWIDTH(10) PARENT(#LVL3LST) SOURCE(#SURNAME) WIDTH(50)
VL_BASEBOB0000015700000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_62) CAPTION('Name 2') CAPTIONTYPE(Caption) DISPLAYPOSITION(2) MINIMUMWIDTH(10) PARENT(#LVL3LST) SOURCE(#GIVENAME) WIDTH(20) WIDTHTYPE(Remainder)
VL_BASEBOB0000015800000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_63) PARENT(#LVL3LST) SOURCE(#EMPNO) VISIBLE(False) WIDTH(20)
VL_BASEBOB0000015900000000000001     /* **********                                                         */
VL_BASEBOB0000016000000000000001     /* **********                                                         */
VL_BASEBOB0000016100000000000001     /* ********** Member detail and filter forms. Replace names with      */
VL_BASEBOB0000016200000000000001     /* ********** new form names created using VL_basebod & VL_basebof.   */
VL_BASEBOB0000016300000000000001     /* **********                                                         */
VL_BASEBOB0000016400000000000001     /* ********** Definition of level 1 Business Object Detail form.      */
VL_BASEBOB0000016500000000000001     /* ********** This form is defined as a keyed collection (or multi-   */
VL_BASEBOB0000016600000000000001     /* ********** instance) form. It can be changed to a single instance  */
VL_BASEBOB0000016700000000000001     /* ********** form by copying the level 2 Business Object Detailer.   */
VL_BASEBOB0000016800000000000001     /* ********** Invoke commands must also be changed.                   */
VL_BASEBOB0000016900000000000001     /* **********                                                         */
VL_BASEBOB0000017000000000000001     DEFINE_COM CLASS(#PRIM_KCOL) NAME(#VL_DEM21) COLLECTS(#VL_DEM21) KEEPLAST(20) KEYEDBY(#DEPTMENT)
VL_BASEBOB0000017100000000000001     /* **********                                                         */
VL_BASEBOB0000017200000000000001     /* ********** Definition of level 2 Business Object Detail form.      */
VL_BASEBOB0000017300000000000001     /* **********                                                         */
VL_BASEBOB0000017400000000000001     DEFINE_COM CLASS(#VL_DEM22) NAME(#VL_DEM22) BORDERICONS(Maximize+Minimize+SystemMenu) FRAMESTYLE(Single) HEIGHT(350) LEFT(400) TOP(80) VISUALSTYLEOFPARENT(True) WIDTH(386)
VL_BASEBOB0000017500000000000001     /* **********                                                         */
VL_BASEBOB0000017600000000000001     /* ********** Definition of level 3 Business Object Detail form.      */
VL_BASEBOB0000017700000000000001     /* **********                                                         */
VL_BASEBOB0000017800000000000001     DEFINE_COM CLASS(#VL_DEM23) NAME(#VL_DEM23) BORDERICONS(Maximize+Minimize+SystemMenu) FRAMESTYLE(Sizable) HEIGHT(393) LEFT(240) TOP(180) VISIBLE(False) WIDTH(500)
VL_BASEBOB0000017900000000000001     /* **********                                                         */
VL_BASEBOB0000018000000000000001     /* ********** Definition of Business Object Filter form.              */
VL_BASEBOB0000018100000000000001     /* **********                                                         */
VL_BASEBOB0000018200000000000001     DEFINE_COM CLASS(#VL_DEM28) NAME(#VL_DEM28) BORDERICONS(Maximize+Minimize+SystemMenu) FRAMESTYLE(Sizable)
VL_BASEBOB0000018300000000000001     /* **********                                                         */
VL_BASEBOB0000018400000000000001     /* ********** Definition of Utility server connection form.           */
VL_BASEBOB0000018500000000000001     /* ********** If this form is not required remove this definition and */
VL_BASEBOB0000018600000000000001     /* ********** the option to call it from the 'tools' menu.            */
VL_BASEBOB0000018700000000000001     /* ********** If required it can be copied and renamed.               */
VL_BASEBOB0000018800000000000001     /* **********                                                         */
VL_BASEBOB0000018900000000000001     DEFINE_COM CLASS(#VL_DEM27) NAME(#VL_DEM27) FORMPOSITION(Designed) HEIGHT(385) LEFT(390) TOP(136) WIDTH(284)
VL_BASEBOB0000019000000000000001     /* **********                                                         */
VL_BASEBOB0000019100000000000001     /* ********** Work fields for layout manager emulation.               */
VL_BASEBOB0000019200000000000001     /* **********                                                         */
VL_BASEBOB0000019300000000000001     DEFINE     FIELD(#PHEIGHT) TYPE(*DEC) LENGTH(7) DECIMALS(0)
VL_BASEBOB0000019400000000000001     DEFINE     FIELD(#PWIDTH) TYPE(*DEC) LENGTH(7) DECIMALS(0)
VL_BASEBOB0000019500000000000001     DEFINE     FIELD(#WHEIGHT) REFFLD(#PHEIGHT)
VL_BASEBOB0000019600000000000001     DEFINE     FIELD(#WWIDTH) REFFLD(#PWIDTH)
VL_BASEBOB0000019700000000000001     DEFINE     FIELD(#XHEIGHT) REFFLD(#PHEIGHT)
VL_BASEBOB0000019800000000000001     DEFINE     FIELD(#XWIDTH) REFFLD(#PWIDTH)
VL_BASEBOB0000019900000000000001     /* **********                                                         */
VL_BASEBOB0000020000000000000001     /* ********** Work fields for titles.                                 */
VL_BASEBOB0000020100000000000001     /* **********                                                         */
VL_BASEBOB0000020200000000000001     DEFINE     FIELD(#LISTCAP) TYPE(*CHAR) LENGTH(40)
VL_BASEBOB0000020300000000000001     DEFINE     FIELD(#TITLE) TYPE(*CHAR) LENGTH(80)
VL_BASEBOB0000020400000000000001     /* **********                                                         */
VL_BASEBOB0000020500000000000001     /* ********** Work fields to control display position of keyed        */
VL_BASEBOB0000020600000000000001     /* ********** collection.                                             */
VL_BASEBOB0000020700000000000001     /* **********                                                         */
VL_BASEBOB0000020800000000000001     DEFINE     FIELD(#STD_NUMD) REFFLD(#STD_NUM)
VL_BASEBOB0000020900000000000001     DEFINE     FIELD(#STD_QTYD) REFFLD(#STD_QTY)
VL_BASEBOB0000021000000000000001     /* **********                                                         */
VL_BASEBOB0000021100000000000001     /* ********** Work fields used with cut and paste.                    */
VL_BASEBOB0000021200000000000001     /* ********** Replace key fields in definitions below to the          */
VL_BASEBOB0000021300000000000001     /* ********** appropriate names.                                      */
VL_BASEBOB0000021400000000000001     /* **********                                                         */
VL_BASEBOB0000021500000000000001     DEFINE     FIELD(#CUTOBJ) TYPE(*CHAR) LENGTH(1) DEFAULT(N)
VL_BASEBOB0000021600000000000001     DEFINE     FIELD(#OLDLVL3) REFFLD(#EMPNO)
VL_BASEBOB0000021700000000000001     DEFINE     FIELD(#OLDLVL1) REFFLD(#DEPTMENT)
VL_BASEBOB0000021800000000000001     DEFINE     FIELD(#NEWLVL1) REFFLD(#DEPTMENT)
VL_BASEBOB0000021900000000000001     DEFINE     FIELD(#OLDLVL2) REFFLD(#SECTION)
VL_BASEBOB0000022000000000000001     /* **********                                                         */
VL_BASEBOB0000022100000000000001     /* ********** Work fields used to save keys.                          */
VL_BASEBOB0000022200000000000001     /* **********                                                         */
VL_BASEBOB0000022300000000000001     DEFINE     FIELD(#SAVLVL1) REFFLD(#DEPTMENT)
VL_BASEBOB0000022400000000000001     DEFINE     FIELD(#SAVLVL2) REFFLD(#SECTION)
VL_BASEBOB0000022500000000000001     /* **********                                                         */
VL_BASEBOB0000022600000000000001     /* ********** Work fields used with filter.                           */
VL_BASEBOB0000022700000000000001     /* **********                                                         */
VL_BASEBOB0000022800000000000001     DEFINE     FIELD(#FLTRLVL1) REFFLD(#DEPTMENT)
VL_BASEBOB0000022900000000000001     DEFINE     FIELD(#FLTRLVL2) REFFLD(#SECTION)
VL_BASEBOB0000023000000000000001     /* **********                                                         */
VL_BASEBOB0000023100000000000001     /* ********** Working list to filter and sort the level 3 entries.    */
VL_BASEBOB0000023200000000000001     /* ********** Replace fields with appropriate names of fields which   */
VL_BASEBOB0000023300000000000001     /* ********** will be used to filter and sort.                        */
VL_BASEBOB0000023400000000000001     /* **********                                                         */
VL_BASEBOB0000023500000000000001     DEF_LIST   NAME(#TLVL3LST) FIELDS(#SURNAME #GIVENAME #EMPNO #STARTDTER #STARTDTE #TERMDATER #SALARY) TYPE(*WORKING) ENTRYS(5000)
VL_BASEBOB0000023600000000000001     /* **********                                                         */
VL_BASEBOB0000023700000000000001     @@ROUTERTN
VL_BASEBOB0000023800000000000001     EVTROUTINE HANDLING( #com_owner.Initialize )
VL_BASEBOB0000023900000000000001     /* **********                                                         */
VL_BASEBOB0000024000000000000001     /* ********** Load all level 1 information into tree.                 */
VL_BASEBOB0000024100000000000001     /* **********                                                         */
VL_BASEBOB0000024200000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_BASEBOB0000024300000000000001     /* **********                                                         */
VL_BASEBOB0000024400000000000001     /* ********** Save starting position layout manager emulation.        */
VL_BASEBOB0000024500000000000001     /* ********** See Timer click event for form resizing logic.          */
VL_BASEBOB0000024600000000000001     /* **********                                                         */
VL_BASEBOB0000024700000000000001     CHANGE     FIELD(#PHEIGHT) TO('#COM_OWNER.HEIGHT')
VL_BASEBOB0000024800000000000001     CHANGE     FIELD(#PWIDTH) TO('#COM_OWNER.WIDTH')
VL_BASEBOB0000024900000000000001     CHANGE     FIELD(#XHEIGHT) TO('#COM_OWNER.HEIGHT - #LTVW_1.HEIGHT')
VL_BASEBOB0000025000000000000001     CHANGE     FIELD(#XWIDTH) TO('#COM_OWNER.WIDTH  - #LTVW_1.WIDTH')
VL_BASEBOB0000025100000000000001     set        #timr_1 interval(300)
VL_BASEBOB0000025200000000000001     /* **********                                                         */
VL_BASEBOB0000025300000000000001     /* ********** Set form top for keyed collection member form.          */
VL_BASEBOB0000025400000000000001     /* **********                                                         */
VL_BASEBOB0000025500000000000001     CHANGE     FIELD(#STD_NUMD) TO(*ZERO)
VL_BASEBOB0000025600000000000001     /* **********                                                         */
VL_BASEBOB0000025700000000000001     /* ********** Set form left for keyed collection member form.         */
VL_BASEBOB0000025800000000000001     /* **********                                                         */
VL_BASEBOB0000025900000000000001     CHANGE     FIELD(#STD_QTYD) TO(400)
VL_BASEBOB0000026000000000000001     /* **********                                                         */
VL_BASEBOB0000026100000000000001     /* ********** Hide detail list columns until required.                */
VL_BASEBOB0000026200000000000001     /* **********                                                         */
VL_BASEBOB0000026300000000000001     set        ( #lvcl_21 #lvcl_22 #lvcl_23 #lvcl_31 #lvcl_32 #lvcl_33 #lvcl_34 ) visible(false)
VL_BASEBOB0000026400000000000001     /* **********                                                         */
VL_BASEBOB0000026500000000000001     /* ********** Assign icons to the tree view column for level 1.       */
VL_BASEBOB0000026600000000000001     /* **********                                                         */
VL_BASEBOB0000026700000000000001     set        #tvcl_1 image(#vi_deptcl) imageexpanded(#vi_deptop)
VL_BASEBOB0000026800000000000001     ENDROUTINE
VL_BASEBOB0000026900000000000001     /* **********                                                         */
VL_BASEBOB0000027000000000000001     /* ********** Create new object                                       */
VL_BASEBOB0000027100000000000001     /* **********                                                         */
VL_BASEBOB0000027200000000000001     EVTROUTINE HANDLING( #spbn_new.click )
VL_BASEBOB0000027300000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 1')
VL_BASEBOB0000027400000000000001     EXECUTE    SUBROUTINE(NEW_LVL1)
VL_BASEBOB0000027500000000000001     ELSE
VL_BASEBOB0000027600000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 2')
VL_BASEBOB0000027700000000000001     EXECUTE    SUBROUTINE(NEW_LVL2)
VL_BASEBOB0000027800000000000001     ELSE
VL_BASEBOB0000027900000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 3')
VL_BASEBOB0000028000000000000001     EXECUTE    SUBROUTINE(NEW_LVL3)
VL_BASEBOB0000028100000000000001     ENDIF
VL_BASEBOB0000028200000000000001     ENDIF
VL_BASEBOB0000028300000000000001     ENDIF
VL_BASEBOB0000028400000000000001     ENDROUTINE
VL_BASEBOB0000028500000000000001     /* **********                                                         */
VL_BASEBOB0000028600000000000001     EVTROUTINE HANDLING( #minw_1.Click  #mipnw_1.click )
VL_BASEBOB0000028700000000000001     EXECUTE    SUBROUTINE(NEW_LVL1)
VL_BASEBOB0000028800000000000001     ENDROUTINE
VL_BASEBOB0000028900000000000001     /* **********                                                         */
VL_BASEBOB0000029000000000000001     EVTROUTINE HANDLING( #minw_2.Click  #mipnw_2.click )
VL_BASEBOB0000029100000000000001     EXECUTE    SUBROUTINE(NEW_LVL2)
VL_BASEBOB0000029200000000000001     ENDROUTINE
VL_BASEBOB0000029300000000000001     /* **********                                                         */
VL_BASEBOB0000029400000000000001     EVTROUTINE HANDLING( #minw_3.Click  #mipnw_3.click )
VL_BASEBOB0000029500000000000001     EXECUTE    SUBROUTINE(NEW_LVL3)
VL_BASEBOB0000029600000000000001     ENDROUTINE
VL_BASEBOB0000029700000000000001     /* **********                                                         */
VL_BASEBOB0000029800000000000001     /* ********** Replace the field and form names to the appropriate     */
VL_BASEBOB0000029900000000000001     /* ********** names you wish to use in the three new_lvl routines.    */
VL_BASEBOB0000030000000000000001     /* ********** Note level 1 in this example is a keyed collection.     */
VL_BASEBOB0000030100000000000001     /* ********** If you are not using a keyed collection change the code */
VL_BASEBOB0000030200000000000001     /* ********** to match the level 2 example.                           */
VL_BASEBOB0000030300000000000001     /* ********** This example uses property routines but you could use   */
VL_BASEBOB0000030400000000000001     /* ********** methods instead.                                        */
VL_BASEBOB0000030500000000000001     /* **********                                                         */
VL_BASEBOB0000030600000000000001     SUBROUTINE NAME(NEW_LVL1)
VL_BASEBOB0000030700000000000001     CHANGE     FIELD(#DEPTMENT) TO(*BLANKS)
VL_BASEBOB0000030800000000000001     invoke     #vl_dem21<#deptment>.activateform
VL_BASEBOB0000030900000000000001     set        #vl_dem21<#deptment> dept_value(#deptment)
VL_BASEBOB0000031000000000000001     ENDROUTINE
VL_BASEBOB0000031100000000000001     /* **********                                                         */
VL_BASEBOB0000031200000000000001     SUBROUTINE NAME(NEW_LVL2)
VL_BASEBOB0000031300000000000001     invoke     #vl_dem22.activateform
VL_BASEBOB0000031400000000000001     CHANGE     FIELD(#SECTION) TO(*BLANKS)
VL_BASEBOB0000031500000000000001     set        #vl_dem22 dept_value(#deptment) sect_value(#section)
VL_BASEBOB0000031600000000000001     ENDROUTINE
VL_BASEBOB0000031700000000000001     /* **********                                                         */
VL_BASEBOB0000031800000000000001     SUBROUTINE NAME(NEW_LVL3)
VL_BASEBOB0000031900000000000001     invoke     #vl_dem23.activateform
VL_BASEBOB0000032000000000000001     CHANGE     FIELD(#EMPNO) TO(*BLANKS)
VL_BASEBOB0000032100000000000001     set        #vl_dem23 dept_value(#deptment) sect_value(#section) emp_value(#empno)
VL_BASEBOB0000032200000000000001     ENDROUTINE
VL_BASEBOB0000032300000000000001     /* **********                                                         */
VL_BASEBOB0000032400000000000001     /* ********** Tree Events                                             */
VL_BASEBOB0000032500000000000001     /* **********                                                         */
VL_BASEBOB0000032600000000000001     EVTROUTINE HANDLING(#TREEVIEW.ItemGotFocus)
VL_BASEBOB0000032700000000000001     CLR_LIST   NAMED(#LTVW_1)
VL_BASEBOB0000032800000000000001     CHANGE     FIELD(#STD_COUNT) TO(0)
VL_BASEBOB0000032900000000000001     /* **********                                                         */
VL_BASEBOB0000033000000000000001     /* ********** If tree level is 1, load the second level details to    */
VL_BASEBOB0000033100000000000001     /* ********** the list view.                                          */
VL_BASEBOB0000033200000000000001     /* ********** Enable and disable the appropriate menu items and tool  */
VL_BASEBOB0000033300000000000001     /* ********** bar buttons.                                            */
VL_BASEBOB0000033400000000000001     /* ********** At each level the new options should be available for   */
VL_BASEBOB0000033500000000000001     /* ********** the current level and the next lower level.             */
VL_BASEBOB0000033600000000000001     /* **********                                                         */
VL_BASEBOB0000033700000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 1')
VL_BASEBOB0000033800000000000001     set        ( #minw_3 #mipnw_3 #mitm_cut #spbn_cut ) enabled( false )
VL_BASEBOB0000033900000000000001     set        ( #mi_new #mip_new #spbn_new #minw_1 #minw_2  #mipnw_1 #mipnw_2 ) enabled( true )
VL_BASEBOB0000034000000000000001     CHANGE     FIELD(#SAVLVL1) TO(#DEPTMENT)
VL_BASEBOB0000034100000000000001     EXECUTE    SUBROUTINE(LOAD_LVL2)
VL_BASEBOB0000034200000000000001     ELSE
VL_BASEBOB0000034300000000000001     /* **********                                                         */
VL_BASEBOB0000034400000000000001     /* ********** Else if tree level is 2, load the third level details   */
VL_BASEBOB0000034500000000000001     /* ********** to the list view.                                       */
VL_BASEBOB0000034600000000000001     /* ********** Enable and disable the appropriate menu items and tool  */
VL_BASEBOB0000034700000000000001     /* ********** bar buttons.                                            */
VL_BASEBOB0000034800000000000001     /* ********** At each level the new options should be available for   */
VL_BASEBOB0000034900000000000001     /* ********** the current level and the next lower level.             */
VL_BASEBOB0000035000000000000001     /* **********                                                         */
VL_BASEBOB0000035100000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 2')
VL_BASEBOB0000035200000000000001     set        ( #minw_1 #mipnw_1 ) enabled(false)
VL_BASEBOB0000035300000000000001     set        ( #mi_new #mip_new #spbn_new #minw_2 #minw_3 #mipnw_2 #mipnw_3 #mitm_cut #spbn_cut ) enabled( true )
VL_BASEBOB0000035400000000000001     CHANGE     FIELD(#STD_FLAG) TO(L)
VL_BASEBOB0000035500000000000001     IF         COND('#STD_FILTR *EQ Y')
VL_BASEBOB0000035600000000000001     EXECUTE    SUBROUTINE(FILTER)
VL_BASEBOB0000035700000000000001     ELSE
VL_BASEBOB0000035800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WITH_KEY(#DEPTMENT #SECTION)
VL_BASEBOB0000035900000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_BASEBOB0000036000000000000001     CHANGE     FIELD(#STD_COUNT) TO('#STD_COUNT + 1')
VL_BASEBOB0000036100000000000001     ENDSELECT
VL_BASEBOB0000036200000000000001     set        #lvcl_34 visible( true )
VL_BASEBOB0000036300000000000001     set        #lvcl_33 visible( false )
VL_BASEBOB0000036400000000000001     ENDIF
VL_BASEBOB0000036500000000000001     set        ( #lvcl_21 #lvcl_22 #lvcl_23 ) visible( false )
VL_BASEBOB0000036600000000000001     set        ( #lvcl_31 #lvcl_32 ) visible(true)
VL_BASEBOB0000036700000000000001     set        #lvcl_31 displayposition(1)
VL_BASEBOB0000036800000000000001     set        #lvcl_32 displayposition(2)
VL_BASEBOB0000036900000000000001     /* **********                                                         */
VL_BASEBOB0000037000000000000001     /* ********** Execute routine to determine if delete buttons and menu */
VL_BASEBOB0000037100000000000001     /* ********** options should be enabled/disabled. If using validation */
VL_BASEBOB0000037200000000000001     /* ********** rules this code is not required.                        */
VL_BASEBOB0000037300000000000001     /* **********                                                         */
VL_BASEBOB0000037400000000000001     EXECUTE    SUBROUTINE(SET_DEL)
VL_BASEBOB0000037500000000000001     /* **********                                                         */
VL_BASEBOB0000037600000000000001     /* ********** Set the title of the detail list.                       */
VL_BASEBOB0000037700000000000001     /* **********                                                         */
VL_BASEBOB0000037800000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS('''Employees of ''' #SECDESC) TO_GET(#LISTCAP)
VL_BASEBOB0000037900000000000001     set        #labl_2 caption(#listcap)
VL_BASEBOB0000038000000000000001     ELSE
VL_BASEBOB0000038100000000000001     /* **********                                                         */
VL_BASEBOB0000038200000000000001     /* ********** Else if tree level is 2, load the third level details   */
VL_BASEBOB0000038300000000000001     /* ********** to the list view.                                       */
VL_BASEBOB0000038400000000000001     /* ********** Enable and disable the appropriate menu items and tool  */
VL_BASEBOB0000038500000000000001     /* ********** bar buttons.                                            */
VL_BASEBOB0000038600000000000001     /* ********** At each level the new options should be available for   */
VL_BASEBOB0000038700000000000001     /* ********** the current level and the next lower level.             */
VL_BASEBOB0000038800000000000001     /* **********                                                         */
VL_BASEBOB0000038900000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 3')
VL_BASEBOB0000039000000000000001     set        ( #minw_1 #minw_2 #mipnw_1 #mipnw_2 ) enabled(false)
VL_BASEBOB0000039100000000000001     set        ( #mi_new #mip_new #spbn_new #minw_3 #mipnw_3  #mitm_cut #spbn_cut ) enabled(true)
VL_BASEBOB0000039200000000000001     /* **********                                                         */
VL_BASEBOB0000039300000000000001     /* ********** Perform checks to see if the focus item can be deleted. */
VL_BASEBOB0000039400000000000001     /* ********** If using validation rules this check is not required.   */
VL_BASEBOB0000039500000000000001     /* **********                                                         */
VL_BASEBOB0000039600000000000001     EXECUTE    SUBROUTINE(CHK_LVL3)
VL_BASEBOB0000039700000000000001     ENDIF
VL_BASEBOB0000039800000000000001     ENDIF
VL_BASEBOB0000039900000000000001     ENDIF
VL_BASEBOB0000040000000000000001     /* **********                                                         */
VL_BASEBOB0000040100000000000001     /* ********** Execute routine to determine if delete buttons and menu */
VL_BASEBOB0000040200000000000001     /* ********** options should be enabled/disabled. If using validation */
VL_BASEBOB0000040300000000000001     /* ********** rules this code is not required.                        */
VL_BASEBOB0000040400000000000001     /* **********                                                         */
VL_BASEBOB0000040500000000000001     EXECUTE    SUBROUTINE(SET_DEL)
VL_BASEBOB0000040600000000000001     ENDROUTINE
VL_BASEBOB0000040700000000000001     /* **********                                                         */
VL_BASEBOB0000040800000000000001     EVTROUTINE HANDLING(#TREEVIEW.ItemExpanding)
VL_BASEBOB0000040900000000000001     /* **********                                                         */
VL_BASEBOB0000041000000000000001     /* ********** Check which tree level is being expanded.               */
VL_BASEBOB0000041100000000000001     /* ********** Replace section with appropriate key field.             */
VL_BASEBOB0000041200000000000001     /* **********                                                         */
VL_BASEBOB0000041300000000000001     IF         COND('#SECTION *EQ *BLANKS')
VL_BASEBOB0000041400000000000001     MESSAGE    MSGTXT('Loading Sections') TYPE(*STATUS)
VL_BASEBOB0000041500000000000001     /* **********                                                         */
VL_BASEBOB0000041600000000000001     /* ********** Change next level tree columns to null.                 */
VL_BASEBOB0000041700000000000001     /* **********                                                         */
VL_BASEBOB0000041800000000000001     CHANGE     FIELD(#EMPNO #FULLNAME) TO(*NULL)
VL_BASEBOB0000041900000000000001     /* **********                                                         */
VL_BASEBOB0000042000000000000001     /* ********** Check if a filter is active and if a filter selection   */
VL_BASEBOB0000042100000000000001     /* ********** has been made for this level.                           */
VL_BASEBOB0000042200000000000001     /* **********                                                         */
VL_BASEBOB0000042300000000000001     IF         COND('( #STD_FILTR *EQ Y ) AND ( #FLTRLVL2 *NE *BLANKS )')
VL_BASEBOB0000042400000000000001     /* **********                                                         */
VL_BASEBOB0000042500000000000001     /* ********** If a filter selection has been made for this level      */
VL_BASEBOB0000042600000000000001     /* ********** fetch the appropriate record.                           */
VL_BASEBOB0000042700000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_BASEBOB0000042800000000000001     /* ********** details and add to tree.                                */
VL_BASEBOB0000042900000000000001     /* ********** Add icons to tree columns if required.                  */
VL_BASEBOB0000043000000000000001     /* **********                                                         */
VL_BASEBOB0000043100000000000001     FETCH      FIELDS(#SECTION #SECDESC) FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT #FLTRLVL2)
VL_BASEBOB0000043200000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_BASEBOB0000043300000000000001     /* **********                                                         */
VL_BASEBOB0000043400000000000001     /* ********** Assign icons to tree level 2                            */
VL_BASEBOB0000043500000000000001     /* **********                                                         */
VL_BASEBOB0000043600000000000001     set        #treeview.currentitem image(#vi_sectcl) imageexpanded(#vi_sectop)
VL_BASEBOB0000043700000000000001     ELSE
VL_BASEBOB0000043800000000000001     /* **********                                                         */
VL_BASEBOB0000043900000000000001     /* ********** If no filter active or all items for this level         */
VL_BASEBOB0000044000000000000001     /* ********** required select all and add to tree.                    */
VL_BASEBOB0000044100000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_BASEBOB0000044200000000000001     /* ********** details and add to tree.                                */
VL_BASEBOB0000044300000000000001     /* **********                                                         */
VL_BASEBOB0000044400000000000001     SELECT     FIELDS(#SECTION #SECDESC) FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT)
VL_BASEBOB0000044500000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_BASEBOB0000044600000000000001     /* **********                                                         */
VL_BASEBOB0000044700000000000001     /* ********** Assign icons to tree level 2.                           */
VL_BASEBOB0000044800000000000001     /* **********                                                         */
VL_BASEBOB0000044900000000000001     set        #treeview.currentitem image(#vi_sectcl) imageexpanded(#vi_sectop)
VL_BASEBOB0000045000000000000001     ENDSELECT
VL_BASEBOB0000045100000000000001     ENDIF
VL_BASEBOB0000045200000000000001     ELSE
VL_BASEBOB0000045300000000000001     /* **********                                                         */
VL_BASEBOB0000045400000000000001     /* ********** Check which tree level is being expanded.               */
VL_BASEBOB0000045500000000000001     /* ********** Replace empno with appropriate key field.               */
VL_BASEBOB0000045600000000000001     /* **********                                                         */
VL_BASEBOB0000045700000000000001     IF         COND('#EMPNO *EQ *BLANKS')
VL_BASEBOB0000045800000000000001     MESSAGE    MSGTXT('Loading Employee Details') TYPE(*STATUS)
VL_BASEBOB0000045900000000000001     CLR_LIST   NAMED(#TLVL3LST)
VL_BASEBOB0000046000000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_BASEBOB0000046100000000000001     CHANGE     FIELD(#STD_FLAG) TO(T)
VL_BASEBOB0000046200000000000001     /* **********                                                         */
VL_BASEBOB0000046300000000000001     /* ********** If a filter is active call routine to process           */
VL_BASEBOB0000046400000000000001     /* ********** information.                                            */
VL_BASEBOB0000046500000000000001     /* **********                                                         */
VL_BASEBOB0000046600000000000001     IF         COND('#STD_FILTR *EQ Y')
VL_BASEBOB0000046700000000000001     EXECUTE    SUBROUTINE(FILTER)
VL_BASEBOB0000046800000000000001     ELSE
VL_BASEBOB0000046900000000000001     /* **********                                                         */
VL_BASEBOB0000047000000000000001     /* ********** If no filter is active select all records for parent.   */
VL_BASEBOB0000047100000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_BASEBOB0000047200000000000001     /* ********** details and add to tree.                                */
VL_BASEBOB0000047300000000000001     /* **********                                                         */
VL_BASEBOB0000047400000000000001     CHANGE     FIELD(#STD_DIRCT) TO(A)
VL_BASEBOB0000047500000000000001     CHANGE     FIELD(#STD_SORT) TO(N)
VL_BASEBOB0000047600000000000001     SELECT     FIELDS(#EMPNO #DEPTMENT #SECTION #SURNAME #GIVENAME #SALARY #STARTDTER #TERMDATER) FROM_FILE(PSLMST1) WITH_KEY(#DEPTMENT #SECTION)
VL_BASEBOB0000047700000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000047800000000000001     ENDSELECT
VL_BASEBOB0000047900000000000001     ENDIF
VL_BASEBOB0000048000000000000001     ENDIF
VL_BASEBOB0000048100000000000001     ENDIF
VL_BASEBOB0000048200000000000001     ENDROUTINE
VL_BASEBOB0000048300000000000001     /* **********                                                         */
VL_BASEBOB0000048400000000000001     /* ********** This routine is only called if a filter is active and   */
VL_BASEBOB0000048500000000000001     /* ********** the list view of level 3 requested.                     */
VL_BASEBOB0000048600000000000001     /* **********                                                         */
VL_BASEBOB0000048700000000000001     SUBROUTINE NAME(LD_LVL3LST)
VL_BASEBOB0000048800000000000001     MESSAGE    MSGTXT('Loading Employee Details') TYPE(*STATUS)
VL_BASEBOB0000048900000000000001     CLR_LIST   NAMED(#LTVW_1)
VL_BASEBOB0000049000000000000001     CLR_LIST   NAMED(#LVL3LST)
VL_BASEBOB0000049100000000000001     CHANGE     FIELD(#STD_FLAG) TO(E)
VL_BASEBOB0000049200000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_BASEBOB0000049300000000000001     EXECUTE    SUBROUTINE(FILTER)
VL_BASEBOB0000049400000000000001     /* **********                                                         */
VL_BASEBOB0000049500000000000001     /* ********** Enable and position the level 3 columns in the detail   */
VL_BASEBOB0000049600000000000001     /* ********** list.                                                   */
VL_BASEBOB0000049700000000000001     /* **********                                                         */
VL_BASEBOB0000049800000000000001     set        ( #lvcl_31 #lvcl_32 ) visible( true )
VL_BASEBOB0000049900000000000001     set        #lvcl_31 displayposition( 1 )
VL_BASEBOB0000050000000000000001     set        #lvcl_32 displayposition( 2 )
VL_BASEBOB0000050100000000000001     ENDROUTINE
VL_BASEBOB0000050200000000000001     /* **********                                                         */
VL_BASEBOB0000050300000000000001     SUBROUTINE NAME(FILTER)
VL_BASEBOB0000050400000000000001     /* **********                                                         */
VL_BASEBOB0000050500000000000001     /* ********** If all level 1 was selected in filter.                  */
VL_BASEBOB0000050600000000000001     /* **********                                                         */
VL_BASEBOB0000050700000000000001     IF         COND('#FLTRLVL1 *EQ *BLANK')
VL_BASEBOB0000050800000000000001     IF         COND('#STD_FLAG *NE E')
VL_BASEBOB0000050900000000000001     /* **********                                                         */
VL_BASEBOB0000051000000000000001     /* ********** This call was from tree not level 3 list.               */
VL_BASEBOB0000051100000000000001     /* ********** Save and use current level 1 key from tree.             */
VL_BASEBOB0000051200000000000001     /* **********                                                         */
VL_BASEBOB0000051300000000000001     CHANGE     FIELD(#SAVLVL1) TO(#DEPTMENT)
VL_BASEBOB0000051400000000000001     ENDIF
VL_BASEBOB0000051500000000000001     ELSE
VL_BASEBOB0000051600000000000001     /* **********                                                         */
VL_BASEBOB0000051700000000000001     /* ********** Save and use selected level 1 key from filter.          */
VL_BASEBOB0000051800000000000001     /* **********                                                         */
VL_BASEBOB0000051900000000000001     CHANGE     FIELD(#SAVLVL1) TO(#FLTRLVL1)
VL_BASEBOB0000052000000000000001     ENDIF
VL_BASEBOB0000052100000000000001     /* **********                                                         */
VL_BASEBOB0000052200000000000001     /* ********** If all level 2 was selected in filter.                  */
VL_BASEBOB0000052300000000000001     /* **********                                                         */
VL_BASEBOB0000052400000000000001     IF         COND('#FLTRLVL2 *EQ *BLANK')
VL_BASEBOB0000052500000000000001     IF         COND('#STD_FLAG *NE E')
VL_BASEBOB0000052600000000000001     /* **********                                                         */
VL_BASEBOB0000052700000000000001     /* ********** This call was from tree not level 3 list.               */
VL_BASEBOB0000052800000000000001     /* ********** Save and use current level 2 key from tree.             */
VL_BASEBOB0000052900000000000001     /* **********                                                         */
VL_BASEBOB0000053000000000000001     CHANGE     FIELD(#SAVLVL2) TO(#SECTION)
VL_BASEBOB0000053100000000000001     ENDIF
VL_BASEBOB0000053200000000000001     ELSE
VL_BASEBOB0000053300000000000001     /* **********                                                         */
VL_BASEBOB0000053400000000000001     /* ********** Save and use selected level 2 key from filter.          */
VL_BASEBOB0000053500000000000001     /* **********                                                         */
VL_BASEBOB0000053600000000000001     CHANGE     FIELD(#SAVLVL2) TO(#FLTRLVL2)
VL_BASEBOB0000053700000000000001     ENDIF
VL_BASEBOB0000053800000000000001     /* **********                                                         */
VL_BASEBOB0000053900000000000001     CLR_LIST   NAMED(#TLVL3LST)
VL_BASEBOB0000054000000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_BASEBOB0000054100000000000001     IF         COND('#STD_FLAG *NE T')
VL_BASEBOB0000054200000000000001     /* **********                                                         */
VL_BASEBOB0000054300000000000001     /* ********** This call was from the level 3 list not the tree.       */
VL_BASEBOB0000054400000000000001     /* ********** Display appropriate columns in detail list.             */
VL_BASEBOB0000054500000000000001     /* **********                                                         */
VL_BASEBOB0000054600000000000001     set        #lvcl_34 visible( true ) displayposition( 3 )
VL_BASEBOB0000054700000000000001     set        #lvcl_33 visible( false )
VL_BASEBOB0000054800000000000001     ENDIF
VL_BASEBOB0000054900000000000001     /* **********                                                         */
VL_BASEBOB0000055000000000000001     /* ********** If the filter and sort are by date or value execute     */
VL_BASEBOB0000055100000000000001     /* ********** appropriate routine.                                    */
VL_BASEBOB0000055200000000000001     /* **********                                                         */
VL_BASEBOB0000055300000000000001     IF         COND('#STD_SORT *EQ D')
VL_BASEBOB0000055400000000000001     EXECUTE    SUBROUTINE(FLTR_DATE)
VL_BASEBOB0000055500000000000001     ELSE
VL_BASEBOB0000055600000000000001     IF         COND('#STD_SORT *EQ V')
VL_BASEBOB0000055700000000000001     EXECUTE    SUBROUTINE(FLTR_VALUE)
VL_BASEBOB0000055800000000000001     IF         COND('#STD_FLAG *NE T')
VL_BASEBOB0000055900000000000001     set        #lvcl_34 visible( false )
VL_BASEBOB0000056000000000000001     set        #lvcl_33 visible( true ) displayposition( 3 )
VL_BASEBOB0000056100000000000001     ENDIF
VL_BASEBOB0000056200000000000001     ELSE
VL_BASEBOB0000056300000000000001     /* **********                                                         */
VL_BASEBOB0000056400000000000001     /* ********** Else select the level 3 details using the saved keys.   */
VL_BASEBOB0000056500000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_BASEBOB0000056600000000000001     /* ********** details.                                                */
VL_BASEBOB0000056700000000000001     /* **********                                                         */
VL_BASEBOB0000056800000000000001     IF         COND('#SAVLVL2 *NE *BLANKS')
VL_BASEBOB0000056900000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_BASEBOB0000057000000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000057100000000000001     ENDSELECT
VL_BASEBOB0000057200000000000001     ELSE
VL_BASEBOB0000057300000000000001     IF         COND('#SAVLVL1 *NE *BLANKS')
VL_BASEBOB0000057400000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WITH_KEY(#SAVLVL1)
VL_BASEBOB0000057500000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000057600000000000001     ENDSELECT
VL_BASEBOB0000057700000000000001     ELSE
VL_BASEBOB0000057800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1)
VL_BASEBOB0000057900000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000058000000000000001     ENDSELECT
VL_BASEBOB0000058100000000000001     ENDIF
VL_BASEBOB0000058200000000000001     ENDIF
VL_BASEBOB0000058300000000000001     EXECUTE    SUBROUTINE(LVL3_SORT)
VL_BASEBOB0000058400000000000001     ENDIF
VL_BASEBOB0000058500000000000001     ENDIF
VL_BASEBOB0000058600000000000001     ENDROUTINE
VL_BASEBOB0000058700000000000001     /* **********                                                         */
VL_BASEBOB0000058800000000000001     /* ********** This routine executes the appropriate routine according */
VL_BASEBOB0000058900000000000001     /* ********** to the comparison operator.                             */
VL_BASEBOB0000059000000000000001     /* **********                                                         */
VL_BASEBOB0000059100000000000001     SUBROUTINE NAME(FLTR_VALUE)
VL_BASEBOB0000059200000000000001     CLR_LIST   NAMED(#TLVL3LST)
VL_BASEBOB0000059300000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_BASEBOB0000059400000000000001     /* **********                                                         */
VL_BASEBOB0000059500000000000001     IF         COND('#STD_CMPAR *EQ GT')
VL_BASEBOB0000059600000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_BASEBOB0000059700000000000001     EXECUTE    SUBROUTINE(GTV_LVL2)
VL_BASEBOB0000059800000000000001     ELSE
VL_BASEBOB0000059900000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_BASEBOB0000060000000000000001     EXECUTE    SUBROUTINE(GTV_LVL1)
VL_BASEBOB0000060100000000000001     ELSE
VL_BASEBOB0000060200000000000001     EXECUTE    SUBROUTINE(GTV_ALL)
VL_BASEBOB0000060300000000000001     ENDIF
VL_BASEBOB0000060400000000000001     ENDIF
VL_BASEBOB0000060500000000000001     /* **********                                                         */
VL_BASEBOB0000060600000000000001     ELSE
VL_BASEBOB0000060700000000000001     IF         COND('#STD_CMPAR *EQ EQ')
VL_BASEBOB0000060800000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_BASEBOB0000060900000000000001     EXECUTE    SUBROUTINE(EQV_LVL2)
VL_BASEBOB0000061000000000000001     ELSE
VL_BASEBOB0000061100000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_BASEBOB0000061200000000000001     EXECUTE    SUBROUTINE(EQV_LVL1)
VL_BASEBOB0000061300000000000001     ELSE
VL_BASEBOB0000061400000000000001     EXECUTE    SUBROUTINE(EQV_ALL)
VL_BASEBOB0000061500000000000001     ENDIF
VL_BASEBOB0000061600000000000001     ENDIF
VL_BASEBOB0000061700000000000001     /* **********                                                         */
VL_BASEBOB0000061800000000000001     ELSE
VL_BASEBOB0000061900000000000001     IF         COND('#STD_CMPAR *EQ LT')
VL_BASEBOB0000062000000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_BASEBOB0000062100000000000001     EXECUTE    SUBROUTINE(LTV_LVL2)
VL_BASEBOB0000062200000000000001     ELSE
VL_BASEBOB0000062300000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_BASEBOB0000062400000000000001     EXECUTE    SUBROUTINE(LTV_LVL1)
VL_BASEBOB0000062500000000000001     ELSE
VL_BASEBOB0000062600000000000001     EXECUTE    SUBROUTINE(LTV_ALL)
VL_BASEBOB0000062700000000000001     ENDIF
VL_BASEBOB0000062800000000000001     ENDIF
VL_BASEBOB0000062900000000000001     /* **********                                                         */
VL_BASEBOB0000063000000000000001     ENDIF
VL_BASEBOB0000063100000000000001     ENDIF
VL_BASEBOB0000063200000000000001     ENDIF
VL_BASEBOB0000063300000000000001     EXECUTE    SUBROUTINE(LVL3_SORT)
VL_BASEBOB0000063400000000000001     ENDROUTINE
VL_BASEBOB0000063500000000000001     /* **********                                                         */
VL_BASEBOB0000063600000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_BASEBOB0000063700000000000001     /* ********** details in the following routines.                      */
VL_BASEBOB0000063800000000000001     /* **********                                                         */
VL_BASEBOB0000063900000000000001     SUBROUTINE NAME(GTV_ALL)
VL_BASEBOB0000064000000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *GT #STD_NUM')
VL_BASEBOB0000064100000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000064200000000000001     ENDSELECT
VL_BASEBOB0000064300000000000001     ENDROUTINE
VL_BASEBOB0000064400000000000001     /* **********                                                         */
VL_BASEBOB0000064500000000000001     SUBROUTINE NAME(GTV_LVL1)
VL_BASEBOB0000064600000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *GT #STD_NUM') WITH_KEY(#SAVLVL1)
VL_BASEBOB0000064700000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000064800000000000001     ENDSELECT
VL_BASEBOB0000064900000000000001     ENDROUTINE
VL_BASEBOB0000065000000000000001     /* **********                                                         */
VL_BASEBOB0000065100000000000001     SUBROUTINE NAME(GTV_LVL2)
VL_BASEBOB0000065200000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *GT #STD_NUM') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_BASEBOB0000065300000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000065400000000000001     ENDSELECT
VL_BASEBOB0000065500000000000001     ENDROUTINE
VL_BASEBOB0000065600000000000001     /* **********                                                         */
VL_BASEBOB0000065700000000000001     SUBROUTINE NAME(EQV_ALL)
VL_BASEBOB0000065800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *EQ #STD_NUM')
VL_BASEBOB0000065900000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000066000000000000001     ENDSELECT
VL_BASEBOB0000066100000000000001     ENDROUTINE
VL_BASEBOB0000066200000000000001     /* **********                                                         */
VL_BASEBOB0000066300000000000001     SUBROUTINE NAME(EQV_LVL1)
VL_BASEBOB0000066400000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *EQ #STD_NUM') WITH_KEY(#SAVLVL1)
VL_BASEBOB0000066500000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000066600000000000001     ENDSELECT
VL_BASEBOB0000066700000000000001     ENDROUTINE
VL_BASEBOB0000066800000000000001     /* **********                                                         */
VL_BASEBOB0000066900000000000001     SUBROUTINE NAME(EQV_LVL2)
VL_BASEBOB0000067000000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *EQ #STD_NUM') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_BASEBOB0000067100000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000067200000000000001     ENDSELECT
VL_BASEBOB0000067300000000000001     ENDROUTINE
VL_BASEBOB0000067400000000000001     /* **********                                                         */
VL_BASEBOB0000067500000000000001     SUBROUTINE NAME(LTV_ALL)
VL_BASEBOB0000067600000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *LT #STD_NUM')
VL_BASEBOB0000067700000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000067800000000000001     ENDSELECT
VL_BASEBOB0000067900000000000001     ENDROUTINE
VL_BASEBOB0000068000000000000001     /* **********                                                         */
VL_BASEBOB0000068100000000000001     SUBROUTINE NAME(LTV_LVL1)
VL_BASEBOB0000068200000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *LT #STD_NUM') WITH_KEY(#SAVLVL1)
VL_BASEBOB0000068300000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000068400000000000001     ENDSELECT
VL_BASEBOB0000068500000000000001     ENDROUTINE
VL_BASEBOB0000068600000000000001     /* **********                                                         */
VL_BASEBOB0000068700000000000001     SUBROUTINE NAME(LTV_LVL2)
VL_BASEBOB0000068800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *LT #STD_NUM') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_BASEBOB0000068900000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000069000000000000001     ENDSELECT
VL_BASEBOB0000069100000000000001     ENDROUTINE
VL_BASEBOB0000069200000000000001     /* **********                                                         */
VL_BASEBOB0000069300000000000001     /* ********** This routine executes the appropriate routine according */
VL_BASEBOB0000069400000000000001     /* ********** to the comparison operator.                             */
VL_BASEBOB0000069500000000000001     /* **********                                                         */
VL_BASEBOB0000069600000000000001     SUBROUTINE NAME(FLTR_DATE)
VL_BASEBOB0000069700000000000001     CLR_LIST   NAMED(#TLVL3LST)
VL_BASEBOB0000069800000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_BASEBOB0000069900000000000001     /* **********                                                         */
VL_BASEBOB0000070000000000000001     IF         COND('#STD_CMPAR *EQ GT')
VL_BASEBOB0000070100000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_BASEBOB0000070200000000000001     EXECUTE    SUBROUTINE(GTD_LVL2)
VL_BASEBOB0000070300000000000001     ELSE
VL_BASEBOB0000070400000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_BASEBOB0000070500000000000001     EXECUTE    SUBROUTINE(GTD_LVL1)
VL_BASEBOB0000070600000000000001     ELSE
VL_BASEBOB0000070700000000000001     EXECUTE    SUBROUTINE(GTD_ALL)
VL_BASEBOB0000070800000000000001     ENDIF
VL_BASEBOB0000070900000000000001     ENDIF
VL_BASEBOB0000071000000000000001     /* **********                                                         */
VL_BASEBOB0000071100000000000001     ELSE
VL_BASEBOB0000071200000000000001     IF         COND('#STD_CMPAR *EQ EQ')
VL_BASEBOB0000071300000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_BASEBOB0000071400000000000001     EXECUTE    SUBROUTINE(EQD_LVL2)
VL_BASEBOB0000071500000000000001     ELSE
VL_BASEBOB0000071600000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_BASEBOB0000071700000000000001     EXECUTE    SUBROUTINE(EQD_LVL1)
VL_BASEBOB0000071800000000000001     ELSE
VL_BASEBOB0000071900000000000001     EXECUTE    SUBROUTINE(EQD_ALL)
VL_BASEBOB0000072000000000000001     ENDIF
VL_BASEBOB0000072100000000000001     ENDIF
VL_BASEBOB0000072200000000000001     /* **********                                                         */
VL_BASEBOB0000072300000000000001     ELSE
VL_BASEBOB0000072400000000000001     IF         COND('#STD_CMPAR *EQ LT')
VL_BASEBOB0000072500000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_BASEBOB0000072600000000000001     EXECUTE    SUBROUTINE(LTD_LVL2)
VL_BASEBOB0000072700000000000001     ELSE
VL_BASEBOB0000072800000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_BASEBOB0000072900000000000001     EXECUTE    SUBROUTINE(LTD_LVL1)
VL_BASEBOB0000073000000000000001     ELSE
VL_BASEBOB0000073100000000000001     EXECUTE    SUBROUTINE(LTD_ALL)
VL_BASEBOB0000073200000000000001     ENDIF
VL_BASEBOB0000073300000000000001     ENDIF
VL_BASEBOB0000073400000000000001     /* **********                                                         */
VL_BASEBOB0000073500000000000001     ENDIF
VL_BASEBOB0000073600000000000001     ENDIF
VL_BASEBOB0000073700000000000001     ENDIF
VL_BASEBOB0000073800000000000001     EXECUTE    SUBROUTINE(LVL3_SORT)
VL_BASEBOB0000073900000000000001     ENDROUTINE
VL_BASEBOB0000074000000000000001     /* **********                                                         */
VL_BASEBOB0000074100000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_BASEBOB0000074200000000000001     /* ********** details in the following routines.                      */
VL_BASEBOB0000074300000000000001     /* **********                                                         */
VL_BASEBOB0000074400000000000001     SUBROUTINE NAME(GTD_ALL)
VL_BASEBOB0000074500000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *GT #STD_DATE')
VL_BASEBOB0000074600000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000074700000000000001     ENDSELECT
VL_BASEBOB0000074800000000000001     ENDROUTINE
VL_BASEBOB0000074900000000000001     /* **********                                                         */
VL_BASEBOB0000075000000000000001     SUBROUTINE NAME(GTD_LVL1)
VL_BASEBOB0000075100000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *GT #STD_DATE') WITH_KEY(#SAVLVL1)
VL_BASEBOB0000075200000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000075300000000000001     ENDSELECT
VL_BASEBOB0000075400000000000001     ENDROUTINE
VL_BASEBOB0000075500000000000001     /* **********                                                         */
VL_BASEBOB0000075600000000000001     SUBROUTINE NAME(GTD_LVL2)
VL_BASEBOB0000075700000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *GT #STD_DATE') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_BASEBOB0000075800000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000075900000000000001     ENDSELECT
VL_BASEBOB0000076000000000000001     ENDROUTINE
VL_BASEBOB0000076100000000000001     /* **********                                                         */
VL_BASEBOB0000076200000000000001     SUBROUTINE NAME(EQD_ALL)
VL_BASEBOB0000076300000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *EQ #STD_DATE')
VL_BASEBOB0000076400000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000076500000000000001     ENDSELECT
VL_BASEBOB0000076600000000000001     ENDROUTINE
VL_BASEBOB0000076700000000000001     /* **********                                                         */
VL_BASEBOB0000076800000000000001     SUBROUTINE NAME(EQD_LVL1)
VL_BASEBOB0000076900000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *EQ #STD_DATE') WITH_KEY(#SAVLVL1)
VL_BASEBOB0000077000000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000077100000000000001     ENDSELECT
VL_BASEBOB0000077200000000000001     ENDROUTINE
VL_BASEBOB0000077300000000000001     /* **********                                                         */
VL_BASEBOB0000077400000000000001     SUBROUTINE NAME(EQD_LVL2)
VL_BASEBOB0000077500000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *EQ #STD_DATE') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_BASEBOB0000077600000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000077700000000000001     ENDSELECT
VL_BASEBOB0000077800000000000001     ENDROUTINE
VL_BASEBOB0000077900000000000001     /* **********                                                         */
VL_BASEBOB0000078000000000000001     SUBROUTINE NAME(LTD_ALL)
VL_BASEBOB0000078100000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *LT #STD_DATE')
VL_BASEBOB0000078200000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000078300000000000001     ENDSELECT
VL_BASEBOB0000078400000000000001     ENDROUTINE
VL_BASEBOB0000078500000000000001     /* **********                                                         */
VL_BASEBOB0000078600000000000001     SUBROUTINE NAME(LTD_LVL1)
VL_BASEBOB0000078700000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *LT #STD_DATE') WITH_KEY(#SAVLVL1)
VL_BASEBOB0000078800000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000078900000000000001     ENDSELECT
VL_BASEBOB0000079000000000000001     ENDROUTINE
VL_BASEBOB0000079100000000000001     /* **********                                                         */
VL_BASEBOB0000079200000000000001     SUBROUTINE NAME(LTD_LVL2)
VL_BASEBOB0000079300000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *LT #STD_DATE') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_BASEBOB0000079400000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_BASEBOB0000079500000000000001     ENDSELECT
VL_BASEBOB0000079600000000000001     ENDROUTINE
VL_BASEBOB0000079700000000000001     /* **********                                                         */
VL_BASEBOB0000079800000000000001     /* ********** Add entries to temporary work list for sorting.         */
VL_BASEBOB0000079900000000000001     /* **********                                                         */
VL_BASEBOB0000080000000000000001     SUBROUTINE NAME(ADD_TEMP)
VL_BASEBOB0000080100000000000001     ADD_ENTRY  TO_LIST(#TLVL3LST)
VL_BASEBOB0000080200000000000001     CHANGE     FIELD(#STD_COUNT) TO('#STD_COUNT + 1')
VL_BASEBOB0000080300000000000001     ENDROUTINE
VL_BASEBOB0000080400000000000001     /* **********                                                         */
VL_BASEBOB0000080500000000000001     /* ********** Sort work list according to filter requirement.         */
VL_BASEBOB0000080600000000000001     /* ********** Replace sort field names with appropriate names.        */
VL_BASEBOB0000080700000000000001     /* **********                                                         */
VL_BASEBOB0000080800000000000001     SUBROUTINE NAME(LVL3_SORT)
VL_BASEBOB0000080900000000000001     IF         COND('#STD_SORT *EQ C')
VL_BASEBOB0000081000000000000001     /* ********** Do nothing                                              */
VL_BASEBOB0000081100000000000001     ELSE
VL_BASEBOB0000081200000000000001     IF         COND('#STD_SORT *EQ N')
VL_BASEBOB0000081300000000000001     SORT_LIST  NAMED(#TLVL3LST) BY_FIELDS(#SURNAME #GIVENAME)
VL_BASEBOB0000081400000000000001     ELSE
VL_BASEBOB0000081500000000000001     IF         COND('#STD_SORT *EQ D')
VL_BASEBOB0000081600000000000001     SORT_LIST  NAMED(#TLVL3LST) BY_FIELDS(#STARTDTER #SURNAME)
VL_BASEBOB0000081700000000000001     ELSE
VL_BASEBOB0000081800000000000001     IF         COND('#STD_SORT *EQ S')
VL_BASEBOB0000081900000000000001     SORT_LIST  NAMED(#TLVL3LST) BY_FIELDS(#SALARY #SURNAME)
VL_BASEBOB0000082000000000000001     ENDIF
VL_BASEBOB0000082100000000000001     ENDIF
VL_BASEBOB0000082200000000000001     ENDIF
VL_BASEBOB0000082300000000000001     ENDIF
VL_BASEBOB0000082400000000000001     /* **********                                                         */
VL_BASEBOB0000082500000000000001     /* ********** Read list in ascending order as required by filter.     */
VL_BASEBOB0000082600000000000001     /* ********** Add entries to list and tree according to who called    */
VL_BASEBOB0000082700000000000001     /* ********** this processing.                                        */
VL_BASEBOB0000082800000000000001     /* **********                                                         */
VL_BASEBOB0000082900000000000001     IF         COND('#STD_DIRCT *EQ A')
VL_BASEBOB0000083000000000000001     SELECTLIST NAMED(#TLVL3LST)
VL_BASEBOB0000083100000000000001     IF         COND('#STD_FLAG *EQ L')
VL_BASEBOB0000083200000000000001     /* **********                                                         */
VL_BASEBOB0000083300000000000001     /* ********** Detail list                                             */
VL_BASEBOB0000083400000000000001     /* **********                                                         */
VL_BASEBOB0000083500000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_BASEBOB0000083600000000000001     ELSE
VL_BASEBOB0000083700000000000001     IF         COND('#STD_FLAG *EQ E')
VL_BASEBOB0000083800000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_BASEBOB0000083900000000000001     /* **********                                                         */
VL_BASEBOB0000084000000000000001     /* ********** Level 3 list                                            */
VL_BASEBOB0000084100000000000001     /* **********                                                         */
VL_BASEBOB0000084200000000000001     ADD_ENTRY  TO_LIST(#LVL3LST)
VL_BASEBOB0000084300000000000001     ELSE
VL_BASEBOB0000084400000000000001     /* **********                                                         */
VL_BASEBOB0000084500000000000001     /* ********** Tree                                                    */
VL_BASEBOB0000084600000000000001     /* **********                                                         */
VL_BASEBOB0000084700000000000001     EXECUTE    SUBROUTINE(ADD_TREE)
VL_BASEBOB0000084800000000000001     ENDIF
VL_BASEBOB0000084900000000000001     ENDIF
VL_BASEBOB0000085000000000000001     ENDSELECT
VL_BASEBOB0000085100000000000001     ELSE
VL_BASEBOB0000085200000000000001     /* **********                                                         */
VL_BASEBOB0000085300000000000001     /* ********** Else read list in descending order as required by       */
VL_BASEBOB0000085400000000000001     /* ********** filter.                                                 */
VL_BASEBOB0000085500000000000001     /* **********                                                         */
VL_BASEBOB0000085600000000000001     DOWHILE    COND('#STD_COUNT *GT *ZERO')
VL_BASEBOB0000085700000000000001     GET_ENTRY  NUMBER(#STD_COUNT) FROM_LIST(#TLVL3LST)
VL_BASEBOB0000085800000000000001     CHANGE     FIELD(#STD_COUNT) TO('#STD_COUNT - 1')
VL_BASEBOB0000085900000000000001     IF         COND('#STD_FLAG *EQ L')
VL_BASEBOB0000086000000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_BASEBOB0000086100000000000001     ELSE
VL_BASEBOB0000086200000000000001     IF         COND('#STD_FLAG *EQ E')
VL_BASEBOB0000086300000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_BASEBOB0000086400000000000001     ADD_ENTRY  TO_LIST(#LVL3LST)
VL_BASEBOB0000086500000000000001     ELSE
VL_BASEBOB0000086600000000000001     EXECUTE    SUBROUTINE(ADD_TREE)
VL_BASEBOB0000086700000000000001     ENDIF
VL_BASEBOB0000086800000000000001     ENDIF
VL_BASEBOB0000086900000000000001     ENDWHILE
VL_BASEBOB0000087000000000000001     ENDIF
VL_BASEBOB0000087100000000000001     ENDROUTINE
VL_BASEBOB0000087200000000000001     /* **********                                                         */
VL_BASEBOB0000087300000000000001     SUBROUTINE NAME(ADD_TREE)
VL_BASEBOB0000087400000000000001     /* **********                                                         */
VL_BASEBOB0000087500000000000001     /* ********** Perform any formatting required before adding entry to  */
VL_BASEBOB0000087600000000000001     /* ********** tree and assigning an icon.                             */
VL_BASEBOB0000087700000000000001     /* **********                                                         */
VL_BASEBOB0000087800000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#SURNAME '''-''' #GIVENAME) TO_GET(#FULLNAME)
VL_BASEBOB0000087900000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_BASEBOB0000088000000000000001     /* **********                                                         */
VL_BASEBOB0000088100000000000001     /* ********** Assign icons to tree level 3.                           */
VL_BASEBOB0000088200000000000001     /* **********                                                         */
VL_BASEBOB0000088300000000000001     set        #treeview.currentitem image(#vi_employ) imageexpanded(#vi_employ)
VL_BASEBOB0000088400000000000001     ENDROUTINE
VL_BASEBOB0000088500000000000001     /* **********                                                         */
VL_BASEBOB0000088600000000000001     EVTROUTINE HANDLING(#CMBX_1.ItemGotFocus)
VL_BASEBOB0000088700000000000001     /* **********                                                         */
VL_BASEBOB0000088800000000000001     /* ********** Replace deptment with level 1 key.                      */
VL_BASEBOB0000088900000000000001     /* **********                                                         */
VL_BASEBOB0000089000000000000001     CHANGE     FIELD(#STD_CODEL) TO(#DEPTMENT)
VL_BASEBOB0000089100000000000001     SELECTLIST NAMED(#TREEVIEW)
VL_BASEBOB0000089200000000000001     IF         COND('#DEPTMENT *EQ #STD_CODEL')
VL_BASEBOB0000089300000000000001     set        #treeview.currentitem selected(true)
VL_BASEBOB0000089400000000000001     CHANGE     FIELD(#STD_IDNO) TO('#TREEVIEW.FOCUSITEM.ENTRY')
VL_BASEBOB0000089500000000000001     GET_ENTRY  NUMBER(#STD_IDNO) FROM_LIST(#TREEVIEW)
VL_BASEBOB0000089600000000000001     CHANGE     FIELD(#SAVLVL1) TO(#DEPTMENT)
VL_BASEBOB0000089700000000000001     /* **********                                                         */
VL_BASEBOB0000089800000000000001     /* ********** Load level 2 children into details list for current     */
VL_BASEBOB0000089900000000000001     /* ********** level 1 parent.                                         */
VL_BASEBOB0000090000000000000001     /* **********                                                         */
VL_BASEBOB0000090100000000000001     EXECUTE    SUBROUTINE(LOAD_LVL2)
VL_BASEBOB0000090200000000000001     LEAVE
VL_BASEBOB0000090300000000000001     ENDIF
VL_BASEBOB0000090400000000000001     ENDSELECT
VL_BASEBOB0000090500000000000001     ENDROUTINE
VL_BASEBOB0000090600000000000001     /* **********                                                         */
VL_BASEBOB0000090700000000000001     /* ********** Double click in detail list view invokes form           */
VL_BASEBOB0000090800000000000001     /* ********** displaying selected item.                               */
VL_BASEBOB0000090900000000000001     /* **********                                                         */
VL_BASEBOB0000091000000000000001     EVTROUTINE HANDLING(#LTVW_1.DoubleClick)
VL_BASEBOB0000091100000000000001     /* **********                                                         */
VL_BASEBOB0000091200000000000001     /* ********** Determine which level of detail is currently displayed  */
VL_BASEBOB0000091300000000000001     /* ********** in list view.                                           */
VL_BASEBOB0000091400000000000001     /* ********** Invoke the appropriate detail form.                     */
VL_BASEBOB0000091500000000000001     /* ********** Set the detail form properties.                         */
VL_BASEBOB0000091600000000000001     /* **********                                                         */
VL_BASEBOB0000091700000000000001     IF         COND('#LVCL_21.VISIBLE *EQ TRUE')
VL_BASEBOB0000091800000000000001     invoke     #vl_dem22.activateform
VL_BASEBOB0000091900000000000001     set        #vl_dem22 dept_value(#deptment) sect_value(#section) top(#std_num)
VL_BASEBOB0000092000000000000001     MESSAGE    MSGTXT('Invoking ....... form')
VL_BASEBOB0000092100000000000001     ELSE
VL_BASEBOB0000092200000000000001     IF         COND('#LVCL_31.VISIBLE *EQ TRUE')
VL_BASEBOB0000092300000000000001     invoke     #vl_dem23.activateform
VL_BASEBOB0000092400000000000001     set        #vl_dem23 dept_value(#deptment) sect_value(#section) emp_value(#empno)
VL_BASEBOB0000092500000000000001     MESSAGE    MSGTXT('Invoking ....... form')
VL_BASEBOB0000092600000000000001     ENDIF
VL_BASEBOB0000092700000000000001     ENDIF
VL_BASEBOB0000092800000000000001     ENDROUTINE
VL_BASEBOB0000092900000000000001     /* **********                                                         */
VL_BASEBOB0000093000000000000001     SUBROUTINE NAME(DPTFRMTOP)
VL_BASEBOB0000093100000000000001     IF         COND('#STD_NUMD *GT 400')
VL_BASEBOB0000093200000000000001     CHANGE     FIELD(#STD_NUMD) TO(10)
VL_BASEBOB0000093300000000000001     ELSE
VL_BASEBOB0000093400000000000001     CHANGE     FIELD(#STD_NUMD) TO('#STD_NUMD + 30')
VL_BASEBOB0000093500000000000001     CHANGE     FIELD(#STD_NUM) TO('#STD_NUMD')
VL_BASEBOB0000093600000000000001     CHANGE     FIELD(#STD_QTYD) TO('#STD_QTYD - 30')
VL_BASEBOB0000093700000000000001     CHANGE     FIELD(#STD_QTY) TO('#STD_QTYD')
VL_BASEBOB0000093800000000000001     ENDIF
VL_BASEBOB0000093900000000000001     ENDROUTINE
VL_BASEBOB0000094000000000000001     /* **********                                                         */
VL_BASEBOB0000094100000000000001     /* **********                                                         */
VL_BASEBOB0000094200000000000001     /* ********** Level 1                                                 */
VL_BASEBOB0000094300000000000001     /* **********                                                         */
VL_BASEBOB0000094400000000000001     /* **********                                                         */
VL_BASEBOB0000094500000000000001     /* ********** Monitor for changes to level 1 objects in appropriate   */
VL_BASEBOB0000094600000000000001     /* ********** member forms.                                           */
VL_BASEBOB0000094700000000000001     /* ********** Refresh the tree and selector combo box with changes.   */
VL_BASEBOB0000094800000000000001     /* **********                                                         */
VL_BASEBOB0000094900000000000001     EVTROUTINE HANDLING(#vl_dem21<>.dept_chgd)
VL_BASEBOB0000095000000000000001     MESSAGE    MSGTXT('Reloading departments')
VL_BASEBOB0000095100000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_BASEBOB0000095200000000000001     ENDROUTINE
VL_BASEBOB0000095300000000000001     /* **********                                                         */
VL_BASEBOB0000095400000000000001     SUBROUTINE NAME(LOAD_LVL1)
VL_BASEBOB0000095500000000000001     CLR_LIST   NAMED(#TREEVIEW)
VL_BASEBOB0000095600000000000001     CLR_LIST   NAMED(#CMBX_1)
VL_BASEBOB0000095700000000000001     CHANGE     FIELD(#STD_COUNT) TO(0)
VL_BASEBOB0000095800000000000001     /* **********                                                         */
VL_BASEBOB0000095900000000000001     /* ********** Change lower level tree columns to null.                */
VL_BASEBOB0000096000000000000001     /* ********** Replace fields with required names.                     */
VL_BASEBOB0000096100000000000001     /* **********                                                         */
VL_BASEBOB0000096200000000000001     CHANGE     FIELD(#SECTION #SECDESC #FULLNAME #EMPNO) TO(*NULL)
VL_BASEBOB0000096300000000000001     MESSAGE    MSGTXT('Loading ..........') TYPE(*STATUS)
VL_BASEBOB0000096400000000000001     /* **********                                                         */
VL_BASEBOB0000096500000000000001     /* ********** if a filter level 1 is available use it to fetch a      */
VL_BASEBOB0000096600000000000001     /* ********** single record,                                          */
VL_BASEBOB0000096700000000000001     /* ********** else select all level 1 records.                        */
VL_BASEBOB0000096800000000000001     /* ********** Replace deptment processing with appropriate file       */
VL_BASEBOB0000096900000000000001     /* ********** details.                                                */
VL_BASEBOB0000097000000000000001     /* **********                                                         */
VL_BASEBOB0000097100000000000001     IF         COND('#FLTRLVL1 *NE *BLANK')
VL_BASEBOB0000097200000000000001     FETCH      FIELDS(#DEPTMENT #DEPTDESC) FROM_FILE(DEPTAB) WITH_KEY(#FLTRLVL1)
VL_BASEBOB0000097300000000000001     EXECUTE    SUBROUTINE(ADD_LVL1)
VL_BASEBOB0000097400000000000001     ELSE
VL_BASEBOB0000097500000000000001     SELECT     FIELDS(#DEPTMENT #DEPTDESC) FROM_FILE(DEPTAB)
VL_BASEBOB0000097600000000000001     EXECUTE    SUBROUTINE(ADD_LVL1)
VL_BASEBOB0000097700000000000001     ENDSELECT
VL_BASEBOB0000097800000000000001     ENDIF
VL_BASEBOB0000097900000000000001     MESSAGE    MSGTXT('Load Complete')
VL_BASEBOB0000098000000000000001     ENDROUTINE
VL_BASEBOB0000098100000000000001     /* **********                                                         */
VL_BASEBOB0000098200000000000001     SUBROUTINE NAME(ADD_LVL1)
VL_BASEBOB0000098300000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_BASEBOB0000098400000000000001     /* **********                                                         */
VL_BASEBOB0000098500000000000001     /* ********** Assign icons to tree level 1.                           */
VL_BASEBOB0000098600000000000001     /* **********                                                         */
VL_BASEBOB0000098700000000000001     set        #treeview.currentitem image(#vi_deptcl) imageexpanded(#vi_deptop)
VL_BASEBOB0000098800000000000001     ADD_ENTRY  TO_LIST(#CMBX_1)
VL_BASEBOB0000098900000000000001     IF         COND('#STD_COUNT *EQ 0')
VL_BASEBOB0000099000000000000001     set        #cmbx_1.currentitem focus(true)
VL_BASEBOB0000099100000000000001     CHANGE     FIELD(#STD_COUNT) TO(1)
VL_BASEBOB0000099200000000000001     ENDIF
VL_BASEBOB0000099300000000000001     ENDROUTINE
VL_BASEBOB0000099400000000000001     /* **********                                                         */
VL_BASEBOB0000099500000000000001     /* **********                                                         */
VL_BASEBOB0000099600000000000001     /* ********** Level 2                                                 */
VL_BASEBOB0000099700000000000001     /* **********                                                         */
VL_BASEBOB0000099800000000000001     /* **********                                                         */
VL_BASEBOB0000099900000000000001     /* ********** Load level 2 details into the detail list.              */
VL_BASEBOB0000100000000000000001     /* **********                                                         */
VL_BASEBOB0000100100000000000001     SUBROUTINE NAME(LOAD_LVL2)
VL_BASEBOB0000100200000000000001     CLR_LIST   NAMED(#LTVW_1)
VL_BASEBOB0000100300000000000001     CHANGE     FIELD(#STD_COUNT) TO(0)
VL_BASEBOB0000100400000000000001     /* **********                                                         */
VL_BASEBOB0000100500000000000001     /* ********** if a filter level 2 key is available use it to fetch a  */
VL_BASEBOB0000100600000000000001     /* ********** single record.                                          */
VL_BASEBOB0000100700000000000001     /* ********** else select all level 2 records.                        */
VL_BASEBOB0000100800000000000001     /* ********** Replace section processing with appropriate file        */
VL_BASEBOB0000100900000000000001     /* ********** details.                                                */
VL_BASEBOB0000101000000000000001     /* **********                                                         */
VL_BASEBOB0000101100000000000001     IF         COND('#SAVLVL2 *NE *BLANKS')
VL_BASEBOB0000101200000000000001     SELECT     FIELDS(*ALL) FROM_FILE(SECTAB) WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_BASEBOB0000101300000000000001     EXECUTE    SUBROUTINE(ADD_LVL2)
VL_BASEBOB0000101400000000000001     ENDSELECT
VL_BASEBOB0000101500000000000001     ELSE
VL_BASEBOB0000101600000000000001     SELECT     FIELDS(*ALL) FROM_FILE(SECTAB) WITH_KEY(#SAVLVL1)
VL_BASEBOB0000101700000000000001     EXECUTE    SUBROUTINE(ADD_LVL2)
VL_BASEBOB0000101800000000000001     ENDSELECT
VL_BASEBOB0000101900000000000001     ENDIF
VL_BASEBOB0000102000000000000001     /* **********                                                         */
VL_BASEBOB0000102100000000000001     /* ********** Make detail list columns for level 2 object visible.    */
VL_BASEBOB0000102200000000000001     /* **********                                                         */
VL_BASEBOB0000102300000000000001     set        ( #lvcl_31 #lvcl_32 #lvcl_33 #lvcl_34 ) visible( false )
VL_BASEBOB0000102400000000000001     set        ( #lvcl_21 #lvcl_22 #lvcl_23 ) visible( true )
VL_BASEBOB0000102500000000000001     set        #lvcl_21 displayposition(1)
VL_BASEBOB0000102600000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS('''Sections of ''' #DEPTDESC) TO_GET(#LISTCAP)
VL_BASEBOB0000102700000000000001     set        #labl_2 caption(#listcap)
VL_BASEBOB0000102800000000000001     ENDROUTINE
VL_BASEBOB0000102900000000000001     /* **********                                                         */
VL_BASEBOB0000103000000000000001     SUBROUTINE NAME(ADD_LVL2)
VL_BASEBOB0000103100000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_BASEBOB0000103200000000000001     CHANGE     FIELD(#STD_COUNT) TO('#STD_COUNT + 1')
VL_BASEBOB0000103300000000000001     ENDROUTINE
VL_BASEBOB0000103400000000000001     /* **********                                                         */
VL_BASEBOB0000103500000000000001     /* ********** Monitor for changes to level 2 objects in appropriate   */
VL_BASEBOB0000103600000000000001     /* ********** detail forms.                                           */
VL_BASEBOB0000103700000000000001     /* **********                                                         */
VL_BASEBOB0000103800000000000001     EVTROUTINE HANDLING(#vl_dem22.sect_insert)
VL_BASEBOB0000103900000000000001     MESSAGE    MSGTXT('Section inserted')
VL_BASEBOB0000104000000000000001     CHANGE     FIELD(#DEPTMENT) TO('#VL_DEM22.DEPT_VALUE')
VL_BASEBOB0000104100000000000001     CHANGE     FIELD(#SECTION) TO('#VL_DEM22.SECT_VALUE')
VL_BASEBOB0000104200000000000001     CHANGE     FIELD(#SECDESC) TO('#VL_DEM22.SECD_VALUE')
VL_BASEBOB0000104300000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_BASEBOB0000104400000000000001     ENDROUTINE
VL_BASEBOB0000104500000000000001     /* **********                                                         */
VL_BASEBOB0000104600000000000001     /* ********** Montior for any events which must be notified between   */
VL_BASEBOB0000104700000000000001     /* ********** member forms.                                           */
VL_BASEBOB0000104800000000000001     /* **********                                                         */
VL_BASEBOB0000104900000000000001     EVTROUTINE HANDLING( #vl_dem21<>.sect_sltd )
VL_BASEBOB0000105000000000000001     CHANGE     FIELD(#DEPTMENT) TO('#VL_DEM21<#DEPTMENT>.DEPT_VALUE')
VL_BASEBOB0000105100000000000001     CHANGE     FIELD(#SECTION) TO('#VL_DEM21<#DEPTMENT>.SECT_VALUE')
VL_BASEBOB0000105200000000000001     set        #vl_dem22 sect_graph( Y )
VL_BASEBOB0000105300000000000001     set        #vl_dem22 dept_value( #deptment )
VL_BASEBOB0000105400000000000001     set        #vl_dem22 sect_value( #section )
VL_BASEBOB0000105500000000000001     invoke     #vl_dem22.activateform
VL_BASEBOB0000105600000000000001     ENDROUTINE
VL_BASEBOB0000105700000000000001     /* **********                                                         */
VL_BASEBOB0000105800000000000001     /* **********                                                         */
VL_BASEBOB0000105900000000000001     /* ********** Level 3                                                 */
VL_BASEBOB0000106000000000000001     /* **********                                                         */
VL_BASEBOB0000106100000000000001     /* **********                                                         */
VL_BASEBOB0000106200000000000001     /* ********** Monitor for changes to level 3 objects in appropriate   */
VL_BASEBOB0000106300000000000001     /* ********** detail forms and notify other forms if required.        */
VL_BASEBOB0000106400000000000001     /* **********                                                         */
VL_BASEBOB0000106500000000000001     EVTROUTINE HANDLING(#vl_dem23.salary_changed)
VL_BASEBOB0000106600000000000001     CHANGE     FIELD(#EMPNO) TO('#VL_DEM23.EMP_VALUE')
VL_BASEBOB0000106700000000000001     FETCH      FIELDS(#DEPTMENT #SECTION) FROM_FILE(PSLMST) WITH_KEY(#EMPNO) VAL_ERROR(*NEXT)
VL_BASEBOB0000106800000000000001     IF_STATUS  IS(*OKAY)
VL_BASEBOB0000106900000000000001     invoke     #vl_dem21<#deptment>.activateform
VL_BASEBOB0000107000000000000001     set        #vl_dem21<#deptment> dept_value(#deptment)
VL_BASEBOB0000107100000000000001     invoke     #vl_dem22.activateform
VL_BASEBOB0000107200000000000001     set        #vl_dem22 dept_value(#deptment) sect_value(#section)
VL_BASEBOB0000107300000000000001     ENDIF
VL_BASEBOB0000107400000000000001     ENDROUTINE
VL_BASEBOB0000107500000000000001     /* **********                                                         */
VL_BASEBOB0000107600000000000001     SUBROUTINE NAME(CHK_LVL3)
VL_BASEBOB0000107700000000000001     /* **********                                                         */
VL_BASEBOB0000107800000000000001     /* ********** Check for child records of level 3 parent to            */
VL_BASEBOB0000107900000000000001     /* ********** enable/disable delete button and menu options.          */
VL_BASEBOB0000108000000000000001     /* **********                                                         */
VL_BASEBOB0000108100000000000001     CHECK_FOR  IN_FILE(PSLSKL) WITH_KEY(#EMPNO) VAL_ERROR(*NEXT)
VL_BASEBOB0000108200000000000001     IF_STATUS  IS(*EQUALKEY)
VL_BASEBOB0000108300000000000001     CHANGE     FIELD(#STD_COUNT) TO(1)
VL_BASEBOB0000108400000000000001     ELSE
VL_BASEBOB0000108500000000000001     CHANGE     FIELD(#STD_COUNT) TO(0)
VL_BASEBOB0000108600000000000001     ENDIF
VL_BASEBOB0000108700000000000001     ENDROUTINE
VL_BASEBOB0000108800000000000001     /* **********                                                         */
VL_BASEBOB0000108900000000000001     SUBROUTINE NAME(SET_DEL)
VL_BASEBOB0000109000000000000001     /* **********                                                         */
VL_BASEBOB0000109100000000000001     /* ********** This generic routine enables or disables the delete     */
VL_BASEBOB0000109200000000000001     /* ********** buttons and menu options according to the current value */
VL_BASEBOB0000109300000000000001     /* ********** of the count work field.                                */
VL_BASEBOB0000109400000000000001     /* **********                                                         */
VL_BASEBOB0000109500000000000001     IF         COND('#STD_COUNT *GT 0')
VL_BASEBOB0000109600000000000001     set        ( #mitm_4 #mip_dlt #spbn_del ) enabled(false)
VL_BASEBOB0000109700000000000001     ELSE
VL_BASEBOB0000109800000000000001     set        ( #mitm_4 #mip_dlt #spbn_del ) enabled(true)
VL_BASEBOB0000109900000000000001     ENDIF
VL_BASEBOB0000110000000000000001     ENDROUTINE
VL_BASEBOB0000110100000000000001     /* **********                                                         */
VL_BASEBOB0000110200000000000001     /* **********                                                         */
VL_BASEBOB0000110300000000000001     /* ********** Menu Options & Tool bar buttons.                        */
VL_BASEBOB0000110400000000000001     /* **********                                                         */
VL_BASEBOB0000110500000000000001     /* **********                                                         */
VL_BASEBOB0000110600000000000001     /* ********** Display current item details.                           */
VL_BASEBOB0000110700000000000001     /* **********                                                         */
VL_BASEBOB0000110800000000000001     EVTROUTINE HANDLING(#mip_dtl.click #mitm_5.click #treeview.doubleclick)
VL_BASEBOB0000110900000000000001     /* **********                                                         */
VL_BASEBOB0000111000000000000001     /* ********** Invoke the appropriate form to display the details of   */
VL_BASEBOB0000111100000000000001     /* ********** the current object.                                     */
VL_BASEBOB0000111200000000000001     /* ********** Replace the key fields and forms with the appropriate   */
VL_BASEBOB0000111300000000000001     /* ********** names.                                                  */
VL_BASEBOB0000111400000000000001     /* **********                                                         */
VL_BASEBOB0000111500000000000001     IF         COND('#EMPNO *NE *BLANKS')
VL_BASEBOB0000111600000000000001     invoke     #vl_dem23.activateform
VL_BASEBOB0000111700000000000001     set        #vl_dem23 dept_value(#deptment) sect_value(#section) emp_value(#empno)
VL_BASEBOB0000111800000000000001     MESSAGE    MSGTXT('Invoking employee form')
VL_BASEBOB0000111900000000000001     ELSE
VL_BASEBOB0000112000000000000001     IF         COND('#SECTION *NE *BLANKS')
VL_BASEBOB0000112100000000000001     invoke     #vl_dem22.activateform
VL_BASEBOB0000112200000000000001     set        #vl_dem22 dept_value(#deptment) sect_value(#section) top(#std_num)
VL_BASEBOB0000112300000000000001     MESSAGE    MSGTXT('Invoking section form')
VL_BASEBOB0000112400000000000001     ELSE
VL_BASEBOB0000112500000000000001     IF         COND('#DEPTMENT *NE *BLANKS')
VL_BASEBOB0000112600000000000001     /* **********                                                         */
VL_BASEBOB0000112700000000000001     /* ********** As the level 1 detail form is defined as a collection   */
VL_BASEBOB0000112800000000000001     /* ********** adjust the form position each time a new instance is    */
VL_BASEBOB0000112900000000000001     /* ********** invoked so that all instances of the form are visible.  */
VL_BASEBOB0000113000000000000001     /* **********                                                         */
VL_BASEBOB0000113100000000000001     EXECUTE    SUBROUTINE(DPTFRMTOP)
VL_BASEBOB0000113200000000000001     set        #vl_dem21<#deptment> dept_left(#std_qty) dept_top(#std_num) dept_value(#deptment)
VL_BASEBOB0000113300000000000001     invoke     #vl_dem21<#deptment>.activateform
VL_BASEBOB0000113400000000000001     MESSAGE    MSGTXT('Invoking department form')
VL_BASEBOB0000113500000000000001     ENDIF
VL_BASEBOB0000113600000000000001     ENDIF
VL_BASEBOB0000113700000000000001     ENDIF
VL_BASEBOB0000113800000000000001     ENDROUTINE
VL_BASEBOB0000113900000000000001     /* **********                                                         */
VL_BASEBOB0000114000000000000001     /* ********** Delete current item.                                    */
VL_BASEBOB0000114100000000000001     /* ********** Check the tree view level.                              */
VL_BASEBOB0000114200000000000001     /* ********** Replace the file processing with the required names.    */
VL_BASEBOB0000114300000000000001     /* ********** Delete menu options and tool bar button have been       */
VL_BASEBOB0000114400000000000001     /* ********** enabled after checking that the current item can be     */
VL_BASEBOB0000114500000000000001     /* ********** deleted, but check that the object has been deleted     */
VL_BASEBOB0000114600000000000001     /* ********** from the file before deleting from the tree.            */
VL_BASEBOB0000114700000000000001     /* **********                                                         */
VL_BASEBOB0000114800000000000001     EVTROUTINE HANDLING( #mip_dlt.click #mitm_4.click #spbn_del.click )
VL_BASEBOB0000114900000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 1')
VL_BASEBOB0000115000000000000001     DELETE     FROM_FILE(DEPTAB) WITH_KEY(#DEPTMENT) VAL_ERROR(*NEXT)
VL_BASEBOB0000115100000000000001     IF_STATUS  IS(*OKAY)
VL_BASEBOB0000115200000000000001     DLT_ENTRY  FROM_LIST(#TREEVIEW)
VL_BASEBOB0000115300000000000001     MESSAGE    MSGTXT('Department deleted successfully')
VL_BASEBOB0000115400000000000001     ENDIF
VL_BASEBOB0000115500000000000001     ELSE
VL_BASEBOB0000115600000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 2')
VL_BASEBOB0000115700000000000001     DELETE     FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT #SECTION) VAL_ERROR(*NEXT)
VL_BASEBOB0000115800000000000001     IF_STATUS  IS(*OKAY)
VL_BASEBOB0000115900000000000001     DLT_ENTRY  FROM_LIST(#TREEVIEW)
VL_BASEBOB0000116000000000000001     MESSAGE    MSGTXT('Section deleted successfully')
VL_BASEBOB0000116100000000000001     ENDIF
VL_BASEBOB0000116200000000000001     ELSE
VL_BASEBOB0000116300000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 3')
VL_BASEBOB0000116400000000000001     DLT_ENTRY  FROM_LIST(#TREEVIEW)
VL_BASEBOB0000116500000000000001     DELETE     FROM_FILE(PSLMST) WITH_KEY(#EMPNO) VAL_ERROR(*NEXT)
VL_BASEBOB0000116600000000000001     IF_STATUS  IS(*OKAY)
VL_BASEBOB0000116700000000000001     DLT_ENTRY  FROM_LIST(#TREEVIEW)
VL_BASEBOB0000116800000000000001     MESSAGE    MSGTXT('Employee deleted successfully')
VL_BASEBOB0000116900000000000001     ENDIF
VL_BASEBOB0000117000000000000001     ENDIF
VL_BASEBOB0000117100000000000001     ENDIF
VL_BASEBOB0000117200000000000001     ENDIF
VL_BASEBOB0000117300000000000001     ENDROUTINE
VL_BASEBOB0000117400000000000001     /* **********                                                         */
VL_BASEBOB0000117500000000000001     /* ********** The refresh menu option reloads level 1 of the tree.    */
VL_BASEBOB0000117600000000000001     /* **********                                                         */
VL_BASEBOB0000117700000000000001     EVTROUTINE HANDLING(#mitm_rfsh.click)
VL_BASEBOB0000117800000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_BASEBOB0000117900000000000001     ENDROUTINE
VL_BASEBOB0000118000000000000001     /* **********                                                         */
VL_BASEBOB0000118100000000000001     /* ********** Invoke the Business Object Filter form to select data   */
VL_BASEBOB0000118200000000000001     /* ********** for display.                                            */
VL_BASEBOB0000118300000000000001     /* **********                                                         */
VL_BASEBOB0000118400000000000001     EVTROUTINE HANDLING(#MITM_FLTR.Click)
VL_BASEBOB0000118500000000000001     invoke     #vl_dem28.activateform
VL_BASEBOB0000118600000000000001     ENDROUTINE
VL_BASEBOB0000118700000000000001     /* **********                                                         */
VL_BASEBOB0000118800000000000001     /* ********** These 3 routines invoke the utility server connection   */
VL_BASEBOB0000118900000000000001     /* ********** form to connect and disconnect.                         */
VL_BASEBOB0000119000000000000001     /* ********** The data is refreshed after connection to the server or */
VL_BASEBOB0000119100000000000001     /* ********** after disconnect from the local data base.              */
VL_BASEBOB0000119200000000000001     /* **********                                                         */
VL_BASEBOB0000119300000000000001     EVTROUTINE HANDLING(#MITM_cnct.Click)
VL_BASEBOB0000119400000000000001     invoke     #vl_dem27.uconnect
VL_BASEBOB0000119500000000000001     ENDROUTINE
VL_BASEBOB0000119600000000000001     /* **********                                                         */
VL_BASEBOB0000119700000000000001     EVTROUTINE HANDLING(#vl_dem27.uConnectionCreated #vl_dem27.uConnectionDestroyed)
VL_BASEBOB0000119800000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_BASEBOB0000119900000000000001     ENDROUTINE
VL_BASEBOB0000120000000000000001     /* **********                                                         */
VL_BASEBOB0000120100000000000001     EVTROUTINE HANDLING(#MITM_dcnct.Click)
VL_BASEBOB0000120200000000000001     invoke     #vl_dem27.udisconnect
VL_BASEBOB0000120300000000000001     ENDROUTINE
VL_BASEBOB0000120400000000000001     /* **********                                                         */
VL_BASEBOB0000120500000000000001     /* ********** The cut and paste menu options and buttons only apply   */
VL_BASEBOB0000120600000000000001     /* ********** to the tree.                                            */
VL_BASEBOB0000120700000000000001     /* ********** The cut saves the keys of the selected object           */
VL_BASEBOB0000120800000000000001     /* ********** but the actual cut does not happen until the paste      */
VL_BASEBOB0000120900000000000001     /* ********** option is used.                                         */
VL_BASEBOB0000121000000000000001     /* ********** Replace the key field names with the appropriate names. */
VL_BASEBOB0000121100000000000001     /* **********                                                         */
VL_BASEBOB0000121200000000000001     EVTROUTINE HANDLING( #SPBN_CUT.Click #mitm_cut.click )
VL_BASEBOB0000121300000000000001     CHANGE     FIELD(#CUTOBJ) TO(Y)
VL_BASEBOB0000121400000000000001     set        ( #mitm_pst #spbn_pst ) enabled( true )
VL_BASEBOB0000121500000000000001     CHANGE     FIELD(#STD_ENTRY) TO('#TREEVIEW.FOCUSITEM.ENTRY')
VL_BASEBOB0000121600000000000001     CHANGE     FIELD(#OLDLVL1) TO(#DEPTMENT)
VL_BASEBOB0000121700000000000001     CHANGE     FIELD(#OLDLVL2) TO(#SECTION)
VL_BASEBOB0000121800000000000001     CHANGE     FIELD(#OLDLVL3) TO(#EMPNO)
VL_BASEBOB0000121900000000000001     ENDROUTINE
VL_BASEBOB0000122000000000000001     /* **********                                                         */
VL_BASEBOB0000122100000000000001     /* ********** When the paste menu options or buttons used check if    */
VL_BASEBOB0000122200000000000001     /* ********** any objects have been selected.                         */
VL_BASEBOB0000122300000000000001     /* ********** The cut saves the keys of the selected object           */
VL_BASEBOB0000122400000000000001     /* ********** but the actual cut does not happen until the paste      */
VL_BASEBOB0000122500000000000001     /* ********** option is used.                                         */
VL_BASEBOB0000122600000000000001     /* ********** Replace the key field names with the appropriate names. */
VL_BASEBOB0000122700000000000001     /* **********                                                         */
VL_BASEBOB0000122800000000000001     EVTROUTINE HANDLING( #SPBN_PST.Click #mitm_pst.click )
VL_BASEBOB0000122900000000000001     IF         COND('#CUTOBJ *EQ Y')
VL_BASEBOB0000123000000000000001     IF         COND('#TREEVIEW.FOCUSITEM.LEVEL *EQ 1')
VL_BASEBOB0000123100000000000001     EXECUTE    SUBROUTINE(INS_LVL2)
VL_BASEBOB0000123200000000000001     ELSE
VL_BASEBOB0000123300000000000001     IF         COND('#TREEVIEW.FOCUSITEM.LEVEL *EQ 2')
VL_BASEBOB0000123400000000000001     EXECUTE    SUBROUTINE(INS_LVL3)
VL_BASEBOB0000123500000000000001     ENDIF
VL_BASEBOB0000123600000000000001     ENDIF
VL_BASEBOB0000123700000000000001     ENDIF
VL_BASEBOB0000123800000000000001     ENDROUTINE
VL_BASEBOB0000123900000000000001     /* **********                                                         */
VL_BASEBOB0000124000000000000001     /* ********** Paste level 2 object to new level 1 parent.             */
VL_BASEBOB0000124100000000000001     /* ********** Replace file and key fields with appropriate details.   */
VL_BASEBOB0000124200000000000001     /* **********                                                         */
VL_BASEBOB0000124300000000000001     SUBROUTINE NAME(INS_LVL2)
VL_BASEBOB0000124400000000000001     CHECK_FOR  IN_FILE(SECTAB) WITH_KEY(#DEPTMENT #OLDLVL2) VAL_ERROR(*NEXT)
VL_BASEBOB0000124500000000000001     CHANGE     FIELD(#NEWLVL1) TO(#DEPTMENT)
VL_BASEBOB0000124600000000000001     IF_STATUS  IS(*EQUALKEY)
VL_BASEBOB0000124700000000000001     MESSAGE    MSGTXT('''Section already exists in target department''')
VL_BASEBOB0000124800000000000001     ELSE
VL_BASEBOB0000124900000000000001     UPDATE     FIELDS(#DEPTMENT) IN_FILE(SECTAB) WITH_KEY(#OLDLVL1 #OLDLVL2)
VL_BASEBOB0000125000000000000001     DLT_ENTRY  NUMBER(#STD_ENTRY) FROM_LIST(#TREEVIEW)
VL_BASEBOB0000125100000000000001     /* **********                                                         */
VL_BASEBOB0000125200000000000001     SELECT     FIELDS(#DEPTMENT #EMPNO) FROM_FILE(PSLMST1) WITH_KEY(#OLDLVL1 #OLDLVL2)
VL_BASEBOB0000125300000000000001     CHANGE     FIELD(#DEPTMENT) TO(#NEWLVL1)
VL_BASEBOB0000125400000000000001     UPDATE     FIELDS(#DEPTMENT) IN_FILE(PSLMST) WITH_KEY(#EMPNO)
VL_BASEBOB0000125500000000000001     ENDSELECT
VL_BASEBOB0000125600000000000001     /* **********                                                         */
VL_BASEBOB0000125700000000000001     /* ********** Reset flag to indicate no details to be pasted.         */
VL_BASEBOB0000125800000000000001     /* **********                                                         */
VL_BASEBOB0000125900000000000001     CHANGE     FIELD(#CUTOBJ) TO(N)
VL_BASEBOB0000126000000000000001     ENDIF
VL_BASEBOB0000126100000000000001     ENDROUTINE
VL_BASEBOB0000126200000000000001     /* **********                                                         */
VL_BASEBOB0000126300000000000001     /* ********** Paste level 3 object to new parent.                     */
VL_BASEBOB0000126400000000000001     /* ********** Replace file and key fields with appropriate details.   */
VL_BASEBOB0000126500000000000001     /* ********** Reset flag to indicate no details to be pasted.         */
VL_BASEBOB0000126600000000000001     /* **********                                                         */
VL_BASEBOB0000126700000000000001     SUBROUTINE NAME(INS_LVL3)
VL_BASEBOB0000126800000000000001     CHECK_FOR  IN_FILE(PSLMST) WITH_KEY(#OLDLVL3) VAL_ERROR(*NEXT)
VL_BASEBOB0000126900000000000001     IF_STATUS  IS(*EQUALKEY)
VL_BASEBOB0000127000000000000001     UPDATE     FIELDS(#DEPTMENT #SECTION) IN_FILE(PSLMST) WITH_KEY(#OLDLVL3)
VL_BASEBOB0000127100000000000001     DLT_ENTRY  NUMBER(#STD_ENTRY) FROM_LIST(#TREEVIEW)
VL_BASEBOB0000127200000000000001     CHANGE     FIELD(#CUTOBJ) TO(N)
VL_BASEBOB0000127300000000000001     ENDIF
VL_BASEBOB0000127400000000000001     ENDROUTINE
VL_BASEBOB0000127500000000000001     /* **********                                                         */
VL_BASEBOB0000127600000000000001     /* ********** Menu option and tool bar button to exit.                */
VL_BASEBOB0000127700000000000001     /* **********                                                         */
VL_BASEBOB0000127800000000000001     EVTROUTINE HANDLING(#mitm_7.click #spbn_cls.click)
VL_BASEBOB0000127900000000000001     EXECUTE    SUBROUTINE(CLOSEFORMS)
VL_BASEBOB0000128000000000000001     EXIT
VL_BASEBOB0000128100000000000001     ENDROUTINE
VL_BASEBOB0000128200000000000001     /* **********                                                         */
VL_BASEBOB0000128300000000000001     /* ********** If the save menu option or tool bar button is used      */
VL_BASEBOB0000128400000000000001     /* ********** notify all member forms to save pending changes.        */
VL_BASEBOB0000128500000000000001     /* ********** Change form names to the appropriate Business Object    */
VL_BASEBOB0000128600000000000001     /* ********** Detail forms.                                           */
VL_BASEBOB0000128700000000000001     /* **********                                                         */
VL_BASEBOB0000128800000000000001     EVTROUTINE HANDLING( #mi_sav.click #spbn_sav.click )
VL_BASEBOB0000128900000000000001     invoke     #vl_dem21<>.save_depart
VL_BASEBOB0000129000000000000001     invoke     #vl_dem22.save_section
VL_BASEBOB0000129100000000000001     invoke     #vl_dem23.save_employ
VL_BASEBOB0000129200000000000001     ENDROUTINE
VL_BASEBOB0000129300000000000001     /* **********                                                         */
VL_BASEBOB0000129400000000000001     /* ********** Form Events                                             */
VL_BASEBOB0000129500000000000001     /* **********                                                         */
VL_BASEBOB0000129600000000000001     /* ********** The timer acts as a layout manager emulator resizing    */
VL_BASEBOB0000129700000000000001     /* ********** components when the form is resized.                    */
VL_BASEBOB0000129800000000000001     /* **********                                                         */
VL_BASEBOB0000129900000000000001     EVTROUTINE HANDLING(#TIMR_1.Tick)
VL_BASEBOB0000130000000000000001     CHANGE     FIELD(#WHEIGHT) TO('#COM_OWNER.HEIGHT')
VL_BASEBOB0000130100000000000001     CHANGE     FIELD(#WWIDTH) TO('#COM_OWNER.WIDTH')
VL_BASEBOB0000130200000000000001     IF         COND('(#WWIDTH *NE #PWIDTH) *OR (#WHEIGHT *NE #PHEIGHT)')
VL_BASEBOB0000130300000000000001     CHANGE     FIELD(#PHEIGHT) TO(#WHEIGHT)
VL_BASEBOB0000130400000000000001     CHANGE     FIELD(#PWIDTH) TO(#WWIDTH)
VL_BASEBOB0000130500000000000001     CHANGE     FIELD(#WHEIGHT) TO('#WHEIGHT - #XHEIGHT')
VL_BASEBOB0000130600000000000001     CHANGE     FIELD(#WWIDTH) TO('#WWIDTH - #XWIDTH')
VL_BASEBOB0000130700000000000001     set        (#ltvw_1) width(#wwidth)
VL_BASEBOB0000130800000000000001     CHANGE     FIELD(#WWIDTH) TO('#WWIDTH + 4')
VL_BASEBOB0000130900000000000001     set        (#lsttl2) width(#wwidth)
VL_BASEBOB0000131000000000000001     set        (#ltvw_1 #treeview) height(#wheight)
VL_BASEBOB0000131100000000000001     CHANGE     FIELD(#WWIDTH) TO('#PWIDTH - 7')
VL_BASEBOB0000131200000000000001     set        #tools width(#wwidth)
VL_BASEBOB0000131300000000000001     ENDIF
VL_BASEBOB0000131400000000000001     ENDROUTINE
VL_BASEBOB0000131500000000000001     /* **********                                                         */
VL_BASEBOB0000131600000000000001     /* ********** When closing the owner (top) form close all members as  */
VL_BASEBOB0000131700000000000001     /* ********** well.                                                   */
VL_BASEBOB0000131800000000000001     /* **********                                                         */
VL_BASEBOB0000131900000000000001     EVTROUTINE HANDLING(#COM_OWNER.CloseQuery)
VL_BASEBOB0000132000000000000001     EXECUTE    SUBROUTINE(CLOSEFORMS)
VL_BASEBOB0000132100000000000001     ENDROUTINE
VL_BASEBOB0000132200000000000001     /* **********                                                         */
VL_BASEBOB0000132300000000000001     SUBROUTINE NAME(CLOSEFORMS)
VL_BASEBOB0000132400000000000001     /* **********                                                         */
VL_BASEBOB0000132500000000000001     /* ********** The first close statement handles all instances of the  */
VL_BASEBOB0000132600000000000001     /* ********** named form. This form has been defined as a keyed       */
VL_BASEBOB0000132700000000000001     /* ********** collection (multi instance form).                       */
VL_BASEBOB0000132800000000000001     /* ********** The other forms are single instance forms.              */
VL_BASEBOB0000132900000000000001     /* ********** Rename these forms to your form names.                  */
VL_BASEBOB0000133000000000000001     /* **********                                                         */
VL_BASEBOB0000133100000000000001     invoke     #vl_dem21<>.close_save
VL_BASEBOB0000133200000000000001     invoke     #vl_dem22.close_save
VL_BASEBOB0000133300000000000001     invoke     #vl_dem23.close_save
VL_BASEBOB0000133400000000000001     invoke     #vl_dem27.udisconnect
VL_BASEBOB0000133500000000000001     invoke     #vl_dem28.closeform
VL_BASEBOB0000133600000000000001     ENDROUTINE
VL_BASEBOB0000133700000000000001     /* **********                                                         */
VL_BASEBOB0000133800000000000001     /* ********** Monitor for the filter.                                 */
VL_BASEBOB0000133900000000000001     /* ********** Change the filter form name to the name of your filter. */
VL_BASEBOB0000134000000000000001     /* **********                                                         */
VL_BASEBOB0000134100000000000001     EVTROUTINE HANDLING(#VL_DEM28.ApplyFilter)
VL_BASEBOB0000134200000000000001     /* **********                                                         */
VL_BASEBOB0000134300000000000001     /* ********** Initialise the variables to hold the filter values.     */
VL_BASEBOB0000134400000000000001     /* **********                                                         */
VL_BASEBOB0000134500000000000001     EXECUTE    SUBROUTINE(INIT_VALUE)
VL_BASEBOB0000134600000000000001     /* **********                                                         */
VL_BASEBOB0000134700000000000001     /* ********** Get the filter values.                                  */
VL_BASEBOB0000134800000000000001     /* **********                                                         */
VL_BASEBOB0000134900000000000001     CHANGE     FIELD(#STD_LEVEL) TO('#VL_DEM28.LEVEL_VALUE')
VL_BASEBOB0000135000000000000001     CHANGE     FIELD(#FLTRLVL1) TO('#VL_DEM28.DEPT_VALUE')
VL_BASEBOB0000135100000000000001     CHANGE     FIELD(#FLTRLVL2) TO('#VL_DEM28.SECT_VALUE')
VL_BASEBOB0000135200000000000001     CHANGE     FIELD(#STD_SORT) TO('#VL_DEM28.SORT_VALUE')
VL_BASEBOB0000135300000000000001     CHANGE     FIELD(#STD_DIRCT) TO('#VL_DEM28.DIRECTION_VALUE')
VL_BASEBOB0000135400000000000001     CHANGE     FIELD(#STD_DATE) TO('#VL_DEM28.DATE_VALUE')
VL_BASEBOB0000135500000000000001     CHANGE     FIELD(#STD_NUM) TO('#VL_DEM28.SALARY_VALUE')
VL_BASEBOB0000135600000000000001     CHANGE     FIELD(#STD_CMPAR) TO('#VL_DEM28.COMPARE_VALUE')
VL_BASEBOB0000135700000000000001     CHANGE     FIELD(#STD_FILTR) TO(Y)
VL_BASEBOB0000135800000000000001     /* **********                                                         */
VL_BASEBOB0000135900000000000001     /* ********** Set display to view the tree or list according filter   */
VL_BASEBOB0000136000000000000001     /* ********** choice and refresh the details.                         */
VL_BASEBOB0000136100000000000001     /* **********                                                         */
VL_BASEBOB0000136200000000000001     IF         COND('( #STD_LEVEL *EQ 1 ) OR ( #STD_LEVEL *EQ 2 )')
VL_BASEBOB0000136300000000000001     set        #treeview visible( true )
VL_BASEBOB0000136400000000000001     set        #lvl3lst visible( false )
VL_BASEBOB0000136500000000000001     set        #cmbx_1 enabled( True )
VL_BASEBOB0000136600000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_BASEBOB0000136700000000000001     ELSE
VL_BASEBOB0000136800000000000001     IF         COND('#STD_LEVEL *EQ 3')
VL_BASEBOB0000136900000000000001     set        #treeview visible( false )
VL_BASEBOB0000137000000000000001     set        #lvl3lst visible( true )
VL_BASEBOB0000137100000000000001     set        #cmbx_1 enabled( False )
VL_BASEBOB0000137200000000000001     EXECUTE    SUBROUTINE(LD_LVL3LST)
VL_BASEBOB0000137300000000000001     ENDIF
VL_BASEBOB0000137400000000000001     ENDIF
VL_BASEBOB0000137500000000000001     /* **********                                                         */
VL_BASEBOB0000137600000000000001     /* ********** Close the filter form.                                  */
VL_BASEBOB0000137700000000000001     /* **********                                                         */
VL_BASEBOB0000137800000000000001     invoke     #vl_dem28.closeform
VL_BASEBOB0000137900000000000001     ENDROUTINE
VL_BASEBOB0000138000000000000001     /* **********                                                         */
VL_BASEBOB0000138100000000000001     SUBROUTINE NAME(INIT_VALUE)
VL_BASEBOB0000138200000000000001     /* **********                                                         */
VL_BASEBOB0000138300000000000001     /* ********** Initialise the variables to hold the filter values.     */
VL_BASEBOB0000138400000000000001     /* **********                                                         */
VL_BASEBOB0000138500000000000001     CHANGE     FIELD(#STD_LEVEL #SAVLVL1 #SAVLVL2 #STD_SORT #STD_DIRCT #STD_DATE #STD_NUM #STD_CMPAR #STD_FILTR) TO(*NULL)
VL_BASEBOB0000138600000000000001     ENDROUTINE
VL_BASEBOB0000138700000000000001     /* **********                                                         */
VL_BASEBOB0000138800000000000001     @@ROUTEEND
VL_BASEBOB0000138900000000000001     END_COM
VL_BASEBOB0000139000000000000001E99: @@LABEL
VL_BASEBOD0000000100000000000001     @@QUESTION PROMPT('Do you want to continue?') ANSWER(@@CANS001) EXTEND('This template produces a Business Object Detail skeleton.' 'It is based on the demonstration personnel system.' 'Please read the comments in the code and replace' 'the field and file names as required.' 'See help for further information.') LOWER(*NO) HELPIDS(HELP010)
VL_BASEBOD0000000200000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(E99)
VL_BASEBOD0000000300000000000001     @@ROUTEBEG
VL_BASEBOD0000000400000000000001     BEGIN_COM  BORDERICONS(Minimize+SystemMenu) FRAMESTYLE(Dialog) HEIGHT(426) LEFT(304) TOP(114) VISUALSTYLE(#VS_NORM) WIDTH(455)
VL_BASEBOD0000000500000000000001     @@ROUTEDEF
VL_BASEBOD0000000600000000000001     /* **********                                                         */
VL_BASEBOD0000000700000000000001     /* ********** Business Object Detail Template                         */
VL_BASEBOD0000000800000000000001     /* ********** Version  1.0                                            */
VL_BASEBOD0000000900000000000001     /* **********                                                         */
VL_BASEBOD0000001000000000000001     /* ********** Tabsheet                                                */
VL_BASEBOD0000001100000000000001     DEFINE_COM CLASS(#PRIM_TAB) NAME(#FOLDER) DISPLAYPOSITION(1) HEIGHT(321) LEFT(8) PARENT(#COM_OWNER) RAGGEDRIGHT(False) TABPOSITION(2) WIDTH(433)
VL_BASEBOD0000001200000000000001     /* **********                                                         */
VL_BASEBOD0000001300000000000001     /* ********** Change caption of tabsheet as required.                 */
VL_BASEBOD0000001400000000000001     /* ********** Replace surname and section fields on tabsheet.         */
VL_BASEBOD0000001500000000000001     /* ********** Add tabsheets for each logical group of fields to be    */
VL_BASEBOD0000001600000000000001     /* ********** displayed.                                              */
VL_BASEBOD0000001700000000000001     /* **********                                                         */
VL_BASEBOD0000001800000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_1) CAPTION('&Detail 1') DISPLAYPOSITION(1) HEIGHT(295) LEFT(4) PARENT(#FOLDER) TABPOSITION(1) TABSTOP(False) TOP(22) WIDTH(425)
VL_BASEBOD0000001900000000000001     DEFINE_COM CLASS(#EMPNO.Visual) NAME(#EMPNO) DISPLAYPOSITION(2) HEIGHT(19) LEFT(24) PARENT(#TBSH_2) TABPOSITION(2) TOP(56) WIDTH(209)
VL_BASEBOD0000002000000000000001     DEFINE_COM CLASS(#SURNAME.Visual) NAME(#SURNAME) DISPLAYPOSITION(1) HEIGHT(19) LEFT(24) PARENT(#TBSH_1) TABPOSITION(1) TOP(64) WIDTH(185)
VL_BASEBOD0000002100000000000001     /* **********                                                         */
VL_BASEBOD0000002200000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_2) CAPTION('&Detail 2') DISPLAYPOSITION(2) HEIGHT(295) LEFT(4) PARENT(#FOLDER) TABPOSITION(2) TABSTOP(False) TOP(22) WIDTH(425)
VL_BASEBOD0000002300000000000001     DEFINE_COM CLASS(#SECTION.Visual) NAME(#SECTION) DISPLAYPOSITION(1) HEIGHT(19) LEFT(24) PARENT(#TBSH_2) TABPOSITION(1) TOP(96) WIDTH(324)
VL_BASEBOD0000002400000000000001     DEFINE_COM CLASS(#SECDESC.Visual) NAME(#SECDESC) DISPLAYPOSITION(3) HEIGHT(19) LEFT(24) PARENT(#TBSH_2) TABPOSITION(3) TOP(137) WIDTH(324)
VL_BASEBOD0000002500000000000001     /* **********                                                         */
VL_BASEBOD0000002600000000000001     /* ********** The save button saves all outstanding changes on ALL    */
VL_BASEBOD0000002700000000000001     /* ********** tabsheets.                                              */
VL_BASEBOD0000002800000000000001     /* ********** The refresh button reloads all fields on the tabsheets  */
VL_BASEBOD0000002900000000000001     /* ********** from the data base which will clear all changes since   */
VL_BASEBOD0000003000000000000001     /* ********** the last save.                                          */
VL_BASEBOD0000003100000000000001     /* **********                                                         */
VL_BASEBOD0000003200000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_SAV) CAPTION(&Save) DISPLAYPOSITION(3) LEFT(272) PARENT(#COM_OWNER) TABPOSITION(3) TOP(344)
VL_BASEBOD0000003300000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_RFR) CAPTION(&Refresh) DISPLAYPOSITION(4) LEFT(360) PARENT(#COM_OWNER)TABPOSITION(4) TOP(344)
VL_BASEBOD0000003400000000000001     /* ********** Status bar definition.                                  */
VL_BASEBOD0000003500000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) DISPLAYPOSITION(2) HEIGHT(25) LEFT(0) MESSAGEPOSITION(1) PARENT(#COM_OWNER) TABPOSITION(1) TABSTOP(False) TOP(374) WIDTH(447)
VL_BASEBOD0000003600000000000001     /* **********                                                         */
VL_BASEBOD0000003700000000000001     DEFINE     FIELD(#UPDREQD) TYPE(*CHAR) LENGTH(1) DEFAULT(N)
VL_BASEBOD0000003800000000000001     DEFINE     FIELD(#INSREQD) TYPE(*CHAR) LENGTH(1) DEFAULT(N)
VL_BASEBOD0000003900000000000001     /* **********                                                         */
VL_BASEBOD0000004000000000000001     /* ********** Published properties set by owner form.                 */
VL_BASEBOD0000004100000000000001     /* ********** Replace empno with appropriate key field.               */
VL_BASEBOD0000004200000000000001     /* **********                                                         */
VL_BASEBOD0000004300000000000001     define_pty name(key_value) set(next_key) get(*auto #empno)
VL_BASEBOD0000004400000000000001     /* **********                                                         */
VL_BASEBOD0000004500000000000001     /* ********** Published events to indicate changed or new details     */
VL_BASEBOD0000004600000000000001     /* **********                                                         */
VL_BASEBOD0000004700000000000001     define_evt dtl_insert
VL_BASEBOD0000004800000000000001     define_evt dtl_chgd
VL_BASEBOD0000004900000000000001     /* **********                                                         */
VL_BASEBOD0000005000000000000001     @@ROUTERTN
VL_BASEBOD0000005100000000000001     EVTROUTINE HANDLING( #com_owner.Initialize )
VL_BASEBOD0000005200000000000001     /* **********                                                         */
VL_BASEBOD0000005300000000000001     /* ********** Initialise flags used to indicate pending updates and   */
VL_BASEBOD0000005400000000000001     /* ********** new details.                                            */
VL_BASEBOD0000005500000000000001     /* **********                                                         */
VL_BASEBOD0000005600000000000001     CHANGE     FIELD(#UPDREQD) TO(N)
VL_BASEBOD0000005700000000000001     CHANGE     FIELD(#INSREQD) TO(N)
VL_BASEBOD0000005800000000000001     ENDROUTINE
VL_BASEBOD0000005900000000000001     /* **********                                                         */
VL_BASEBOD0000006000000000000001     /* ********** Property routine to process next key.                   */
VL_BASEBOD0000006100000000000001     /* ********** Replace empno in the define_map with appropriate key    */
VL_BASEBOD0000006200000000000001     /* ********** field.                                                  */
VL_BASEBOD0000006300000000000001     /* **********                                                         */
VL_BASEBOD0000006400000000000001     ptyroutine name(next_key)
VL_BASEBOD0000006500000000000001     define_map *input class(#empno) name(#nxt_keyfld)
VL_BASEBOD0000006600000000000001     EXECUTE    SUBROUTINE(CHK_UPD)
VL_BASEBOD0000006700000000000001     /* **********                                                         */
VL_BASEBOD0000006800000000000001     /* ********** Replace empno with the appropriate key field.           */
VL_BASEBOD0000006900000000000001     /* **********                                                         */
VL_BASEBOD0000007000000000000001     CHANGE     FIELD(#EMPNO) TO('#NXT_KEYFLD.VALUE')
VL_BASEBOD0000007100000000000001     EXECUTE    SUBROUTINE(LOAD_KEY)
VL_BASEBOD0000007200000000000001     endroutine
VL_BASEBOD0000007300000000000001     /* **********                                                         */
VL_BASEBOD0000007400000000000001     SUBROUTINE NAME(LOAD_KEY)
VL_BASEBOD0000007500000000000001     /* **********                                                         */
VL_BASEBOD0000007600000000000001     /* ********** If no key has been provided set all fields to null and  */
VL_BASEBOD0000007700000000000001     /* ********** set flag to indicate a new record is to be inserted.    */
VL_BASEBOD0000007800000000000001     /* ********** Replace section with all the appropriate fields which   */
VL_BASEBOD0000007900000000000001     /* ********** may be updated.                                         */
VL_BASEBOD0000008000000000000001     /* ********** The key fields should be set to read only unless a new  */
VL_BASEBOD0000008100000000000001     /* ********** record is being created.                                */
VL_BASEBOD0000008200000000000001     /* **********                                                         */
VL_BASEBOD0000008300000000000001     IF         COND('#EMPNO *EQ *BLANKS')
VL_BASEBOD0000008400000000000001     CHANGE     FIELD(#INSREQD) TO(Y)
VL_BASEBOD0000008500000000000001     set        #empno readonly(false)
VL_BASEBOD0000008600000000000001     CHANGE     FIELD(#SECTION) TO(*NULL)
VL_BASEBOD0000008700000000000001     set        #phbn_sav enabled( true )
VL_BASEBOD0000008800000000000001     ELSE
VL_BASEBOD0000008900000000000001     /* **********                                                         */
VL_BASEBOD0000009000000000000001     /* ********** Else, set the key fields to read only.                  */
VL_BASEBOD0000009100000000000001     /* ********** Retrieve the details for the provided key.              */
VL_BASEBOD0000009200000000000001     /* ********** Replace file processing with appropriate file details.  */
VL_BASEBOD0000009300000000000001     /* **********                                                         */
VL_BASEBOD0000009400000000000001     set        #empno readonly( true )
VL_BASEBOD0000009500000000000001     set        #phbn_sav enabled( false )
VL_BASEBOD0000009600000000000001     FETCH      FIELDS(*ALL) FROM_FILE(PSLMST) WITH_KEY(#EMPNO)
VL_BASEBOD0000009700000000000001     ENDIF
VL_BASEBOD0000009800000000000001     ENDROUTINE
VL_BASEBOD0000009900000000000001     /* **********                                                         */
VL_BASEBOD0000010000000000000001     /* ********** Method routine to save pending changes.                 */
VL_BASEBOD0000010100000000000001     /* **********                                                         */
VL_BASEBOD0000010200000000000001     MTHROUTINE save_bus_obj
VL_BASEBOD0000010300000000000001     IF         COND('#UPDREQD *EQ Y')
VL_BASEBOD0000010400000000000001     EXECUTE    SUBROUTINE(UPD_BUSOBJ)
VL_BASEBOD0000010500000000000001     ENDIF
VL_BASEBOD0000010600000000000001     IF         COND('#INSREQD *EQ Y')
VL_BASEBOD0000010700000000000001     EXECUTE    SUBROUTINE(INS_BUSOBJ)
VL_BASEBOD0000010800000000000001     ENDIF
VL_BASEBOD0000010900000000000001     ENDROUTINE
VL_BASEBOD0000011000000000000001     /* **********                                                         */
VL_BASEBOD0000011100000000000001     /* ********** ======================================================= */
VL_BASEBOD0000011200000000000001     /* ********** Changed details                                         */
VL_BASEBOD0000011300000000000001     /* ********** ======================================================= */
VL_BASEBOD0000011400000000000001     /* **********                                                         */
VL_BASEBOD0000011500000000000001     /* ********** Monitor all fields which can change.                    */
VL_BASEBOD0000011600000000000001     /* ********** Set flag to indicate update required if if this is not  */
VL_BASEBOD0000011700000000000001     /* ********** a new record.                                           */
VL_BASEBOD0000011800000000000001     /* ********** Enabled the save push button.                           */
VL_BASEBOD0000011900000000000001     /* **********                                                         */
VL_BASEBOD0000012000000000000001     EVTROUTINE ( #section.changed #secdesc.changed )
VL_BASEBOD0000012100000000000001     IF         COND('#INSREQD *NE Y')
VL_BASEBOD0000012200000000000001     CHANGE     FIELD(#UPDREQD) TO(Y)
VL_BASEBOD0000012300000000000001     ENDIF
VL_BASEBOD0000012400000000000001     set        #phbn_sav enabled(true)
VL_BASEBOD0000012500000000000001     ENDROUTINE
VL_BASEBOD0000012600000000000001     /* **********                                                         */
VL_BASEBOD0000012700000000000001     /* ********** When the save push button is clicked call the           */
VL_BASEBOD0000012800000000000001     /* ********** appropriate routine to save the current details.        */
VL_BASEBOD0000012900000000000001     /* **********                                                         */
VL_BASEBOD0000013000000000000001     EVTROUTINE #phbn_sav.click
VL_BASEBOD0000013100000000000001     IF         COND('#UPDREQD *EQ Y')
VL_BASEBOD0000013200000000000001     EXECUTE    SUBROUTINE(UPD_BUSOBJ)
VL_BASEBOD0000013300000000000001     ENDIF
VL_BASEBOD0000013400000000000001     IF         COND('#INSREQD *EQ Y')
VL_BASEBOD0000013500000000000001     EXECUTE    SUBROUTINE(INS_BUSOBJ)
VL_BASEBOD0000013600000000000001     ENDIF
VL_BASEBOD0000013700000000000001     ENDROUTINE
VL_BASEBOD0000013800000000000001     /* **********                                                         */
VL_BASEBOD0000013900000000000001     /* ********** Insert a new record.                                    */
VL_BASEBOD0000014000000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_BASEBOD0000014100000000000001     /* ********** details.                                                */
VL_BASEBOD0000014200000000000001     /* ********** Signal to all interested forms that a new record has    */
VL_BASEBOD0000014300000000000001     /* ********** been added.                                             */
VL_BASEBOD0000014400000000000001     /* ********** Disabled save push button after record successfully     */
VL_BASEBOD0000014500000000000001     /* ********** saved.                                                  */
VL_BASEBOD0000014600000000000001     /* ********** Reset flag to indicate no pending new records exist.    */
VL_BASEBOD0000014700000000000001     /* **********                                                         */
VL_BASEBOD0000014800000000000001     SUBROUTINE NAME(INS_BUSOBJ)
VL_BASEBOD0000014900000000000001     CHECK_FOR  IN_FILE(PSLMST) WITH_KEY(#EMPNO) VAL_ERROR(*NEXT)
VL_BASEBOD0000015000000000000001     IF_STATUS  IS(*NOTEQUALKEY)
VL_BASEBOD0000015100000000000001     INSERT     FIELDS(#DEPTMENT #SECTION #SECDESC #SECADDR1 #SECADDR2 #SECADDR3 #SECPCODE #SECPHBUS) TO_FILE(SECTAB)
VL_BASEBOD0000015200000000000001     IF_STATUS  IS(*OKAY)
VL_BASEBOD0000015300000000000001     signal     event(dtl_insert)
VL_BASEBOD0000015400000000000001     CHANGE     FIELD(#INSREQD) TO(N)
VL_BASEBOD0000015500000000000001     set        #phbn_sav enabled(false)
VL_BASEBOD0000015600000000000001     MESSAGE    MSGTXT('Section successfully inserted') TYPE(*STATUS)
VL_BASEBOD0000015700000000000001     ENDIF
VL_BASEBOD0000015800000000000001     ELSE
VL_BASEBOD0000015900000000000001     ENDIF
VL_BASEBOD0000016000000000000001     ENDROUTINE
VL_BASEBOD0000016100000000000001     /* **********                                                         */
VL_BASEBOD0000016200000000000001     /* ********** Update the current record.                              */
VL_BASEBOD0000016300000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_BASEBOD0000016400000000000001     /* ********** details.                                                */
VL_BASEBOD0000016500000000000001     /* ********** Signal to all interested forms that a record has been   */
VL_BASEBOD0000016600000000000001     /* ********** updated.                                                */
VL_BASEBOD0000016700000000000001     /* ********** Disabled save push button after record successfully     */
VL_BASEBOD0000016800000000000001     /* ********** updated.                                                */
VL_BASEBOD0000016900000000000001     /* ********** Reset flag to indicate no pending changes exist.        */
VL_BASEBOD0000017000000000000001     /* **********                                                         */
VL_BASEBOD0000017100000000000001     SUBROUTINE NAME(UPD_BUSOBJ)
VL_BASEBOD0000017200000000000001     CHECK_FOR  IN_FILE(SECTAB) WITH_KEY(#DEPTMENT #SECTION) VAL_ERROR(*NEXT)
VL_BASEBOD0000017300000000000001     IF_STATUS  IS(*NOTEQUALKEY)
VL_BASEBOD0000017400000000000001     ELSE
VL_BASEBOD0000017500000000000001     UPDATE     FIELDS(#SECDESC #SECADDR1 #SECADDR2 #SECADDR3 #SECPCODE #SECPHBUS) IN_FILE(SECTAB) WITH_KEY(#DEPTMENT #SECTION) VAL_ERROR(*NEXT)
VL_BASEBOD0000017600000000000001     IF_STATUS  IS(*OKAY)
VL_BASEBOD0000017700000000000001     signal     event(dtl_chgd)
VL_BASEBOD0000017800000000000001     CHANGE     FIELD(#UPDREQD) TO(N)
VL_BASEBOD0000017900000000000001     set        #phbn_sav enabled(false)
VL_BASEBOD0000018000000000000001     MESSAGE    MSGTXT('Section successfully updated') TYPE(*STATUS)
VL_BASEBOD0000018100000000000001     ENDIF
VL_BASEBOD0000018200000000000001     ENDIF
VL_BASEBOD0000018300000000000001     ENDROUTINE
VL_BASEBOD0000018400000000000001     /* **********                                                         */
VL_BASEBOD0000018500000000000001     /* ********** This published method allows the owner form to force    */
VL_BASEBOD0000018600000000000001     /* ********** the save                                                */
VL_BASEBOD0000018700000000000001     /* ********** of pending details and close this form.                 */
VL_BASEBOD0000018800000000000001     /* **********                                                         */
VL_BASEBOD0000018900000000000001     MTHROUTINE close_save
VL_BASEBOD0000019000000000000001     EXECUTE    SUBROUTINE(CHK_UPD)
VL_BASEBOD0000019100000000000001     invoke     #com_owner.closeform
VL_BASEBOD0000019200000000000001     ENDROUTINE
VL_BASEBOD0000019300000000000001     /* **********                                                         */
VL_BASEBOD0000019400000000000001     /* ********** This routine checks for pending updates and new records */
VL_BASEBOD0000019500000000000001     /* ********** and displays a message box allowing them to be saved or */
VL_BASEBOD0000019600000000000001     /* ********** cancelled.                                              */
VL_BASEBOD0000019700000000000001     /* ********** This warning is issued when a new object is selected    */
VL_BASEBOD0000019800000000000001     /* ********** or a closeform is invoked, if there are pending changes.                                                       */
VL_BASEBOD0000019900000000000001     /* **********                                                         */
VL_BASEBOD0000020000000000000001     SUBROUTINE NAME(CHK_UPD)
VL_BASEBOD0000020100000000000001     IF         COND('( #UPDREQD *EQ Y ) OR ( #INSREQD *EQ Y )')
VL_BASEBOD0000020200000000000001     USE        BUILTIN(MESSAGE_BOX_CLEAR)
VL_BASEBOD0000020300000000000001     /* **********                                                         */
VL_BASEBOD0000020400000000000001     /* ********** Format the message box text using the following example */
VL_BASEBOD0000020500000000000001     /* ********** as a guide.                                             */
VL_BASEBOD0000020600000000000001     /* **********                                                         */
VL_BASEBOD0000020700000000000001     CHANGE     FIELD(#MSGBXTLE) TO('''Details Update Pending''')
VL_BASEBOD0000020800000000000001     CHANGE     FIELD(#MSGBXTXT) TO('''Changes have been made to the current details,''')
VL_BASEBOD0000020900000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_BASEBOD0000021000000000000001     CHANGE     FIELD(#MSGBXTXT) TO(''' ''')
VL_BASEBOD0000021100000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_BASEBOD0000021200000000000001     CHANGE     FIELD(#MSGBXTXT) TO('''               ---   ''')
VL_BASEBOD0000021300000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_BASEBOD0000021400000000000001     /* **********                                                         */
VL_BASEBOD0000021500000000000001     /* ********** Replace the employee details with appropriate fields.   */
VL_BASEBOD0000021600000000000001     /* **********                                                         */
VL_BASEBOD0000021700000000000001     USE        BUILTIN(MESSAGE_BOX_APPEND) WITH_ARGS(#EMPNO '''-''' #GIVENAME #SURNAME)
VL_BASEBOD0000021800000000000001     CHANGE     FIELD(#MSGBXTXT) TO(''' ---''')
VL_BASEBOD0000021900000000000001     USE        BUILTIN(MESSAGE_BOX_APPEND) WITH_ARGS(#MSGBXTXT)
VL_BASEBOD0000022000000000000001     CHANGE     FIELD(#MSGBXTXT) TO(''' ''')
VL_BASEBOD0000022100000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_BASEBOD0000022200000000000001     CHANGE     FIELD(#MSGBXTXT) TO('''                  but have not been saved.''')
VL_BASEBOD0000022300000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_BASEBOD0000022400000000000001     CHANGE     FIELD(#MSGBXTXT) TO(''' ''')
VL_BASEBOD0000022500000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_BASEBOD0000022600000000000001     CHANGE     FIELD(#MSGBXTXT) TO('''Press OK to save them now, or CANCEL to disregard them..''')
VL_BASEBOD0000022700000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_BASEBOD0000022800000000000001     CHANGE     FIELD(#MSGBXRTN) TO(*BLANKS)
VL_BASEBOD0000022900000000000001     USE        BUILTIN(MESSAGE_BOX_SHOW) WITH_ARGS(OKCANCEL OK WARNING #MSGBXTLE) TO_GET(#MSGBXRTN)
VL_BASEBOD0000023000000000000001     IF         COND('#MSGBXRTN *EQ OK')
VL_BASEBOD0000023100000000000001     IF         COND('#UPDREQD *EQ Y')
VL_BASEBOD0000023200000000000001     EXECUTE    SUBROUTINE(UPD_BUSOBJ)
VL_BASEBOD0000023300000000000001     ELSE
VL_BASEBOD0000023400000000000001     IF         COND('#INSREQD *EQ Y')
VL_BASEBOD0000023500000000000001     EXECUTE    SUBROUTINE(INS_BUSOBJ)
VL_BASEBOD0000023600000000000001     ENDIF
VL_BASEBOD0000023700000000000001     ENDIF
VL_BASEBOD0000023800000000000001     ENDIF
VL_BASEBOD0000023900000000000001     ENDIF
VL_BASEBOD0000024000000000000001     ENDROUTINE
VL_BASEBOD0000024100000000000001     /* **********                                                         */
VL_BASEBOD0000024200000000000001     @@ROUTEEND
VL_BASEBOD0000024300000000000001     END_COM
VL_BASEBOD0000024400000000000001E99: @@LABEL
VL_BASEBOF0000000100000000000001     @@QUESTION PROMPT('Do you want to continue?') ANSWER(@@CANS001) EXTEND('This template produces a Business Object Filter.' 'It is based on the demonstration personnel system.' 'Please read the comments in the code and replace' 'the field and file names as required.' 'See help for further information.') LOWER(*NO) HELPIDS(HELP010)
VL_BASEBOF0000000200000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(E99)
VL_BASEBOF0000000300000000000001     @@ROUTEBEG
VL_BASEBOF0000000400000000000001     BEGIN_COM  BORDERICONS(Minimize+SystemMenu) CAPTION('Business Object Filter') FRAMESTYLE(Dialog) HEIGHT(491) LEFT(347) TOP(21) VISUALSTYLE(#VS_NORM) WIDTH(321)
VL_BASEBOF0000000500000000000001     @@ROUTEDEF
VL_BASEBOF0000000600000000000001     /* **********                                                         */
VL_BASEBOF0000000700000000000001     /* ********** Business Object Filter Template                         */
VL_BASEBOF0000000800000000000001     /* ********** Version  1.0                                            */
VL_BASEBOF0000000900000000000001     /* **********                                                         */
VL_BASEBOF0000001000000000000001     /* **********                                                         */
VL_BASEBOF0000001100000000000001     /* ********** Open the component tab of editor.                       */
VL_BASEBOF0000001200000000000001     /* ********** If required change the captions for the view radio      */
VL_BASEBOF0000001300000000000001     /* ********** buttons in the property sheet.                          */
VL_BASEBOF0000001400000000000001     /* **********                                                         */
VL_BASEBOF0000001500000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_1) CAPTION(Views) DISPLAYPOSITION(1) HEIGHT(57) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(1) TABSTOP(False) TOP(8) WIDTH(313)
VL_BASEBOF0000001600000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RDBN_LVL1) BUTTONCHECKED(True) CAPTION('By Level 1/level 2') DISPLAYPOSITION(1) LEFT(12) PARENT(#GPBX_1) TABPOSITION(1) TOP(20) WIDTH(141)
VL_BASEBOF0000001700000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RDBN_LVL3) CAPTION('By Level 3') DISPLAYPOSITION(2) LEFT(184) PARENT(#GPBX_1) TABPOSITION(2) TOP(22) WIDTH(87)
VL_BASEBOF0000001800000000000001     /* **********                                                         */
VL_BASEBOF0000001900000000000001     /* ********** Level 1 group box.                                      */
VL_BASEBOF0000002000000000000001     /* ********** If required change caption of group box.                */
VL_BASEBOF0000002100000000000001     /* ********** The combo box columns use the key and descriptive       */
VL_BASEBOF0000002200000000000001     /* ********** fields of the first level file.                         */
VL_BASEBOF0000002300000000000001     /* ********** Change the source field property to the correct names.  */
VL_BASEBOF0000002400000000000001     /* **********                                                         */
VL_BASEBOF0000002500000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_LVL1) CAPTION('Level 1') DISPLAYPOSITION(4) HEIGHT(57) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(4) TABSTOP(False) TOP(72) WIDTH(313)
VL_BASEBOF0000002600000000000001     DEFINE_COM CLASS(#PRIM_CKBX) NAME(#CKBX_LVL1) BUTTONSTATE(Checked) CAPTION('All Level 1') DISPLAYPOSITION(2) LEFT(8) PARENT(#GPBX_LVL1) TABPOSITION(2) TOP(23)
VL_BASEBOF0000002700000000000001     DEFINE_COM CLASS(#PRIM_CMBX) NAME(#CMBX_LVL1) DISPLAYPOSITION(1) ENABLED(False) HEIGHT(22) LEFT(128) PARENT(#GPBX_LVL1) TABPOSITION(1) TOP(24) WIDTH(177)
VL_BASEBOF0000002800000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBL1_1) PARENT(#CMBX_LVL1) SOURCE(#DEPTMENT) VISIBLE(False) WIDTH(20)
VL_BASEBOF0000002900000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBL1_2) DISPLAYPOSITION(1) PARENT(#CMBX_LVL1) SORTPOSITION(1) SOURCE(#DEPTDESC) WIDTH(20)
VL_BASEBOF0000003000000000000001     /* **********                                                         */
VL_BASEBOF0000003100000000000001     /* ********** Level 2 group box.                                      */
VL_BASEBOF0000003200000000000001     /* ********** If required change caption of group box.                */
VL_BASEBOF0000003300000000000001     /* ********** The combo box columns use the key and descriptive       */
VL_BASEBOF0000003400000000000001     /* ********** fields of the second level file.                        */
VL_BASEBOF0000003500000000000001     /* ********** Change the source field property to the correct names.  */
VL_BASEBOF0000003600000000000001     /* **********                                                         */
VL_BASEBOF0000003700000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_LVL2) CAPTION('Level 2') DISPLAYPOSITION(6) HEIGHT(57) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(6) TABSTOP(False) TOP(136) WIDTH(313)
VL_BASEBOF0000003800000000000001     DEFINE_COM CLASS(#PRIM_CKBX) NAME(#CKBX_LVL2) BUTTONSTATE(Checked) CAPTION('All Level 2') DISPLAYPOSITION(2) ENABLED(False) PARENT(#GPBX_LVL2) TABPOSITION(2) TOP(20 )
VL_BASEBOF0000003900000000000001     DEFINE_COM CLASS(#PRIM_CMBX) NAME(#CMBX_LVL2) DISPLAYPOSITION(1) ENABLED(False) HEIGHT(22) LEFT(128) PARENT(#GPBX_LVL2) TABPOSITION(1) TOP(22) WIDTH(177)
VL_BASEBOF0000004000000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBL2_2) PARENT(#CMBX_LVL2) SOURCE(#SECTION) VISIBLE(False) WIDTH(20)
VL_BASEBOF0000004100000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBL2_3) DISPLAYPOSITION(1) PARENT(#CMBX_LVL2) SOURCE(#SECDESC) WIDTH(20)
VL_BASEBOF0000004200000000000001     /* **********                                                         */
VL_BASEBOF0000004300000000000001     /* ********** Level 3 group box.                                      */
VL_BASEBOF0000004400000000000001     /* ********** If required change caption of group box.                */
VL_BASEBOF0000004500000000000001     /* **********                                                         */
VL_BASEBOF0000004600000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_LVL3) CAPTION('Level 3') DISPLAYPOSITION(2) HEIGHT(217) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(2) TABSTOP(False) TOP(200) WIDTH(313)
VL_BASEBOF0000004700000000000001     /* **********                                                         */
VL_BASEBOF0000004800000000000001     /* ********** If required change caption of group box and radio       */
VL_BASEBOF0000004900000000000001     /* ********** buttons.                                                */
VL_BASEBOF0000005000000000000001     /* ********** These buttons indicate how the data should be sorted.   */
VL_BASEBOF0000005100000000000001     /* ********** How buttons are required will be determined by what     */
VL_BASEBOF0000005200000000000001     /* ********** data will be displayed at the third level.              */
VL_BASEBOF0000005300000000000001     /* ********** If changing the names of these buttons also change      */
VL_BASEBOF0000005400000000000001     /* ********** the names of the associated events.                     */
VL_BASEBOF0000005500000000000001     /* **********                                                         */
VL_BASEBOF0000005600000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_4) CAPTION(Sort) DISPLAYPOSITION(2) HEIGHT(81) LEFT(8) PARENT(#GPBX_LVL3) TABPOSITION(2) TABSTOP(False) TOP(16) WIDTH(297)
VL_BASEBOF0000005700000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_ALP) BUTTONCHECKED(True) CAPTION('By Name') DISPLAYPOSITION(2) LEFT(160) PARENT(#GPBX_4) TABPOSITION(2) TOP(16) WIDTH(92)
VL_BASEBOF0000005800000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_SAL) CAPTION('By Value') DISPLAYPOSITION(1) LEFT(160) PARENT(#GPBX_4) TABPOSITION(1) TOP(48) WIDTH(100)
VL_BASEBOF0000005900000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_DAT) BUTTONCHECKED(True) CAPTION('By Date') DISPLAYPOSITION(3) LEFT(8) PARENT(#GPBX_4) TABPOSITION(3) TOP(48)
VL_BASEBOF0000006000000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_NBR) CAPTION('By Code') DISPLAYPOSITION(4) LEFT(8) PARENT(#GPBX_4) TABPOSITION(4) TOP(19)
VL_BASEBOF0000006100000000000001     /* **********                                                         */
VL_BASEBOF0000006200000000000001     /* ********** If required change caption of group box and radio       */
VL_BASEBOF0000006300000000000001     /* ********** buttons.                                                */
VL_BASEBOF0000006400000000000001     /* ********** These buttons indicate the order of the sorted data.    */
VL_BASEBOF0000006500000000000001     /* **********                                                         */
VL_BASEBOF0000006600000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_5) CAPTION(Direction) DISPLAYPOSITION(3) LEFT(8) PARENT(#GPBX_LVL3) TABPOSITION(3) TABSTOP(False) TOP(104) WIDTH(297)
VL_BASEBOF0000006700000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_ASC) BUTTONCHECKED(True) CAPTION(Ascending) DISPLAYPOSITION(1) LEFT(16) PARENT(#GPBX_5) TABPOSITION(1) TOP(16)
VL_BASEBOF0000006800000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_DSC) CAPTION(Descending) DISPLAYPOSITION(2) LEFT(160) PARENT(#GPBX_5) TABPOSITION(2) TOP(16)
VL_BASEBOF0000006900000000000001     /* **********                                                         */
VL_BASEBOF0000007000000000000001     /* ********** If required change caption of group box.                */
VL_BASEBOF0000007100000000000001     /* ********** This group box can be hidden/shown depending on what    */
VL_BASEBOF0000007200000000000001     /* ********** type of field is used to sort the data.                 */
VL_BASEBOF0000007300000000000001     /* ********** Appropriate fields can be added to save the comparison  */
VL_BASEBOF0000007400000000000001     /* ********** value.                                                  */
VL_BASEBOF0000007500000000000001     /* **********                                                         */
VL_BASEBOF0000007600000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_6) CAPTION(Date) DISPLAYPOSITION(1) LEFT(8) PARENT(#GPBX_LVL3) TABPOSITION(1) TABSTOP(False) TOP(160) VISIBLE(False) WIDTH(297)
VL_BASEBOF0000007700000000000001     DEFINE_COM CLASS(#PRIM_CMBX) NAME(#CMBX_CMP) DISPLAYPOSITION(1) HEIGHT(22) LEFT(5) PARENT(#GPBX_6) TABPOSITION(1) TOP(20)
VL_BASEBOF0000007800000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBCL_CMP) DISPLAYPOSITION(1) PARENT(#CMBX_CMP) SOURCE(#STD_DESCS) WIDTH(20)
VL_BASEBOF0000007900000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBCL_CDE) PARENT(#CMBX_CMP) SOURCE(#STD_CMPAR) VISIBLE(False) WIDTH(20)
VL_BASEBOF0000008000000000000001     DEFINE_COM CLASS(#STD_NUM.Visual) NAME(#STD_NUM) DISPLAYPOSITION(3) HEIGHT(19) LEFT(128) MARGINLEFT(0) PARENT(#GPBX_6) TABPOSITION(3) TOP(20) VISIBLE(False) WIDTH(150)
VL_BASEBOF0000008100000000000001     DEFINE_COM CLASS(#STD_DATE.Visual) NAME(#STD_DATE) CAPTION(YYMMDD) DISPLAYPOSITION(2) HEIGHT(19) LABELTYPE(Caption) LEFT(136) MARGINLEFT(60) PARENT(#GPBX_6) TABPOSITION(2) TOP(24) VISIBLE(False) WIDTH(150)
VL_BASEBOF0000008200000000000001     /* **********                                                         */
VL_BASEBOF0000008300000000000001     /* ********** If required change caption of these buttons.            */
VL_BASEBOF0000008400000000000001     /* ********** The 'apply' button signals that a choice has been made. */
VL_BASEBOF0000008500000000000001     /* ********** The 'cancel' button closes the filter form without      */
VL_BASEBOF0000008600000000000001     /* ********** signalling any choices.                                 */
VL_BASEBOF0000008700000000000001     /* ********** The 'clear choice' button resets the all radio buttons  */
VL_BASEBOF0000008800000000000001     /* ********** and values to the last saved choice or default if       */
VL_BASEBOF0000008900000000000001     /* ********** never saved.                                            */
VL_BASEBOF0000009000000000000001     /* ********** The 'save choice' button saves the current choice as    */
VL_BASEBOF0000009100000000000001     /* ********** remembered values for the form which will be used on    */
VL_BASEBOF0000009200000000000001     /* ********** first opening the filter and when the clear choice      */
VL_BASEBOF0000009300000000000001     /* ********** button is used.                                         */
VL_BASEBOF0000009400000000000001     /* **********                                                         */
VL_BASEBOF0000009500000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_APLY) CAPTION(Apply) DISPLAYPOSITION(3) LEFT(8) PARENT(#COM_OWNER) TABPOSITION(3) TOP(432) WIDTH(70)
VL_BASEBOF0000009600000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_CNCL) CAPTION(Cancel) DISPLAYPOSITION(5) LEFT(85) PARENT(#COM_OWNER) TABPOSITION(5) TOP(432) WIDTH(70)
VL_BASEBOF0000009700000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_CLR) CAPTION('Clear Choice') DISPLAYPOSITION(8) HINT('Using this button will restore the selection details to the last saved choice, or if no choice has been saved, to the default setting.') LEFT(162) PARENT(#COM_OWNER) TABPOSITION(8) TOP(432) WIDTH(70)
VL_BASEBOF0000009800000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_SAV) CAPTION('Save Choice') DISPLAYPOSITION(7) HINT('This button will save the current selection. These choices will be restored when the form is next executed.') LEFT(240) PARENT(#COM_OWNER) TABPOSITION(7) TOP(432) WIDTH(70)
VL_BASEBOF0000009900000000000001     /* **********                                                         */
VL_BASEBOF0000010000000000000001     /* ********** These work fields are used to remember the current      */
VL_BASEBOF0000010100000000000001     /* ********** choices.                                                */
VL_BASEBOF0000010200000000000001     /* ********** Change the deptment and section names to the            */
VL_BASEBOF0000010300000000000001     /* ********** appropriate key fields for the first and second level   */
VL_BASEBOF0000010400000000000001     /* ********** keys.                                                   */
VL_BASEBOF0000010500000000000001     /* ********** The field #rmv_saved indicates if a choice has been     */
VL_BASEBOF0000010600000000000001     /* ********** saved or not.                                           */
VL_BASEBOF0000010700000000000001     /* **********                                                         */
VL_BASEBOF0000010800000000000001     DEFINE     FIELD(#RMV_DEPT) REFFLD(#DEPTMENT)
VL_BASEBOF0000010900000000000001     DEFINE     FIELD(#RMV_SECT) REFFLD(#SECTION)
VL_BASEBOF0000011000000000000001     DEFINE     FIELD(#RMV_LEVEL) REFFLD(#STD_LEVEL)
VL_BASEBOF0000011100000000000001     DEFINE     FIELD(#RMV_SORT) REFFLD(#STD_SORT)
VL_BASEBOF0000011200000000000001     DEFINE     FIELD(#RMV_DIRCT) REFFLD(#STD_DIRCT)
VL_BASEBOF0000011300000000000001     DEFINE     FIELD(#RMV_DATE) REFFLD(#STD_DATE)
VL_BASEBOF0000011400000000000001     DEFINE     FIELD(#RMV_VALUE) REFFLD(#STD_NUM)
VL_BASEBOF0000011500000000000001     DEFINE     FIELD(#RMV_CMPAR) REFFLD(#STD_CMPAR)
VL_BASEBOF0000011600000000000001     DEFINE     FIELD(#RMV_SAVED) TYPE(*CHAR) LENGTH(1) DEFAULT(N)
VL_BASEBOF0000011700000000000001     /* **********                                                         */
VL_BASEBOF0000011800000000000001     /* ********** These are the published properties used to pass the     */
VL_BASEBOF0000011900000000000001     /* ********** filter choices to calling forms.                        */
VL_BASEBOF0000012000000000000001     /* ********** Change the deptment and section names to the            */
VL_BASEBOF0000012100000000000001     /* ********** appropriate key fields for the first and second level   */
VL_BASEBOF0000012200000000000001     /* ********** keys.                                                   */
VL_BASEBOF0000012300000000000001     /* **********                                                         */
VL_BASEBOF0000012400000000000001     define_pty name( dept_value ) get( *auto #deptment )
VL_BASEBOF0000012500000000000001     define_pty name( sect_value ) get( *auto #section )
VL_BASEBOF0000012600000000000001     define_pty name( level_value ) get( *auto #std_level )
VL_BASEBOF0000012700000000000001     define_pty name( sort_value ) get( *auto #std_sort )
VL_BASEBOF0000012800000000000001     define_pty name( direction_value ) get( *auto #std_dirct )
VL_BASEBOF0000012900000000000001     define_pty name( date_value ) get( *auto #std_date )
VL_BASEBOF0000013000000000000001     define_pty name( salary_value ) get( *auto #std_num )
VL_BASEBOF0000013100000000000001     define_pty name( compare_value ) get( *auto #std_cmpar)
VL_BASEBOF0000013200000000000001     /* **********                                                         */
VL_BASEBOF0000013300000000000001     /* ********** This is the published event used to signal that filter  */
VL_BASEBOF0000013400000000000001     /* ********** choices have been made.                                 */
VL_BASEBOF0000013500000000000001     /* **********                                                         */
VL_BASEBOF0000013600000000000001     define_evt name( ApplyFilter )
VL_BASEBOF0000013700000000000001     /* **********                                                         */
VL_BASEBOF0000013800000000000001     @@QUESTION PROMPT('END OF DEFINITION      ') ANSWER(@@CANS001)
VL_BASEBOF0000013900000000000001     @@ROUTERTN
VL_BASEBOF0000014000000000000001     EVTROUTINE #com_owner.Initialize
VL_BASEBOF0000014100000000000001     /* **********                                                         */
VL_BASEBOF0000014200000000000001     /* ********** This statement establishes which values are to be       */
VL_BASEBOF0000014300000000000001     /* ********** remembered.                                             */
VL_BASEBOF0000014400000000000001     /* ********** Change the deptment and section names to the            */
VL_BASEBOF0000014500000000000001     /* ********** appropriate key fields for the first and second level   */
VL_BASEBOF0000014600000000000001     /* ********** keys.                                                   */
VL_BASEBOF0000014700000000000001     /* **********                                                         */
VL_BASEBOF0000014800000000000001     CHANGE     FIELD(#RMV_SAVED #RMV_DEPT #RMV_SECT #RMV_LEVEL #RMV_SORT #RMV_DIRCT #RMV_DATE #RMV_VALUE #RMV_CMPAR) TO('*REMEMBERED_VALUE_FOR_FUNCTION')
VL_BASEBOF0000014900000000000001     /* **********                                                         */
VL_BASEBOF0000015000000000000001     /* ********** Load combo box with required comparison operators.      */
VL_BASEBOF0000015100000000000001     /* **********                                                         */
VL_BASEBOF0000015200000000000001     EXECUTE    SUBROUTINE(ADD_CMP) WITH_PARMS('''Greater than''' '''GT''')
VL_BASEBOF0000015300000000000001     EXECUTE    SUBROUTINE(ADD_CMP) WITH_PARMS('''Less than''' '''LT''')
VL_BASEBOF0000015400000000000001     EXECUTE    SUBROUTINE(ADD_CMP) WITH_PARMS('''Equal to''' '''EQ''')
VL_BASEBOF0000015500000000000001     /* **********                                                         */
VL_BASEBOF0000015600000000000001     /* ********** Prefill the level one combo box with the appropriate    */
VL_BASEBOF0000015700000000000001     /* ********** details.                                                */
VL_BASEBOF0000015800000000000001     /* **********                                                         */
VL_BASEBOF0000015900000000000001     SELECT     FIELDS(*ALL) FROM_FILE(DEPTAB)
VL_BASEBOF0000016000000000000001     ADD_ENTRY  TO_LIST(#CMBX_LVL1)
VL_BASEBOF0000016100000000000001     ENDSELECT
VL_BASEBOF0000016200000000000001     /* **********                                                         */
VL_BASEBOF0000016300000000000001     /* ********** Initialise all radio buttons and values.                */
VL_BASEBOF0000016400000000000001     /* **********                                                         */
VL_BASEBOF0000016500000000000001     EXECUTE    SUBROUTINE(INIT_VALUE)
VL_BASEBOF0000016600000000000001     ENDROUTINE
VL_BASEBOF0000016700000000000001     /* **********                                                         */
VL_BASEBOF0000016800000000000001     /* ********** Add the comarison operators to combo box.               */
VL_BASEBOF0000016900000000000001     /* **********                                                         */
VL_BASEBOF0000017000000000000001     SUBROUTINE NAME(ADD_CMP) PARMS((#STD_DESCS *RECEIVED) (#STD_CMPAR *RECEIVED))
VL_BASEBOF0000017100000000000001     ADD_ENTRY  TO_LIST(#CMBX_CMP)
VL_BASEBOF0000017200000000000001     ENDROUTINE
VL_BASEBOF0000017300000000000001     /* **********                                                         */
VL_BASEBOF0000017400000000000001     EVTROUTINE HANDLING(#PHBN_CLR.Click)
VL_BASEBOF0000017500000000000001     /* **********                                                         */
VL_BASEBOF0000017600000000000001     /* ********** Reset all radio buttons and values.                     */
VL_BASEBOF0000017700000000000001     /* **********                                                         */
VL_BASEBOF0000017800000000000001     EXECUTE    SUBROUTINE(INIT_VALUE)
VL_BASEBOF0000017900000000000001     ENDROUTINE
VL_BASEBOF0000018000000000000001     /* **********                                                         */
VL_BASEBOF0000018100000000000001     SUBROUTINE NAME(INIT_VALUE)
VL_BASEBOF0000018200000000000001     /* **********                                                         */
VL_BASEBOF0000018300000000000001     /* ********** If choices have been saved                              */
VL_BASEBOF0000018400000000000001     /* ********** Map from remembered fields/values into visual entities. */
VL_BASEBOF0000018500000000000001     /* **********                                                         */
VL_BASEBOF0000018600000000000001     IF         COND('#RMV_SAVED *EQ Y')
VL_BASEBOF0000018700000000000001     /* **********                                                         */
VL_BASEBOF0000018800000000000001     /* ********** Set level to filter by.                                 */
VL_BASEBOF0000018900000000000001     /* **********                                                         */
VL_BASEBOF0000019000000000000001     CHANGE     FIELD(#STD_LEVEL) TO('#RMV_LEVEL')
VL_BASEBOF0000019100000000000001     IF         COND('#STD_LEVEL *EQ 3')
VL_BASEBOF0000019200000000000001     set        #rdbn_lvl3 buttonchecked( true )
VL_BASEBOF0000019300000000000001     ELSE
VL_BASEBOF0000019400000000000001     set        #rdbn_lvl1 buttonchecked( true )
VL_BASEBOF0000019500000000000001     ENDIF
VL_BASEBOF0000019600000000000001     /* **********                                                         */
VL_BASEBOF0000019700000000000001     /* ********** Set level 1 check box and combo box.                    */
VL_BASEBOF0000019800000000000001     /* **********                                                         */
VL_BASEBOF0000019900000000000001     IF         COND('#RMV_DEPT *EQ *BLANK')
VL_BASEBOF0000020000000000000001     set        ( #ckbx_lvl1 #ckbx_lvl2 ) buttonstate( checked )
VL_BASEBOF0000020100000000000001     set        ( #cmbx_lvl1 #gpbx_lvl2 #cmbx_lvl2 #ckbx_lvl2 ) enabled( false )
VL_BASEBOF0000020200000000000001     ELSE
VL_BASEBOF0000020300000000000001     CLR_LIST   NAMED(#CMBX_LVL1)
VL_BASEBOF0000020400000000000001     /* **********                                                         */
VL_BASEBOF0000020500000000000001     /* ********** Replace department file processing with the appropriate */
VL_BASEBOF0000020600000000000001     /* ********** first level file details.                               */
VL_BASEBOF0000020700000000000001     /* **********                                                         */
VL_BASEBOF0000020800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(DEPTAB)
VL_BASEBOF0000020900000000000001     ADD_ENTRY  TO_LIST(#CMBX_LVL1)
VL_BASEBOF0000021000000000000001     IF         COND('#DEPTMENT *EQ #RMV_DEPT')
VL_BASEBOF0000021100000000000001     set        #cmbx_lvl1.currentitem focus( true )
VL_BASEBOF0000021200000000000001     ENDIF
VL_BASEBOF0000021300000000000001     ENDSELECT
VL_BASEBOF0000021400000000000001     CHANGE     FIELD(#DEPTMENT) TO('#RMV_DEPT')
VL_BASEBOF0000021500000000000001     set        #ckbx_lvl1 buttonstate( unchecked )
VL_BASEBOF0000021600000000000001     set        ( #cmbx_lvl1 #gpbx_lvl2 ) enabled( true )
VL_BASEBOF0000021700000000000001     /* **********                                                         */
VL_BASEBOF0000021800000000000001     /* ********** Set the second level check box and combo box.           */
VL_BASEBOF0000021900000000000001     /* ********** Replace the section file processing with the            */
VL_BASEBOF0000022000000000000001     /* ********** appropriate second level file details.                  */
VL_BASEBOF0000022100000000000001     /* **********                                                         */
VL_BASEBOF0000022200000000000001     IF         COND('#RMV_SECT *EQ *BLANK')
VL_BASEBOF0000022300000000000001     set        #ckbx_lvl2 buttonstate( checked )
VL_BASEBOF0000022400000000000001     set        #cmbx_lvl2 enabled( false )
VL_BASEBOF0000022500000000000001     ELSE
VL_BASEBOF0000022600000000000001     CLR_LIST   NAMED(#CMBX_LVL2)
VL_BASEBOF0000022700000000000001     SELECT     FIELDS(*ALL) FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT)
VL_BASEBOF0000022800000000000001     ADD_ENTRY  TO_LIST(#CMBX_LVL2)
VL_BASEBOF0000022900000000000001     IF         COND('#SECTION *EQ #RMV_SECT')
VL_BASEBOF0000023000000000000001     set        #cmbx_lvl2.currentitem focus( true )
VL_BASEBOF0000023100000000000001     ENDIF
VL_BASEBOF0000023200000000000001     ENDSELECT
VL_BASEBOF0000023300000000000001     CHANGE     FIELD(#SECTION) TO('#RMV_SECT')
VL_BASEBOF0000023400000000000001     set        ( #ckbx_lvl1 #ckbx_lvl2 ) buttonstate( unchecked )
VL_BASEBOF0000023500000000000001     ENDIF
VL_BASEBOF0000023600000000000001     ENDIF
VL_BASEBOF0000023700000000000001     /* **********                                                         */
VL_BASEBOF0000023800000000000001     /* ********** Set the appropriate radio button and if appropriate the */
VL_BASEBOF0000023900000000000001     /* ********** comparison details.                                     */
VL_BASEBOF0000024000000000000001     /* ********** Replace field names as required.                        */
VL_BASEBOF0000024100000000000001     /* **********                                                         */
VL_BASEBOF0000024200000000000001     CHANGE     FIELD(#STD_SORT) TO('#RMV_SORT')
VL_BASEBOF0000024300000000000001     set        ( #gpbx_6 #cmbx_cmp #std_date #std_num ) visible( false )
VL_BASEBOF0000024400000000000001     IF         COND('#STD_SORT *EQ N')
VL_BASEBOF0000024500000000000001     set        #rb_nbr buttonchecked( true )
VL_BASEBOF0000024600000000000001     ELSE
VL_BASEBOF0000024700000000000001     IF         COND('#STD_SORT *EQ A')
VL_BASEBOF0000024800000000000001     set        #rb_alp buttonchecked( true )
VL_BASEBOF0000024900000000000001     ELSE
VL_BASEBOF0000025000000000000001     set        ( #gpbx_6 #cmbx_cmp ) visible( true )
VL_BASEBOF0000025100000000000001     IF         COND('#STD_SORT *EQ D')
VL_BASEBOF0000025200000000000001     set        #rb_dat buttonchecked( true )
VL_BASEBOF0000025300000000000001     set        #std_date visible( true )
VL_BASEBOF0000025400000000000001     CHANGE     FIELD(#STD_DATE) TO('#RMV_DATE')
VL_BASEBOF0000025500000000000001     ELSE
VL_BASEBOF0000025600000000000001     IF         COND('#STD_SORT *EQ V')
VL_BASEBOF0000025700000000000001     set        #rb_sal buttonchecked( true )
VL_BASEBOF0000025800000000000001     set        #std_num visible( true )
VL_BASEBOF0000025900000000000001     CHANGE     FIELD(#STD_NUM) TO('#RMV_VALUE')
VL_BASEBOF0000026000000000000001     ENDIF
VL_BASEBOF0000026100000000000001     ENDIF
VL_BASEBOF0000026200000000000001     ENDIF
VL_BASEBOF0000026300000000000001     ENDIF
VL_BASEBOF0000026400000000000001     /* **********                                                         */
VL_BASEBOF0000026500000000000001     /* ********** Set the direction of the sorted data.                   */
VL_BASEBOF0000026600000000000001     /* **********                                                         */
VL_BASEBOF0000026700000000000001     CHANGE     FIELD(#STD_DIRCT) TO('#RMV_DIRCT')
VL_BASEBOF0000026800000000000001     IF         COND('#STD_DIRCT *EQ A')
VL_BASEBOF0000026900000000000001     set        #rb_asc buttonchecked( true )
VL_BASEBOF0000027000000000000001     ELSE
VL_BASEBOF0000027100000000000001     IF         COND('#STD_DIRCT *EQ D')
VL_BASEBOF0000027200000000000001     set        #rb_dsc buttonchecked( true )
VL_BASEBOF0000027300000000000001     ENDIF
VL_BASEBOF0000027400000000000001     ENDIF
VL_BASEBOF0000027500000000000001     /* **********                                                         */
VL_BASEBOF0000027600000000000001     /* ********** Set focus to the correct comparison operator.           */
VL_BASEBOF0000027700000000000001     /* **********                                                         */
VL_BASEBOF0000027800000000000001     SELECTLIST NAMED(#CMBX_CMP)
VL_BASEBOF0000027900000000000001     IF         COND('#STD_CMPAR *EQ #RMV_CMPAR')
VL_BASEBOF0000028000000000000001     set        #cmbx_cmp.currentitem focus( true )
VL_BASEBOF0000028100000000000001     LEAVE
VL_BASEBOF0000028200000000000001     ENDIF
VL_BASEBOF0000028300000000000001     ENDSELECT
VL_BASEBOF0000028400000000000001     CHANGE     FIELD(#STD_CMPAR) TO('#RMV_CMPAR')
VL_BASEBOF0000028500000000000001     /* **********                                                         */
VL_BASEBOF0000028600000000000001     /* ********** Else if no chioces were saved, use defaults.            */
VL_BASEBOF0000028700000000000001     /* **********                                                         */
VL_BASEBOF0000028800000000000001     ELSE
VL_BASEBOF0000028900000000000001     EXECUTE    SUBROUTINE(SETDEFAULT)
VL_BASEBOF0000029000000000000001     ENDIF
VL_BASEBOF0000029100000000000001     ENDROUTINE
VL_BASEBOF0000029200000000000001     /* **********                                                         */
VL_BASEBOF0000029300000000000001     SUBROUTINE NAME(SETDEFAULT)
VL_BASEBOF0000029400000000000001     /* **********                                                         */
VL_BASEBOF0000029500000000000001     /* ********** Replace the deptment, section and comparison fields     */
VL_BASEBOF0000029600000000000001     /* ********** with the appropriate fields.                            */
VL_BASEBOF0000029700000000000001     /* **********                                                         */
VL_BASEBOF0000029800000000000001     CHANGE     FIELD(#DEPTMENT #SECTION #STD_DATE #STD_NUM) TO(*NULL)
VL_BASEBOF0000029900000000000001     set        #rdbn_lvl1 buttonchecked( true )
VL_BASEBOF0000030000000000000001     CHANGE     FIELD(#STD_LEVEL) TO(1)
VL_BASEBOF0000030100000000000001     set        #ckbx_lvl1 buttonstate( checked )
VL_BASEBOF0000030200000000000001     set        #ckbx_lvl2 buttonstate( checked ) enabled( false )
VL_BASEBOF0000030300000000000001     set        ( #cmbx_lvl1 #cmbx_lvl2 ) enabled( false )
VL_BASEBOF0000030400000000000001     set        #rb_nbr buttonchecked( true )
VL_BASEBOF0000030500000000000001     CHANGE     FIELD(#STD_SORT) TO(N)
VL_BASEBOF0000030600000000000001     set        #rb_asc buttonchecked( true )
VL_BASEBOF0000030700000000000001     CHANGE     FIELD(#STD_DIRCT) TO(A)
VL_BASEBOF0000030800000000000001     set        #gpbx_6 visible( false )
VL_BASEBOF0000030900000000000001     CHANGE     FIELD(#STD_CMPAR) TO(GT)
VL_BASEBOF0000031000000000000001     ENDROUTINE
VL_BASEBOF0000031100000000000001     /* **********                                                         */
VL_BASEBOF0000031200000000000001     /* ********** Level 1                                                 */
VL_BASEBOF0000031300000000000001     /* **********                                                         */
VL_BASEBOF0000031400000000000001     EVTROUTINE HANDLING(#RDBN_lvl1.Click)
VL_BASEBOF0000031500000000000001     /* **********                                                         */
VL_BASEBOF0000031600000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000031700000000000001     /* **********                                                         */
VL_BASEBOF0000031800000000000001     CHANGE     FIELD(#STD_LEVEL) TO(1)
VL_BASEBOF0000031900000000000001     ENDROUTINE
VL_BASEBOF0000032000000000000001     /* **********                                                         */
VL_BASEBOF0000032100000000000001     EVTROUTINE HANDLING(#ckbx_lvl1.Click)
VL_BASEBOF0000032200000000000001     IF         COND('#CKBX_LVL1.BUTTONSTATE *EQ CHECKED')
VL_BASEBOF0000032300000000000001     set        #cmbx_lvl1 enabled( false )
VL_BASEBOF0000032400000000000001     set        #ckbx_lvl2 buttonstate( checked ) enabled( false )
VL_BASEBOF0000032500000000000001     /* **********                                                         */
VL_BASEBOF0000032600000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000032700000000000001     /* ********** Replace deptment with appropriate first level key field.                                                       */
VL_BASEBOF0000032800000000000001     /* **********                                                         */
VL_BASEBOF0000032900000000000001     CHANGE     FIELD(#DEPTMENT) TO(*BLANK)
VL_BASEBOF0000033000000000000001     ELSE
VL_BASEBOF0000033100000000000001     set        ( #cmbx_lvl1 #gpbx_lvl2 ) enabled( true )
VL_BASEBOF0000033200000000000001     set        #ckbx_lvl2 buttonstate( checked ) enabled( true )
VL_BASEBOF0000033300000000000001     ENDIF
VL_BASEBOF0000033400000000000001     ENDROUTINE
VL_BASEBOF0000033500000000000001     /* **********                                                         */
VL_BASEBOF0000033600000000000001     /* ********** Level 2                                                 */
VL_BASEBOF0000033700000000000001     /* **********                                                         */
VL_BASEBOF0000033800000000000001     EVTROUTINE HANDLING(#CKBX_LVL2.Click)
VL_BASEBOF0000033900000000000001     IF         COND('#CKBX_LVL2.BUTTONSTATE *EQ CHECKED')
VL_BASEBOF0000034000000000000001     set        #cmbx_lvl2 enabled( false )
VL_BASEBOF0000034100000000000001     /* **********                                                         */
VL_BASEBOF0000034200000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000034300000000000001     /* ********** Replace section with appropriate second level key field.                                                       */
VL_BASEBOF0000034400000000000001     /* **********                                                         */
VL_BASEBOF0000034500000000000001     CHANGE     FIELD(#SECTION) TO(*BLANK)
VL_BASEBOF0000034600000000000001     ELSE
VL_BASEBOF0000034700000000000001     set        #cmbx_lvl2 enabled( true )
VL_BASEBOF0000034800000000000001     CLR_LIST   NAMED(#CMBX_LVL2)
VL_BASEBOF0000034900000000000001     /* **********                                                         */
VL_BASEBOF0000035000000000000001     /* ********** Replace section file processing with appropriate second */
VL_BASEBOF0000035100000000000001     /* ********** level file details.                                     */
VL_BASEBOF0000035200000000000001     /* **********                                                         */
VL_BASEBOF0000035300000000000001     SELECT     FIELDS(*ALL) FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT)
VL_BASEBOF0000035400000000000001     ADD_ENTRY  TO_LIST(#CMBX_LVL2)
VL_BASEBOF0000035500000000000001     ENDSELECT
VL_BASEBOF0000035600000000000001     ENDIF
VL_BASEBOF0000035700000000000001     ENDROUTINE
VL_BASEBOF0000035800000000000001     /* **********                                                         */
VL_BASEBOF0000035900000000000001     /* ********** Level 3                                                 */
VL_BASEBOF0000036000000000000001     /* **********                                                         */
VL_BASEBOF0000036100000000000001     EVTROUTINE HANDLING(#RDBN_lvl3.Click)
VL_BASEBOF0000036200000000000001     set        ( #cmbx_lvl1 #cmbx_lvl2 #ckbx_lvl2 #gpbx_lvl2 ) enabled( false )
VL_BASEBOF0000036300000000000001     /* **********                                                         */
VL_BASEBOF0000036400000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000036500000000000001     /* **********                                                         */
VL_BASEBOF0000036600000000000001     CHANGE     FIELD(#STD_LEVEL) TO(3)
VL_BASEBOF0000036700000000000001     ENDROUTINE
VL_BASEBOF0000036800000000000001     /* **********                                                         */
VL_BASEBOF0000036900000000000001     EVTROUTINE HANDLING(#PHBN_APLY.Click)
VL_BASEBOF0000037000000000000001     IF         COND('#CKBX_LVL1.BUTTONSTATE *EQ CHECKED')
VL_BASEBOF0000037100000000000001     /* **********                                                         */
VL_BASEBOF0000037200000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000037300000000000001     /* ********** Replace deptment with appropriate first level key field.                                                       */
VL_BASEBOF0000037400000000000001     /* **********                                                         */
VL_BASEBOF0000037500000000000001     CHANGE     FIELD(#DEPTMENT) TO(*BLANK)
VL_BASEBOF0000037600000000000001     ENDIF
VL_BASEBOF0000037700000000000001     IF         COND('#CKBX_LVL2.BUTTONSTATE *EQ CHECKED')
VL_BASEBOF0000037800000000000001     /* **********                                                         */
VL_BASEBOF0000037900000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000038000000000000001     /* ********** Replace section with appropriate second level key field.                                                       */
VL_BASEBOF0000038100000000000001     /* **********                                                         */
VL_BASEBOF0000038200000000000001     CHANGE     FIELD(#SECTION) TO(*BLANK)
VL_BASEBOF0000038300000000000001     ENDIF
VL_BASEBOF0000038400000000000001     signal     event( ApplyFilter )
VL_BASEBOF0000038500000000000001     ENDROUTINE
VL_BASEBOF0000038600000000000001     /* **********                                                         */
VL_BASEBOF0000038700000000000001     EVTROUTINE HANDLING(#RB_DAT.Click)
VL_BASEBOF0000038800000000000001     set        #std_num visible( false )
VL_BASEBOF0000038900000000000001     set        ( #cmbx_cmp #std_date ) visible( true )
VL_BASEBOF0000039000000000000001     set        #gpbx_6 caption( 'Date' ) visible( true )
VL_BASEBOF0000039100000000000001     /* **********                                                         */
VL_BASEBOF0000039200000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000039300000000000001     /* **********                                                         */
VL_BASEBOF0000039400000000000001     CHANGE     FIELD(#STD_SORT) TO(D)
VL_BASEBOF0000039500000000000001     ENDROUTINE
VL_BASEBOF0000039600000000000001     /* **********                                                         */
VL_BASEBOF0000039700000000000001     EVTROUTINE HANDLING(#RB_SAL.Click)
VL_BASEBOF0000039800000000000001     set        #std_date visible( false )
VL_BASEBOF0000039900000000000001     set        ( #cmbx_cmp #std_num ) visible( true )
VL_BASEBOF0000040000000000000001     set        #gpbx_6 caption( 'Value' ) visible( true )
VL_BASEBOF0000040100000000000001     /* **********                                                         */
VL_BASEBOF0000040200000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000040300000000000001     /* **********                                                         */
VL_BASEBOF0000040400000000000001     CHANGE     FIELD(#STD_SORT) TO(V)
VL_BASEBOF0000040500000000000001     ENDROUTINE
VL_BASEBOF0000040600000000000001     /* **********                                                         */
VL_BASEBOF0000040700000000000001     EVTROUTINE HANDLING(#RB_ASC.Click)
VL_BASEBOF0000040800000000000001     /* **********                                                         */
VL_BASEBOF0000040900000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000041000000000000001     /* **********                                                         */
VL_BASEBOF0000041100000000000001     CHANGE     FIELD(#STD_DIRCT) TO(A)
VL_BASEBOF0000041200000000000001     ENDROUTINE
VL_BASEBOF0000041300000000000001     /* **********                                                         */
VL_BASEBOF0000041400000000000001     EVTROUTINE HANDLING(#RB_DSC.Click)
VL_BASEBOF0000041500000000000001     /* **********                                                         */
VL_BASEBOF0000041600000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000041700000000000001     /* **********                                                         */
VL_BASEBOF0000041800000000000001     CHANGE     FIELD(#STD_DIRCT) TO(D)
VL_BASEBOF0000041900000000000001     ENDROUTINE
VL_BASEBOF0000042000000000000001     /* **********                                                         */
VL_BASEBOF0000042100000000000001     EVTROUTINE HANDLING(#rb_nbr.Click)
VL_BASEBOF0000042200000000000001     /* **********                                                         */
VL_BASEBOF0000042300000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000042400000000000001     /* **********                                                         */
VL_BASEBOF0000042500000000000001     CHANGE     FIELD(#STD_SORT) TO(C)
VL_BASEBOF0000042600000000000001     set        #gpbx_6 visible( false )
VL_BASEBOF0000042700000000000001     ENDROUTINE
VL_BASEBOF0000042800000000000001     /* **********                                                         */
VL_BASEBOF0000042900000000000001     EVTROUTINE HANDLING(#RB_ALP.Click)
VL_BASEBOF0000043000000000000001     /* **********                                                         */
VL_BASEBOF0000043100000000000001     /* ********** Set published property.                                 */
VL_BASEBOF0000043200000000000001     /* **********                                                         */
VL_BASEBOF0000043300000000000001     CHANGE     FIELD(#STD_SORT) TO(N)
VL_BASEBOF0000043400000000000001     set        #gpbx_6 visible( false )
VL_BASEBOF0000043500000000000001     ENDROUTINE
VL_BASEBOF0000043600000000000001     /* **********                                                         */
VL_BASEBOF0000043700000000000001     EVTROUTINE HANDLING(#PHBN_CNCL.Click)
VL_BASEBOF0000043800000000000001     invoke     #com_owner.closeform
VL_BASEBOF0000043900000000000001     ENDROUTINE
VL_BASEBOF0000044000000000000001     /* **********                                                         */
VL_BASEBOF0000044100000000000001     EVTROUTINE HANDLING(#PHBN_SAV.Click)
VL_BASEBOF0000044200000000000001     /* ********** Map from visual entities into remembered fields/values. */
VL_BASEBOF0000044300000000000001     /* **********                                                         */
VL_BASEBOF0000044400000000000001     /* ********** Set indicator that choice has been saved.               */
VL_BASEBOF0000044500000000000001     /* **********                                                         */
VL_BASEBOF0000044600000000000001     CHANGE     FIELD(#RMV_SAVED) TO(Y)
VL_BASEBOF0000044700000000000001     /* **********                                                         */
VL_BASEBOF0000044800000000000001     /* ********** Save level of filter.                                   */
VL_BASEBOF0000044900000000000001     /* **********                                                         */
VL_BASEBOF0000045000000000000001     IF         COND('#RDBN_LVL1.BUTTONCHECKED *EQ TRUE')
VL_BASEBOF0000045100000000000001     CHANGE     FIELD(#RMV_LEVEL) TO(1)
VL_BASEBOF0000045200000000000001     ELSE
VL_BASEBOF0000045300000000000001     CHANGE     FIELD(#RMV_LEVEL) TO(3)
VL_BASEBOF0000045400000000000001     ENDIF
VL_BASEBOF0000045500000000000001     /* **********                                                         */
VL_BASEBOF0000045600000000000001     /* ********** Save key values.                                        */
VL_BASEBOF0000045700000000000001     /* ********** Replace deptment and section with appropriate fields.   */
VL_BASEBOF0000045800000000000001     /* **********                                                         */
VL_BASEBOF0000045900000000000001     IF         COND('#CKBX_LVL1.BUTTONSTATE *EQ CHECKED')
VL_BASEBOF0000046000000000000001     CHANGE     FIELD(#RMV_DEPT) TO(*BLANK)
VL_BASEBOF0000046100000000000001     CHANGE     FIELD(#RMV_SECT) TO(*BLANK)
VL_BASEBOF0000046200000000000001     ELSE
VL_BASEBOF0000046300000000000001     CHANGE     FIELD(#RMV_DEPT) TO(#DEPTMENT)
VL_BASEBOF0000046400000000000001     IF         COND('#CKBX_LVL2.BUTTONSTATE *EQ CHECKED')
VL_BASEBOF0000046500000000000001     CHANGE     FIELD(#RMV_SECT) TO(*BLANK)
VL_BASEBOF0000046600000000000001     ELSE
VL_BASEBOF0000046700000000000001     CHANGE     FIELD(#RMV_SECT) TO(#SECTION)
VL_BASEBOF0000046800000000000001     ENDIF
VL_BASEBOF0000046900000000000001     ENDIF
VL_BASEBOF0000047000000000000001     /* **********                                                         */
VL_BASEBOF0000047100000000000001     /* ********** Save comparison values.                                 */
VL_BASEBOF0000047200000000000001     /* ********** Replace date and value with appropriate fields.         */
VL_BASEBOF0000047300000000000001     /* **********                                                         */
VL_BASEBOF0000047400000000000001     CHANGE     FIELD(#RMV_DATE) TO(*ZERO)
VL_BASEBOF0000047500000000000001     CHANGE     FIELD(#RMV_VALUE) TO(*ZERO)
VL_BASEBOF0000047600000000000001     IF         COND('#RB_NBR.BUTTONCHECKED *EQ TRUE')
VL_BASEBOF0000047700000000000001     CHANGE     FIELD(#RMV_SORT) TO(N)
VL_BASEBOF0000047800000000000001     ELSE
VL_BASEBOF0000047900000000000001     IF         COND('#RB_ALP.BUTTONCHECKED *EQ TRUE')
VL_BASEBOF0000048000000000000001     CHANGE     FIELD(#RMV_SORT) TO(A)
VL_BASEBOF0000048100000000000001     ELSE
VL_BASEBOF0000048200000000000001     IF         COND('#RB_DAT.BUTTONCHECKED *EQ TRUE')
VL_BASEBOF0000048300000000000001     CHANGE     FIELD(#RMV_SORT) TO(D)
VL_BASEBOF0000048400000000000001     CHANGE     FIELD(#RMV_DATE) TO('#STD_DATE')
VL_BASEBOF0000048500000000000001     ELSE
VL_BASEBOF0000048600000000000001     CHANGE     FIELD(#RMV_SORT) TO(V)
VL_BASEBOF0000048700000000000001     CHANGE     FIELD(#RMV_VALUE) TO('#STD_NUM')
VL_BASEBOF0000048800000000000001     ENDIF
VL_BASEBOF0000048900000000000001     ENDIF
VL_BASEBOF0000049000000000000001     ENDIF
VL_BASEBOF0000049100000000000001     /* **********                                                         */
VL_BASEBOF0000049200000000000001     /* ********** Save sort direction.                                    */
VL_BASEBOF0000049300000000000001     /* **********                                                         */
VL_BASEBOF0000049400000000000001     IF         COND('#RB_ASC.BUTTONCHECKED *EQ TRUE')
VL_BASEBOF0000049500000000000001     CHANGE     FIELD(#RMV_DIRCT) TO(A)
VL_BASEBOF0000049600000000000001     ELSE
VL_BASEBOF0000049700000000000001     CHANGE     FIELD(#RMV_DIRCT) TO(D)
VL_BASEBOF0000049800000000000001     ENDIF
VL_BASEBOF0000049900000000000001     /* **********                                                         */
VL_BASEBOF0000050000000000000001     /* ********** Save comparison operator.                               */
VL_BASEBOF0000050100000000000001     /* **********                                                         */
VL_BASEBOF0000050200000000000001     IF         COND('#GPBX_6.ENABLED *EQ TRUE')
VL_BASEBOF0000050300000000000001     CHANGE     FIELD(#RMV_CMPAR) TO('#STD_CMPAR')
VL_BASEBOF0000050400000000000001     ELSE
VL_BASEBOF0000050500000000000001     CHANGE     FIELD(#RMV_CMPAR) TO(*BLANK)
VL_BASEBOF0000050600000000000001     ENDIF
VL_BASEBOF0000050700000000000001     ENDROUTINE
VL_BASEBOF0000050800000000000001     /* **********                                                         */
VL_BASEBOF0000050900000000000001     @@ROUTEEND
VL_BASEBOF0000051000000000000001     END_COM
VL_BASEBOF0000051100000000000001E99: @@LABEL
VL_BASEBR10000000100000000000001     /* ********** ======================================================= */
VL_BASEBR10000000200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEBR10000000300000000000001     @@COMMENT  COMMENT(' This template is not available.            ')
VL_BASEBR10000000400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEBR10000000500000000000001     @@COMMENT  COMMENT(' It is still under development.             ')
VL_BASEBR10000000600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEBR20000000100000000000001     /* ********** ======================================================= */
VL_BASEBR20000000200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEBR20000000300000000000001     @@COMMENT  COMMENT(' This template is not available.            ')
VL_BASEBR20000000400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEBR20000000500000000000001     @@COMMENT  COMMENT(' It is still under development.             ')
VL_BASEBR20000000600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEBR20000000700000000000001     /* ********** ======================================================= */
VL_BASEMNT0000000100000000000001     /* **********                                                         */
VL_BASEMNT0000000200000000000001     /* ********** This RDMLX code creates a file maintenance form         */
VL_BASEMNT0000000300000000000001     /* **********                                                         */
VL_BASEMNT0000000400000000000001     /* ********** ======================================================= */
VL_BASEMNT0000000500000000000001     /* **********                                                         */
VL_BASEMNT0000000600000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT this data entry program works with') ANSWER(@@CANS001) EXTEND('The word you specify here is used to build messages that appear on the' 'data entry screen panel. You should use ONE word only, use lowercase' 'characters, and only use singular form (eg: "Customer", "Employee"' '"Order"). Do NOT use more than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010)
VL_BASEMNT0000000700000000000001     /* **********                                                         */
VL_BASEMNT0000000800000000000001     /* ********** Get name of one physical file                           */
VL_BASEMNT0000000900000000000001     /* **********                                                         */
VL_BASEMNT0000001000000000000001     @@GET_FILS TO(1) PROMPT('Enter the name of the PHYSICAL file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP020)
VL_BASEMNT0000001100000000000001     /* **********                                                         */
VL_BASEMNT0000001200000000000001     @@ROUTEDEF
VL_BASEMNT0000001300000000000001     /* ********** ======================================================= */
VL_BASEMNT0000001400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000001500000000000001     @@COMMENT  COMMENT(' @@CANS001                                  ')
VL_BASEMNT0000001600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000001700000000000001     @@COMMENT  COMMENT(' @@FNAME01 - Maintenance form               ')
VL_BASEMNT0000001800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000001900000000000001     @@COMMENT  COMMENT(' Template - VL_BASEMNT  Version 2.          ')
VL_BASEMNT0000002000000000000001     /* ********** ======================================================= */
VL_BASEMNT0000002100000000000001     @@COMMENT  COMMENT('    Set to top @@var_top = 0          ')
VL_BASEMNT0000002200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000002300000000000001     /* **********                                                         */
VL_BASEMNT0000002400000000000001     /* ********** Load fields and keys                                    */
VL_BASEMNT0000002500000000000001     /* **********                                                         */
VL_BASEMNT0000002600000000000001     @@CLR_LST  NUMBER(1)
VL_BASEMNT0000002700000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
VL_BASEMNT0000002800000000000001     /* **********                                                         */
VL_BASEMNT0000002900000000000001     @@CLR_LST  NUMBER(2)
VL_BASEMNT0000003000000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
VL_BASEMNT0000003100000000000001     @@SET_IDX  IDX_NAME(SV) TO(@@LNE02)
VL_BASEMNT0000003200000000000001     @@CLR_LST  NUMBER(9)
VL_BASEMNT0000003300000000000001     @@MRG_LSTS FROM_LSTS((2)) INTO_LST(9)
VL_BASEMNT0000003400000000000001     /* **********                                                         */
VL_BASEMNT0000003500000000000001     /* ********** Set index WW to 0 as flag for width property.           */
VL_BASEMNT0000003600000000000001     /* **********                                                         */
VL_BASEMNT0000003700000000000001     @@SET_IDX  IDX_NAME(WW) TO(0)
VL_BASEMNT0000003800000000000001     /* **********                                                         */
VL_BASEMNT0000003900000000000001     /* ********** ======================================================= */
VL_BASEMNT0000004000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000004100000000000001     @@COMMENT  COMMENT(' Key Fields                                 ')
VL_BASEMNT0000004200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000004300000000000001     /* ********** ======================================================= */
VL_BASEMNT0000004400000000000001     /* **********                                                         */
VL_BASEMNT0000004500000000000001     /* ********** Set displayposition count to 1                          */
VL_BASEMNT0000004600000000000001     /* ********** Set key field count to 1                                */
VL_BASEMNT0000004700000000000001     /* **********                                                         */
VL_BASEMNT0000004800000000000001     @@SET_IDX  IDX_NAME(DP) TO(1)
VL_BASEMNT0000004900000000000001     @@SET_IDX  IDX_NAME(KF) TO(1)
VL_BASEMNT0000005000000000000001K10: @@LABEL
VL_BASEMNT0000005100000000000001     @@CMP_IDX  IDX_NAME(KF) IDX_VALUE(@@LNE02) IF_GT(K20)
VL_BASEMNT0000005200000000000001     DEFINE_COM CLASS(#@@LEL02KF.VISUAL ) NAME(#@@LEL02KF) LEFT(8) PARENT(#@@PROCESS) TOP(@@VAR_TOP + 30)
VL_BASEMNT0000005300000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEMNT0000005400000000000001     @@INC_IDX  IDX_NAME(KF)
VL_BASEMNT0000005500000000000001     @@GOTO     LABEL(K10)
VL_BASEMNT0000005600000000000001K20: @@LABEL
VL_BASEMNT0000005700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000005800000000000001     /* **********                                                         */
VL_BASEMNT0000005900000000000001     @@QUESTION PROMPT('How do you want to display fields? Select from types listed below') ANSWER(@@CANS002) EXTEND('FF = Flat Form' 'TF = Tab Folder' 'Note: If the file definition contains many fields (more than 10), it may' 'be easier to arrange them on a tab folder.') LOWER(*NO) VALUES(FF TF) HELPIDS(HELP030)
VL_BASEMNT0000006000000000000001     /* **********                                                         */
VL_BASEMNT0000006100000000000001A10: @@LABEL
VL_BASEMNT0000006200000000000001     @@IF       COND((*IF @@CANS002 *EQ TF)) GOTO(T10)
VL_BASEMNT0000006300000000000001     /* **********                                                         */
VL_BASEMNT0000006400000000000001     /* ********** Create single form display                              */
VL_BASEMNT0000006500000000000001     /* **********                                                         */
VL_BASEMNT0000006600000000000001S10: @@LABEL
VL_BASEMNT0000006700000000000001     @@CLR_LST  NUMBER(3)
VL_BASEMNT0000006800000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(9) INTO_LSTS((3 'Select' 'fields' 'to display' *YESNO *FORCE))
VL_BASEMNT0000006900000000000001     @@MRG_LSTS FROM_LSTS((3)) INTO_LST(9)
VL_BASEMNT0000007000000000000001     @@SET_IDX  IDX_NAME(TT) TO(@@LNE03)
VL_BASEMNT0000007100000000000001     @@CMP_IDX  IDX_NAME(TT) IDX_VALUE(0) IF_EQ(A99)
VL_BASEMNT0000007200000000000001     /* **********                                                         */
VL_BASEMNT0000007300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000007400000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left  = 8      ')
VL_BASEMNT0000007500000000000001     @@COMMENT  COMMENT('    Set field top to @@var_top + 20         ')
VL_BASEMNT0000007600000000000001     @@COMMENT  COMMENT('    Set field top to @@var_ftop = @@var_top ')
VL_BASEMNT0000007700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000007800000000000001     @@SET_IDX  IDX_NAME(SF) TO(@@INDEXSV)
VL_BASEMNT0000007900000000000001     @@INC_IDX  IDX_NAME(SF)
VL_BASEMNT0000008000000000000001     @@SET_IDX  IDX_NAME(XX) TO(1)
VL_BASEMNT0000008100000000000001S20: @@LABEL
VL_BASEMNT0000008200000000000001     @@CMP_IDX  IDX_NAME(SF) IDX_VALUE(@@LNE09) IF_GT(A99)
VL_BASEMNT0000008300000000000001     @@CMP_IDX  IDX_NAME(XX) IDX_VALUE(9) IF_LT(Z10)
VL_BASEMNT0000008400000000000001     @@CMP_IDX  IDX_NAME(XX) IDX_VALUE(9) IF_GT(Z10)
VL_BASEMNT0000008500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000008600000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left  = 384    ')
VL_BASEMNT0000008700000000000001     @@COMMENT  COMMENT('  Reset field top to @@var_ftop = @@var_top ')
VL_BASEMNT0000008800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000008900000000000001     /* **********                                                         */
VL_BASEMNT0000009000000000000001     /* ********** Set index WW to 1 as flag for width property.           */
VL_BASEMNT0000009100000000000001     /* **********                                                         */
VL_BASEMNT0000009200000000000001     @@SET_IDX  IDX_NAME(WW) TO(1)
VL_BASEMNT0000009300000000000001Z10: @@LABEL
VL_BASEMNT0000009400000000000001     DEFINE_COM CLASS(#@@LEL09SF.VISUAL ) NAME(#@@LEL09SF) LEFT(@@VAR_LEFT + 0) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP)     TOP(@@VAR_FTOP + 30)
VL_BASEMNT0000009500000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEMNT0000009600000000000001     @@INC_IDX  IDX_NAME(SF)
VL_BASEMNT0000009700000000000001     @@INC_IDX  IDX_NAME(XX)
VL_BASEMNT0000009800000000000001     @@GOTO     LABEL(S20)
VL_BASEMNT0000009900000000000001     /* **********                                                         */
VL_BASEMNT0000010000000000000001     /* ********** Create tab folder                                       */
VL_BASEMNT0000010100000000000001     /* **********                                                         */
VL_BASEMNT0000010200000000000001T10: @@LABEL
VL_BASEMNT0000010300000000000001     @@SET_IDX  IDX_NAME(ZZ) TO(0)
VL_BASEMNT0000010400000000000001     @@QUESTION PROMPT('''How many tab sheets do you wish to create?') ANSWER(@@NANS001) EXTEND('Select up to 10 logically grouped fields for each tab sheet to allow room ' 'to rearrange position or size of fields if required.') HELPIDS(HELP040)
VL_BASEMNT0000010500000000000001     @@SET_IDX  IDX_NAME(TB) TO(1)
VL_BASEMNT0000010600000000000001T20: @@LABEL
VL_BASEMNT0000010700000000000001     @@CMP_IDX  IDX_NAME(TB) IDX_VALUE(@@NANS001) IF_GT(T99)
VL_BASEMNT0000010800000000000001     @@CLR_LST  NUMBER(3)
VL_BASEMNT0000010900000000000001     @@INC_IDX  IDX_NAME(ZZ)
VL_BASEMNT0000011000000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT tab sheet @@INDEXZZ contains') ANSWER(@@CANS003) EXTEND('The word you specify here is used as the caption on the tab sheet')
VL_BASEMNT0000011100000000000001     @@SET_IDX  IDX_NAME(SV) TO(@@LNE09)
VL_BASEMNT0000011200000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(9) INTO_LSTS((3 'Select' 'fields' 'to display' *YESNO *FORCE))
VL_BASEMNT0000011300000000000001     @@MRG_LSTS FROM_LSTS((3)) INTO_LST(9)
VL_BASEMNT0000011400000000000001     @@SET_IDX  IDX_NAME(TT) TO(@@LNE03)
VL_BASEMNT0000011500000000000001     @@CMP_IDX  IDX_NAME(TT) IDX_VALUE(0) IF_EQ(T99)
VL_BASEMNT0000011600000000000001     /* **********                                                         */
VL_BASEMNT0000011700000000000001     /* ********** ======================================================= */
VL_BASEMNT0000011800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000011900000000000001     @@COMMENT  COMMENT('    @@CANS003 - Tab sheet                   ')
VL_BASEMNT0000012000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000012100000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left = 2       ')
VL_BASEMNT0000012200000000000001     @@COMMENT  COMMENT('    Set top margin to @@var_tbshtop  = 0   ')
VL_BASEMNT0000012300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000012400000000000001     /* ********** ======================================================= */
VL_BASEMNT0000012500000000000001     /* **********                                                         */
VL_BASEMNT0000012600000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_@@INDEXZZ) CAPTION('@@CANS003') DISPLAYPOSITION(@@INDEXZZ) PARENT(#TAB_1)
VL_BASEMNT0000012700000000000001     @@SET_IDX  IDX_NAME(CF) TO(@@INDEXSV)
VL_BASEMNT0000012800000000000001     @@INC_IDX  IDX_NAME(CF)
VL_BASEMNT0000012900000000000001     @@SET_IDX  IDX_NAME(XX) TO(1)
VL_BASEMNT0000013000000000000001T30: @@LABEL
VL_BASEMNT0000013100000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE03) IF_GT(T40)
VL_BASEMNT0000013200000000000001     @@CMP_IDX  IDX_NAME(XX) IDX_VALUE(9) IF_LT(X10)
VL_BASEMNT0000013300000000000001     @@CMP_IDX  IDX_NAME(XX) IDX_VALUE(9) IF_GT(X10)
VL_BASEMNT0000013400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000013500000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left  = 370    ')
VL_BASEMNT0000013600000000000001     @@COMMENT  COMMENT('    Set top margin to @@var_tbshtop  = 0    ')
VL_BASEMNT0000013700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000013800000000000001     /* **********                                                         */
VL_BASEMNT0000013900000000000001     /* ********** Set index WW to 1 as flag for width property.           */
VL_BASEMNT0000014000000000000001     /* **********                                                         */
VL_BASEMNT0000014100000000000001     @@SET_IDX  IDX_NAME(WW) TO(1)
VL_BASEMNT0000014200000000000001X10: @@LABEL
VL_BASEMNT0000014300000000000001     DEFINE_COM CLASS(#@@LEL09CF.VISUAL ) NAME(#@@LEL09CF) LEFT(@@VAR_LEFT + 0) PARENT(#TBSH_@@INDEXZZ) TOP(@@VAR_TBSHTOP + 25)
VL_BASEMNT0000014400000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEMNT0000014500000000000001     @@INC_IDX  IDX_NAME(CF)
VL_BASEMNT0000014600000000000001     @@INC_IDX  IDX_NAME(XX)
VL_BASEMNT0000014700000000000001     @@GOTO     LABEL(T30)
VL_BASEMNT0000014800000000000001T40: @@LABEL
VL_BASEMNT0000014900000000000001     @@INC_IDX  IDX_NAME(TB)
VL_BASEMNT0000015000000000000001     @@GOTO     LABEL(T20)
VL_BASEMNT0000015100000000000001     /* **********                                                         */
VL_BASEMNT0000015200000000000001T99: @@LABEL
VL_BASEMNT0000015300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000015400000000000001     @@CMP_IDX  IDX_NAME(WW) IDX_VALUE(1) IF_EQ(TF1)
VL_BASEMNT0000015500000000000001     @@COMMENT  COMMENT(' Set tab folder width @@var_TFW   = 445    ')
VL_BASEMNT0000015600000000000001     @@GOTO     LABEL(TF9)
VL_BASEMNT0000015700000000000001TF1: @@LABEL
VL_BASEMNT0000015800000000000001     @@COMMENT  COMMENT(' Set tab folder width @@var_TFW   = 745    ')
VL_BASEMNT0000015900000000000001TF9: @@LABEL
VL_BASEMNT0000016000000000000001     DEFINE_COM CLASS(#PRIM_TAB) NAME(#TAB_1) DISPLAYPOSITION(@@INDEXDP) HEIGHT(265) LEFT(8) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 35) WIDTH(@@VAR_TFW + 0)
VL_BASEMNT0000016100000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEMNT0000016200000000000001     /* **********                                                         */
VL_BASEMNT0000016300000000000001A99: @@LABEL
VL_BASEMNT0000016400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000016500000000000001     @@COMMENT  COMMENT('    Buttons                                 ')
VL_BASEMNT0000016600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000016700000000000001     @@COMMENT  COMMENT('    Set button top to @@VAR_TOP + 280       ')
VL_BASEMNT0000016800000000000001     /* **********                                                         */
VL_BASEMNT0000016900000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#FETCH) CAPTION('&Fetch') DISPLAYPOSITION(@@INDEXDP) LEFT(20) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0)
VL_BASEMNT0000017000000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEMNT0000017100000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#INSERT) CAPTION('&Insert') DISPLAYPOSITION(@@INDEXDP) LEFT(120) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0)
VL_BASEMNT0000017200000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEMNT0000017300000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#UPDATE) CAPTION('&Update') DISPLAYPOSITION(@@INDEXDP) LEFT(220) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0)
VL_BASEMNT0000017400000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEMNT0000017500000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#DELETE) CAPTION('&Delete') DISPLAYPOSITION(@@INDEXDP) LEFT(320) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0)
VL_BASEMNT0000017600000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEMNT0000017700000000000001     /* **********                                                         */
VL_BASEMNT0000017800000000000001     /* ********** Add status bar for messages.                            */
VL_BASEMNT0000017900000000000001     /* **********                                                         */
VL_BASEMNT0000018000000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(25) MESSAGEPOSITION(1) PARENT(#@@PROCESS) TOP(@@VAR_TOP + 50)
VL_BASEMNT0000018100000000000001     /* **********                                                         */
VL_BASEMNT0000018200000000000001     /* ********** Adjust form size and details.                           */
VL_BASEMNT0000018300000000000001     /* **********                                                         */
VL_BASEMNT0000018400000000000001     @@ROUTEBEG
VL_BASEMNT0000018500000000000001     @@CMP_IDX  IDX_NAME(WW) IDX_VALUE(1) IF_EQ(W10)
VL_BASEMNT0000018600000000000001     BEGIN_COM  CAPTION(@@CANS001) HEIGHT(@@VAR_TOP + 40) LEFT(270)    TOP(105) VISUALSTYLE(#VS_NORM) WIDTH(470)
VL_BASEMNT0000018700000000000001     @@GOTO     LABEL(W20)
VL_BASEMNT0000018800000000000001W10: @@LABEL
VL_BASEMNT0000018900000000000001     BEGIN_COM  CAPTION(@@CANS001) HEIGHT(@@VAR_TOP + 40) LEFT(19)     TOP(105) VISUALSTYLE(#VS_NORM) WIDTH(765)
VL_BASEMNT0000019000000000000001W20: @@LABEL
VL_BASEMNT0000019100000000000001     @@ROUTEDEF
VL_BASEMNT0000019200000000000001     /* **********                                                         */
VL_BASEMNT0000019300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000019400000000000001     @@COMMENT  COMMENT('     RDML Definitions                       ')
VL_BASEMNT0000019500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000019600000000000001     /* **********                                                         */
VL_BASEMNT0000019700000000000001     DEFINE     #MESSAGE *CHAR 132
VL_BASEMNT0000019800000000000001     GROUP_BY   NAME(#ALLFLDS) FIELDS(@@LST01)
VL_BASEMNT0000019900000000000001     @@ROUTERTN
VL_BASEMNT0000020000000000000001     /* **********                                                         */
VL_BASEMNT0000020100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000020200000000000001     @@COMMENT  COMMENT('     Event Routines                         ')
VL_BASEMNT0000020300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000020400000000000001     /* **********                                                         */
VL_BASEMNT0000020500000000000001     @@COMMENT  COMMENT('    Fetch                                   ')
VL_BASEMNT0000020600000000000001     EVTROUTINE HANDLING(#FETCH.CLICK)
VL_BASEMNT0000020700000000000001     FETCH      FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01) WITH_KEY(@@LST02)
VL_BASEMNT0000020800000000000001     IF_STATUS  IS(*NORECORD)
VL_BASEMNT0000020900000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_BASEMNT0000021000000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_BASEMNT0000021100000000000001     ELSE
VL_BASEMNT0000021200000000000001     IF_STATUS  IS(*ERROR)
VL_BASEMNT0000021300000000000001     MESSAGE    MSGTXT('Error retrieving @@CANS001')
VL_BASEMNT0000021400000000000001     ENDIF
VL_BASEMNT0000021500000000000001     ENDIF
VL_BASEMNT0000021600000000000001     ENDROUTINE
VL_BASEMNT0000021700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000021800000000000001     /* **********                                                         */
VL_BASEMNT0000021900000000000001     @@COMMENT  COMMENT('    Insert                                  ')
VL_BASEMNT0000022000000000000001     EVTROUTINE HANDLING(#INSERT.CLICK)
VL_BASEMNT0000022100000000000001     INSERT     FIELDS(#ALLFLDS) TO_FILE(@@FNAME01) VAL_ERROR(*NEXT)
VL_BASEMNT0000022200000000000001     IF_STATUS  IS(*OKAY)
VL_BASEMNT0000022300000000000001     MESSAGE    MSGTXT('@@CANS001 inserted successfully')
VL_BASEMNT0000022400000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_BASEMNT0000022500000000000001     ELSE
VL_BASEMNT0000022600000000000001     IF_STATUS  IS(*ERROR)
VL_BASEMNT0000022700000000000001     MESSAGE    MSGTXT('Error inserting @@CANS001')
VL_BASEMNT0000022800000000000001     ENDIF
VL_BASEMNT0000022900000000000001     ENDIF
VL_BASEMNT0000023000000000000001     ENDROUTINE
VL_BASEMNT0000023100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000023200000000000001     /* **********                                                         */
VL_BASEMNT0000023300000000000001     @@COMMENT  COMMENT('    Update                                  ')
VL_BASEMNT0000023400000000000001     EVTROUTINE HANDLING(#UPDATE.CLICK)
VL_BASEMNT0000023500000000000001     UPDATE     FIELDS(#ALLFLDS) IN_FILE(@@FNAME01) WITH_KEY(@@LST02) VAL_ERROR(*NEXT)
VL_BASEMNT0000023600000000000001     IF_STATUS  IS(*OKAY)
VL_BASEMNT0000023700000000000001     MESSAGE    MSGTXT('@@CANS001 updated successfully')
VL_BASEMNT0000023800000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_BASEMNT0000023900000000000001     ELSE
VL_BASEMNT0000024000000000000001     IF_STATUS  IS(*NORECORD)
VL_BASEMNT0000024100000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_BASEMNT0000024200000000000001     ELSE
VL_BASEMNT0000024300000000000001     IF_STATUS  IS(*ERROR)
VL_BASEMNT0000024400000000000001     MESSAGE    MSGTXT('Error updating @@CANS001')
VL_BASEMNT0000024500000000000001     ENDIF
VL_BASEMNT0000024600000000000001     ENDIF
VL_BASEMNT0000024700000000000001     ENDIF
VL_BASEMNT0000024800000000000001     ENDROUTINE
VL_BASEMNT0000024900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000025000000000000001     /* **********                                                         */
VL_BASEMNT0000025100000000000001     @@COMMENT  COMMENT('    Delete                                  ')
VL_BASEMNT0000025200000000000001     EVTROUTINE HANDLING(#DELETE.CLICK)
VL_BASEMNT0000025300000000000001     DELETE     FROM_FILE(@@FNAME01) WITH_KEY(@@LST02) VAL_ERROR(*NEXT)
VL_BASEMNT0000025400000000000001     IF_STATUS  IS(*OKAY)
VL_BASEMNT0000025500000000000001     MESSAGE    MSGTXT('@@CANS001 deleted successfully')
VL_BASEMNT0000025600000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_BASEMNT0000025700000000000001     ELSE
VL_BASEMNT0000025800000000000001     IF_STATUS  IS(*NORECORD)
VL_BASEMNT0000025900000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_BASEMNT0000026000000000000001     ELSE
VL_BASEMNT0000026100000000000001     IF_STATUS  IS(*ERROR)
VL_BASEMNT0000026200000000000001     MESSAGE    MSGTXT('Error deleting @@CANS001')
VL_BASEMNT0000026300000000000001     ENDIF
VL_BASEMNT0000026400000000000001     ENDIF
VL_BASEMNT0000026500000000000001     ENDIF
VL_BASEMNT0000026600000000000001     ENDROUTINE
VL_BASEMNT0000026700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000026800000000000001     /* **********                                                         */
VL_BASEMNT0000026900000000000001     /* ********** Initialise fields                                       */
VL_BASEMNT0000027000000000000001     /* **********                                                         */
VL_BASEMNT0000027100000000000001     SUBROUTINE NAME(INITFLDS)
VL_BASEMNT0000027200000000000001     CHANGE     #ALLFLDS *NULL
VL_BASEMNT0000027300000000000001     ENDROUTINE
VL_BASEMNT0000027400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEMNT0000027500000000000001     /* **********                                                         */
VL_BASEMNT0000027600000000000001E99: @@LABEL
VL_BASEMNT0000027700000000000001     @@ROUTEEND
VL_BASEMNT0000027800000000000001     END_COM
VL_BASEMNT0000027900000000000001     /* **********                                                         */
VL_BASEMNT0000028000000000000001     /* ********** ------------------------------------------------        */
VL_BASEMNT0000028100000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
VL_BASEMNT0000028200000000000001     /* ********** ------------------------------------------------        */
VL_BASEMNT0000028300000000000001     @@CLR_LST  NUMBER(1)
VL_BASEMNT0000028400000000000001     @@CLR_LST  NUMBER(2)
VL_BASEMNT0000028500000000000001     @@CLR_LST  NUMBER(3)
VL_BASEMNT0000028600000000000001     @@CLR_LST  NUMBER(9)
VL_BASETAB0000000100000000000001     /* ********** ======================================================= */
VL_BASETAB0000000200000000000001     @@ROUTEBEG
VL_BASETAB0000000300000000000001     BEGIN_COM  CAPTION('TAB FOLDER') VISUALSTYLE(#VS_NORM)
VL_BASETAB0000000400000000000001     @@ROUTEDEF
VL_BASETAB0000000500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000000600000000000001     @@COMMENT  COMMENT(' Tab folder                                 ')
VL_BASETAB0000000700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000000800000000000001     /* ********** ======================================================= */
VL_BASETAB0000000900000000000001     DEFINE_COM CLASS(#PRIM_TAB) NAME(#TAB_1) HEIGHT(210) LEFT(40) PARENT(#@@PROCESS) TOP(48) WIDTH(420)
VL_BASETAB0000001000000000000001     /* ********** ======================================================= */
VL_BASETAB0000001100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000001200000000000001     @@COMMENT  COMMENT(' Tab sheets.                                ')
VL_BASETAB0000001300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000001400000000000001     /* ********** ======================================================= */
VL_BASETAB0000001500000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_1) CAPTION('Tab 1') PARENT(#TAB_1)
VL_BASETAB0000001600000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_2) CAPTION('Tab 2') PARENT(#TAB_1)
VL_BASETAB0000001700000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_3) CAPTION('Tab 3') PARENT(#TAB_1)
VL_BASETAB0000001800000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_4) CAPTION('Tab 4') PARENT(#TAB_1)
VL_BASETAB0000001900000000000001     /* ********** ======================================================= */
VL_BASETAB0000002000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000002100000000000001     @@COMMENT  COMMENT(' Status bar for messages           ')
VL_BASETAB0000002200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000002300000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(25)
VL_BASETAB0000002400000000000001     /* ********** ======================================================= */
VL_BASETAB0000002500000000000001     @@ROUTERTN
VL_BASETAB0000002600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000002700000000000001     @@COMMENT  COMMENT(' Event routines                         ')
VL_BASETAB0000002800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000002900000000000001     /* ********** ======================================================= */
VL_BASETAB0000003000000000000001     EVTROUTINE HANDLING(#TBSH_1.Opening)
VL_BASETAB0000003100000000000001     ENDROUTINE
VL_BASETAB0000003200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000003300000000000001     /* **********                                                         */
VL_BASETAB0000003400000000000001     EVTROUTINE HANDLING(#TBSH_2.Opening)
VL_BASETAB0000003500000000000001     ENDROUTINE
VL_BASETAB0000003600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000003700000000000001     /* **********                                                         */
VL_BASETAB0000003800000000000001     EVTROUTINE HANDLING(#TBSH_3.Opening)
VL_BASETAB0000003900000000000001     ENDROUTINE
VL_BASETAB0000004000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000004100000000000001     /* **********                                                         */
VL_BASETAB0000004200000000000001     EVTROUTINE HANDLING(#TBSH_4.Opening)
VL_BASETAB0000004300000000000001     ENDROUTINE
VL_BASETAB0000004400000000000001     /* **********                                                         */
VL_BASETAB0000004500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000004600000000000001     @@COMMENT  COMMENT('    Status Message                          ')
VL_BASETAB0000004700000000000001     SUBROUTINE NAME(STSMESSAGE) PARMS((#EX_ISSUE *RECEIVED) (#EX_COUNT *BOTH) (#EX_NAME *RECEIVED))
VL_BASETAB0000004800000000000001     define     #ex_issue *dec 15 0
VL_BASETAB0000004900000000000001     define     #ex_count *dec 15 0
VL_BASETAB0000005000000000000001     define     #ex_name  *char 20
VL_BASETAB0000005100000000000001     define     #ex_remn  *dec 7 7
VL_BASETAB0000005200000000000001     change     #ex_count '#ex_count + 1'
VL_BASETAB0000005300000000000001     change     #ex_remn  '#ex_count / #ex_issue'
VL_BASETAB0000005400000000000001     if         '#ex_remn = 0.0000000'
VL_BASETAB0000005500000000000001     message    msgid(dcu0017) msgf(dc@m01) msgdta(#ex_count #ex_name) type(*status)
VL_BASETAB0000005600000000000001     endif
VL_BASETAB0000005700000000000001     ENDROUTINE
VL_BASETAB0000005800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000005900000000000001     @@COMMENT  COMMENT('    Information Message                     ')
VL_BASETAB0000006000000000000001     SUBROUTINE NAME(INFMESSAGE) PARMS((#EX_TEXT *RECEIVED))
VL_BASETAB0000006100000000000001     define     #ex_text  *char 132
VL_BASETAB0000006200000000000001     message    msgid(dcm9992) msgf(dc@m01) msgdta(#ex_text *blanks)
VL_BASETAB0000006300000000000001     ENDROUTINE
VL_BASETAB0000006400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETAB0000006500000000000001     /* **********                                                         */
VL_BASETAB0000006600000000000001     @@ROUTEEND
VL_BASETAB0000006700000000000001     END_COM
VL_BASETAB0000006800000000000001     /* **********                                                         */
VL_BASETRE0000000100000000000001     /* ********** ======================================================= */
VL_BASETRE0000000200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000000300000000000001     @@QUESTION PROMPT('Supply a word that describes the type of object this function works with.') ANSWER(@@CANS001) EXTEND('123456789012345678' 'You should use ONE word only, use lowercase characters and only use ' 'singular form (eg: "Customer", "Employee", Order"). DO NOT use more ' 'than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010)
VL_BASETRE0000000400000000000001     /* **********                                                         */
VL_BASETRE0000000500000000000001     /* ********** ======================================================= */
VL_BASETRE0000000600000000000001     @@ROUTEBEG
VL_BASETRE0000000700000000000001     BEGIN_COM  CAPTION('@@CANS001') VISUALSTYLE(#VS_NORM)
VL_BASETRE0000000800000000000001     @@ROUTEDEF
VL_BASETRE0000000900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000001000000000000001     @@COMMENT  COMMENT('    Work With @@cans001            ')
VL_BASETRE0000001100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000001200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000001300000000000001     @@COMMENT  COMMENT('    Menu definition                ')
VL_BASETRE0000001400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000001500000000000001     /* ********** ======================================================= */
VL_BASETRE0000001600000000000001     DEFINE_COM CLASS(#PRIM_MBAR) NAME(#MBAR_1) PARENT(#@@PROCESS)
VL_BASETRE0000001700000000000001     /* ********** ======================================================= */
VL_BASETRE0000001800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000001900000000000001     @@COMMENT  COMMENT('    Menu 1 - @@CANS001                      ')
VL_BASETRE0000002000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000002100000000000001     /* ********** ======================================================= */
VL_BASETRE0000002200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_1) CAPTION(&@@CANS001) PARENT(#MBAR_1)
VL_BASETRE0000002300000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_1) PARENT(#MITM_1)
VL_BASETRE0000002400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_2) CAPTION(&New) PARENT(#SMNU_1)
VL_BASETRE0000002500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_3) CAPTION('-') PARENT(#SMNU_1)
VL_BASETRE0000002600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_4) CAPTION(&Open) PARENT(#SMNU_1)
VL_BASETRE0000002700000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_5) CAPTION(&Close) PARENT(#SMNU_1)
VL_BASETRE0000002800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_6) CAPTION('-') PARENT(#SMNU_1)
VL_BASETRE0000002900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_7) CAPTION(&Save) PARENT(#SMNU_1)
VL_BASETRE0000003000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_8) CAPTION('Save &As') PARENT(#SMNU_1)
VL_BASETRE0000003100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_9) CAPTION('-') PARENT(#SMNU_1)
VL_BASETRE0000003200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_10) CAPTION('Sen&d To') PARENT(#SMNU_1)
VL_BASETRE0000003300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_11) CAPTION(&Print) PARENT(#SMNU_1)
VL_BASETRE0000003400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_12) CAPTION('-') PARENT(#SMNU_1)
VL_BASETRE0000003500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_13) CAPTION(E&xit) PARENT(#SMNU_1)
VL_BASETRE0000003600000000000001     /* ********** ======================================================= */
VL_BASETRE0000003700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000003800000000000001     @@COMMENT  COMMENT('    Menu 2 - Selected                       ')
VL_BASETRE0000003900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000004000000000000001     /* ********** ======================================================= */
VL_BASETRE0000004100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_14) CAPTION(&Selected) PARENT(#MBAR_1)
VL_BASETRE0000004200000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_2) PARENT(#MITM_14)
VL_BASETRE0000004300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_15) CAPTION(Dis&play) PARENT(#SMNU_2)
VL_BASETRE0000004400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_16) CAPTION(&Delete) PARENT(#SMNU_2)
VL_BASETRE0000004500000000000001     /* ********** ======================================================= */
VL_BASETRE0000004600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000004700000000000001     @@COMMENT  COMMENT('    Menu 3 - View                           ')
VL_BASETRE0000004800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000004900000000000001     /* ********** ======================================================= */
VL_BASETRE0000005000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_17) CAPTION(&View) PARENT(#MBAR_1)
VL_BASETRE0000005100000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_3) PARENT(#MITM_17)
VL_BASETRE0000005200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_18) CAPTION('&Full Screen')PARENT(#SMNU_3)
VL_BASETRE0000005300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_19) CAPTION(&Zoom)  PARENT(#SMNU_3)
VL_BASETRE0000005400000000000001     /* ********** ======================================================= */
VL_BASETRE0000005500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000005600000000000001     @@COMMENT  COMMENT('    Menu 4 - Help                           ')
VL_BASETRE0000005700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000005800000000000001     /* ********** ======================================================= */
VL_BASETRE0000005900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_20) CAPTION(&Help) PARENT(#MBAR_1)
VL_BASETRE0000006000000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_4) PARENT(#MITM_20)
VL_BASETRE0000006100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_21) CAPTION('&Help Topics')PARENT(#SMNU_4)
VL_BASETRE0000006200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_22) CAPTION(&About) PARENT(#SMNU_4)
VL_BASETRE0000006300000000000001     /* ********** ======================================================= */
VL_BASETRE0000006400000000000001     /* **********                                                         */
VL_BASETRE0000006500000000000001     /* ********** ======================================================= */
VL_BASETRE0000006600000000000001     /* ********** GET NAME OF JUST ONE PHYSICAL FILE                      */
VL_BASETRE0000006700000000000001     /* ********** ======================================================= */
VL_BASETRE0000006800000000000001     /* **********                                                         */
VL_BASETRE0000006900000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of Visual LANSA applications it can create.') HELPIDS(HELP020)
VL_BASETRE0000007000000000000001     /* **********                                                         */
VL_BASETRE0000007100000000000001     /* ********** Load keys of base file                                  */
VL_BASETRE0000007200000000000001     /* **********                                                         */
VL_BASETRE0000007300000000000001     @@CLR_LST  NUMBER(1)
VL_BASETRE0000007400000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(1)
VL_BASETRE0000007500000000000001     /* **********                                                         */
VL_BASETRE0000007600000000000001     @@QUESTION PROMPT('How many Key/levels do you wish to create?') ANSWER(@@NANS001) EXTEND('12' 'If you do not request at least 1 level the tree will not be created.' 'You will be prompted for a key field for each level of the tree.') HELPIDS(HELP030)
VL_BASETRE0000007700000000000001     @@IF       COND((*IF @@NANS001 *LT 1)) GOTO(A99)
VL_BASETRE0000007800000000000001     /* **********                                                         */
VL_BASETRE0000007900000000000001     /* ********** ======================================================= */
VL_BASETRE0000008000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000008100000000000001     @@COMMENT  COMMENT('    Tree view definition                    ')
VL_BASETRE0000008200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000008300000000000001     /* ********** ======================================================= */
VL_BASETRE0000008400000000000001     DEFINE_COM CLASS(#PRIM_TRVW) NAME(#TRVW_1) DISPLAYPOSITION(1) HEIGHT(200) LEFT(16) LINESATROOT(True) PARENT(#@@PROCESS) TABPOSITION(1) TOP(16) WIDTH(177)
VL_BASETRE0000008500000000000001     /* **********                                                         */
VL_BASETRE0000008600000000000001     @@SET_IDX  IDX_NAME(KL) TO(1)
VL_BASETRE0000008700000000000001     @@SET_IDX  IDX_NAME(LP) TO(0)
VL_BASETRE0000008800000000000001     @@SET_IDX  IDX_NAME(TR) TO(10)
VL_BASETRE0000008900000000000001T10: @@LABEL
VL_BASETRE0000009000000000000001     @@CMP_IDX  IDX_NAME(KL) IDX_VALUE(@@NANS001) IF_GT(A99)
VL_BASETRE0000009100000000000001     @@INC_IDX  IDX_NAME(LP)
VL_BASETRE0000009200000000000001     @@CLR_LST  NUMBER(2)
VL_BASETRE0000009300000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Select key ' 'for next ' 'level    ')) HELPIDS(HELP040)
VL_BASETRE0000009400000000000001     @@SET_IDX  IDX_NAME(TT) TO(@@LNE02)
VL_BASETRE0000009500000000000001     @@CMP_IDX  IDX_NAME(TT) IDX_VALUE(0) IF_EQ(A99)
VL_BASETRE0000009600000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
VL_BASETRE0000009700000000000001T20: @@LABEL
VL_BASETRE0000009800000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE02) IF_GT(T30)
VL_BASETRE0000009900000000000001     /* **********                                                         */
VL_BASETRE0000010000000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_@@INDEXTR) DISPLAYPOSITION(1) KEYPOSITION(1) LEVEL(@@INDEXLP) PARENT(#TRVW_1)    SOURCE(#@@LEL02CF)
VL_BASETRE0000010100000000000001     /* **********                                                         */
VL_BASETRE0000010200000000000001     @@INC_IDX  IDX_NAME(TR)
VL_BASETRE0000010300000000000001     @@INC_IDX  IDX_NAME(CF)
VL_BASETRE0000010400000000000001     @@GOTO     LABEL(T20)
VL_BASETRE0000010500000000000001T30: @@LABEL
VL_BASETRE0000010600000000000001     @@INC_IDX  IDX_NAME(KL)
VL_BASETRE0000010700000000000001     @@GOTO     LABEL(T10)
VL_BASETRE0000010800000000000001     /* **********                                                         */
VL_BASETRE0000010900000000000001A99: @@LABEL
VL_BASETRE0000011000000000000001     /* ********** ======================================================= */
VL_BASETRE0000011100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000011200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000011300000000000001     @@COMMENT  COMMENT(' Create a status bar for messages           ')
VL_BASETRE0000011400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000011500000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(25) MESSAGEPOSITION(1) PARENT(#@@PROCESS)
VL_BASETRE0000011600000000000001     /* ********** ======================================================= */
VL_BASETRE0000011700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000011800000000000001     @@COMMENT  COMMENT('     RDML Definitions                       ')
VL_BASETRE0000011900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000012000000000000001     /* ********** ======================================================= */
VL_BASETRE0000012100000000000001     GROUP_BY   NAME(#ALLFLDS) FIELDS(@@LST01)
VL_BASETRE0000012200000000000001     /* ********** ======================================================= */
VL_BASETRE0000012300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000012400000000000001     @@COMMENT  COMMENT('    Menu events                             ')
VL_BASETRE0000012500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000012600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000012700000000000001     @@COMMENT  COMMENT('    Menu 1 - Object                         ')
VL_BASETRE0000012800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000012900000000000001     @@COMMENT  COMMENT('    Menu item - New                         ')
VL_BASETRE0000013000000000000001     /* ********** ======================================================= */
VL_BASETRE0000013100000000000001     @@ROUTERTN
VL_BASETRE0000013200000000000001     EVTROUTINE HANDLING(#MITM_2.CLICK)
VL_BASETRE0000013300000000000001     ENDROUTINE
VL_BASETRE0000013400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000013500000000000001     /* **********                                                         */
VL_BASETRE0000013600000000000001     @@COMMENT  COMMENT('    Menu item - Open                        ')
VL_BASETRE0000013700000000000001     EVTROUTINE HANDLING(#MITM_4.CLICK)
VL_BASETRE0000013800000000000001     ENDROUTINE
VL_BASETRE0000013900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000014000000000000001     /* **********                                                         */
VL_BASETRE0000014100000000000001     @@COMMENT  COMMENT('    Menu item - Close                       ')
VL_BASETRE0000014200000000000001     EVTROUTINE HANDLING(#MITM_5.CLICK)
VL_BASETRE0000014300000000000001     ENDROUTINE
VL_BASETRE0000014400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000014500000000000001     /* **********                                                         */
VL_BASETRE0000014600000000000001     @@COMMENT  COMMENT('    Menu item - Save                        ')
VL_BASETRE0000014700000000000001     EVTROUTINE HANDLING(#MITM_7.CLICK)
VL_BASETRE0000014800000000000001     ENDROUTINE
VL_BASETRE0000014900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000015000000000000001     /* **********                                                         */
VL_BASETRE0000015100000000000001     @@COMMENT  COMMENT('    Menu item - Save As                     ')
VL_BASETRE0000015200000000000001     EVTROUTINE HANDLING(#MITM_8.CLICK)
VL_BASETRE0000015300000000000001     ENDROUTINE
VL_BASETRE0000015400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000015500000000000001     /* **********                                                         */
VL_BASETRE0000015600000000000001     @@COMMENT  COMMENT('    Menu item - Send To                     ')
VL_BASETRE0000015700000000000001     EVTROUTINE HANDLING(#MITM_10.CLICK)
VL_BASETRE0000015800000000000001     ENDROUTINE
VL_BASETRE0000015900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000016000000000000001     /* **********                                                         */
VL_BASETRE0000016100000000000001     @@COMMENT  COMMENT('    Menu item - Print                       ')
VL_BASETRE0000016200000000000001     EVTROUTINE HANDLING(#MITM_11.CLICK)
VL_BASETRE0000016300000000000001     ENDROUTINE
VL_BASETRE0000016400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000016500000000000001     /* **********                                                         */
VL_BASETRE0000016600000000000001     @@COMMENT  COMMENT('    Menu item - Exit                        ')
VL_BASETRE0000016700000000000001     EVTROUTINE HANDLING(#MITM_13.CLICK)
VL_BASETRE0000016800000000000001     ENDROUTINE
VL_BASETRE0000016900000000000001     /* ********** ======================================================= */
VL_BASETRE0000017000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000017100000000000001     @@COMMENT  COMMENT('    Menu 2 - Selected                       ')
VL_BASETRE0000017200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000017300000000000001     /* ********** ======================================================= */
VL_BASETRE0000017400000000000001     @@COMMENT  COMMENT('    Menu item - Display                     ')
VL_BASETRE0000017500000000000001     EVTROUTINE HANDLING(#MITM_15.CLICK)
VL_BASETRE0000017600000000000001     ENDROUTINE
VL_BASETRE0000017700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000017800000000000001     /* **********                                                         */
VL_BASETRE0000017900000000000001     @@COMMENT  COMMENT('    Menu item - Delete                      ')
VL_BASETRE0000018000000000000001     EVTROUTINE HANDLING(#MITM_16.CLICK)
VL_BASETRE0000018100000000000001     ENDROUTINE
VL_BASETRE0000018200000000000001     /* ********** ======================================================= */
VL_BASETRE0000018300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000018400000000000001     @@COMMENT  COMMENT('    Menu 3 - View                           ')
VL_BASETRE0000018500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000018600000000000001     /* ********** ======================================================= */
VL_BASETRE0000018700000000000001     @@COMMENT  COMMENT('    Menu item - Full Screen                 ')
VL_BASETRE0000018800000000000001     EVTROUTINE HANDLING(#MITM_18.CLICK)
VL_BASETRE0000018900000000000001     ENDROUTINE
VL_BASETRE0000019000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000019100000000000001     /* **********                                                         */
VL_BASETRE0000019200000000000001     @@COMMENT  COMMENT('    Menu item - Zoom                        ')
VL_BASETRE0000019300000000000001     EVTROUTINE HANDLING(#MITM_19.CLICK)
VL_BASETRE0000019400000000000001     ENDROUTINE
VL_BASETRE0000019500000000000001     /* ********** ======================================================= */
VL_BASETRE0000019600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000019700000000000001     @@COMMENT  COMMENT('    Menu 4 - Help                           ')
VL_BASETRE0000019800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000019900000000000001     /* ********** ======================================================= */
VL_BASETRE0000020000000000000001     @@COMMENT  COMMENT('    Menu item - Help Topics                 ')
VL_BASETRE0000020100000000000001     EVTROUTINE HANDLING(#MITM_21.CLICK)
VL_BASETRE0000020200000000000001     ENDROUTINE
VL_BASETRE0000020300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000020400000000000001     /* **********                                                         */
VL_BASETRE0000020500000000000001     @@COMMENT  COMMENT('    Menu item - About                       ')
VL_BASETRE0000020600000000000001     EVTROUTINE HANDLING(#MITM_22.CLICK)
VL_BASETRE0000020700000000000001     ENDROUTINE
VL_BASETRE0000020800000000000001     /* **********                                                         */
VL_BASETRE0000020900000000000001     /* **********                                                         */
VL_BASETRE0000021000000000000001     @@COMMENT  COMMENT('    Status Message                          ')
VL_BASETRE0000021100000000000001     SUBROUTINE STSMESSAGE ((#EX_ISSUE  *RECEIVED)(#EX_COUNT *BOTH)(#EX_NAME *RECEIVED))
VL_BASETRE0000021200000000000001     define     #ex_issue *dec 15 0
VL_BASETRE0000021300000000000001     define     #ex_count *dec 15 0
VL_BASETRE0000021400000000000001     define     #ex_name  *char 20
VL_BASETRE0000021500000000000001     define     #ex_remn  *dec 7 7
VL_BASETRE0000021600000000000001     change     #ex_count '#ex_count + 1'
VL_BASETRE0000021700000000000001     change     #ex_remn  '#ex_count / #ex_issue'
VL_BASETRE0000021800000000000001     if         '#ex_remn = 0.0000000'
VL_BASETRE0000021900000000000001     message    msgid(dcu0017) msgf(dc@m01) msgdta(#ex_count #ex_name) type(*status)
VL_BASETRE0000022000000000000001     endif
VL_BASETRE0000022100000000000001     ENDROUTINE
VL_BASETRE0000022200000000000001     /* **********                                                         */
VL_BASETRE0000022300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000022400000000000001     @@COMMENT  COMMENT('    Information Message                     ')
VL_BASETRE0000022500000000000001     SUBROUTINE INFMESSAGE ((#EX_TEXT *RECEIVED))
VL_BASETRE0000022600000000000001     define     #ex_text  *char 132
VL_BASETRE0000022700000000000001     message    msgid(dcm9992) msgf(dc@m01) msgdta(#ex_text *blanks)
VL_BASETRE0000022800000000000001     ENDROUTINE
VL_BASETRE0000022900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000023000000000000001     /* **********                                                         */
VL_BASETRE0000023100000000000001     @@IF       COND((*IF @@NANS001 *LT 1)) GOTO(E99)
VL_BASETRE0000023200000000000001     @@COMMENT  COMMENT(' Initialise tree view.                      ')
VL_BASETRE0000023300000000000001     EVTROUTINE HANDLING(#TRVW_1.Initialize)
VL_BASETRE0000023400000000000001     SELECT     FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01)
VL_BASETRE0000023500000000000001     ADD_ENTRY  TO_LIST(#TRVW_1)
VL_BASETRE0000023600000000000001     ENDSELECT
VL_BASETRE0000023700000000000001     ENDROUTINE
VL_BASETRE0000023800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASETRE0000023900000000000001E99: @@LABEL
VL_BASETRE0000024000000000000001     @@ROUTEEND
VL_BASETRE0000024100000000000001     END_COM
VL_BASETRE0000024200000000000001     /* **********                                                         */
VL_BASETRE0000024300000000000001     /* ********** ------------------------------------------------        */
VL_BASETRE0000024400000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
VL_BASETRE0000024500000000000001     /* ********** ------------------------------------------------        */
VL_BASETRE0000024600000000000001     @@CLR_LST  NUMBER(1)
VL_BASETRE0000024700000000000001     @@CLR_LST  NUMBER(2)
VL_BASEWRK0000000100000000000001     /* ********** ======================================================= */
VL_BASEWRK0000000200000000000001     @@QUESTION PROMPT('Supply a word that describes the type of object this function works with.') ANSWER(@@CANS001) EXTEND('123456789012345678' 'You should use ONE word only, use lowercase' 'characters and only use singular form (eg: "Customer", "Employee"' '"Order"). Do NOT use more than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010)
VL_BASEWRK0000000300000000000001     /* **********                                                         */
VL_BASEWRK0000000400000000000001     @@ROUTEDEF
VL_BASEWRK0000000500000000000001     /* ********** ======================================================= */
VL_BASEWRK0000000600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000000700000000000001     @@COMMENT  COMMENT('    Work With @@cans001            ')
VL_BASEWRK0000000800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000000900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000001000000000000001     @@COMMENT  COMMENT('    Tree view definition                    ')
VL_BASEWRK0000001100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000001200000000000001     /* ********** ======================================================= */
VL_BASEWRK0000001300000000000001     /* ********** GET NAME OF JUST ONE FILE                               */
VL_BASEWRK0000001400000000000001     /* ********** ======================================================= */
VL_BASEWRK0000001500000000000001     /* **********                                                         */
VL_BASEWRK0000001600000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of Visual LANSA applications it can create.') HELPIDS(HELP020)
VL_BASEWRK0000001700000000000001     /* **********                                                         */
VL_BASEWRK0000001800000000000001     /* ********** Load details of all fields in primary file into list 1  */
VL_BASEWRK0000001900000000000001     /* **********                                                         */
VL_BASEWRK0000002000000000000001     @@CLR_LST  NUMBER(1)
VL_BASEWRK0000002100000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
VL_BASEWRK0000002200000000000001     /* **********                                                         */
VL_BASEWRK0000002300000000000001     /* ********** Load keys of base file                                  */
VL_BASEWRK0000002400000000000001     /* **********                                                         */
VL_BASEWRK0000002500000000000001     @@CLR_LST  NUMBER(2)
VL_BASEWRK0000002600000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
VL_BASEWRK0000002700000000000001     @@CLR_LST  NUMBER(4)
VL_BASEWRK0000002800000000000001     /* **********                                                         */
VL_BASEWRK0000002900000000000001     @@QUESTION PROMPT('How many Key/levels do you wish to create?') ANSWER(@@NANS001) EXTEND('12' 'You can select a key field for each level of the tree structure and a non-' 'key field. If you select a non-key field the key field will be hidden.') HELPIDS(HELP030)
VL_BASEWRK0000003000000000000001     @@SET_IDX  IDX_NAME(DP) TO(1)
VL_BASEWRK0000003100000000000001     DEFINE_COM CLASS(#PRIM_TRVW) NAME(#TRVW_1) DISPLAYPOSITION(@@INDEXDP) HEIGHT(275) LEFT(16) LINESATROOT(True) PARENT(#@@PROCESS) TABPOSITION(1) TOP(16) WIDTH(177)
VL_BASEWRK0000003200000000000001     @@SET_IDX  IDX_NAME(KL) TO(1)
VL_BASEWRK0000003300000000000001     @@SET_IDX  IDX_NAME(LP) TO(0)
VL_BASEWRK0000003400000000000001     @@SET_IDX  IDX_NAME(TR) TO(10)
VL_BASEWRK0000003500000000000001L10: @@LABEL
VL_BASEWRK0000003600000000000001     @@CMP_IDX  IDX_NAME(KL) IDX_VALUE(@@NANS001) IF_GT(A99)
VL_BASEWRK0000003700000000000001F10: @@LABEL
VL_BASEWRK0000003800000000000001     @@INC_IDX  IDX_NAME(LP)
VL_BASEWRK0000003900000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEWRK0000004000000000000001     /* **********                                                         */
VL_BASEWRK0000004100000000000001     /* ********** Select fields for current level                         */
VL_BASEWRK0000004200000000000001     /* **********                                                         */
VL_BASEWRK0000004300000000000001     @@CLR_LST  NUMBER(3)
VL_BASEWRK0000004400000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((3 'Select flds' 'current' 'level')) HELPIDS(HELP040)
VL_BASEWRK0000004500000000000001     @@SET_IDX  IDX_NAME(FF) TO(@@LNE03)
VL_BASEWRK0000004600000000000001     @@CMP_IDX  IDX_NAME(FF) IDX_VALUE(0) IF_EQ(F99)
VL_BASEWRK0000004700000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
VL_BASEWRK0000004800000000000001     @@SET_IDX  IDX_NAME(SP) TO(1)
VL_BASEWRK0000004900000000000001F20: @@LABEL
VL_BASEWRK0000005000000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE03) IF_GT(F99)
VL_BASEWRK0000005100000000000001     /* **********                                                         */
VL_BASEWRK0000005200000000000001     /* ********** Define fields for current level                         */
VL_BASEWRK0000005300000000000001     /* **********                                                         */
VL_BASEWRK0000005400000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_@@INDEXTR) DISPLAYPOSITION(@@INDEXDP) LEVEL(@@INDEXLP) PARENT(#TRVW_1)           SORTPOSITION(@@INDEXSP) SOURCE(#@@LEL03CF)
VL_BASEWRK0000005500000000000001     /* **********                                                         */
VL_BASEWRK0000005600000000000001     @@INC_IDX  IDX_NAME(CF)
VL_BASEWRK0000005700000000000001     @@SET_IDX  IDX_NAME(DP) TO(0)
VL_BASEWRK0000005800000000000001     @@INC_IDX  IDX_NAME(SP)
VL_BASEWRK0000005900000000000001     @@INC_IDX  IDX_NAME(TR)
VL_BASEWRK0000006000000000000001     @@GOTO     LABEL(F20)
VL_BASEWRK0000006100000000000001F99: @@LABEL
VL_BASEWRK0000006200000000000001     /* **********                                                         */
VL_BASEWRK0000006300000000000001     /* ********** Select keys for current level                           */
VL_BASEWRK0000006400000000000001     /* **********                                                         */
VL_BASEWRK0000006500000000000001K10: @@LABEL
VL_BASEWRK0000006600000000000001     @@CLR_LST  NUMBER(3)
VL_BASEWRK0000006700000000000001     @@MAK_LSTS FROM_LSTS(2) INTO_LSTS((3 'Select key' 'current' 'level')) HELPIDS(HELP050)
VL_BASEWRK0000006800000000000001     @@SET_IDX  IDX_NAME(KK) TO(@@LNE03)
VL_BASEWRK0000006900000000000001     /* **********                                                         */
VL_BASEWRK0000007000000000000001     /* ********** If no fields or keys selected goto end of definition    */
VL_BASEWRK0000007100000000000001     /* **********                                                         */
VL_BASEWRK0000007200000000000001     @@IF       COND((*IF @@INDEXFF *EQ 0) (*AND @@INDEXKK *EQ 0)) GOTO(A99)
VL_BASEWRK0000007300000000000001     @@CMP_IDX  IDX_NAME(KK) IDX_VALUE(0) IF_EQ(K99)
VL_BASEWRK0000007400000000000001     @@SET_IDX  IDX_NAME(KP) TO(1)
VL_BASEWRK0000007500000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
VL_BASEWRK0000007600000000000001     @@CMP_IDX  IDX_NAME(FF) IDX_VALUE(0) IF_GT(K20)
VL_BASEWRK0000007700000000000001     @@SET_IDX  IDX_NAME(DP) TO(1)
VL_BASEWRK0000007800000000000001K20: @@LABEL
VL_BASEWRK0000007900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE03) IF_GT(K99)
VL_BASEWRK0000008000000000000001     /* **********                                                         */
VL_BASEWRK0000008100000000000001     /* ********** Define keys for current level                           */
VL_BASEWRK0000008200000000000001     /* **********                                                         */
VL_BASEWRK0000008300000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_@@INDEXTR) DISPLAYPOSITION(@@INDEXDP) KEYPOSITION(@@INDEXKP) LEVEL(@@INDEXLP) PARENT(#TRVW_1) SOURCE(#@@LEL03CF)
VL_BASEWRK0000008400000000000001     @@INC_IDX  IDX_NAME(CF)
VL_BASEWRK0000008500000000000001     @@SET_IDX  IDX_NAME(DP) TO(0)
VL_BASEWRK0000008600000000000001     @@INC_IDX  IDX_NAME(KP)
VL_BASEWRK0000008700000000000001     @@INC_IDX  IDX_NAME(TR)
VL_BASEWRK0000008800000000000001     @@GOTO     LABEL(K20)
VL_BASEWRK0000008900000000000001K99: @@LABEL
VL_BASEWRK0000009000000000000001     @@INC_IDX  IDX_NAME(KL)
VL_BASEWRK0000009100000000000001     @@GOTO     LABEL(L10)
VL_BASEWRK0000009200000000000001     /* **********                                                         */
VL_BASEWRK0000009300000000000001A99: @@LABEL
VL_BASEWRK0000009400000000000001     /* **********                                                         */
VL_BASEWRK0000009500000000000001     /* ********** Select fields for form                                  */
VL_BASEWRK0000009600000000000001     /* **********                                                         */
VL_BASEWRK0000009700000000000001     /* **********                                                         */
VL_BASEWRK0000009800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000009900000000000001     @@COMMENT  COMMENT('    Set default field position and size     ')
VL_BASEWRK0000010000000000000001     @@COMMENT  COMMENT('    Left margin to @@var_lmgn  = 140        ')
VL_BASEWRK0000010100000000000001     @@COMMENT  COMMENT('    Set left margin to  @@var_left  = 225   ')
VL_BASEWRK0000010200000000000001     @@COMMENT  COMMENT('    Set field top to    @@var_top = 16      ')
VL_BASEWRK0000010300000000000001     @@COMMENT  COMMENT('    Set field height to @@var_hgt = 20      ')
VL_BASEWRK0000010400000000000001     @@COMMENT  COMMENT('    Set field width to  @@var_fwtd = 300    ')
VL_BASEWRK0000010500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000010600000000000001     /* **********                                                         */
VL_BASEWRK0000010700000000000001     /* ********** Create tab folder                                       */
VL_BASEWRK0000010800000000000001     /* **********                                                         */
VL_BASEWRK0000010900000000000001T10: @@LABEL
VL_BASEWRK0000011000000000000001     @@SET_IDX  IDX_NAME(ZZ) TO(0)
VL_BASEWRK0000011100000000000001     DEFINE_COM CLASS(#PRIM_TAB) NAME(#TAB_1) DISPLAYPOSITION(@@INDEXDP) HEIGHT(370) LEFT(230) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0) WIDTH(385)
VL_BASEWRK0000011200000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEWRK0000011300000000000001     @@QUESTION PROMPT('How many tab sheets do you wish to create?') ANSWER(@@NANS002) EXTEND('12' 'Select up to 10 logically grouped fields for each tab sheet to allow room ' 'to rearrange position or size of fields if required.') HELPIDS(HELP060)
VL_BASEWRK0000011400000000000001     @@SET_IDX  IDX_NAME(TB) TO(1)
VL_BASEWRK0000011500000000000001T20: @@LABEL
VL_BASEWRK0000011600000000000001     @@CMP_IDX  IDX_NAME(TB) IDX_VALUE(@@NANS002) IF_GT(T99)
VL_BASEWRK0000011700000000000001     @@CLR_LST  NUMBER(5)
VL_BASEWRK0000011800000000000001     @@INC_IDX  IDX_NAME(ZZ)
VL_BASEWRK0000011900000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT tab sheet @@INDEXZZ contains') ANSWER(@@CANS003) EXTEND('123456789012345678' 'The word you specify here is used as the caption on the tab sheet')
VL_BASEWRK0000012000000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((5 'Select flds' 'to display' 'on tab    '))
VL_BASEWRK0000012100000000000001     @@SET_IDX  IDX_NAME(TT) TO(@@LNE05)
VL_BASEWRK0000012200000000000001     @@CMP_IDX  IDX_NAME(TT) IDX_VALUE(0) IF_EQ(T99)
VL_BASEWRK0000012300000000000001     /* **********                                                         */
VL_BASEWRK0000012400000000000001     /* ********** ======================================================= */
VL_BASEWRK0000012500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000012600000000000001     @@COMMENT  COMMENT('    @@CANS003 - Tab sheet               .   ')
VL_BASEWRK0000012700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000012800000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left = 10      ')
VL_BASEWRK0000012900000000000001     @@COMMENT  COMMENT('    Set top margin to @@var_tbshtop  = 15   ')
VL_BASEWRK0000013000000000000001     @@COMMENT  COMMENT('    Set top margin to @@var_tsfltop  = 0    ')
VL_BASEWRK0000013100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000013200000000000001     /* ********** ======================================================= */
VL_BASEWRK0000013300000000000001     /* **********                                                         */
VL_BASEWRK0000013400000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_@@INDEXZZ) CAPTION('@@CANS003') DISPLAYPOSITION(@@INDEXZZ) PARENT(#TAB_1)
VL_BASEWRK0000013500000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
VL_BASEWRK0000013600000000000001T30: @@LABEL
VL_BASEWRK0000013700000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE05) IF_GT(T40)
VL_BASEWRK0000013800000000000001     DEFINE_COM CLASS(#@@LEL05CF.VISUAL ) NAME(#@@LEL05CF) DISPLAYPOSITION(@@INDEXDP) HEIGHT(@@VAR_HGT + 0) LABELHORALIGNMENT(Left) LEFT(@@VAR_LEFT + 0) MARGINLEFT(@@VAR_LMGN + 0)  PARENT(#TBSH_@@INDEXZZ) TABPOSITION(@@INDEXDP)         TOP(@@VAR_TSFLTOP + 30) WIDTH(@@VAR_FWTD + 0)
VL_BASEWRK0000013900000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEWRK0000014000000000000001     @@INC_IDX  IDX_NAME(CF)
VL_BASEWRK0000014100000000000001     @@GOTO     LABEL(T30)
VL_BASEWRK0000014200000000000001T40: @@LABEL
VL_BASEWRK0000014300000000000001     @@INC_IDX  IDX_NAME(TB)
VL_BASEWRK0000014400000000000001     @@GOTO     LABEL(T20)
VL_BASEWRK0000014500000000000001T99: @@LABEL
VL_BASEWRK0000014600000000000001     /* **********                                                         */
VL_BASEWRK0000014700000000000001     /* ********** ======================================================= */
VL_BASEWRK0000014800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000014900000000000001     @@COMMENT  COMMENT('    Buttons                                 ')
VL_BASEWRK0000015000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000015100000000000001     /* ********** ======================================================= */
VL_BASEWRK0000015200000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEWRK0000015300000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#UPDATE) CAPTION(Update) DISPLAYPOSITION(@@INDEXDP) LEFT(16) PARENT(#@@PROCESS)        TABPOSITION(@@INDEXDP) TOP(320)
VL_BASEWRK0000015400000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEWRK0000015500000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#DELETE) CAPTION(Delete) DISPLAYPOSITION(@@INDEXDP) LEFT(16) PARENT(#@@PROCESS)        TABPOSITION(@@INDEXDP) TOP(360)
VL_BASEWRK0000015600000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEWRK0000015700000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#NEW) CAPTION(New      ) DISPLAYPOSITION(@@INDEXDP) LEFT(112) PARENT(#@@PROCESS)       TABPOSITION(@@INDEXDP) TOP(320)
VL_BASEWRK0000015800000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEWRK0000015900000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#INSERT) CAPTION(Insert) DISPLAYPOSITION(@@INDEXDP) LEFT(112) PARENT(#@@PROCESS)       TABPOSITION(@@INDEXDP) TOP(360)
VL_BASEWRK0000016000000000000001     @@INC_IDX  IDX_NAME(DP)
VL_BASEWRK0000016100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000016200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000016300000000000001     @@COMMENT  COMMENT(' Create a status bar for messages           ')
VL_BASEWRK0000016400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000016500000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(30) MESSAGEPOSITION(1) PARENT(#@@PROCESS)
VL_BASEWRK0000016600000000000001     /* **********                                                         */
VL_BASEWRK0000016700000000000001     /* **********                                                         */
VL_BASEWRK0000016800000000000001     @@ROUTEBEG
VL_BASEWRK0000016900000000000001     BEGIN_COM  HEIGHT(450) LEFT(140) TOP(110) VISIBLE(False) VISUALSTYLE(#VS_NORM) WIDTH(650)
VL_BASEWRK0000017000000000000001     @@ROUTEDEF
VL_BASEWRK0000017100000000000001     /* ********** ======================================================= */
VL_BASEWRK0000017200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000017300000000000001     @@COMMENT  COMMENT('     RDML Definitions                       ')
VL_BASEWRK0000017400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000017500000000000001     /* ********** ======================================================= */
VL_BASEWRK0000017600000000000001     GROUP_BY   NAME(#ALLFLDS) FIELDS(@@LST01)
VL_BASEWRK0000017700000000000001     /* ********** ======================================================= */
VL_BASEWRK0000017800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000017900000000000001     @@COMMENT  COMMENT('         Events                             ')
VL_BASEWRK0000018000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000018100000000000001     /* ********** ======================================================= */
VL_BASEWRK0000018200000000000001     @@ROUTERTN
VL_BASEWRK0000018300000000000001     /* **********                                                         */
VL_BASEWRK0000018400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000018500000000000001     @@COMMENT  COMMENT(' Initialise tree view.                      ')
VL_BASEWRK0000018600000000000001     EVTROUTINE HANDLING(#TRVW_1.Initialize)
VL_BASEWRK0000018700000000000001     SELECT     FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01)
VL_BASEWRK0000018800000000000001     ADD_ENTRY  TO_LIST(#TRVW_1)
VL_BASEWRK0000018900000000000001     ENDSELECT
VL_BASEWRK0000019000000000000001     CHANGE     #ALLFLDS *NULL
VL_BASEWRK0000019100000000000001     ENDROUTINE
VL_BASEWRK0000019200000000000001     /* **********                                                         */
VL_BASEWRK0000019300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000019400000000000001     @@COMMENT  COMMENT(' Retrieve current object                    ')
VL_BASEWRK0000019500000000000001     EVTROUTINE HANDLING(#TRVW_1.ItemGotFocus)
VL_BASEWRK0000019600000000000001     FETCH      FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01) WITH_KEY(@@LST02)
VL_BASEWRK0000019700000000000001     IF_STATUS  IS(*NORECORD)
VL_BASEWRK0000019800000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_BASEWRK0000019900000000000001     EXECUTE    INITFLDS
VL_BASEWRK0000020000000000000001     ELSE
VL_BASEWRK0000020100000000000001     IF_STATUS  IS(*ERROR)
VL_BASEWRK0000020200000000000001     MESSAGE    MSGTXT('Error retrieving @@CANS001')
VL_BASEWRK0000020300000000000001     ENDIF
VL_BASEWRK0000020400000000000001     ENDIF
VL_BASEWRK0000020500000000000001     ENDROUTINE
VL_BASEWRK0000020600000000000001     /* **********                                                         */
VL_BASEWRK0000020700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000020800000000000001     @@COMMENT  COMMENT('    Update                                  ')
VL_BASEWRK0000020900000000000001     EVTROUTINE HANDLING(#UPDATE.CLICK)
VL_BASEWRK0000021000000000000001     UPDATE     FIELDS(#ALLFLDS) IN_FILE(@@FNAME01) WITH_KEY(@@LST02) VAL_ERROR(*NEXT)
VL_BASEWRK0000021100000000000001     IF_STATUS  IS(*OKAY)
VL_BASEWRK0000021200000000000001     MESSAGE    MSGTXT('@@CANS001 updated successfully')
VL_BASEWRK0000021300000000000001     ELSE
VL_BASEWRK0000021400000000000001     IF_STATUS  IS(*NORECORD)
VL_BASEWRK0000021500000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_BASEWRK0000021600000000000001     ELSE
VL_BASEWRK0000021700000000000001     IF_STATUS  IS(*ERROR)
VL_BASEWRK0000021800000000000001     MESSAGE    MSGTXT('Error updating @@CANS001')
VL_BASEWRK0000021900000000000001     ENDIF
VL_BASEWRK0000022000000000000001     ENDIF
VL_BASEWRK0000022100000000000001     ENDIF
VL_BASEWRK0000022200000000000001     ENDROUTINE
VL_BASEWRK0000022300000000000001     /* **********                                                         */
VL_BASEWRK0000022400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000022500000000000001     @@COMMENT  COMMENT('    Delete                                  ')
VL_BASEWRK0000022600000000000001     EVTROUTINE HANDLING(#DELETE.CLICK)
VL_BASEWRK0000022700000000000001     DELETE     FROM_FILE(@@FNAME01) WITH_KEY(@@LST02) VAL_ERROR(*NEXT)
VL_BASEWRK0000022800000000000001     IF_STATUS  IS(*OKAY)
VL_BASEWRK0000022900000000000001     DLT_ENTRY  FROM_LIST(#TRVW_1)
VL_BASEWRK0000023000000000000001     MESSAGE    MSGTXT('@@CANS001 deleted successfully')
VL_BASEWRK0000023100000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_BASEWRK0000023200000000000001     ELSE
VL_BASEWRK0000023300000000000001     IF_STATUS  IS(*NORECORD)
VL_BASEWRK0000023400000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_BASEWRK0000023500000000000001     ELSE
VL_BASEWRK0000023600000000000001     IF_STATUS  IS(*ERROR)
VL_BASEWRK0000023700000000000001     MESSAGE    MSGTXT('Error deleting @@CANS001')
VL_BASEWRK0000023800000000000001     ENDIF
VL_BASEWRK0000023900000000000001     ENDIF
VL_BASEWRK0000024000000000000001     ENDIF
VL_BASEWRK0000024100000000000001     ENDROUTINE
VL_BASEWRK0000024200000000000001     /* **********                                                         */
VL_BASEWRK0000024300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000024400000000000001     @@COMMENT  COMMENT('    New                                     ')
VL_BASEWRK0000024500000000000001     EVTROUTINE HANDLING(#New.CLICK)
VL_BASEWRK0000024600000000000001     EXECUTE    INITFLDS
VL_BASEWRK0000024700000000000001     ENDROUTINE
VL_BASEWRK0000024800000000000001     /* **********                                                         */
VL_BASEWRK0000024900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000025000000000000001     @@COMMENT  COMMENT('    Insert                                  ')
VL_BASEWRK0000025100000000000001     EVTROUTINE HANDLING(#INSERT.CLICK)
VL_BASEWRK0000025200000000000001     INSERT     FIELDS(#ALLFLDS) TO_FILE(@@FNAME01) VAL_ERROR(*NEXT)
VL_BASEWRK0000025300000000000001     IF_STATUS  IS(*OKAY)
VL_BASEWRK0000025400000000000001     MESSAGE    MSGTXT('@@CANS001 inserted successfully')
VL_BASEWRK0000025500000000000001     ELSE
VL_BASEWRK0000025600000000000001     IF_STATUS  IS(*ERROR)
VL_BASEWRK0000025700000000000001     MESSAGE    MSGTXT('Error inserting @@CANS001')
VL_BASEWRK0000025800000000000001     ENDIF
VL_BASEWRK0000025900000000000001     ENDIF
VL_BASEWRK0000026000000000000001     ENDROUTINE
VL_BASEWRK0000026100000000000001     /* **********                                                         */
VL_BASEWRK0000026200000000000001     /* ********** Initialise fields                                       */
VL_BASEWRK0000026300000000000001     /* **********                                                         */
VL_BASEWRK0000026400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000026500000000000001     SUBROUTINE NAME(INITFLDS)
VL_BASEWRK0000026600000000000001     CHANGE     #ALLFLDS *NULL
VL_BASEWRK0000026700000000000001     ENDROUTINE
VL_BASEWRK0000026800000000000001     /* **********                                                         */
VL_BASEWRK0000026900000000000001     /* ********** Initialise tree                                         */
VL_BASEWRK0000027000000000000001     /* **********                                                         */
VL_BASEWRK0000027100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000027200000000000001     SUBROUTINE NAME(INITTREE)
VL_BASEWRK0000027300000000000001     CLR_LIST   #TRVW_1
VL_BASEWRK0000027400000000000001     SELECT     FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01)
VL_BASEWRK0000027500000000000001     ADD_ENTRY  #TRVW_1
VL_BASEWRK0000027600000000000001     ENDSELECT
VL_BASEWRK0000027700000000000001     ENDROUTINE
VL_BASEWRK0000027800000000000001     /* **********                                                         */
VL_BASEWRK0000027900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000028000000000000001     @@COMMENT  COMMENT('    Status Message                          ')
VL_BASEWRK0000028100000000000001     SUBROUTINE STSMESSAGE ((#EX_ISSUE  *RECEIVED)(#EX_COUNT *BOTH)(#EX_NAME *RECEIVED))
VL_BASEWRK0000028200000000000001     define     #ex_issue *dec 15 0
VL_BASEWRK0000028300000000000001     define     #ex_count *dec 15 0
VL_BASEWRK0000028400000000000001     define     #ex_name  *char 20
VL_BASEWRK0000028500000000000001     define     #ex_remn  *dec 7 7
VL_BASEWRK0000028600000000000001     change     #ex_count '#ex_count + 1'
VL_BASEWRK0000028700000000000001     change     #ex_remn  '#ex_count / #ex_issue'
VL_BASEWRK0000028800000000000001     if         '#ex_remn = 0.0000000'
VL_BASEWRK0000028900000000000001     message    msgid(dcu0017) msgf(dc@m01) msgdta(#ex_count #ex_name) type(*status)
VL_BASEWRK0000029000000000000001     endif
VL_BASEWRK0000029100000000000001     ENDROUTINE
VL_BASEWRK0000029200000000000001     /* **********                                                         */
VL_BASEWRK0000029300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000029400000000000001     @@COMMENT  COMMENT('    Information Message                     ')
VL_BASEWRK0000029500000000000001     SUBROUTINE INFMESSAGE ((#EX_TEXT *RECEIVED))
VL_BASEWRK0000029600000000000001     define     #ex_text  *char 132
VL_BASEWRK0000029700000000000001     message    msgid(dcm9992) msgf(dc@m01) msgdta(#ex_text *blanks)
VL_BASEWRK0000029800000000000001     ENDROUTINE
VL_BASEWRK0000029900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BASEWRK0000030000000000000001     /* **********                                                         */
VL_BASEWRK0000030100000000000001E99: @@LABEL
VL_BASEWRK0000030200000000000001     @@ROUTEEND
VL_BASEWRK0000030300000000000001     END_COM
VL_BASEWRK0000030400000000000001     /* **********                                                         */
VL_BASEWRK0000030500000000000001     /* ********** ------------------------------------------------        */
VL_BASEWRK0000030600000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
VL_BASEWRK0000030700000000000001     /* ********** ------------------------------------------------        */
VL_BASEWRK0000030800000000000001     @@CLR_LST  NUMBER(1)
VL_BASEWRK0000030900000000000001     @@CLR_LST  NUMBER(2)
VL_BASEWRK0000031000000000000001     @@CLR_LST  NUMBER(3)
VL_BASEWRK0000031100000000000001     @@CLR_LST  NUMBER(5)
VL_BBMNUBR0000000100000000000001     /* ********** =========================================================                                                      */
VL_BBMNUBR0000000200000000000001     /* **********                                                         */
VL_BBMNUBR0000000300000000000001     /* ********** This RDMLX code creates a menu bar with drop down menus */
VL_BBMNUBR0000000400000000000001     /* **********                                                         */
VL_BBMNUBR0000000500000000000001     /* ********** =========================================================                                                      */
VL_BBMNUBR0000000600000000000001     @@ROUTEDEF
VL_BBMNUBR0000000700000000000001     DEFINE_COM CLASS(#PRIM_MBAR) NAME(#MBAR_1) PARENT(#@@PROCESS)
VL_BBMNUBR0000000800000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000000900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000001000000000000001     @@COMMENT  COMMENT('    Menu 1 - Object                         ')
VL_BBMNUBR0000001100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000001200000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000001300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_1) CAPTION(&Object) PARENT(#MBAR_1)
VL_BBMNUBR0000001400000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_1) PARENT(#MITM_1)
VL_BBMNUBR0000001500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_2) CAPTION(&New) PARENT(#SMNU_1)
VL_BBMNUBR0000001600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_3) CAPTION(-) PARENT(#SMNU_1)
VL_BBMNUBR0000001700000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_4) CAPTION(&Open) PARENT(#SMNU_1)
VL_BBMNUBR0000001800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_5) CAPTION(&Close) PARENT(#SMNU_1)
VL_BBMNUBR0000001900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_6) CAPTION(-) PARENT(#SMNU_1)
VL_BBMNUBR0000002000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_7) CAPTION(&Save) PARENT(#SMNU_1)
VL_BBMNUBR0000002100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_8) CAPTION('Save &As') PARENT(#SMNU_1)
VL_BBMNUBR0000002200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_9) CAPTION(-) PARENT(#SMNU_1)
VL_BBMNUBR0000002300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_10) CAPTION('Sen&d To') PARENT(#SMNU_1)
VL_BBMNUBR0000002400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_11) CAPTION(&Print) PARENT(#SMNU_1)
VL_BBMNUBR0000002500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_12) CAPTION(-) PARENT(#SMNU_1)
VL_BBMNUBR0000002600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_13) CAPTION(E&xit) PARENT(#SMNU_1)
VL_BBMNUBR0000002700000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000002800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000002900000000000001     @@COMMENT  COMMENT('    Menu 2 - Selected                       ')
VL_BBMNUBR0000003000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000003100000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000003200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_14) CAPTION(&Selected) PARENT(#MBAR_1)
VL_BBMNUBR0000003300000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_2) PARENT(#MITM_14)
VL_BBMNUBR0000003400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_15) CAPTION(Dis&play) PARENT(#SMNU_2)
VL_BBMNUBR0000003500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_16) CAPTION(&Delete) PARENT(#SMNU_2)
VL_BBMNUBR0000003600000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000003700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000003800000000000001     @@COMMENT  COMMENT('    Menu 3 - View                           ')
VL_BBMNUBR0000003900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000004000000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000004100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_17) CAPTION(&View) PARENT(#MBAR_1)
VL_BBMNUBR0000004200000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_3) PARENT(#MITM_17)
VL_BBMNUBR0000004300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_18) CAPTION('&Full Screen')PARENT(#SMNU_3)
VL_BBMNUBR0000004400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_19) CAPTION(&Zoom)  PARENT(#SMNU_3)
VL_BBMNUBR0000004500000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000004600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000004700000000000001     @@COMMENT  COMMENT('    Menu 4 - Help                           ')
VL_BBMNUBR0000004800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000004900000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000005000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_20) CAPTION(&Help) PARENT(#MBAR_1)
VL_BBMNUBR0000005100000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_4) PARENT(#MITM_20)
VL_BBMNUBR0000005200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_21) CAPTION('&Help Topics')PARENT(#SMNU_4)
VL_BBMNUBR0000005300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_22) CAPTION(&About) PARENT(#SMNU_4)
VL_BBMNUBR0000005400000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000005500000000000001     /* ********** Event Routines                                          */
VL_BBMNUBR0000005600000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000005700000000000001     @@ROUTERTN
VL_BBMNUBR0000005800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000005900000000000001     @@COMMENT  COMMENT('    Menu 1 - Object                         ')
VL_BBMNUBR0000006000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000006100000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000006200000000000001     @@COMMENT  COMMENT('    Menu item - New                         ')
VL_BBMNUBR0000006300000000000001     EVTROUTINE HANDLING(#MITM_2.CLICK)
VL_BBMNUBR0000006400000000000001     ENDROUTINE
VL_BBMNUBR0000006500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000006600000000000001     /* **********                                                         */
VL_BBMNUBR0000006700000000000001     @@COMMENT  COMMENT('    Menu item - Open                        ')
VL_BBMNUBR0000006800000000000001     EVTROUTINE HANDLING(#MITM_4.CLICK)
VL_BBMNUBR0000006900000000000001     ENDROUTINE
VL_BBMNUBR0000007000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000007100000000000001     /* **********                                                         */
VL_BBMNUBR0000007200000000000001     @@COMMENT  COMMENT('    Menu item - Close                       ')
VL_BBMNUBR0000007300000000000001     EVTROUTINE HANDLING(#MITM_5.CLICK)
VL_BBMNUBR0000007400000000000001     ENDROUTINE
VL_BBMNUBR0000007500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000007600000000000001     /* **********                                                         */
VL_BBMNUBR0000007700000000000001     @@COMMENT  COMMENT('    Menu item - Save                        ')
VL_BBMNUBR0000007800000000000001     EVTROUTINE HANDLING(#MITM_7.CLICK)
VL_BBMNUBR0000007900000000000001     ENDROUTINE
VL_BBMNUBR0000008000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000008100000000000001     /* **********                                                         */
VL_BBMNUBR0000008200000000000001     @@COMMENT  COMMENT('    Menu item - Save As                     ')
VL_BBMNUBR0000008300000000000001     EVTROUTINE HANDLING(#MITM_8.CLICK)
VL_BBMNUBR0000008400000000000001     ENDROUTINE
VL_BBMNUBR0000008500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000008600000000000001     /* **********                                                         */
VL_BBMNUBR0000008700000000000001     @@COMMENT  COMMENT('    Menu item - Send To                     ')
VL_BBMNUBR0000008800000000000001     EVTROUTINE HANDLING(#MITM_10.CLICK)
VL_BBMNUBR0000008900000000000001     ENDROUTINE
VL_BBMNUBR0000009000000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000009100000000000001     /* **********                                                         */
VL_BBMNUBR0000009200000000000001     @@COMMENT  COMMENT('    Menu item - Print                       ')
VL_BBMNUBR0000009300000000000001     EVTROUTINE HANDLING(#MITM_11.CLICK)
VL_BBMNUBR0000009400000000000001     ENDROUTINE
VL_BBMNUBR0000009500000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000009600000000000001     /* **********                                                         */
VL_BBMNUBR0000009700000000000001     @@COMMENT  COMMENT('    Menu item - Exit                        ')
VL_BBMNUBR0000009800000000000001     EVTROUTINE HANDLING(#MITM_13.CLICK)
VL_BBMNUBR0000009900000000000001     ENDROUTINE
VL_BBMNUBR0000010000000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000010100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000010200000000000001     @@COMMENT  COMMENT('    Menu 2 - Selected                       ')
VL_BBMNUBR0000010300000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000010400000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000010500000000000001     @@COMMENT  COMMENT('    Menu item - Display                     ')
VL_BBMNUBR0000010600000000000001     EVTROUTINE HANDLING(#MITM_15.CLICK)
VL_BBMNUBR0000010700000000000001     ENDROUTINE
VL_BBMNUBR0000010800000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000010900000000000001     /* **********                                                         */
VL_BBMNUBR0000011000000000000001     @@COMMENT  COMMENT('    Menu item - Delete                      ')
VL_BBMNUBR0000011100000000000001     EVTROUTINE HANDLING(#MITM_16.CLICK)
VL_BBMNUBR0000011200000000000001     ENDROUTINE
VL_BBMNUBR0000011300000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000011400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000011500000000000001     @@COMMENT  COMMENT('    Menu 3 - View                           ')
VL_BBMNUBR0000011600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000011700000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000011800000000000001     @@COMMENT  COMMENT('    Menu item - Full Screen                 ')
VL_BBMNUBR0000011900000000000001     EVTROUTINE HANDLING(#MITM_18.CLICK)
VL_BBMNUBR0000012000000000000001     ENDROUTINE
VL_BBMNUBR0000012100000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000012200000000000001     /* **********                                                         */
VL_BBMNUBR0000012300000000000001     @@COMMENT  COMMENT('    Menu item - Zoom                        ')
VL_BBMNUBR0000012400000000000001     EVTROUTINE HANDLING(#MITM_19.CLICK)
VL_BBMNUBR0000012500000000000001     ENDROUTINE
VL_BBMNUBR0000012600000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000012700000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000012800000000000001     @@COMMENT  COMMENT('    Menu 4 - Help                           ')
VL_BBMNUBR0000012900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000013000000000000001     /* ********** ======================================================= */
VL_BBMNUBR0000013100000000000001     @@COMMENT  COMMENT('    Menu item - Help Topics                 ')
VL_BBMNUBR0000013200000000000001     EVTROUTINE HANDLING(#MITM_21.CLICK)
VL_BBMNUBR0000013300000000000001     ENDROUTINE
VL_BBMNUBR0000013400000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000013500000000000001     /* **********                                                         */
VL_BBMNUBR0000013600000000000001     @@COMMENT  COMMENT('    Menu item - About                       ')
VL_BBMNUBR0000013700000000000001     EVTROUTINE HANDLING(#MITM_22.CLICK)
VL_BBMNUBR0000013800000000000001     ENDROUTINE
VL_BBMNUBR0000013900000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBMNUBR0000014000000000000001     /* **********                                                         */
VL_BBSTSBR0000000100000000000001     /* **********                                                         */
VL_BBSTSBR0000000200000000000001     /* **********                                                         */
VL_BBSTSBR0000000300000000000001     /* **********                                                         */
VL_BBSTSBR0000000400000000000001     /* **********                                                         */
VL_BBSTSBR0000000500000000000001     /* ********** This RDMLX code creates a status bar for messages       */
VL_BBSTSBR0000000600000000000001     /* **********                                                         */
VL_BBSTSBR0000000700000000000001     /* ********** ======================================================= */
VL_BBSTSBR0000000800000000000001     @@ROUTEDEF
VL_BBSTSBR0000000900000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(25) MESSAGEPOSITION(1) PARENT(#@@PROCESS)
VL_BBSTSBR0000001000000000000001     /* ********** ======================================================= */
VL_BBSTSBR0000001100000000000001     @@ROUTERTN
VL_BBSTSBR0000001200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBSTSBR0000001300000000000001     /* **********                                                         */
VL_BBSTSBR0000001400000000000001     @@COMMENT  COMMENT('    Status Message                          ')
VL_BBSTSBR0000001500000000000001     SUBROUTINE STSMESSAGE ((#EX_ISSUE  *RECEIVED)(#EX_COUNT *BOTH)(#EX_NAME *RECEIVED))
VL_BBSTSBR0000001600000000000001     define     #ex_issue *dec 15 0
VL_BBSTSBR0000001700000000000001     define     #ex_count *dec 15 0
VL_BBSTSBR0000001800000000000001     define     #ex_name  *char 20
VL_BBSTSBR0000001900000000000001     define     #ex_remn  *dec 7 7
VL_BBSTSBR0000002000000000000001     change     #ex_count '#ex_count + 1'
VL_BBSTSBR0000002100000000000001     change     #ex_remn  '#ex_count / #ex_issue'
VL_BBSTSBR0000002200000000000001     if         '#ex_remn = 0.0000000'
VL_BBSTSBR0000002300000000000001     message    msgid(dcu0017) msgf(dc@m01) msgdta(#ex_count #ex_name) type(*status)
VL_BBSTSBR0000002400000000000001     endif
VL_BBSTSBR0000002500000000000001     ENDROUTINE
VL_BBSTSBR0000002600000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBSTSBR0000002700000000000001     @@COMMENT  COMMENT('    Information Message                     ')
VL_BBSTSBR0000002800000000000001     SUBROUTINE INFMESSAGE ((#EX_TEXT *RECEIVED))
VL_BBSTSBR0000002900000000000001     define     #ex_text  *char 132
VL_BBSTSBR0000003000000000000001     message    msgid(dcm9993) msgf(dc@m01) msgdta(#ex_text *blanks)
VL_BBSTSBR0000003100000000000001     ENDROUTINE
VL_BBSTSBR0000003200000000000001     @@COMMENT  COMMENT('                                            ')
VL_BBWEBRT0000000100000000000001STR: @@LABEL
VL_BBWEBRT0000000200000000000001     /* ********** This template generates a webroutine based on user sele */
VL_BBWEBRT0000000300000000000001     /* ********** ction of fields                                         */
VL_BBWEBRT0000000400000000000001     @@QUESTION PROMPT('Enter a description of what this webroutine will do') ANSWER(@@CANS001) EXTEND('12 4567890123456789012345678901234567890' 'This information will be used as a comment in the RDMLX code.' 'For more information press the Help function key.') HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000000500000000000001     /* **********                                                         */
VL_BBWEBRT0000000600000000000001     @@QUESTION PROMPT('Enter a unique name for this webroutine') ANSWER(@@CANS002) EXTEND('12345678901234567890' 'The name must be unique within this WAM.' 'For more information about valid webroutine names and naming rules use' 'the Help function key.') HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000000700000000000001     /* **********                                                         */
VL_BBWEBRT0000000800000000000001     @@QUESTION PROMPT('Provide a unique service name to run from URL (optional)') ANSWER(@@CANS003) EXTEND('A service name must be unique across all WAMS.' 'For more information about valid webroutine names and naming rules use' 'the Help function key.') HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000000900000000000001     /* **********                                                         */
VL_BBWEBRT0000001000000000000001     @@QUESTION PROMPT('Enter the name of the hidden field used to pass information') ANSWER(@@CANS004) EXTEND('For example, STDRENTRY.' 'Leave blank if you do not want to pass information using a hidden field.' 'For more information about this template use the Help function key.') LOWER(*NO) HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000001100000000000001     @@IF       COND((*IF @@CANS004 *EQ ' ')) GOTO(Q10)
VL_BBWEBRT0000001200000000000001     @@QUESTION PROMPT('If you want to set the value of the hidden field, enter the value here') ANSWER(@@CANS007) EXTEND('For example, entering value N would generate #STDRENTRY := N'  'For more information about this template use the Help function key.') HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000001300000000000001Q10: @@LABEL
VL_BBWEBRT0000001400000000000001     /* **********                                                         */
VL_BBWEBRT0000001500000000000001     @@QUESTION PROMPT('Do you want to work with fields from a file?' ) ANSWER(@@CANS005) EXTEND('Answer Y or N only') LOWER(*NO) VALUES('Y' 'N') HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000001600000000000001     /* ********** Select fields from a file                               */
VL_BBWEBRT0000001700000000000001     @@IF       COND((*IF @@CANS005 *NE Y)) GOTO(A10)
VL_BBWEBRT0000001800000000000001     @@GET_FILS FROM(1) TO(1) PHY_ONLY(*YES) SGL_ONLY(*YES) PROMPT('Enter the name of the file you want to use.') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.') HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000001900000000000001     @@CLR_LST  NUMBER(1)
VL_BBWEBRT0000002000000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
VL_BBWEBRT0000002100000000000001     @@CLR_LST  NUMBER(2)
VL_BBWEBRT0000002200000000000001     @@CLR_LST  NUMBER(3)
VL_BBWEBRT0000002300000000000001     @@CLR_LST  NUMBER(4)
VL_BBWEBRT0000002400000000000001     @@CLR_LST  NUMBER(5)
VL_BBWEBRT0000002500000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Input fields' *YESNO) (3 'Output flds' *YESNO)) HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000002600000000000001A10: @@LABEL
VL_BBWEBRT0000002700000000000001     @@COMMENT  COMMENT('@@CANS001')
VL_BBWEBRT0000002800000000000001     /* **********                                                         */
VL_BBWEBRT0000002900000000000001     @@IF       COND((*IF @@CANS003 *EQ *BLANK)) GOTO(A20)
VL_BBWEBRT0000003000000000000001     WEBROUTINE NAME(@@CANS002) SERVICENAME(@@CANS003)
VL_BBWEBRT0000003100000000000001     @@GOTO     LABEL(A30)
VL_BBWEBRT0000003200000000000001A20: @@LABEL
VL_BBWEBRT0000003300000000000001     WEBROUTINE NAME(@@CANS002)
VL_BBWEBRT0000003400000000000001A30: @@LABEL
VL_BBWEBRT0000003500000000000001     /* **********                                                         */
VL_BBWEBRT0000003600000000000001     @@IF       COND((*IF @@CANS005 *NE Y)) GOTO(A50)
VL_BBWEBRT0000003700000000000001     @@IF       COND((*IF @@LNE02 *EQ 0)) GOTO(A40)
VL_BBWEBRT0000003800000000000001     /* **********                                                         */
VL_BBWEBRT0000003900000000000001     WEB_MAP    FOR(*INPUT) FIELDS(@@LST02)
VL_BBWEBRT0000004000000000000001A40: @@LABEL
VL_BBWEBRT0000004100000000000001     /* **********                                                         */
VL_BBWEBRT0000004200000000000001     @@IF       COND((*IF @@LNE03 *EQ 0)) GOTO(A50)
VL_BBWEBRT0000004300000000000001     @@IF       COND((*IF @@CANS004 *EQ ' ')) GOTO(A60)
VL_BBWEBRT0000004400000000000001     WEB_MAP    FOR(*OUTPUT) FIELDS(@@LST03 (#@@CANS004 *HIDDEN))
VL_BBWEBRT0000004500000000000001     @@GOTO     LABEL(A70)
VL_BBWEBRT0000004600000000000001A60: @@LABEL
VL_BBWEBRT0000004700000000000001     WEB_MAP    FOR(*OUTPUT) FIELDS(@@LST03)
VL_BBWEBRT0000004800000000000001     @@GOTO     LABEL(A70)
VL_BBWEBRT0000004900000000000001A50: @@LABEL
VL_BBWEBRT0000005000000000000001     @@IF       COND((*IF @@CANS004 *EQ ' ')) GOTO(A70)
VL_BBWEBRT0000005100000000000001     WEB_MAP    FOR(*OUTPUT) FIELDS((#@@CANS004 *HIDDEN))
VL_BBWEBRT0000005200000000000001A70: @@LABEL
VL_BBWEBRT0000005300000000000001     /* **********                                                         */
VL_BBWEBRT0000005400000000000001     @@IF       COND((*IF @@CANS005 *NE Y)) GOTO(A90)
VL_BBWEBRT0000005500000000000001     @@IF       COND((*IF @@LNE04 *EQ 0)) GOTO(A80)
VL_BBWEBRT0000005600000000000001     WEB_MAP    FOR(*BOTH) FIELDS(@@LST04)
VL_BBWEBRT0000005700000000000001A80: @@LABEL
VL_BBWEBRT0000005800000000000001     /* **********                                                         */
VL_BBWEBRT0000005900000000000001     @@IF       COND((*IF @@LNE05 *EQ 0)) GOTO(A90)
VL_BBWEBRT0000006000000000000001     WEB_MAP    FOR(*NONE) FIELDS(@@LST05)
VL_BBWEBRT0000006100000000000001A90: @@LABEL
VL_BBWEBRT0000006200000000000001     /* **********                                                         */
VL_BBWEBRT0000006300000000000001     /* ********** Your code here                                          */
VL_BBWEBRT0000006400000000000001     /* **********                                                         */
VL_BBWEBRT0000006500000000000001     @@IF       COND((*IF @@CANS004 *EQ ' ')) GOTO(A95)
VL_BBWEBRT0000006600000000000001     @@IF       COND((*IF @@CANS007 *EQ ' ')) GOTO(A93)
VL_BBWEBRT0000006700000000000001     #@@CANS004 := @@CANS007
VL_BBWEBRT0000006800000000000001     @@GOTO     LABEL(A95)
VL_BBWEBRT0000006900000000000001A93: @@LABEL
VL_BBWEBRT0000007000000000000001     #@@CANS004 := *BLANK
VL_BBWEBRT0000007100000000000001A95: @@LABEL
VL_BBWEBRT0000007200000000000001     ENDROUTINE
VL_BBWEBRT0000007300000000000001     /* **********                                                         */
VL_BBWEBRT0000007400000000000001     @@QUESTION PROMPT('Do you want to generate another webroutine?') ANSWER(@@CANS006) EXTEND('Answer Y or N only') LOWER(*NO) VALUES('Y' 'N') HELPIDS(HELP010 HELP020)
VL_BBWEBRT0000007500000000000001     @@IF       COND((*IF @@CANS006 *EQ Y)) GOTO(STR)
VL_FBASBOB0000000100000000000001     @@QUESTION PROMPT('Do you wish to continue?') ANSWER(@@CANS001) EXTEND('This template produces a skeleton Business Object Browser.' 'It is based on the demonstration personnel system.' 'Please read the comments supplied in the code carefully' 'and replace the file and fields shown by the ones you wish to use.' 'You should execute templates VL_BASEBOF and VL_BASEBOD first so that' 'the Business Object Detailers and Filter exist before making ' 'reference to them in this form.' 'See help for further information.') LOWER(*NO) HELPIDS(HELP010)
VL_FBASBOB0000000200000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(E99)
VL_FBASBOB0000000300000000000001     @@ROUTEBEG
VL_FBASBOB0000000400000000000001     BEGIN_COM  BORDERICONS(Maximize+Minimize+SystemMenu) CAPTION('Business Object Browser') HEIGHT(373) LEFT(10) TOP(135) VISUALSTYLE(#VS_NORM) WIDTH(492)
VL_FBASBOB0000000500000000000001     @@ROUTEDEF
VL_FBASBOB0000000600000000000001     /* **********                                                         */
VL_FBASBOB0000000700000000000001     /* ********** Business Object Browser Template                        */
VL_FBASBOB0000000800000000000001     /* ********** Version  1.0                                            */
VL_FBASBOB0000000900000000000001     /* **********                                                         */
VL_FBASBOB0000001000000000000001     /* **********                                                         */
VL_FBASBOB0000001100000000000001     /* ********** Tree view of Business Objects.                          */
VL_FBASBOB0000001200000000000001     /* ********** Open component tab of editor.                           */
VL_FBASBOB0000001300000000000001     /* ********** Replace source fields of tree view columns with         */
VL_FBASBOB0000001400000000000001     /* ********** appropriate names in the property sheet.                */
VL_FBASBOB0000001500000000000001     /* **********                                                         */
VL_FBASBOB0000001600000000000001     DEFINE_COM CLASS(#PRIM_TRVW) NAME(#TREEVIEW) DISPLAYPOSITION(2) HEIGHT(239) LEFT(0) MANAGECHILDREN(True) PARENT(#COM_OWNER) POPUPMENU(#PMNU_1) TABPOSITION(3) TOP(63)WIDTH(185)
VL_FBASBOB0000001700000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_1) KEYPOSITION(1) LEVEL(1) PARENT(#TREEVIEW) SORTPOSITION(2) SOURCE(#DEPTMENT) VISIBLE(False)
VL_FBASBOB0000001800000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_2) DISPLAYPOSITION(1) LEVEL(1) PARENT(#TREEVIEW) SORTPOSITION(1) SOURCE(#DEPTDESC)
VL_FBASBOB0000001900000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_3) KEYPOSITION(1) LEVEL(2) PARENT(#TREEVIEW) SOURCE(#SECTION) VISIBLE(False)
VL_FBASBOB0000002000000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_4) DISPLAYPOSITION(1) LEVEL(2) PARENT(#TREEVIEW) SORTPOSITION(1) SOURCE(#SECDESC)
VL_FBASBOB0000002100000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_5) KEYPOSITION(1) LEVEL(3) PARENT(#TREEVIEW) SOURCE(#EMPNO) VISIBLE(False)
VL_FBASBOB0000002200000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_6) DISPLAYPOSITION(1) LEVEL(3) PARENT(#TREEVIEW) SOURCE(#FULLNAME)
VL_FBASBOB0000002300000000000001     /* **********                                                         */
VL_FBASBOB0000002400000000000001     /* ********** The detail list view shows the details of the children  */
VL_FBASBOB0000002500000000000001     /* ********** of the current tree object.                             */
VL_FBASBOB0000002600000000000001     /* ********** The columns are hidden and displayed as appropriate.    */
VL_FBASBOB0000002700000000000001     /* **********                                                         */
VL_FBASBOB0000002800000000000001     DEFINE_COM CLASS(#PRIM_LTVW) NAME(#LTVW_1) DISPLAYPOSITION(3) HEIGHT(239) LEFT(186) PARENT(#COM_OWNER) TABPOSITION(2) TOP(63) WIDTH(296)
VL_FBASBOB0000002900000000000001     /* **********                                                         */
VL_FBASBOB0000003000000000000001     /* ********** Child details of level 1.                               */
VL_FBASBOB0000003100000000000001     /* ********** Replace source fields of list view columns with         */
VL_FBASBOB0000003200000000000001     /* ********** appropriate names.                                      */
VL_FBASBOB0000003300000000000001     /* **********                                                         */
VL_FBASBOB0000003400000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_21) CAPTION('Level 2') CAPTIONTYPE(Caption) DISPLAYPOSITION(2) PARENT(#LTVW_1) SOURCE(#SECTION) WIDTH(20)
VL_FBASBOB0000003500000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_22) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#SECDESC) VISIBLE(False) WIDTH(50)
VL_FBASBOB0000003600000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_23) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#SECPHBUS) VISIBLE(False) WIDTH(20)
VL_FBASBOB0000003700000000000001     /* **********                                                         */
VL_FBASBOB0000003800000000000001     /* ********** Child details of level 2.                               */
VL_FBASBOB0000003900000000000001     /* ********** Replace source fields of list view columns with         */
VL_FBASBOB0000004000000000000001     /* ********** appropriate names.                                      */
VL_FBASBOB0000004100000000000001     /* **********                                                         */
VL_FBASBOB0000004200000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_31) CAPTION('Code') CAPTIONTYPE(Caption) DISPLAYPOSITION(1) PARENT(#LTVW_1) SOURCE(#EMPNO) WIDTH(20)
VL_FBASBOB0000004300000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_32) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#SURNAME) VISIBLE(False) WIDTH(50)
VL_FBASBOB0000004400000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_33) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#SALARY) VISIBLE(False) WIDTH(30)
VL_FBASBOB0000004500000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_34) CAPTIONTYPE(ColumnHeadings) PARENT(#LTVW_1) SOURCE(#STARTDTE) VISIBLE(False) WIDTH(30)
VL_FBASBOB0000004600000000000001     /* **********                                                         */
VL_FBASBOB0000004700000000000001     /* ********** Timer used for layout manager emulation.                */
VL_FBASBOB0000004800000000000001     /* **********                                                         */
VL_FBASBOB0000004900000000000001     DEFINE_COM CLASS(#PRIM_TIMR) NAME(#TIMR_1) INTERVAL(0)
VL_FBASBOB0000005000000000000001     /* **********                                                         */
VL_FBASBOB0000005100000000000001     /* ********** Status bar to display validation and other messages.    */
VL_FBASBOB0000005200000000000001     /* **********                                                         */
VL_FBASBOB0000005300000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) DISPLAYPOSITION(4) HEIGHT(25) LEFT(0) MESSAGEPOSITION(1) PARENT(#COM_OWNER) TABPOSITION(4) TOP(302) WIDTH(484)
VL_FBASBOB0000005400000000000001     /* **********                                                         */
VL_FBASBOB0000005500000000000001     /* ********** These group boxes and labels are displayed at the top   */
VL_FBASBOB0000005600000000000001     /* ********** of the tree and detail list.                            */
VL_FBASBOB0000005700000000000001     /* ********** Change captions if required.                            */
VL_FBASBOB0000005800000000000001     /* **********                                                         */
VL_FBASBOB0000005900000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#LSTTL1) DISPLAYPOSITION(6) HEIGHT(26) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(6) TABSTOP(False) TOP(37) WIDTH(187)
VL_FBASBOB0000006000000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#LSTTL2) DISPLAYPOSITION(5) HEIGHT(26) LEFT(186) PARENT(#COM_OWNER) TABPOSITION(5) TABSTOP(False) TOP(37) WIDTH(300)
VL_FBASBOB0000006100000000000001     DEFINE_COM CLASS(#PRIM_LABL) NAME(#LABL_1) CAPTION('AllObjects') DISPLAYPOSITION(1) HEIGHT(12) LEFT(6) PARENT(#LSTTL1) TABPOSITION(1) TABSTOP(False) TOP(8) WIDTH(150)
VL_FBASBOB0000006200000000000001     DEFINE_COM CLASS(#PRIM_LABL) NAME(#LABL_2) CAPTION('Contents of') DISPLAYPOSITION(1) HEIGHT(12) LEFT(6) PARENT(#LSTTL2) TABPOSITION(1) TABSTOP(False) TOP(8) WIDTH(250)
VL_FBASBOB0000006300000000000001     /* **********                                                         */
VL_FBASBOB0000006400000000000001     /* ********** This group box acts as the tool bar.                    */
VL_FBASBOB0000006500000000000001     /* ********** It contains the selection combo box and tool bar        */
VL_FBASBOB0000006600000000000001     /* ********** buttons.                                                */
VL_FBASBOB0000006700000000000001     /* **********                                                         */
VL_FBASBOB0000006800000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#TOOLS) DISPLAYPOSITION(7) HEIGHT(37) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(7) TABSTOP(False) TOP(0) WIDTH(485)
VL_FBASBOB0000006900000000000001     DEFINE_COM CLASS(#PRIM_CMBX) NAME(#CMBX_1) DISPLAYPOSITION(2) HEIGHT(22) LEFT(4) PARENT(#TOOLS) TABPOSITION(2)WIDTH(185)
VL_FBASBOB0000007000000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBCL_1) DISPLAYPOSITION(1) PARENT(#CMBX_1) SOURCE(#DEPTDESC) WIDTH(20)
VL_FBASBOB0000007100000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBCL_2) PARENT(#CMBX_1) SOURCE(#DEPTMENT) VISIBLE(False) WIDTH(20)
VL_FBASBOB0000007200000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_NEW) DISPLAYPOSITION(7) HEIGHT(22) HINT('Create new object') IMAGE(#VB_NEW) LEFT(195) PARENT(#TOOLS) TABPOSITION(7) WIDTH(22)
VL_FBASBOB0000007300000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_SAV) DISPLAYPOSITION(5) HEIGHT(22) HINT('Save changed data') IMAGE(#VB_SAVE) LEFT(218) PARENT(#TOOLS) TABPOSITION(5) WIDTH(22)
VL_FBASBOB0000007400000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_DEL) DISPLAYPOSITION(6) ENABLED(False) HEIGHT(22) HINT('Delete currentobject') IMAGE(#VB_DELETE) LEFT(241) PARENT(#TOOLS) TABPOSITION(6) WIDTH(22)
VL_FBASBOB0000007500000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_CUT) DISPLAYPOSITION(1) ENABLED(False) HEIGHT(22) HINT('CUT') IMAGE(#VB_CUT) LEFT(287) PARENT(#TOOLS) TABPOSITION(1) WIDTH(22)
VL_FBASBOB0000007600000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_PST) DISPLAYPOSITION(4) ENABLED(False) HEIGHT(22) HINT('PASTE') IMAGE(#VB_PASTE) LEFT(310) PARENT(#TOOLS) TABPOSITION(4) WIDTH(22)
VL_FBASBOB0000007700000000000001     DEFINE_COM CLASS(#PRIM_SPBN) NAME(#SPBN_CLS) DISPLAYPOSITION(3) HEIGHT(22) HINT('Close Application') IMAGE(#VB_CLOSE) LEFT(356) PARENT(#TOOLS) TABPOSITION(3) WIDTH(22)
VL_FBASBOB0000007800000000000001     /* **********                                                         */
VL_FBASBOB0000007900000000000001     /* ********** Standard menu bar.                                      */
VL_FBASBOB0000008000000000000001     /* ********** Change caption names as required.                       */
VL_FBASBOB0000008100000000000001     /* **********                                                         */
VL_FBASBOB0000008200000000000001     DEFINE_COM CLASS(#PRIM_MBAR) NAME(#MBAR_1) PARENT(#COM_OWNER)
VL_FBASBOB0000008300000000000001     /* **********                                                         */
VL_FBASBOB0000008400000000000001     /* ********** Object menu                                             */
VL_FBASBOB0000008500000000000001     /* **********                                                         */
VL_FBASBOB0000008600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_OBJ) CAPTION('&Object') DISPLAYPOSITION(1) PARENT(#MBAR_1)
VL_FBASBOB0000008700000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_1) PARENT(#MI_OBJ)
VL_FBASBOB0000008800000000000001     /* **********                                                         */
VL_FBASBOB0000008900000000000001     /* ********** New sub menu                                            */
VL_FBASBOB0000009000000000000001     /* **********                                                         */
VL_FBASBOB0000009100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_NEW) CAPTION('&New') DISPLAYPOSITION(1) PARENT(#SMNU_1)
VL_FBASBOB0000009200000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_NEW) PARENT(#MI_NEW)
VL_FBASBOB0000009300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MINW_1) CAPTION('Level 1') DISPLAYPOSITION(1) PARENT(#SMNU_NEW)
VL_FBASBOB0000009400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MINW_2) CAPTION('Level 2') DISPLAYPOSITION(2) ENABLED(False) PARENT(#SMNU_NEW)
VL_FBASBOB0000009500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MINW_3) CAPTION('Level 3') DISPLAYPOSITION(3) ENABLED(False) PARENT(#SMNU_NEW)
VL_FBASBOB0000009600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_SAV) CAPTION('&Save') DISPLAYPOSITION(2) PARENT(#SMNU_1)
VL_FBASBOB0000009700000000000001     /* **********                                                         */
VL_FBASBOB0000009800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_3) CAPTION('-')DISPLAYPOSITION(3) PARENT(#SMNU_1)
VL_FBASBOB0000009900000000000001     /* **********                                                         */
VL_FBASBOB0000010000000000000001     /* ********** If validation rules exist enable delete menu option.    */
VL_FBASBOB0000010100000000000001     /* **********                                                         */
VL_FBASBOB0000010200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_4) CAPTION('&Delete') DISPLAYPOSITION(4) ENABLED(False) PARENT(#SMNU_1)
VL_FBASBOB0000010300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_5) CAPTION('D&etails') DEFAULT(True) DISPLAYPOSITION(5) PARENT(#SMNU_1)
VL_FBASBOB0000010400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_6) CAPTION('-')DISPLAYPOSITION(6) PARENT(#SMNU_1)
VL_FBASBOB0000010500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_7) CAPTION('&Close') DISPLAYPOSITION(7) PARENT(#SMNU_1)
VL_FBASBOB0000010600000000000001     /* **********                                                         */
VL_FBASBOB0000010700000000000001     /* ********** Edit menu                                               */
VL_FBASBOB0000010800000000000001     /* **********                                                         */
VL_FBASBOB0000010900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_EDT) CAPTION('&Edit') DISPLAYPOSITION(2) PARENT(#MBAR_1)
VL_FBASBOB0000011000000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_2) PARENT(#MI_EDT)
VL_FBASBOB0000011100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_CUT) CAPTION('Cu&t') DISPLAYPOSITION(1) ENABLED(False) PARENT(#SMNU_2)
VL_FBASBOB0000011200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_PST) CAPTION('&Paste') DISPLAYPOSITION(2) ENABLED(False) PARENT(#SMNU_2)
VL_FBASBOB0000011300000000000001     /* **********                                                         */
VL_FBASBOB0000011400000000000001     /* ********** View menu                                               */
VL_FBASBOB0000011500000000000001     /* **********                                                         */
VL_FBASBOB0000011600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_VW) CAPTION('&View') DISPLAYPOSITION(3) PARENT(#MBAR_1)
VL_FBASBOB0000011700000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_3) PARENT(#MI_VW)
VL_FBASBOB0000011800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_RFSH) CAPTION('&Refresh') DISPLAYPOSITION(1) PARENT(#SMNU_3)
VL_FBASBOB0000011900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_FLTR) CAPTION('&Filter') DISPLAYPOSITION(2) PARENT(#SMNU_3)
VL_FBASBOB0000012000000000000001     /* **********                                                         */
VL_FBASBOB0000012100000000000001     /* ********** Tools menu                                              */
VL_FBASBOB0000012200000000000001     /* **********                                                         */
VL_FBASBOB0000012300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_TLS) CAPTION('&Tools') DISPLAYPOSITION(4) PARENT(#MBAR_1)
VL_FBASBOB0000012400000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_4) PARENT(#MI_TLS)
VL_FBASBOB0000012500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_CNCT) CAPTION('&Connect') DISPLAYPOSITION(1) PARENT(#SMNU_4)
VL_FBASBOB0000012600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_DCNCT) CAPTION('&Disconnect') DISPLAYPOSITION(2) PARENT(#SMNU_4)
VL_FBASBOB0000012700000000000001     /* **********                                                         */
VL_FBASBOB0000012800000000000001     /* ********** Help menu                                               */
VL_FBASBOB0000012900000000000001     /* **********                                                         */
VL_FBASBOB0000013000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MI_HLP) CAPTION('&Help') DISPLAYPOSITION(5) PARENT(#MBAR_1)
VL_FBASBOB0000013100000000000001     /* **********                                                         */
VL_FBASBOB0000013200000000000001     /* ********** Standard pop up menu.                                   */
VL_FBASBOB0000013300000000000001     /* ********** Change caption names as required.                       */
VL_FBASBOB0000013400000000000001     /* **********                                                         */
VL_FBASBOB0000013500000000000001     DEFINE_COM CLASS(#PRIM_PMNU) NAME(#PMNU_1)
VL_FBASBOB0000013600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIP_DTL) CAPTION('&Details') DEFAULT(True) DISPLAYPOSITION(1) PARENT(#PMNU_1)
VL_FBASBOB0000013700000000000001     /* **********                                                         */
VL_FBASBOB0000013800000000000001     /* ********** If validation rules exist enable delete menu option.    */
VL_FBASBOB0000013900000000000001     /* **********                                                         */
VL_FBASBOB0000014000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIP_DLT) CAPTION('D&elete') DISPLAYPOSITION(2) ENABLED(False) PARENT(#PMNU_1)
VL_FBASBOB0000014100000000000001     /* **********                                                         */
VL_FBASBOB0000014200000000000001     /* ********** New sub menu                                            */
VL_FBASBOB0000014300000000000001     /* **********                                                         */
VL_FBASBOB0000014400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIP_NEW) CAPTION('&New') DISPLAYPOSITION(3) PARENT(#PMNU_1)
VL_FBASBOB0000014500000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_PNEW) PARENT(#MIP_NEW)
VL_FBASBOB0000014600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIPNW_1) CAPTION('Level 1') DISPLAYPOSITION(1) PARENT(#SMNU_PNEW)
VL_FBASBOB0000014700000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIPNW_2) CAPTION('Level 2') DISPLAYPOSITION(2) ENABLED(False) PARENT(#SMNU_PNEW)
VL_FBASBOB0000014800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MIPNW_3) CAPTION('Level 3') DISPLAYPOSITION(3) ENABLED(False) PARENT(#SMNU_PNEW)
VL_FBASBOB0000014900000000000001     /* **********                                                         */
VL_FBASBOB0000015000000000000001     /* ********** The Level 3 list shows a view of just the level 3       */
VL_FBASBOB0000015100000000000001     /* ********** objects. It is made visible by selection in the filter  */
VL_FBASBOB0000015200000000000001     /* ********** form.                                                   */
VL_FBASBOB0000015300000000000001     /* ********** Change the source field names for each column.          */
VL_FBASBOB0000015400000000000001     /* **********                                                         */
VL_FBASBOB0000015500000000000001     DEFINE_COM CLASS(#PRIM_LTVW) NAME(#LVL3LST) DISPLAYPOSITION(1) HEIGHT(239) LEFT(0) PARENT(#COM_OWNER) POPUPMENU(#PMNU_1) TABPOSITION(1) TOP(64) VISIBLE(False) VISUALSTYLE(#VS_NORM) WIDTH(185)
VL_FBASBOB0000015600000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_61) CAPTION('Name 1') CAPTIONTYPE(Caption) DISPLAYPOSITION(1) MINIMUMWIDTH(10) PARENT(#LVL3LST) SOURCE(#SURNAME) WIDTH(50)
VL_FBASBOB0000015700000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_62) CAPTION('Name 2') CAPTIONTYPE(Caption) DISPLAYPOSITION(2) MINIMUMWIDTH(10) PARENT(#LVL3LST) SOURCE(#GIVENAME) WIDTH(20) WIDTHTYPE(Remainder)
VL_FBASBOB0000015800000000000001     DEFINE_COM CLASS(#PRIM_LVCL) NAME(#LVCL_63) PARENT(#LVL3LST) SOURCE(#EMPNO) VISIBLE(False) WIDTH(20)
VL_FBASBOB0000015900000000000001     /* **********                                                         */
VL_FBASBOB0000016000000000000001     /* **********                                                         */
VL_FBASBOB0000016100000000000001     /* ********** Member detail and filter forms. Replace names with      */
VL_FBASBOB0000016200000000000001     /* ********** new form names created using VL_basebod & VL_basebof.   */
VL_FBASBOB0000016300000000000001     /* **********                                                         */
VL_FBASBOB0000016400000000000001     /* ********** Definition of level 1 Business Object Detail form.      */
VL_FBASBOB0000016500000000000001     /* ********** This form is defined as a keyed collection (or multi-   */
VL_FBASBOB0000016600000000000001     /* ********** instance) form. It can be changed to a single instance  */
VL_FBASBOB0000016700000000000001     /* ********** form by copying the level 2 Business Object Detailer.   */
VL_FBASBOB0000016800000000000001     /* ********** Invoke commands must also be changed.                   */
VL_FBASBOB0000016900000000000001     /* **********                                                         */
VL_FBASBOB0000017000000000000001     DEFINE_COM CLASS(#PRIM_KCOL) NAME(#VL_DEM21) COLLECTS(#VL_DEM21) KEEPLAST(20) KEYEDBY(#DEPTMENT)
VL_FBASBOB0000017100000000000001     /* **********                                                         */
VL_FBASBOB0000017200000000000001     /* ********** Definition of level 2 Business Object Detail form.      */
VL_FBASBOB0000017300000000000001     /* **********                                                         */
VL_FBASBOB0000017400000000000001     DEFINE_COM CLASS(#VL_DEM22) NAME(#VL_DEM22) BORDERICONS(Maximize+Minimize+SystemMenu) FRAMESTYLE(Single) HEIGHT(350) LEFT(400) TOP(80) VISUALSTYLEOFPARENT(True) WIDTH(386)
VL_FBASBOB0000017500000000000001     /* **********                                                         */
VL_FBASBOB0000017600000000000001     /* ********** Definition of level 3 Business Object Detail form.      */
VL_FBASBOB0000017700000000000001     /* **********                                                         */
VL_FBASBOB0000017800000000000001     DEFINE_COM CLASS(#VL_DEM23) NAME(#VL_DEM23) BORDERICONS(Maximize+Minimize+SystemMenu) FRAMESTYLE(Sizable) HEIGHT(393) LEFT(240) TOP(180) VISIBLE(False) WIDTH(500)
VL_FBASBOB0000017900000000000001     /* **********                                                         */
VL_FBASBOB0000018000000000000001     /* ********** Definition of Business Object Filter form.              */
VL_FBASBOB0000018100000000000001     /* **********                                                         */
VL_FBASBOB0000018200000000000001     DEFINE_COM CLASS(#VL_DEM28) NAME(#VL_DEM28) BORDERICONS(Maximize+Minimize+SystemMenu) FRAMESTYLE(Sizable)
VL_FBASBOB0000018300000000000001     /* **********                                                         */
VL_FBASBOB0000018400000000000001     /* ********** Definition of Utility server connection form.           */
VL_FBASBOB0000018500000000000001     /* ********** If this form is not required remove this definition and */
VL_FBASBOB0000018600000000000001     /* ********** the option to call it from the 'tools' menu.            */
VL_FBASBOB0000018700000000000001     /* ********** If required it can be copied and renamed.               */
VL_FBASBOB0000018800000000000001     /* **********                                                         */
VL_FBASBOB0000018900000000000001     DEFINE_COM CLASS(#VL_DEM27) NAME(#VL_DEM27) FORMPOSITION(Designed) HEIGHT(385) LEFT(390) TOP(136) WIDTH(284)
VL_FBASBOB0000019000000000000001     /* **********                                                         */
VL_FBASBOB0000019100000000000001     /* ********** Work fields for layout manager emulation.               */
VL_FBASBOB0000019200000000000001     /* **********                                                         */
VL_FBASBOB0000019300000000000001     DEFINE     FIELD(#PHEIGHT) TYPE(*DEC) LENGTH(7) DECIMALS(0)
VL_FBASBOB0000019400000000000001     DEFINE     FIELD(#PWIDTH) TYPE(*DEC) LENGTH(7) DECIMALS(0)
VL_FBASBOB0000019500000000000001     DEFINE     FIELD(#WHEIGHT) REFFLD(#PHEIGHT)
VL_FBASBOB0000019600000000000001     DEFINE     FIELD(#WWIDTH) REFFLD(#PWIDTH)
VL_FBASBOB0000019700000000000001     DEFINE     FIELD(#XHEIGHT) REFFLD(#PHEIGHT)
VL_FBASBOB0000019800000000000001     DEFINE     FIELD(#XWIDTH) REFFLD(#PWIDTH)
VL_FBASBOB0000019900000000000001     /* **********                                                         */
VL_FBASBOB0000020000000000000001     /* ********** Work fields for titles.                                 */
VL_FBASBOB0000020100000000000001     /* **********                                                         */
VL_FBASBOB0000020200000000000001     DEFINE     FIELD(#LISTCAP) TYPE(*CHAR) LENGTH(40)
VL_FBASBOB0000020300000000000001     DEFINE     FIELD(#TITLE) TYPE(*CHAR) LENGTH(80)
VL_FBASBOB0000020400000000000001     /* **********                                                         */
VL_FBASBOB0000020500000000000001     /* ********** Work fields to control display position of keyed        */
VL_FBASBOB0000020600000000000001     /* ********** collection.                                             */
VL_FBASBOB0000020700000000000001     /* **********                                                         */
VL_FBASBOB0000020800000000000001     DEFINE     FIELD(#STD_NUMD) REFFLD(#STD_NUM)
VL_FBASBOB0000020900000000000001     DEFINE     FIELD(#STD_QTYD) REFFLD(#STD_QTY)
VL_FBASBOB0000021000000000000001     /* **********                                                         */
VL_FBASBOB0000021100000000000001     /* ********** Work fields used with cut and paste.                    */
VL_FBASBOB0000021200000000000001     /* ********** Replace key fields in definitions below to the          */
VL_FBASBOB0000021300000000000001     /* ********** appropriate names.                                      */
VL_FBASBOB0000021400000000000001     /* **********                                                         */
VL_FBASBOB0000021500000000000001     DEFINE     FIELD(#CUTOBJ) TYPE(*CHAR) LENGTH(1) DEFAULT(N)
VL_FBASBOB0000021600000000000001     DEFINE     FIELD(#OLDLVL3) REFFLD(#EMPNO)
VL_FBASBOB0000021700000000000001     DEFINE     FIELD(#OLDLVL1) REFFLD(#DEPTMENT)
VL_FBASBOB0000021800000000000001     DEFINE     FIELD(#NEWLVL1) REFFLD(#DEPTMENT)
VL_FBASBOB0000021900000000000001     DEFINE     FIELD(#OLDLVL2) REFFLD(#SECTION)
VL_FBASBOB0000022000000000000001     /* **********                                                         */
VL_FBASBOB0000022100000000000001     /* ********** Work fields used to save keys.                          */
VL_FBASBOB0000022200000000000001     /* **********                                                         */
VL_FBASBOB0000022300000000000001     DEFINE     FIELD(#SAVLVL1) REFFLD(#DEPTMENT)
VL_FBASBOB0000022400000000000001     DEFINE     FIELD(#SAVLVL2) REFFLD(#SECTION)
VL_FBASBOB0000022500000000000001     /* **********                                                         */
VL_FBASBOB0000022600000000000001     /* ********** Work fields used with filter.                           */
VL_FBASBOB0000022700000000000001     /* **********                                                         */
VL_FBASBOB0000022800000000000001     DEFINE     FIELD(#FLTRLVL1) REFFLD(#DEPTMENT)
VL_FBASBOB0000022900000000000001     DEFINE     FIELD(#FLTRLVL2) REFFLD(#SECTION)
VL_FBASBOB0000023000000000000001     /* **********                                                         */
VL_FBASBOB0000023100000000000001     /* ********** Working list to filter and sort the level 3 entries.    */
VL_FBASBOB0000023200000000000001     /* ********** Replace fields with appropriate names of fields which   */
VL_FBASBOB0000023300000000000001     /* ********** will be used to filter and sort.                        */
VL_FBASBOB0000023400000000000001     /* **********                                                         */
VL_FBASBOB0000023500000000000001     DEF_LIST   NAME(#TLVL3LST) FIELDS(#SURNAME #GIVENAME #EMPNO #STARTDTER #STARTDTE #TERMDATER #SALARY) TYPE(*WORKING) ENTRYS(5000)
VL_FBASBOB0000023600000000000001     /* **********                                                         */
VL_FBASBOB0000023700000000000001     @@ROUTERTN
VL_FBASBOB0000023800000000000001     EVTROUTINE HANDLING( #com_owner.Initialize )
VL_FBASBOB0000023900000000000001     /* **********                                                         */
VL_FBASBOB0000024000000000000001     /* ********** Load all level 1 information into tree.                 */
VL_FBASBOB0000024100000000000001     /* **********                                                         */
VL_FBASBOB0000024200000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_FBASBOB0000024300000000000001     /* **********                                                         */
VL_FBASBOB0000024400000000000001     /* ********** Save starting position layout manager emulation.        */
VL_FBASBOB0000024500000000000001     /* ********** See Timer click event for form resizing logic.          */
VL_FBASBOB0000024600000000000001     /* **********                                                         */
VL_FBASBOB0000024700000000000001     CHANGE     FIELD(#PHEIGHT) TO('#COM_OWNER.HEIGHT')
VL_FBASBOB0000024800000000000001     CHANGE     FIELD(#PWIDTH) TO('#COM_OWNER.WIDTH')
VL_FBASBOB0000024900000000000001     CHANGE     FIELD(#XHEIGHT) TO('#COM_OWNER.HEIGHT - #LTVW_1.HEIGHT')
VL_FBASBOB0000025000000000000001     CHANGE     FIELD(#XWIDTH) TO('#COM_OWNER.WIDTH  - #LTVW_1.WIDTH')
VL_FBASBOB0000025100000000000001     set        #timr_1 interval(300)
VL_FBASBOB0000025200000000000001     /* **********                                                         */
VL_FBASBOB0000025300000000000001     /* ********** Set form top for keyed collection member form.          */
VL_FBASBOB0000025400000000000001     /* **********                                                         */
VL_FBASBOB0000025500000000000001     CHANGE     FIELD(#STD_NUMD) TO(*ZERO)
VL_FBASBOB0000025600000000000001     /* **********                                                         */
VL_FBASBOB0000025700000000000001     /* ********** Set form left for keyed collection member form.         */
VL_FBASBOB0000025800000000000001     /* **********                                                         */
VL_FBASBOB0000025900000000000001     CHANGE     FIELD(#STD_QTYD) TO(400)
VL_FBASBOB0000026000000000000001     /* **********                                                         */
VL_FBASBOB0000026100000000000001     /* ********** Hide detail list columns until required.                */
VL_FBASBOB0000026200000000000001     /* **********                                                         */
VL_FBASBOB0000026300000000000001     set        ( #lvcl_21 #lvcl_22 #lvcl_23 #lvcl_31 #lvcl_32 #lvcl_33 #lvcl_34 ) visible(false)
VL_FBASBOB0000026400000000000001     /* **********                                                         */
VL_FBASBOB0000026500000000000001     /* ********** Assign icons to the tree view column for level 1.       */
VL_FBASBOB0000026600000000000001     /* **********                                                         */
VL_FBASBOB0000026700000000000001     set        #tvcl_1 image(#vi_deptcl) imageexpanded(#vi_deptop)
VL_FBASBOB0000026800000000000001     ENDROUTINE
VL_FBASBOB0000026900000000000001     /* **********                                                         */
VL_FBASBOB0000027000000000000001     /* ********** Create new object                                       */
VL_FBASBOB0000027100000000000001     /* **********                                                         */
VL_FBASBOB0000027200000000000001     EVTROUTINE HANDLING( #spbn_new.click )
VL_FBASBOB0000027300000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 1')
VL_FBASBOB0000027400000000000001     EXECUTE    SUBROUTINE(NEW_LVL1)
VL_FBASBOB0000027500000000000001     ELSE
VL_FBASBOB0000027600000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 2')
VL_FBASBOB0000027700000000000001     EXECUTE    SUBROUTINE(NEW_LVL2)
VL_FBASBOB0000027800000000000001     ELSE
VL_FBASBOB0000027900000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 3')
VL_FBASBOB0000028000000000000001     EXECUTE    SUBROUTINE(NEW_LVL3)
VL_FBASBOB0000028100000000000001     ENDIF
VL_FBASBOB0000028200000000000001     ENDIF
VL_FBASBOB0000028300000000000001     ENDIF
VL_FBASBOB0000028400000000000001     ENDROUTINE
VL_FBASBOB0000028500000000000001     /* **********                                                         */
VL_FBASBOB0000028600000000000001     EVTROUTINE HANDLING( #minw_1.Click  #mipnw_1.click )
VL_FBASBOB0000028700000000000001     EXECUTE    SUBROUTINE(NEW_LVL1)
VL_FBASBOB0000028800000000000001     ENDROUTINE
VL_FBASBOB0000028900000000000001     /* **********                                                         */
VL_FBASBOB0000029000000000000001     EVTROUTINE HANDLING( #minw_2.Click  #mipnw_2.click )
VL_FBASBOB0000029100000000000001     EXECUTE    SUBROUTINE(NEW_LVL2)
VL_FBASBOB0000029200000000000001     ENDROUTINE
VL_FBASBOB0000029300000000000001     /* **********                                                         */
VL_FBASBOB0000029400000000000001     EVTROUTINE HANDLING( #minw_3.Click  #mipnw_3.click )
VL_FBASBOB0000029500000000000001     EXECUTE    SUBROUTINE(NEW_LVL3)
VL_FBASBOB0000029600000000000001     ENDROUTINE
VL_FBASBOB0000029700000000000001     /* **********                                                         */
VL_FBASBOB0000029800000000000001     /* ********** Replace the field and form names to the appropriate     */
VL_FBASBOB0000029900000000000001     /* ********** names you wish to use in the three new_lvl routines.    */
VL_FBASBOB0000030000000000000001     /* ********** Note level 1 in this example is a keyed collection.     */
VL_FBASBOB0000030100000000000001     /* ********** If you are not using a keyed collection change the code */
VL_FBASBOB0000030200000000000001     /* ********** to match the level 2 example.                           */
VL_FBASBOB0000030300000000000001     /* ********** This example uses property routines but you could use   */
VL_FBASBOB0000030400000000000001     /* ********** methods instead.                                        */
VL_FBASBOB0000030500000000000001     /* **********                                                         */
VL_FBASBOB0000030600000000000001     SUBROUTINE NAME(NEW_LVL1)
VL_FBASBOB0000030700000000000001     CHANGE     FIELD(#DEPTMENT) TO(*BLANKS)
VL_FBASBOB0000030800000000000001     invoke     #vl_dem21<#deptment>.activateform
VL_FBASBOB0000030900000000000001     set        #vl_dem21<#deptment> dept_value(#deptment)
VL_FBASBOB0000031000000000000001     ENDROUTINE
VL_FBASBOB0000031100000000000001     /* **********                                                         */
VL_FBASBOB0000031200000000000001     SUBROUTINE NAME(NEW_LVL2)
VL_FBASBOB0000031300000000000001     invoke     #vl_dem22.activateform
VL_FBASBOB0000031400000000000001     CHANGE     FIELD(#SECTION) TO(*BLANKS)
VL_FBASBOB0000031500000000000001     set        #vl_dem22 dept_value(#deptment) sect_value(#section)
VL_FBASBOB0000031600000000000001     ENDROUTINE
VL_FBASBOB0000031700000000000001     /* **********                                                         */
VL_FBASBOB0000031800000000000001     SUBROUTINE NAME(NEW_LVL3)
VL_FBASBOB0000031900000000000001     invoke     #vl_dem23.activateform
VL_FBASBOB0000032000000000000001     CHANGE     FIELD(#EMPNO) TO(*BLANKS)
VL_FBASBOB0000032100000000000001     set        #vl_dem23 dept_value(#deptment) sect_value(#section) emp_value(#empno)
VL_FBASBOB0000032200000000000001     ENDROUTINE
VL_FBASBOB0000032300000000000001     /* **********                                                         */
VL_FBASBOB0000032400000000000001     /* ********** Tree Events                                             */
VL_FBASBOB0000032500000000000001     /* **********                                                         */
VL_FBASBOB0000032600000000000001     EVTROUTINE HANDLING(#TREEVIEW.ItemGotFocus)
VL_FBASBOB0000032700000000000001     CLR_LIST   NAMED(#LTVW_1)
VL_FBASBOB0000032800000000000001     CHANGE     FIELD(#STD_COUNT) TO(0)
VL_FBASBOB0000032900000000000001     /* **********                                                         */
VL_FBASBOB0000033000000000000001     /* ********** If tree level is 1, load the second level details to    */
VL_FBASBOB0000033100000000000001     /* ********** the list view.                                          */
VL_FBASBOB0000033200000000000001     /* ********** Enable and disable the appropriate menu items and tool  */
VL_FBASBOB0000033300000000000001     /* ********** bar buttons.                                            */
VL_FBASBOB0000033400000000000001     /* ********** At each level the new options should be available for   */
VL_FBASBOB0000033500000000000001     /* ********** the current level and the next lower level.             */
VL_FBASBOB0000033600000000000001     /* **********                                                         */
VL_FBASBOB0000033700000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 1')
VL_FBASBOB0000033800000000000001     set        ( #minw_3 #mipnw_3 #mitm_cut #spbn_cut ) enabled( false )
VL_FBASBOB0000033900000000000001     set        ( #mi_new #mip_new #spbn_new #minw_1 #minw_2  #mipnw_1 #mipnw_2 ) enabled( true )
VL_FBASBOB0000034000000000000001     CHANGE     FIELD(#SAVLVL1) TO(#DEPTMENT)
VL_FBASBOB0000034100000000000001     EXECUTE    SUBROUTINE(LOAD_LVL2)
VL_FBASBOB0000034200000000000001     ELSE
VL_FBASBOB0000034300000000000001     /* **********                                                         */
VL_FBASBOB0000034400000000000001     /* ********** Else if tree level is 2, load the third level details   */
VL_FBASBOB0000034500000000000001     /* ********** to the list view.                                       */
VL_FBASBOB0000034600000000000001     /* ********** Enable and disable the appropriate menu items and tool  */
VL_FBASBOB0000034700000000000001     /* ********** bar buttons.                                            */
VL_FBASBOB0000034800000000000001     /* ********** At each level the new options should be available for   */
VL_FBASBOB0000034900000000000001     /* ********** the current level and the next lower level.             */
VL_FBASBOB0000035000000000000001     /* **********                                                         */
VL_FBASBOB0000035100000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 2')
VL_FBASBOB0000035200000000000001     set        ( #minw_1 #mipnw_1 ) enabled(false)
VL_FBASBOB0000035300000000000001     set        ( #mi_new #mip_new #spbn_new #minw_2 #minw_3 #mipnw_2 #mipnw_3 #mitm_cut #spbn_cut ) enabled( true )
VL_FBASBOB0000035400000000000001     CHANGE     FIELD(#STD_FLAG) TO(L)
VL_FBASBOB0000035500000000000001     IF         COND('#STD_FILTR *EQ Y')
VL_FBASBOB0000035600000000000001     EXECUTE    SUBROUTINE(FILTER)
VL_FBASBOB0000035700000000000001     ELSE
VL_FBASBOB0000035800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WITH_KEY(#DEPTMENT #SECTION)
VL_FBASBOB0000035900000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_FBASBOB0000036000000000000001     CHANGE     FIELD(#STD_COUNT) TO('#STD_COUNT + 1')
VL_FBASBOB0000036100000000000001     ENDSELECT
VL_FBASBOB0000036200000000000001     set        #lvcl_34 visible( true )
VL_FBASBOB0000036300000000000001     set        #lvcl_33 visible( false )
VL_FBASBOB0000036400000000000001     ENDIF
VL_FBASBOB0000036500000000000001     set        ( #lvcl_21 #lvcl_22 #lvcl_23 ) visible( false )
VL_FBASBOB0000036600000000000001     set        ( #lvcl_31 #lvcl_32 ) visible(true)
VL_FBASBOB0000036700000000000001     set        #lvcl_31 displayposition(1)
VL_FBASBOB0000036800000000000001     set        #lvcl_32 displayposition(2)
VL_FBASBOB0000036900000000000001     /* **********                                                         */
VL_FBASBOB0000037000000000000001     /* ********** Execute routine to determine if delete buttons and menu */
VL_FBASBOB0000037100000000000001     /* ********** options should be enabled/disabled. If using validation */
VL_FBASBOB0000037200000000000001     /* ********** rules this code is not required.                        */
VL_FBASBOB0000037300000000000001     /* **********                                                         */
VL_FBASBOB0000037400000000000001     EXECUTE    SUBROUTINE(SET_DEL)
VL_FBASBOB0000037500000000000001     /* **********                                                         */
VL_FBASBOB0000037600000000000001     /* ********** Set the title of the detail list.                       */
VL_FBASBOB0000037700000000000001     /* **********                                                         */
VL_FBASBOB0000037800000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS('''Employees of ''' #SECDESC) TO_GET(#LISTCAP)
VL_FBASBOB0000037900000000000001     set        #labl_2 caption(#listcap)
VL_FBASBOB0000038000000000000001     ELSE
VL_FBASBOB0000038100000000000001     /* **********                                                         */
VL_FBASBOB0000038200000000000001     /* ********** Else if tree level is 2, load the third level details   */
VL_FBASBOB0000038300000000000001     /* ********** to the list view.                                       */
VL_FBASBOB0000038400000000000001     /* ********** Enable and disable the appropriate menu items and tool  */
VL_FBASBOB0000038500000000000001     /* ********** bar buttons.                                            */
VL_FBASBOB0000038600000000000001     /* ********** At each level the new options should be available for   */
VL_FBASBOB0000038700000000000001     /* ********** the current level and the next lower level.             */
VL_FBASBOB0000038800000000000001     /* **********                                                         */
VL_FBASBOB0000038900000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 3')
VL_FBASBOB0000039000000000000001     set        ( #minw_1 #minw_2 #mipnw_1 #mipnw_2 ) enabled(false)
VL_FBASBOB0000039100000000000001     set        ( #mi_new #mip_new #spbn_new #minw_3 #mipnw_3  #mitm_cut #spbn_cut ) enabled(true)
VL_FBASBOB0000039200000000000001     /* **********                                                         */
VL_FBASBOB0000039300000000000001     /* ********** Perform checks to see if the focus item can be deleted. */
VL_FBASBOB0000039400000000000001     /* ********** If using validation rules this check is not required.   */
VL_FBASBOB0000039500000000000001     /* **********                                                         */
VL_FBASBOB0000039600000000000001     EXECUTE    SUBROUTINE(CHK_LVL3)
VL_FBASBOB0000039700000000000001     ENDIF
VL_FBASBOB0000039800000000000001     ENDIF
VL_FBASBOB0000039900000000000001     ENDIF
VL_FBASBOB0000040000000000000001     /* **********                                                         */
VL_FBASBOB0000040100000000000001     /* ********** Execute routine to determine if delete buttons and menu */
VL_FBASBOB0000040200000000000001     /* ********** options should be enabled/disabled. If using validation */
VL_FBASBOB0000040300000000000001     /* ********** rules this code is not required.                        */
VL_FBASBOB0000040400000000000001     /* **********                                                         */
VL_FBASBOB0000040500000000000001     EXECUTE    SUBROUTINE(SET_DEL)
VL_FBASBOB0000040600000000000001     ENDROUTINE
VL_FBASBOB0000040700000000000001     /* **********                                                         */
VL_FBASBOB0000040800000000000001     EVTROUTINE HANDLING(#TREEVIEW.ItemExpanding)
VL_FBASBOB0000040900000000000001     /* **********                                                         */
VL_FBASBOB0000041000000000000001     /* ********** Check which tree level is being expanded.               */
VL_FBASBOB0000041100000000000001     /* ********** Replace section with appropriate key field.             */
VL_FBASBOB0000041200000000000001     /* **********                                                         */
VL_FBASBOB0000041300000000000001     IF         COND('#SECTION *EQ *BLANKS')
VL_FBASBOB0000041400000000000001     MESSAGE    MSGTXT('Loading Sections') TYPE(*STATUS)
VL_FBASBOB0000041500000000000001     /* **********                                                         */
VL_FBASBOB0000041600000000000001     /* ********** Change next level tree columns to null.                 */
VL_FBASBOB0000041700000000000001     /* **********                                                         */
VL_FBASBOB0000041800000000000001     CHANGE     FIELD(#EMPNO #FULLNAME) TO(*NULL)
VL_FBASBOB0000041900000000000001     /* **********                                                         */
VL_FBASBOB0000042000000000000001     /* ********** Check if a filter is active and if a filter selection   */
VL_FBASBOB0000042100000000000001     /* ********** has been made for this level.                           */
VL_FBASBOB0000042200000000000001     /* **********                                                         */
VL_FBASBOB0000042300000000000001     IF         COND('( #STD_FILTR *EQ Y ) AND ( #FLTRLVL2 *NE *BLANKS )')
VL_FBASBOB0000042400000000000001     /* **********                                                         */
VL_FBASBOB0000042500000000000001     /* ********** If a filter selection has been made for this level      */
VL_FBASBOB0000042600000000000001     /* ********** fetch the appropriate record.                           */
VL_FBASBOB0000042700000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_FBASBOB0000042800000000000001     /* ********** details and add to tree.                                */
VL_FBASBOB0000042900000000000001     /* ********** Add icons to tree columns if required.                  */
VL_FBASBOB0000043000000000000001     /* **********                                                         */
VL_FBASBOB0000043100000000000001     FETCH      FIELDS(#SECTION #SECDESC) FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT #FLTRLVL2)
VL_FBASBOB0000043200000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_FBASBOB0000043300000000000001     /* **********                                                         */
VL_FBASBOB0000043400000000000001     /* ********** Assign icons to tree level 2                            */
VL_FBASBOB0000043500000000000001     /* **********                                                         */
VL_FBASBOB0000043600000000000001     set        #treeview.currentitem image(#vi_sectcl) imageexpanded(#vi_sectop)
VL_FBASBOB0000043700000000000001     ELSE
VL_FBASBOB0000043800000000000001     /* **********                                                         */
VL_FBASBOB0000043900000000000001     /* ********** If no filter active or all items for this level         */
VL_FBASBOB0000044000000000000001     /* ********** required select all and add to tree.                    */
VL_FBASBOB0000044100000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_FBASBOB0000044200000000000001     /* ********** details and add to tree.                                */
VL_FBASBOB0000044300000000000001     /* **********                                                         */
VL_FBASBOB0000044400000000000001     SELECT     FIELDS(#SECTION #SECDESC) FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT)
VL_FBASBOB0000044500000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_FBASBOB0000044600000000000001     /* **********                                                         */
VL_FBASBOB0000044700000000000001     /* ********** Assign icons to tree level 2.                           */
VL_FBASBOB0000044800000000000001     /* **********                                                         */
VL_FBASBOB0000044900000000000001     set        #treeview.currentitem image(#vi_sectcl) imageexpanded(#vi_sectop)
VL_FBASBOB0000045000000000000001     ENDSELECT
VL_FBASBOB0000045100000000000001     ENDIF
VL_FBASBOB0000045200000000000001     ELSE
VL_FBASBOB0000045300000000000001     /* **********                                                         */
VL_FBASBOB0000045400000000000001     /* ********** Check which tree level is being expanded.               */
VL_FBASBOB0000045500000000000001     /* ********** Replace empno with appropriate key field.               */
VL_FBASBOB0000045600000000000001     /* **********                                                         */
VL_FBASBOB0000045700000000000001     IF         COND('#EMPNO *EQ *BLANKS')
VL_FBASBOB0000045800000000000001     MESSAGE    MSGTXT('Loading Employee Details') TYPE(*STATUS)
VL_FBASBOB0000045900000000000001     CLR_LIST   NAMED(#TLVL3LST)
VL_FBASBOB0000046000000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_FBASBOB0000046100000000000001     CHANGE     FIELD(#STD_FLAG) TO(T)
VL_FBASBOB0000046200000000000001     /* **********                                                         */
VL_FBASBOB0000046300000000000001     /* ********** If a filter is active call routine to process           */
VL_FBASBOB0000046400000000000001     /* ********** information.                                            */
VL_FBASBOB0000046500000000000001     /* **********                                                         */
VL_FBASBOB0000046600000000000001     IF         COND('#STD_FILTR *EQ Y')
VL_FBASBOB0000046700000000000001     EXECUTE    SUBROUTINE(FILTER)
VL_FBASBOB0000046800000000000001     ELSE
VL_FBASBOB0000046900000000000001     /* **********                                                         */
VL_FBASBOB0000047000000000000001     /* ********** If no filter is active select all records for parent.   */
VL_FBASBOB0000047100000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_FBASBOB0000047200000000000001     /* ********** details and add to tree.                                */
VL_FBASBOB0000047300000000000001     /* **********                                                         */
VL_FBASBOB0000047400000000000001     CHANGE     FIELD(#STD_DIRCT) TO(A)
VL_FBASBOB0000047500000000000001     CHANGE     FIELD(#STD_SORT) TO(N)
VL_FBASBOB0000047600000000000001     SELECT     FIELDS(#EMPNO #DEPTMENT #SECTION #SURNAME #GIVENAME #SALARY #STARTDTER #TERMDATER) FROM_FILE(PSLMST1) WITH_KEY(#DEPTMENT #SECTION)
VL_FBASBOB0000047700000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000047800000000000001     ENDSELECT
VL_FBASBOB0000047900000000000001     ENDIF
VL_FBASBOB0000048000000000000001     ENDIF
VL_FBASBOB0000048100000000000001     ENDIF
VL_FBASBOB0000048200000000000001     ENDROUTINE
VL_FBASBOB0000048300000000000001     /* **********                                                         */
VL_FBASBOB0000048400000000000001     /* ********** This routine is only called if a filter is active and   */
VL_FBASBOB0000048500000000000001     /* ********** the list view of level 3 requested.                     */
VL_FBASBOB0000048600000000000001     /* **********                                                         */
VL_FBASBOB0000048700000000000001     SUBROUTINE NAME(LD_LVL3LST)
VL_FBASBOB0000048800000000000001     MESSAGE    MSGTXT('Loading Employee Details') TYPE(*STATUS)
VL_FBASBOB0000048900000000000001     CLR_LIST   NAMED(#LTVW_1)
VL_FBASBOB0000049000000000000001     CLR_LIST   NAMED(#LVL3LST)
VL_FBASBOB0000049100000000000001     CHANGE     FIELD(#STD_FLAG) TO(E)
VL_FBASBOB0000049200000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_FBASBOB0000049300000000000001     EXECUTE    SUBROUTINE(FILTER)
VL_FBASBOB0000049400000000000001     /* **********                                                         */
VL_FBASBOB0000049500000000000001     /* ********** Enable and position the level 3 columns in the detail   */
VL_FBASBOB0000049600000000000001     /* ********** list.                                                   */
VL_FBASBOB0000049700000000000001     /* **********                                                         */
VL_FBASBOB0000049800000000000001     set        ( #lvcl_31 #lvcl_32 ) visible( true )
VL_FBASBOB0000049900000000000001     set        #lvcl_31 displayposition( 1 )
VL_FBASBOB0000050000000000000001     set        #lvcl_32 displayposition( 2 )
VL_FBASBOB0000050100000000000001     ENDROUTINE
VL_FBASBOB0000050200000000000001     /* **********                                                         */
VL_FBASBOB0000050300000000000001     SUBROUTINE NAME(FILTER)
VL_FBASBOB0000050400000000000001     /* **********                                                         */
VL_FBASBOB0000050500000000000001     /* ********** If all level 1 was selected in filter.                  */
VL_FBASBOB0000050600000000000001     /* **********                                                         */
VL_FBASBOB0000050700000000000001     IF         COND('#FLTRLVL1 *EQ *BLANK')
VL_FBASBOB0000050800000000000001     IF         COND('#STD_FLAG *NE E')
VL_FBASBOB0000050900000000000001     /* **********                                                         */
VL_FBASBOB0000051000000000000001     /* ********** This call was from tree not level 3 list.               */
VL_FBASBOB0000051100000000000001     /* ********** Save and use current level 1 key from tree.             */
VL_FBASBOB0000051200000000000001     /* **********                                                         */
VL_FBASBOB0000051300000000000001     CHANGE     FIELD(#SAVLVL1) TO(#DEPTMENT)
VL_FBASBOB0000051400000000000001     ENDIF
VL_FBASBOB0000051500000000000001     ELSE
VL_FBASBOB0000051600000000000001     /* **********                                                         */
VL_FBASBOB0000051700000000000001     /* ********** Save and use selected level 1 key from filter.          */
VL_FBASBOB0000051800000000000001     /* **********                                                         */
VL_FBASBOB0000051900000000000001     CHANGE     FIELD(#SAVLVL1) TO(#FLTRLVL1)
VL_FBASBOB0000052000000000000001     ENDIF
VL_FBASBOB0000052100000000000001     /* **********                                                         */
VL_FBASBOB0000052200000000000001     /* ********** If all level 2 was selected in filter.                  */
VL_FBASBOB0000052300000000000001     /* **********                                                         */
VL_FBASBOB0000052400000000000001     IF         COND('#FLTRLVL2 *EQ *BLANK')
VL_FBASBOB0000052500000000000001     IF         COND('#STD_FLAG *NE E')
VL_FBASBOB0000052600000000000001     /* **********                                                         */
VL_FBASBOB0000052700000000000001     /* ********** This call was from tree not level 3 list.               */
VL_FBASBOB0000052800000000000001     /* ********** Save and use current level 2 key from tree.             */
VL_FBASBOB0000052900000000000001     /* **********                                                         */
VL_FBASBOB0000053000000000000001     CHANGE     FIELD(#SAVLVL2) TO(#SECTION)
VL_FBASBOB0000053100000000000001     ENDIF
VL_FBASBOB0000053200000000000001     ELSE
VL_FBASBOB0000053300000000000001     /* **********                                                         */
VL_FBASBOB0000053400000000000001     /* ********** Save and use selected level 2 key from filter.          */
VL_FBASBOB0000053500000000000001     /* **********                                                         */
VL_FBASBOB0000053600000000000001     CHANGE     FIELD(#SAVLVL2) TO(#FLTRLVL2)
VL_FBASBOB0000053700000000000001     ENDIF
VL_FBASBOB0000053800000000000001     /* **********                                                         */
VL_FBASBOB0000053900000000000001     CLR_LIST   NAMED(#TLVL3LST)
VL_FBASBOB0000054000000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_FBASBOB0000054100000000000001     IF         COND('#STD_FLAG *NE T')
VL_FBASBOB0000054200000000000001     /* **********                                                         */
VL_FBASBOB0000054300000000000001     /* ********** This call was from the level 3 list not the tree.       */
VL_FBASBOB0000054400000000000001     /* ********** Display appropriate columns in detail list.             */
VL_FBASBOB0000054500000000000001     /* **********                                                         */
VL_FBASBOB0000054600000000000001     set        #lvcl_34 visible( true ) displayposition( 3 )
VL_FBASBOB0000054700000000000001     set        #lvcl_33 visible( false )
VL_FBASBOB0000054800000000000001     ENDIF
VL_FBASBOB0000054900000000000001     /* **********                                                         */
VL_FBASBOB0000055000000000000001     /* ********** If the filter and sort are by date or value execute     */
VL_FBASBOB0000055100000000000001     /* ********** appropriate routine.                                    */
VL_FBASBOB0000055200000000000001     /* **********                                                         */
VL_FBASBOB0000055300000000000001     IF         COND('#STD_SORT *EQ D')
VL_FBASBOB0000055400000000000001     EXECUTE    SUBROUTINE(FLTR_DATE)
VL_FBASBOB0000055500000000000001     ELSE
VL_FBASBOB0000055600000000000001     IF         COND('#STD_SORT *EQ V')
VL_FBASBOB0000055700000000000001     EXECUTE    SUBROUTINE(FLTR_VALUE)
VL_FBASBOB0000055800000000000001     IF         COND('#STD_FLAG *NE T')
VL_FBASBOB0000055900000000000001     set        #lvcl_34 visible( false )
VL_FBASBOB0000056000000000000001     set        #lvcl_33 visible( true ) displayposition( 3 )
VL_FBASBOB0000056100000000000001     ENDIF
VL_FBASBOB0000056200000000000001     ELSE
VL_FBASBOB0000056300000000000001     /* **********                                                         */
VL_FBASBOB0000056400000000000001     /* ********** Else select the level 3 details using the saved keys.   */
VL_FBASBOB0000056500000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_FBASBOB0000056600000000000001     /* ********** details.                                                */
VL_FBASBOB0000056700000000000001     /* **********                                                         */
VL_FBASBOB0000056800000000000001     IF         COND('#SAVLVL2 *NE *BLANKS')
VL_FBASBOB0000056900000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_FBASBOB0000057000000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000057100000000000001     ENDSELECT
VL_FBASBOB0000057200000000000001     ELSE
VL_FBASBOB0000057300000000000001     IF         COND('#SAVLVL1 *NE *BLANKS')
VL_FBASBOB0000057400000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WITH_KEY(#SAVLVL1)
VL_FBASBOB0000057500000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000057600000000000001     ENDSELECT
VL_FBASBOB0000057700000000000001     ELSE
VL_FBASBOB0000057800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1)
VL_FBASBOB0000057900000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000058000000000000001     ENDSELECT
VL_FBASBOB0000058100000000000001     ENDIF
VL_FBASBOB0000058200000000000001     ENDIF
VL_FBASBOB0000058300000000000001     EXECUTE    SUBROUTINE(LVL3_SORT)
VL_FBASBOB0000058400000000000001     ENDIF
VL_FBASBOB0000058500000000000001     ENDIF
VL_FBASBOB0000058600000000000001     ENDROUTINE
VL_FBASBOB0000058700000000000001     /* **********                                                         */
VL_FBASBOB0000058800000000000001     /* ********** This routine executes the appropriate routine according */
VL_FBASBOB0000058900000000000001     /* ********** to the comparison operator.                             */
VL_FBASBOB0000059000000000000001     /* **********                                                         */
VL_FBASBOB0000059100000000000001     SUBROUTINE NAME(FLTR_VALUE)
VL_FBASBOB0000059200000000000001     CLR_LIST   NAMED(#TLVL3LST)
VL_FBASBOB0000059300000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_FBASBOB0000059400000000000001     /* **********                                                         */
VL_FBASBOB0000059500000000000001     IF         COND('#STD_CMPAR *EQ GT')
VL_FBASBOB0000059600000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_FBASBOB0000059700000000000001     EXECUTE    SUBROUTINE(GTV_LVL2)
VL_FBASBOB0000059800000000000001     ELSE
VL_FBASBOB0000059900000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_FBASBOB0000060000000000000001     EXECUTE    SUBROUTINE(GTV_LVL1)
VL_FBASBOB0000060100000000000001     ELSE
VL_FBASBOB0000060200000000000001     EXECUTE    SUBROUTINE(GTV_ALL)
VL_FBASBOB0000060300000000000001     ENDIF
VL_FBASBOB0000060400000000000001     ENDIF
VL_FBASBOB0000060500000000000001     /* **********                                                         */
VL_FBASBOB0000060600000000000001     ELSE
VL_FBASBOB0000060700000000000001     IF         COND('#STD_CMPAR *EQ EQ')
VL_FBASBOB0000060800000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_FBASBOB0000060900000000000001     EXECUTE    SUBROUTINE(EQV_LVL2)
VL_FBASBOB0000061000000000000001     ELSE
VL_FBASBOB0000061100000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_FBASBOB0000061200000000000001     EXECUTE    SUBROUTINE(EQV_LVL1)
VL_FBASBOB0000061300000000000001     ELSE
VL_FBASBOB0000061400000000000001     EXECUTE    SUBROUTINE(EQV_ALL)
VL_FBASBOB0000061500000000000001     ENDIF
VL_FBASBOB0000061600000000000001     ENDIF
VL_FBASBOB0000061700000000000001     /* **********                                                         */
VL_FBASBOB0000061800000000000001     ELSE
VL_FBASBOB0000061900000000000001     IF         COND('#STD_CMPAR *EQ LT')
VL_FBASBOB0000062000000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_FBASBOB0000062100000000000001     EXECUTE    SUBROUTINE(LTV_LVL2)
VL_FBASBOB0000062200000000000001     ELSE
VL_FBASBOB0000062300000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_FBASBOB0000062400000000000001     EXECUTE    SUBROUTINE(LTV_LVL1)
VL_FBASBOB0000062500000000000001     ELSE
VL_FBASBOB0000062600000000000001     EXECUTE    SUBROUTINE(LTV_ALL)
VL_FBASBOB0000062700000000000001     ENDIF
VL_FBASBOB0000062800000000000001     ENDIF
VL_FBASBOB0000062900000000000001     /* **********                                                         */
VL_FBASBOB0000063000000000000001     ENDIF
VL_FBASBOB0000063100000000000001     ENDIF
VL_FBASBOB0000063200000000000001     ENDIF
VL_FBASBOB0000063300000000000001     EXECUTE    SUBROUTINE(LVL3_SORT)
VL_FBASBOB0000063400000000000001     ENDROUTINE
VL_FBASBOB0000063500000000000001     /* **********                                                         */
VL_FBASBOB0000063600000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_FBASBOB0000063700000000000001     /* ********** details in the following routines.                      */
VL_FBASBOB0000063800000000000001     /* **********                                                         */
VL_FBASBOB0000063900000000000001     SUBROUTINE NAME(GTV_ALL)
VL_FBASBOB0000064000000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *GT #STD_NUM')
VL_FBASBOB0000064100000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000064200000000000001     ENDSELECT
VL_FBASBOB0000064300000000000001     ENDROUTINE
VL_FBASBOB0000064400000000000001     /* **********                                                         */
VL_FBASBOB0000064500000000000001     SUBROUTINE NAME(GTV_LVL1)
VL_FBASBOB0000064600000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *GT #STD_NUM') WITH_KEY(#SAVLVL1)
VL_FBASBOB0000064700000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000064800000000000001     ENDSELECT
VL_FBASBOB0000064900000000000001     ENDROUTINE
VL_FBASBOB0000065000000000000001     /* **********                                                         */
VL_FBASBOB0000065100000000000001     SUBROUTINE NAME(GTV_LVL2)
VL_FBASBOB0000065200000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *GT #STD_NUM') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_FBASBOB0000065300000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000065400000000000001     ENDSELECT
VL_FBASBOB0000065500000000000001     ENDROUTINE
VL_FBASBOB0000065600000000000001     /* **********                                                         */
VL_FBASBOB0000065700000000000001     SUBROUTINE NAME(EQV_ALL)
VL_FBASBOB0000065800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *EQ #STD_NUM')
VL_FBASBOB0000065900000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000066000000000000001     ENDSELECT
VL_FBASBOB0000066100000000000001     ENDROUTINE
VL_FBASBOB0000066200000000000001     /* **********                                                         */
VL_FBASBOB0000066300000000000001     SUBROUTINE NAME(EQV_LVL1)
VL_FBASBOB0000066400000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *EQ #STD_NUM') WITH_KEY(#SAVLVL1)
VL_FBASBOB0000066500000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000066600000000000001     ENDSELECT
VL_FBASBOB0000066700000000000001     ENDROUTINE
VL_FBASBOB0000066800000000000001     /* **********                                                         */
VL_FBASBOB0000066900000000000001     SUBROUTINE NAME(EQV_LVL2)
VL_FBASBOB0000067000000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *EQ #STD_NUM') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_FBASBOB0000067100000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000067200000000000001     ENDSELECT
VL_FBASBOB0000067300000000000001     ENDROUTINE
VL_FBASBOB0000067400000000000001     /* **********                                                         */
VL_FBASBOB0000067500000000000001     SUBROUTINE NAME(LTV_ALL)
VL_FBASBOB0000067600000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *LT #STD_NUM')
VL_FBASBOB0000067700000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000067800000000000001     ENDSELECT
VL_FBASBOB0000067900000000000001     ENDROUTINE
VL_FBASBOB0000068000000000000001     /* **********                                                         */
VL_FBASBOB0000068100000000000001     SUBROUTINE NAME(LTV_LVL1)
VL_FBASBOB0000068200000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *LT #STD_NUM') WITH_KEY(#SAVLVL1)
VL_FBASBOB0000068300000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000068400000000000001     ENDSELECT
VL_FBASBOB0000068500000000000001     ENDROUTINE
VL_FBASBOB0000068600000000000001     /* **********                                                         */
VL_FBASBOB0000068700000000000001     SUBROUTINE NAME(LTV_LVL2)
VL_FBASBOB0000068800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#SALARY *LT #STD_NUM') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_FBASBOB0000068900000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000069000000000000001     ENDSELECT
VL_FBASBOB0000069100000000000001     ENDROUTINE
VL_FBASBOB0000069200000000000001     /* **********                                                         */
VL_FBASBOB0000069300000000000001     /* ********** This routine executes the appropriate routine according */
VL_FBASBOB0000069400000000000001     /* ********** to the comparison operator.                             */
VL_FBASBOB0000069500000000000001     /* **********                                                         */
VL_FBASBOB0000069600000000000001     SUBROUTINE NAME(FLTR_DATE)
VL_FBASBOB0000069700000000000001     CLR_LIST   NAMED(#TLVL3LST)
VL_FBASBOB0000069800000000000001     CHANGE     FIELD(#STD_COUNT) TO(*ZERO)
VL_FBASBOB0000069900000000000001     /* **********                                                         */
VL_FBASBOB0000070000000000000001     IF         COND('#STD_CMPAR *EQ GT')
VL_FBASBOB0000070100000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_FBASBOB0000070200000000000001     EXECUTE    SUBROUTINE(GTD_LVL2)
VL_FBASBOB0000070300000000000001     ELSE
VL_FBASBOB0000070400000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_FBASBOB0000070500000000000001     EXECUTE    SUBROUTINE(GTD_LVL1)
VL_FBASBOB0000070600000000000001     ELSE
VL_FBASBOB0000070700000000000001     EXECUTE    SUBROUTINE(GTD_ALL)
VL_FBASBOB0000070800000000000001     ENDIF
VL_FBASBOB0000070900000000000001     ENDIF
VL_FBASBOB0000071000000000000001     /* **********                                                         */
VL_FBASBOB0000071100000000000001     ELSE
VL_FBASBOB0000071200000000000001     IF         COND('#STD_CMPAR *EQ EQ')
VL_FBASBOB0000071300000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_FBASBOB0000071400000000000001     EXECUTE    SUBROUTINE(EQD_LVL2)
VL_FBASBOB0000071500000000000001     ELSE
VL_FBASBOB0000071600000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_FBASBOB0000071700000000000001     EXECUTE    SUBROUTINE(EQD_LVL1)
VL_FBASBOB0000071800000000000001     ELSE
VL_FBASBOB0000071900000000000001     EXECUTE    SUBROUTINE(EQD_ALL)
VL_FBASBOB0000072000000000000001     ENDIF
VL_FBASBOB0000072100000000000001     ENDIF
VL_FBASBOB0000072200000000000001     /* **********                                                         */
VL_FBASBOB0000072300000000000001     ELSE
VL_FBASBOB0000072400000000000001     IF         COND('#STD_CMPAR *EQ LT')
VL_FBASBOB0000072500000000000001     IF         COND('#SAVLVL2 *NE *BLANK')
VL_FBASBOB0000072600000000000001     EXECUTE    SUBROUTINE(LTD_LVL2)
VL_FBASBOB0000072700000000000001     ELSE
VL_FBASBOB0000072800000000000001     IF         COND('#SAVLVL1 *NE *BLANK')
VL_FBASBOB0000072900000000000001     EXECUTE    SUBROUTINE(LTD_LVL1)
VL_FBASBOB0000073000000000000001     ELSE
VL_FBASBOB0000073100000000000001     EXECUTE    SUBROUTINE(LTD_ALL)
VL_FBASBOB0000073200000000000001     ENDIF
VL_FBASBOB0000073300000000000001     ENDIF
VL_FBASBOB0000073400000000000001     /* **********                                                         */
VL_FBASBOB0000073500000000000001     ENDIF
VL_FBASBOB0000073600000000000001     ENDIF
VL_FBASBOB0000073700000000000001     ENDIF
VL_FBASBOB0000073800000000000001     EXECUTE    SUBROUTINE(LVL3_SORT)
VL_FBASBOB0000073900000000000001     ENDROUTINE
VL_FBASBOB0000074000000000000001     /* **********                                                         */
VL_FBASBOB0000074100000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_FBASBOB0000074200000000000001     /* ********** details in the following routines.                      */
VL_FBASBOB0000074300000000000001     /* **********                                                         */
VL_FBASBOB0000074400000000000001     SUBROUTINE NAME(GTD_ALL)
VL_FBASBOB0000074500000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *GT #STD_DATE')
VL_FBASBOB0000074600000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000074700000000000001     ENDSELECT
VL_FBASBOB0000074800000000000001     ENDROUTINE
VL_FBASBOB0000074900000000000001     /* **********                                                         */
VL_FBASBOB0000075000000000000001     SUBROUTINE NAME(GTD_LVL1)
VL_FBASBOB0000075100000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *GT #STD_DATE') WITH_KEY(#SAVLVL1)
VL_FBASBOB0000075200000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000075300000000000001     ENDSELECT
VL_FBASBOB0000075400000000000001     ENDROUTINE
VL_FBASBOB0000075500000000000001     /* **********                                                         */
VL_FBASBOB0000075600000000000001     SUBROUTINE NAME(GTD_LVL2)
VL_FBASBOB0000075700000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *GT #STD_DATE') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_FBASBOB0000075800000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000075900000000000001     ENDSELECT
VL_FBASBOB0000076000000000000001     ENDROUTINE
VL_FBASBOB0000076100000000000001     /* **********                                                         */
VL_FBASBOB0000076200000000000001     SUBROUTINE NAME(EQD_ALL)
VL_FBASBOB0000076300000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *EQ #STD_DATE')
VL_FBASBOB0000076400000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000076500000000000001     ENDSELECT
VL_FBASBOB0000076600000000000001     ENDROUTINE
VL_FBASBOB0000076700000000000001     /* **********                                                         */
VL_FBASBOB0000076800000000000001     SUBROUTINE NAME(EQD_LVL1)
VL_FBASBOB0000076900000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *EQ #STD_DATE') WITH_KEY(#SAVLVL1)
VL_FBASBOB0000077000000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000077100000000000001     ENDSELECT
VL_FBASBOB0000077200000000000001     ENDROUTINE
VL_FBASBOB0000077300000000000001     /* **********                                                         */
VL_FBASBOB0000077400000000000001     SUBROUTINE NAME(EQD_LVL2)
VL_FBASBOB0000077500000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *EQ #STD_DATE') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_FBASBOB0000077600000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000077700000000000001     ENDSELECT
VL_FBASBOB0000077800000000000001     ENDROUTINE
VL_FBASBOB0000077900000000000001     /* **********                                                         */
VL_FBASBOB0000078000000000000001     SUBROUTINE NAME(LTD_ALL)
VL_FBASBOB0000078100000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *LT #STD_DATE')
VL_FBASBOB0000078200000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000078300000000000001     ENDSELECT
VL_FBASBOB0000078400000000000001     ENDROUTINE
VL_FBASBOB0000078500000000000001     /* **********                                                         */
VL_FBASBOB0000078600000000000001     SUBROUTINE NAME(LTD_LVL1)
VL_FBASBOB0000078700000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *LT #STD_DATE') WITH_KEY(#SAVLVL1)
VL_FBASBOB0000078800000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000078900000000000001     ENDSELECT
VL_FBASBOB0000079000000000000001     ENDROUTINE
VL_FBASBOB0000079100000000000001     /* **********                                                         */
VL_FBASBOB0000079200000000000001     SUBROUTINE NAME(LTD_LVL2)
VL_FBASBOB0000079300000000000001     SELECT     FIELDS(*ALL) FROM_FILE(PSLMST1) WHERE('#STARTDTER *LT #STD_DATE') WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_FBASBOB0000079400000000000001     EXECUTE    SUBROUTINE(ADD_TEMP)
VL_FBASBOB0000079500000000000001     ENDSELECT
VL_FBASBOB0000079600000000000001     ENDROUTINE
VL_FBASBOB0000079700000000000001     /* **********                                                         */
VL_FBASBOB0000079800000000000001     /* ********** Add entries to temporary work list for sorting.         */
VL_FBASBOB0000079900000000000001     /* **********                                                         */
VL_FBASBOB0000080000000000000001     SUBROUTINE NAME(ADD_TEMP)
VL_FBASBOB0000080100000000000001     ADD_ENTRY  TO_LIST(#TLVL3LST)
VL_FBASBOB0000080200000000000001     CHANGE     FIELD(#STD_COUNT) TO('#STD_COUNT + 1')
VL_FBASBOB0000080300000000000001     ENDROUTINE
VL_FBASBOB0000080400000000000001     /* **********                                                         */
VL_FBASBOB0000080500000000000001     /* ********** Sort work list according to filter requirement.         */
VL_FBASBOB0000080600000000000001     /* ********** Replace sort field names with appropriate names.        */
VL_FBASBOB0000080700000000000001     /* **********                                                         */
VL_FBASBOB0000080800000000000001     SUBROUTINE NAME(LVL3_SORT)
VL_FBASBOB0000080900000000000001     IF         COND('#STD_SORT *EQ C')
VL_FBASBOB0000081000000000000001     /* ********** Do nothing                                              */
VL_FBASBOB0000081100000000000001     ELSE
VL_FBASBOB0000081200000000000001     IF         COND('#STD_SORT *EQ N')
VL_FBASBOB0000081300000000000001     SORT_LIST  NAMED(#TLVL3LST) BY_FIELDS(#SURNAME #GIVENAME)
VL_FBASBOB0000081400000000000001     ELSE
VL_FBASBOB0000081500000000000001     IF         COND('#STD_SORT *EQ D')
VL_FBASBOB0000081600000000000001     SORT_LIST  NAMED(#TLVL3LST) BY_FIELDS(#STARTDTER #SURNAME)
VL_FBASBOB0000081700000000000001     ELSE
VL_FBASBOB0000081800000000000001     IF         COND('#STD_SORT *EQ S')
VL_FBASBOB0000081900000000000001     SORT_LIST  NAMED(#TLVL3LST) BY_FIELDS(#SALARY #SURNAME)
VL_FBASBOB0000082000000000000001     ENDIF
VL_FBASBOB0000082100000000000001     ENDIF
VL_FBASBOB0000082200000000000001     ENDIF
VL_FBASBOB0000082300000000000001     ENDIF
VL_FBASBOB0000082400000000000001     /* **********                                                         */
VL_FBASBOB0000082500000000000001     /* ********** Read list in ascending order as required by filter.     */
VL_FBASBOB0000082600000000000001     /* ********** Add entries to list and tree according to who called    */
VL_FBASBOB0000082700000000000001     /* ********** this processing.                                        */
VL_FBASBOB0000082800000000000001     /* **********                                                         */
VL_FBASBOB0000082900000000000001     IF         COND('#STD_DIRCT *EQ A')
VL_FBASBOB0000083000000000000001     SELECTLIST NAMED(#TLVL3LST)
VL_FBASBOB0000083100000000000001     IF         COND('#STD_FLAG *EQ L')
VL_FBASBOB0000083200000000000001     /* **********                                                         */
VL_FBASBOB0000083300000000000001     /* ********** Detail list                                             */
VL_FBASBOB0000083400000000000001     /* **********                                                         */
VL_FBASBOB0000083500000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_FBASBOB0000083600000000000001     ELSE
VL_FBASBOB0000083700000000000001     IF         COND('#STD_FLAG *EQ E')
VL_FBASBOB0000083800000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_FBASBOB0000083900000000000001     /* **********                                                         */
VL_FBASBOB0000084000000000000001     /* ********** Level 3 list                                            */
VL_FBASBOB0000084100000000000001     /* **********                                                         */
VL_FBASBOB0000084200000000000001     ADD_ENTRY  TO_LIST(#LVL3LST)
VL_FBASBOB0000084300000000000001     ELSE
VL_FBASBOB0000084400000000000001     /* **********                                                         */
VL_FBASBOB0000084500000000000001     /* ********** Tree                                                    */
VL_FBASBOB0000084600000000000001     /* **********                                                         */
VL_FBASBOB0000084700000000000001     EXECUTE    SUBROUTINE(ADD_TREE)
VL_FBASBOB0000084800000000000001     ENDIF
VL_FBASBOB0000084900000000000001     ENDIF
VL_FBASBOB0000085000000000000001     ENDSELECT
VL_FBASBOB0000085100000000000001     ELSE
VL_FBASBOB0000085200000000000001     /* **********                                                         */
VL_FBASBOB0000085300000000000001     /* ********** Else read list in descending order as required by       */
VL_FBASBOB0000085400000000000001     /* ********** filter.                                                 */
VL_FBASBOB0000085500000000000001     /* **********                                                         */
VL_FBASBOB0000085600000000000001     DOWHILE    COND('#STD_COUNT *GT *ZERO')
VL_FBASBOB0000085700000000000001     GET_ENTRY  NUMBER(#STD_COUNT) FROM_LIST(#TLVL3LST)
VL_FBASBOB0000085800000000000001     CHANGE     FIELD(#STD_COUNT) TO('#STD_COUNT - 1')
VL_FBASBOB0000085900000000000001     IF         COND('#STD_FLAG *EQ L')
VL_FBASBOB0000086000000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_FBASBOB0000086100000000000001     ELSE
VL_FBASBOB0000086200000000000001     IF         COND('#STD_FLAG *EQ E')
VL_FBASBOB0000086300000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_FBASBOB0000086400000000000001     ADD_ENTRY  TO_LIST(#LVL3LST)
VL_FBASBOB0000086500000000000001     ELSE
VL_FBASBOB0000086600000000000001     EXECUTE    SUBROUTINE(ADD_TREE)
VL_FBASBOB0000086700000000000001     ENDIF
VL_FBASBOB0000086800000000000001     ENDIF
VL_FBASBOB0000086900000000000001     ENDWHILE
VL_FBASBOB0000087000000000000001     ENDIF
VL_FBASBOB0000087100000000000001     ENDROUTINE
VL_FBASBOB0000087200000000000001     /* **********                                                         */
VL_FBASBOB0000087300000000000001     SUBROUTINE NAME(ADD_TREE)
VL_FBASBOB0000087400000000000001     /* **********                                                         */
VL_FBASBOB0000087500000000000001     /* ********** Perform any formatting required before adding entry to  */
VL_FBASBOB0000087600000000000001     /* ********** tree and assigning an icon.                             */
VL_FBASBOB0000087700000000000001     /* **********                                                         */
VL_FBASBOB0000087800000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS(#SURNAME '''-''' #GIVENAME) TO_GET(#FULLNAME)
VL_FBASBOB0000087900000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_FBASBOB0000088000000000000001     /* **********                                                         */
VL_FBASBOB0000088100000000000001     /* ********** Assign icons to tree level 3.                           */
VL_FBASBOB0000088200000000000001     /* **********                                                         */
VL_FBASBOB0000088300000000000001     set        #treeview.currentitem image(#vi_employ) imageexpanded(#vi_employ)
VL_FBASBOB0000088400000000000001     ENDROUTINE
VL_FBASBOB0000088500000000000001     /* **********                                                         */
VL_FBASBOB0000088600000000000001     EVTROUTINE HANDLING(#CMBX_1.ItemGotFocus)
VL_FBASBOB0000088700000000000001     /* **********                                                         */
VL_FBASBOB0000088800000000000001     /* ********** Replace deptment with level 1 key.                      */
VL_FBASBOB0000088900000000000001     /* **********                                                         */
VL_FBASBOB0000089000000000000001     CHANGE     FIELD(#STD_CODEL) TO(#DEPTMENT)
VL_FBASBOB0000089100000000000001     SELECTLIST NAMED(#TREEVIEW)
VL_FBASBOB0000089200000000000001     IF         COND('#DEPTMENT *EQ #STD_CODEL')
VL_FBASBOB0000089300000000000001     set        #treeview.currentitem selected(true)
VL_FBASBOB0000089400000000000001     CHANGE     FIELD(#STD_IDNO) TO('#TREEVIEW.FOCUSITEM.ENTRY')
VL_FBASBOB0000089500000000000001     GET_ENTRY  NUMBER(#STD_IDNO) FROM_LIST(#TREEVIEW)
VL_FBASBOB0000089600000000000001     CHANGE     FIELD(#SAVLVL1) TO(#DEPTMENT)
VL_FBASBOB0000089700000000000001     /* **********                                                         */
VL_FBASBOB0000089800000000000001     /* ********** Load level 2 children into details list for current     */
VL_FBASBOB0000089900000000000001     /* ********** level 1 parent.                                         */
VL_FBASBOB0000090000000000000001     /* **********                                                         */
VL_FBASBOB0000090100000000000001     EXECUTE    SUBROUTINE(LOAD_LVL2)
VL_FBASBOB0000090200000000000001     LEAVE
VL_FBASBOB0000090300000000000001     ENDIF
VL_FBASBOB0000090400000000000001     ENDSELECT
VL_FBASBOB0000090500000000000001     ENDROUTINE
VL_FBASBOB0000090600000000000001     /* **********                                                         */
VL_FBASBOB0000090700000000000001     /* ********** Double click in detail list view invokes form           */
VL_FBASBOB0000090800000000000001     /* ********** displaying selected item.                               */
VL_FBASBOB0000090900000000000001     /* **********                                                         */
VL_FBASBOB0000091000000000000001     EVTROUTINE HANDLING(#LTVW_1.DoubleClick)
VL_FBASBOB0000091100000000000001     /* **********                                                         */
VL_FBASBOB0000091200000000000001     /* ********** Determine which level of detail is currently displayed  */
VL_FBASBOB0000091300000000000001     /* ********** in list view.                                           */
VL_FBASBOB0000091400000000000001     /* ********** Invoke the appropriate detail form.                     */
VL_FBASBOB0000091500000000000001     /* ********** Set the detail form properties.                         */
VL_FBASBOB0000091600000000000001     /* **********                                                         */
VL_FBASBOB0000091700000000000001     IF         COND('#LVCL_21.VISIBLE *EQ TRUE')
VL_FBASBOB0000091800000000000001     invoke     #vl_dem22.activateform
VL_FBASBOB0000091900000000000001     set        #vl_dem22 dept_value(#deptment) sect_value(#section) top(#std_num)
VL_FBASBOB0000092000000000000001     MESSAGE    MSGTXT('Invoking ....... form')
VL_FBASBOB0000092100000000000001     ELSE
VL_FBASBOB0000092200000000000001     IF         COND('#LVCL_31.VISIBLE *EQ TRUE')
VL_FBASBOB0000092300000000000001     invoke     #vl_dem23.activateform
VL_FBASBOB0000092400000000000001     set        #vl_dem23 dept_value(#deptment) sect_value(#section) emp_value(#empno)
VL_FBASBOB0000092500000000000001     MESSAGE    MSGTXT('Invoking ....... form')
VL_FBASBOB0000092600000000000001     ENDIF
VL_FBASBOB0000092700000000000001     ENDIF
VL_FBASBOB0000092800000000000001     ENDROUTINE
VL_FBASBOB0000092900000000000001     /* **********                                                         */
VL_FBASBOB0000093000000000000001     SUBROUTINE NAME(DPTFRMTOP)
VL_FBASBOB0000093100000000000001     IF         COND('#STD_NUMD *GT 400')
VL_FBASBOB0000093200000000000001     CHANGE     FIELD(#STD_NUMD) TO(10)
VL_FBASBOB0000093300000000000001     ELSE
VL_FBASBOB0000093400000000000001     CHANGE     FIELD(#STD_NUMD) TO('#STD_NUMD + 30')
VL_FBASBOB0000093500000000000001     CHANGE     FIELD(#STD_NUM) TO('#STD_NUMD')
VL_FBASBOB0000093600000000000001     CHANGE     FIELD(#STD_QTYD) TO('#STD_QTYD - 30')
VL_FBASBOB0000093700000000000001     CHANGE     FIELD(#STD_QTY) TO('#STD_QTYD')
VL_FBASBOB0000093800000000000001     ENDIF
VL_FBASBOB0000093900000000000001     ENDROUTINE
VL_FBASBOB0000094000000000000001     /* **********                                                         */
VL_FBASBOB0000094100000000000001     /* **********                                                         */
VL_FBASBOB0000094200000000000001     /* ********** Level 1                                                 */
VL_FBASBOB0000094300000000000001     /* **********                                                         */
VL_FBASBOB0000094400000000000001     /* **********                                                         */
VL_FBASBOB0000094500000000000001     /* ********** Monitor for changes to level 1 objects in appropriate   */
VL_FBASBOB0000094600000000000001     /* ********** member forms.                                           */
VL_FBASBOB0000094700000000000001     /* ********** Refresh the tree and selector combo box with changes.   */
VL_FBASBOB0000094800000000000001     /* **********                                                         */
VL_FBASBOB0000094900000000000001     EVTROUTINE HANDLING(#vl_dem21<>.dept_chgd)
VL_FBASBOB0000095000000000000001     MESSAGE    MSGTXT('Reloading departments')
VL_FBASBOB0000095100000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_FBASBOB0000095200000000000001     ENDROUTINE
VL_FBASBOB0000095300000000000001     /* **********                                                         */
VL_FBASBOB0000095400000000000001     SUBROUTINE NAME(LOAD_LVL1)
VL_FBASBOB0000095500000000000001     CLR_LIST   NAMED(#TREEVIEW)
VL_FBASBOB0000095600000000000001     CLR_LIST   NAMED(#CMBX_1)
VL_FBASBOB0000095700000000000001     CHANGE     FIELD(#STD_COUNT) TO(0)
VL_FBASBOB0000095800000000000001     /* **********                                                         */
VL_FBASBOB0000095900000000000001     /* ********** Change lower level tree columns to null.                */
VL_FBASBOB0000096000000000000001     /* ********** Replace fields with required names.                     */
VL_FBASBOB0000096100000000000001     /* **********                                                         */
VL_FBASBOB0000096200000000000001     CHANGE     FIELD(#SECTION #SECDESC #FULLNAME #EMPNO) TO(*NULL)
VL_FBASBOB0000096300000000000001     MESSAGE    MSGTXT('Loading ..........') TYPE(*STATUS)
VL_FBASBOB0000096400000000000001     /* **********                                                         */
VL_FBASBOB0000096500000000000001     /* ********** if a filter level 1 is available use it to fetch a      */
VL_FBASBOB0000096600000000000001     /* ********** single record,                                          */
VL_FBASBOB0000096700000000000001     /* ********** else select all level 1 records.                        */
VL_FBASBOB0000096800000000000001     /* ********** Replace deptment processing with appropriate file       */
VL_FBASBOB0000096900000000000001     /* ********** details.                                                */
VL_FBASBOB0000097000000000000001     /* **********                                                         */
VL_FBASBOB0000097100000000000001     IF         COND('#FLTRLVL1 *NE *BLANK')
VL_FBASBOB0000097200000000000001     FETCH      FIELDS(#DEPTMENT #DEPTDESC) FROM_FILE(DEPTAB) WITH_KEY(#FLTRLVL1)
VL_FBASBOB0000097300000000000001     EXECUTE    SUBROUTINE(ADD_LVL1)
VL_FBASBOB0000097400000000000001     ELSE
VL_FBASBOB0000097500000000000001     SELECT     FIELDS(#DEPTMENT #DEPTDESC) FROM_FILE(DEPTAB)
VL_FBASBOB0000097600000000000001     EXECUTE    SUBROUTINE(ADD_LVL1)
VL_FBASBOB0000097700000000000001     ENDSELECT
VL_FBASBOB0000097800000000000001     ENDIF
VL_FBASBOB0000097900000000000001     MESSAGE    MSGTXT('Load Complete')
VL_FBASBOB0000098000000000000001     ENDROUTINE
VL_FBASBOB0000098100000000000001     /* **********                                                         */
VL_FBASBOB0000098200000000000001     SUBROUTINE NAME(ADD_LVL1)
VL_FBASBOB0000098300000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_FBASBOB0000098400000000000001     /* **********                                                         */
VL_FBASBOB0000098500000000000001     /* ********** Assign icons to tree level 1.                           */
VL_FBASBOB0000098600000000000001     /* **********                                                         */
VL_FBASBOB0000098700000000000001     set        #treeview.currentitem image(#vi_deptcl) imageexpanded(#vi_deptop)
VL_FBASBOB0000098800000000000001     ADD_ENTRY  TO_LIST(#CMBX_1)
VL_FBASBOB0000098900000000000001     IF         COND('#STD_COUNT *EQ 0')
VL_FBASBOB0000099000000000000001     set        #cmbx_1.currentitem focus(true)
VL_FBASBOB0000099100000000000001     CHANGE     FIELD(#STD_COUNT) TO(1)
VL_FBASBOB0000099200000000000001     ENDIF
VL_FBASBOB0000099300000000000001     ENDROUTINE
VL_FBASBOB0000099400000000000001     /* **********                                                         */
VL_FBASBOB0000099500000000000001     /* **********                                                         */
VL_FBASBOB0000099600000000000001     /* ********** Level 2                                                 */
VL_FBASBOB0000099700000000000001     /* **********                                                         */
VL_FBASBOB0000099800000000000001     /* **********                                                         */
VL_FBASBOB0000099900000000000001     /* ********** Load level 2 details into the detail list.              */
VL_FBASBOB0000100000000000000001     /* **********                                                         */
VL_FBASBOB0000100100000000000001     SUBROUTINE NAME(LOAD_LVL2)
VL_FBASBOB0000100200000000000001     CLR_LIST   NAMED(#LTVW_1)
VL_FBASBOB0000100300000000000001     CHANGE     FIELD(#STD_COUNT) TO(0)
VL_FBASBOB0000100400000000000001     /* **********                                                         */
VL_FBASBOB0000100500000000000001     /* ********** if a filter level 2 key is available use it to fetch a  */
VL_FBASBOB0000100600000000000001     /* ********** single record.                                          */
VL_FBASBOB0000100700000000000001     /* ********** else select all level 2 records.                        */
VL_FBASBOB0000100800000000000001     /* ********** Replace section processing with appropriate file        */
VL_FBASBOB0000100900000000000001     /* ********** details.                                                */
VL_FBASBOB0000101000000000000001     /* **********                                                         */
VL_FBASBOB0000101100000000000001     IF         COND('#SAVLVL2 *NE *BLANKS')
VL_FBASBOB0000101200000000000001     SELECT     FIELDS(*ALL) FROM_FILE(SECTAB) WITH_KEY(#SAVLVL1 #SAVLVL2)
VL_FBASBOB0000101300000000000001     EXECUTE    SUBROUTINE(ADD_LVL2)
VL_FBASBOB0000101400000000000001     ENDSELECT
VL_FBASBOB0000101500000000000001     ELSE
VL_FBASBOB0000101600000000000001     SELECT     FIELDS(*ALL) FROM_FILE(SECTAB) WITH_KEY(#SAVLVL1)
VL_FBASBOB0000101700000000000001     EXECUTE    SUBROUTINE(ADD_LVL2)
VL_FBASBOB0000101800000000000001     ENDSELECT
VL_FBASBOB0000101900000000000001     ENDIF
VL_FBASBOB0000102000000000000001     /* **********                                                         */
VL_FBASBOB0000102100000000000001     /* ********** Make detail list columns for level 2 object visible.    */
VL_FBASBOB0000102200000000000001     /* **********                                                         */
VL_FBASBOB0000102300000000000001     set        ( #lvcl_31 #lvcl_32 #lvcl_33 #lvcl_34 ) visible( false )
VL_FBASBOB0000102400000000000001     set        ( #lvcl_21 #lvcl_22 #lvcl_23 ) visible( true )
VL_FBASBOB0000102500000000000001     set        #lvcl_21 displayposition(1)
VL_FBASBOB0000102600000000000001     USE        BUILTIN(BCONCAT) WITH_ARGS('''Sections of ''' #DEPTDESC) TO_GET(#LISTCAP)
VL_FBASBOB0000102700000000000001     set        #labl_2 caption(#listcap)
VL_FBASBOB0000102800000000000001     ENDROUTINE
VL_FBASBOB0000102900000000000001     /* **********                                                         */
VL_FBASBOB0000103000000000000001     SUBROUTINE NAME(ADD_LVL2)
VL_FBASBOB0000103100000000000001     ADD_ENTRY  TO_LIST(#LTVW_1)
VL_FBASBOB0000103200000000000001     CHANGE     FIELD(#STD_COUNT) TO('#STD_COUNT + 1')
VL_FBASBOB0000103300000000000001     ENDROUTINE
VL_FBASBOB0000103400000000000001     /* **********                                                         */
VL_FBASBOB0000103500000000000001     /* ********** Monitor for changes to level 2 objects in appropriate   */
VL_FBASBOB0000103600000000000001     /* ********** detail forms.                                           */
VL_FBASBOB0000103700000000000001     /* **********                                                         */
VL_FBASBOB0000103800000000000001     EVTROUTINE HANDLING(#vl_dem22.sect_insert)
VL_FBASBOB0000103900000000000001     MESSAGE    MSGTXT('Section inserted')
VL_FBASBOB0000104000000000000001     CHANGE     FIELD(#DEPTMENT) TO('#VL_DEM22.DEPT_VALUE')
VL_FBASBOB0000104100000000000001     CHANGE     FIELD(#SECTION) TO('#VL_DEM22.SECT_VALUE')
VL_FBASBOB0000104200000000000001     CHANGE     FIELD(#SECDESC) TO('#VL_DEM22.SECD_VALUE')
VL_FBASBOB0000104300000000000001     ADD_ENTRY  TO_LIST(#TREEVIEW)
VL_FBASBOB0000104400000000000001     ENDROUTINE
VL_FBASBOB0000104500000000000001     /* **********                                                         */
VL_FBASBOB0000104600000000000001     /* ********** Montior for any events which must be notified between   */
VL_FBASBOB0000104700000000000001     /* ********** member forms.                                           */
VL_FBASBOB0000104800000000000001     /* **********                                                         */
VL_FBASBOB0000104900000000000001     EVTROUTINE HANDLING( #vl_dem21<>.sect_sltd )
VL_FBASBOB0000105000000000000001     CHANGE     FIELD(#DEPTMENT) TO('#VL_DEM21<#DEPTMENT>.DEPT_VALUE')
VL_FBASBOB0000105100000000000001     CHANGE     FIELD(#SECTION) TO('#VL_DEM21<#DEPTMENT>.SECT_VALUE')
VL_FBASBOB0000105200000000000001     set        #vl_dem22 sect_graph( Y )
VL_FBASBOB0000105300000000000001     set        #vl_dem22 dept_value( #deptment )
VL_FBASBOB0000105400000000000001     set        #vl_dem22 sect_value( #section )
VL_FBASBOB0000105500000000000001     invoke     #vl_dem22.activateform
VL_FBASBOB0000105600000000000001     ENDROUTINE
VL_FBASBOB0000105700000000000001     /* **********                                                         */
VL_FBASBOB0000105800000000000001     /* **********                                                         */
VL_FBASBOB0000105900000000000001     /* ********** Level 3                                                 */
VL_FBASBOB0000106000000000000001     /* **********                                                         */
VL_FBASBOB0000106100000000000001     /* **********                                                         */
VL_FBASBOB0000106200000000000001     /* ********** Monitor for changes to level 3 objects in appropriate   */
VL_FBASBOB0000106300000000000001     /* ********** detail forms and notify other forms if required.        */
VL_FBASBOB0000106400000000000001     /* **********                                                         */
VL_FBASBOB0000106500000000000001     EVTROUTINE HANDLING(#vl_dem23.salary_changed)
VL_FBASBOB0000106600000000000001     CHANGE     FIELD(#EMPNO) TO('#VL_DEM23.EMP_VALUE')
VL_FBASBOB0000106700000000000001     FETCH      FIELDS(#DEPTMENT #SECTION) FROM_FILE(PSLMST) WITH_KEY(#EMPNO) VAL_ERROR(*NEXT)
VL_FBASBOB0000106800000000000001     IF_STATUS  IS(*OKAY)
VL_FBASBOB0000106900000000000001     invoke     #vl_dem21<#deptment>.activateform
VL_FBASBOB0000107000000000000001     set        #vl_dem21<#deptment> dept_value(#deptment)
VL_FBASBOB0000107100000000000001     invoke     #vl_dem22.activateform
VL_FBASBOB0000107200000000000001     set        #vl_dem22 dept_value(#deptment) sect_value(#section)
VL_FBASBOB0000107300000000000001     ENDIF
VL_FBASBOB0000107400000000000001     ENDROUTINE
VL_FBASBOB0000107500000000000001     /* **********                                                         */
VL_FBASBOB0000107600000000000001     SUBROUTINE NAME(CHK_LVL3)
VL_FBASBOB0000107700000000000001     /* **********                                                         */
VL_FBASBOB0000107800000000000001     /* ********** Check for child records of level 3 parent to            */
VL_FBASBOB0000107900000000000001     /* ********** enable/disable delete button and menu options.          */
VL_FBASBOB0000108000000000000001     /* **********                                                         */
VL_FBASBOB0000108100000000000001     CHECK_FOR  IN_FILE(PSLSKL) WITH_KEY(#EMPNO) VAL_ERROR(*NEXT)
VL_FBASBOB0000108200000000000001     IF_STATUS  IS(*EQUALKEY)
VL_FBASBOB0000108300000000000001     CHANGE     FIELD(#STD_COUNT) TO(1)
VL_FBASBOB0000108400000000000001     ELSE
VL_FBASBOB0000108500000000000001     CHANGE     FIELD(#STD_COUNT) TO(0)
VL_FBASBOB0000108600000000000001     ENDIF
VL_FBASBOB0000108700000000000001     ENDROUTINE
VL_FBASBOB0000108800000000000001     /* **********                                                         */
VL_FBASBOB0000108900000000000001     SUBROUTINE NAME(SET_DEL)
VL_FBASBOB0000109000000000000001     /* **********                                                         */
VL_FBASBOB0000109100000000000001     /* ********** This generic routine enables or disables the delete     */
VL_FBASBOB0000109200000000000001     /* ********** buttons and menu options according to the current value */
VL_FBASBOB0000109300000000000001     /* ********** of the count work field.                                */
VL_FBASBOB0000109400000000000001     /* **********                                                         */
VL_FBASBOB0000109500000000000001     IF         COND('#STD_COUNT *GT 0')
VL_FBASBOB0000109600000000000001     set        ( #mitm_4 #mip_dlt #spbn_del ) enabled(false)
VL_FBASBOB0000109700000000000001     ELSE
VL_FBASBOB0000109800000000000001     set        ( #mitm_4 #mip_dlt #spbn_del ) enabled(true)
VL_FBASBOB0000109900000000000001     ENDIF
VL_FBASBOB0000110000000000000001     ENDROUTINE
VL_FBASBOB0000110100000000000001     /* **********                                                         */
VL_FBASBOB0000110200000000000001     /* **********                                                         */
VL_FBASBOB0000110300000000000001     /* ********** Menu Options & Tool bar buttons.                        */
VL_FBASBOB0000110400000000000001     /* **********                                                         */
VL_FBASBOB0000110500000000000001     /* **********                                                         */
VL_FBASBOB0000110600000000000001     /* ********** Display current item details.                           */
VL_FBASBOB0000110700000000000001     /* **********                                                         */
VL_FBASBOB0000110800000000000001     EVTROUTINE HANDLING(#mip_dtl.click #mitm_5.click #treeview.doubleclick)
VL_FBASBOB0000110900000000000001     /* **********                                                         */
VL_FBASBOB0000111000000000000001     /* ********** Invoke the appropriate form to display the details of   */
VL_FBASBOB0000111100000000000001     /* ********** the current object.                                     */
VL_FBASBOB0000111200000000000001     /* ********** Replace the key fields and forms with the appropriate   */
VL_FBASBOB0000111300000000000001     /* ********** names.                                                  */
VL_FBASBOB0000111400000000000001     /* **********                                                         */
VL_FBASBOB0000111500000000000001     IF         COND('#EMPNO *NE *BLANKS')
VL_FBASBOB0000111600000000000001     invoke     #vl_dem23.activateform
VL_FBASBOB0000111700000000000001     set        #vl_dem23 dept_value(#deptment) sect_value(#section) emp_value(#empno)
VL_FBASBOB0000111800000000000001     MESSAGE    MSGTXT('Invoking employee form')
VL_FBASBOB0000111900000000000001     ELSE
VL_FBASBOB0000112000000000000001     IF         COND('#SECTION *NE *BLANKS')
VL_FBASBOB0000112100000000000001     invoke     #vl_dem22.activateform
VL_FBASBOB0000112200000000000001     set        #vl_dem22 dept_value(#deptment) sect_value(#section) top(#std_num)
VL_FBASBOB0000112300000000000001     MESSAGE    MSGTXT('Invoking section form')
VL_FBASBOB0000112400000000000001     ELSE
VL_FBASBOB0000112500000000000001     IF         COND('#DEPTMENT *NE *BLANKS')
VL_FBASBOB0000112600000000000001     /* **********                                                         */
VL_FBASBOB0000112700000000000001     /* ********** As the level 1 detail form is defined as a collection   */
VL_FBASBOB0000112800000000000001     /* ********** adjust the form position each time a new instance is    */
VL_FBASBOB0000112900000000000001     /* ********** invoked so that all instances of the form are visible.  */
VL_FBASBOB0000113000000000000001     /* **********                                                         */
VL_FBASBOB0000113100000000000001     EXECUTE    SUBROUTINE(DPTFRMTOP)
VL_FBASBOB0000113200000000000001     set        #vl_dem21<#deptment> dept_left(#std_qty) dept_top(#std_num) dept_value(#deptment)
VL_FBASBOB0000113300000000000001     invoke     #vl_dem21<#deptment>.activateform
VL_FBASBOB0000113400000000000001     MESSAGE    MSGTXT('Invoking department form')
VL_FBASBOB0000113500000000000001     ENDIF
VL_FBASBOB0000113600000000000001     ENDIF
VL_FBASBOB0000113700000000000001     ENDIF
VL_FBASBOB0000113800000000000001     ENDROUTINE
VL_FBASBOB0000113900000000000001     /* **********                                                         */
VL_FBASBOB0000114000000000000001     /* ********** Delete current item.                                    */
VL_FBASBOB0000114100000000000001     /* ********** Check the tree view level.                              */
VL_FBASBOB0000114200000000000001     /* ********** Replace the file processing with the required names.    */
VL_FBASBOB0000114300000000000001     /* ********** Delete menu options and tool bar button have been       */
VL_FBASBOB0000114400000000000001     /* ********** enabled after checking that the current item can be     */
VL_FBASBOB0000114500000000000001     /* ********** deleted, but check that the object has been deleted     */
VL_FBASBOB0000114600000000000001     /* ********** from the file before deleting from the tree.            */
VL_FBASBOB0000114700000000000001     /* **********                                                         */
VL_FBASBOB0000114800000000000001     EVTROUTINE HANDLING( #mip_dlt.click #mitm_4.click #spbn_del.click )
VL_FBASBOB0000114900000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 1')
VL_FBASBOB0000115000000000000001     DELETE     FROM_FILE(DEPTAB) WITH_KEY(#DEPTMENT) VAL_ERROR(*NEXT)
VL_FBASBOB0000115100000000000001     IF_STATUS  IS(*OKAY)
VL_FBASBOB0000115200000000000001     DLT_ENTRY  FROM_LIST(#TREEVIEW)
VL_FBASBOB0000115300000000000001     MESSAGE    MSGTXT('Department deleted successfully')
VL_FBASBOB0000115400000000000001     ENDIF
VL_FBASBOB0000115500000000000001     ELSE
VL_FBASBOB0000115600000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 2')
VL_FBASBOB0000115700000000000001     DELETE     FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT #SECTION) VAL_ERROR(*NEXT)
VL_FBASBOB0000115800000000000001     IF_STATUS  IS(*OKAY)
VL_FBASBOB0000115900000000000001     DLT_ENTRY  FROM_LIST(#TREEVIEW)
VL_FBASBOB0000116000000000000001     MESSAGE    MSGTXT('Section deleted successfully')
VL_FBASBOB0000116100000000000001     ENDIF
VL_FBASBOB0000116200000000000001     ELSE
VL_FBASBOB0000116300000000000001     IF         COND('#TREEVIEW.CURRENTITEM.LEVEL *EQ 3')
VL_FBASBOB0000116400000000000001     DLT_ENTRY  FROM_LIST(#TREEVIEW)
VL_FBASBOB0000116500000000000001     DELETE     FROM_FILE(PSLMST) WITH_KEY(#EMPNO) VAL_ERROR(*NEXT)
VL_FBASBOB0000116600000000000001     IF_STATUS  IS(*OKAY)
VL_FBASBOB0000116700000000000001     DLT_ENTRY  FROM_LIST(#TREEVIEW)
VL_FBASBOB0000116800000000000001     MESSAGE    MSGTXT('Employee deleted successfully')
VL_FBASBOB0000116900000000000001     ENDIF
VL_FBASBOB0000117000000000000001     ENDIF
VL_FBASBOB0000117100000000000001     ENDIF
VL_FBASBOB0000117200000000000001     ENDIF
VL_FBASBOB0000117300000000000001     ENDROUTINE
VL_FBASBOB0000117400000000000001     /* **********                                                         */
VL_FBASBOB0000117500000000000001     /* ********** The refresh menu option reloads level 1 of the tree.    */
VL_FBASBOB0000117600000000000001     /* **********                                                         */
VL_FBASBOB0000117700000000000001     EVTROUTINE HANDLING(#mitm_rfsh.click)
VL_FBASBOB0000117800000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_FBASBOB0000117900000000000001     ENDROUTINE
VL_FBASBOB0000118000000000000001     /* **********                                                         */
VL_FBASBOB0000118100000000000001     /* ********** Invoke the Business Object Filter form to select data   */
VL_FBASBOB0000118200000000000001     /* ********** for display.                                            */
VL_FBASBOB0000118300000000000001     /* **********                                                         */
VL_FBASBOB0000118400000000000001     EVTROUTINE HANDLING(#MITM_FLTR.Click)
VL_FBASBOB0000118500000000000001     invoke     #vl_dem28.activateform
VL_FBASBOB0000118600000000000001     ENDROUTINE
VL_FBASBOB0000118700000000000001     /* **********                                                         */
VL_FBASBOB0000118800000000000001     /* ********** These 3 routines invoke the utility server connection   */
VL_FBASBOB0000118900000000000001     /* ********** form to connect and disconnect.                         */
VL_FBASBOB0000119000000000000001     /* ********** The data is refreshed after connection to the server or */
VL_FBASBOB0000119100000000000001     /* ********** after disconnect from the local data base.              */
VL_FBASBOB0000119200000000000001     /* **********                                                         */
VL_FBASBOB0000119300000000000001     EVTROUTINE HANDLING(#MITM_cnct.Click)
VL_FBASBOB0000119400000000000001     invoke     #vl_dem27.uconnect
VL_FBASBOB0000119500000000000001     ENDROUTINE
VL_FBASBOB0000119600000000000001     /* **********                                                         */
VL_FBASBOB0000119700000000000001     EVTROUTINE HANDLING(#vl_dem27.uConnectionCreated #vl_dem27.uConnectionDestroyed)
VL_FBASBOB0000119800000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_FBASBOB0000119900000000000001     ENDROUTINE
VL_FBASBOB0000120000000000000001     /* **********                                                         */
VL_FBASBOB0000120100000000000001     EVTROUTINE HANDLING(#MITM_dcnct.Click)
VL_FBASBOB0000120200000000000001     invoke     #vl_dem27.udisconnect
VL_FBASBOB0000120300000000000001     ENDROUTINE
VL_FBASBOB0000120400000000000001     /* **********                                                         */
VL_FBASBOB0000120500000000000001     /* ********** The cut and paste menu options and buttons only apply   */
VL_FBASBOB0000120600000000000001     /* ********** to the tree.                                            */
VL_FBASBOB0000120700000000000001     /* ********** The cut saves the keys of the selected object           */
VL_FBASBOB0000120800000000000001     /* ********** but the actual cut does not happen until the paste      */
VL_FBASBOB0000120900000000000001     /* ********** option is used.                                         */
VL_FBASBOB0000121000000000000001     /* ********** Replace the key field names with the appropriate names. */
VL_FBASBOB0000121100000000000001     /* **********                                                         */
VL_FBASBOB0000121200000000000001     EVTROUTINE HANDLING( #SPBN_CUT.Click #mitm_cut.click )
VL_FBASBOB0000121300000000000001     CHANGE     FIELD(#CUTOBJ) TO(Y)
VL_FBASBOB0000121400000000000001     set        ( #mitm_pst #spbn_pst ) enabled( true )
VL_FBASBOB0000121500000000000001     CHANGE     FIELD(#STD_ENTRY) TO('#TREEVIEW.FOCUSITEM.ENTRY')
VL_FBASBOB0000121600000000000001     CHANGE     FIELD(#OLDLVL1) TO(#DEPTMENT)
VL_FBASBOB0000121700000000000001     CHANGE     FIELD(#OLDLVL2) TO(#SECTION)
VL_FBASBOB0000121800000000000001     CHANGE     FIELD(#OLDLVL3) TO(#EMPNO)
VL_FBASBOB0000121900000000000001     ENDROUTINE
VL_FBASBOB0000122000000000000001     /* **********                                                         */
VL_FBASBOB0000122100000000000001     /* ********** When the paste menu options or buttons used check if    */
VL_FBASBOB0000122200000000000001     /* ********** any objects have been selected.                         */
VL_FBASBOB0000122300000000000001     /* ********** The cut saves the keys of the selected object           */
VL_FBASBOB0000122400000000000001     /* ********** but the actual cut does not happen until the paste      */
VL_FBASBOB0000122500000000000001     /* ********** option is used.                                         */
VL_FBASBOB0000122600000000000001     /* ********** Replace the key field names with the appropriate names. */
VL_FBASBOB0000122700000000000001     /* **********                                                         */
VL_FBASBOB0000122800000000000001     EVTROUTINE HANDLING( #SPBN_PST.Click #mitm_pst.click )
VL_FBASBOB0000122900000000000001     IF         COND('#CUTOBJ *EQ Y')
VL_FBASBOB0000123000000000000001     IF         COND('#TREEVIEW.FOCUSITEM.LEVEL *EQ 1')
VL_FBASBOB0000123100000000000001     EXECUTE    SUBROUTINE(INS_LVL2)
VL_FBASBOB0000123200000000000001     ELSE
VL_FBASBOB0000123300000000000001     IF         COND('#TREEVIEW.FOCUSITEM.LEVEL *EQ 2')
VL_FBASBOB0000123400000000000001     EXECUTE    SUBROUTINE(INS_LVL3)
VL_FBASBOB0000123500000000000001     ENDIF
VL_FBASBOB0000123600000000000001     ENDIF
VL_FBASBOB0000123700000000000001     ENDIF
VL_FBASBOB0000123800000000000001     ENDROUTINE
VL_FBASBOB0000123900000000000001     /* **********                                                         */
VL_FBASBOB0000124000000000000001     /* ********** Paste level 2 object to new level 1 parent.             */
VL_FBASBOB0000124100000000000001     /* ********** Replace file and key fields with appropriate details.   */
VL_FBASBOB0000124200000000000001     /* **********                                                         */
VL_FBASBOB0000124300000000000001     SUBROUTINE NAME(INS_LVL2)
VL_FBASBOB0000124400000000000001     CHECK_FOR  IN_FILE(SECTAB) WITH_KEY(#DEPTMENT #OLDLVL2) VAL_ERROR(*NEXT)
VL_FBASBOB0000124500000000000001     CHANGE     FIELD(#NEWLVL1) TO(#DEPTMENT)
VL_FBASBOB0000124600000000000001     IF_STATUS  IS(*EQUALKEY)
VL_FBASBOB0000124700000000000001     MESSAGE    MSGTXT('''Section already exists in target department''')
VL_FBASBOB0000124800000000000001     ELSE
VL_FBASBOB0000124900000000000001     UPDATE     FIELDS(#DEPTMENT) IN_FILE(SECTAB) WITH_KEY(#OLDLVL1 #OLDLVL2)
VL_FBASBOB0000125000000000000001     DLT_ENTRY  NUMBER(#STD_ENTRY) FROM_LIST(#TREEVIEW)
VL_FBASBOB0000125100000000000001     /* **********                                                         */
VL_FBASBOB0000125200000000000001     SELECT     FIELDS(#DEPTMENT #EMPNO) FROM_FILE(PSLMST1) WITH_KEY(#OLDLVL1 #OLDLVL2)
VL_FBASBOB0000125300000000000001     CHANGE     FIELD(#DEPTMENT) TO(#NEWLVL1)
VL_FBASBOB0000125400000000000001     UPDATE     FIELDS(#DEPTMENT) IN_FILE(PSLMST) WITH_KEY(#EMPNO)
VL_FBASBOB0000125500000000000001     ENDSELECT
VL_FBASBOB0000125600000000000001     /* **********                                                         */
VL_FBASBOB0000125700000000000001     /* ********** Reset flag to indicate no details to be pasted.         */
VL_FBASBOB0000125800000000000001     /* **********                                                         */
VL_FBASBOB0000125900000000000001     CHANGE     FIELD(#CUTOBJ) TO(N)
VL_FBASBOB0000126000000000000001     ENDIF
VL_FBASBOB0000126100000000000001     ENDROUTINE
VL_FBASBOB0000126200000000000001     /* **********                                                         */
VL_FBASBOB0000126300000000000001     /* ********** Paste level 3 object to new parent.                     */
VL_FBASBOB0000126400000000000001     /* ********** Replace file and key fields with appropriate details.   */
VL_FBASBOB0000126500000000000001     /* ********** Reset flag to indicate no details to be pasted.         */
VL_FBASBOB0000126600000000000001     /* **********                                                         */
VL_FBASBOB0000126700000000000001     SUBROUTINE NAME(INS_LVL3)
VL_FBASBOB0000126800000000000001     CHECK_FOR  IN_FILE(PSLMST) WITH_KEY(#OLDLVL3) VAL_ERROR(*NEXT)
VL_FBASBOB0000126900000000000001     IF_STATUS  IS(*EQUALKEY)
VL_FBASBOB0000127000000000000001     UPDATE     FIELDS(#DEPTMENT #SECTION) IN_FILE(PSLMST) WITH_KEY(#OLDLVL3)
VL_FBASBOB0000127100000000000001     DLT_ENTRY  NUMBER(#STD_ENTRY) FROM_LIST(#TREEVIEW)
VL_FBASBOB0000127200000000000001     CHANGE     FIELD(#CUTOBJ) TO(N)
VL_FBASBOB0000127300000000000001     ENDIF
VL_FBASBOB0000127400000000000001     ENDROUTINE
VL_FBASBOB0000127500000000000001     /* **********                                                         */
VL_FBASBOB0000127600000000000001     /* ********** Menu option and tool bar button to exit.                */
VL_FBASBOB0000127700000000000001     /* **********                                                         */
VL_FBASBOB0000127800000000000001     EVTROUTINE HANDLING(#mitm_7.click #spbn_cls.click)
VL_FBASBOB0000127900000000000001     EXECUTE    SUBROUTINE(CLOSEFORMS)
VL_FBASBOB0000128000000000000001     EXIT
VL_FBASBOB0000128100000000000001     ENDROUTINE
VL_FBASBOB0000128200000000000001     /* **********                                                         */
VL_FBASBOB0000128300000000000001     /* ********** If the save menu option or tool bar button is used      */
VL_FBASBOB0000128400000000000001     /* ********** notify all member forms to save pending changes.        */
VL_FBASBOB0000128500000000000001     /* ********** Change form names to the appropriate Business Object    */
VL_FBASBOB0000128600000000000001     /* ********** Detail forms.                                           */
VL_FBASBOB0000128700000000000001     /* **********                                                         */
VL_FBASBOB0000128800000000000001     EVTROUTINE HANDLING( #mi_sav.click #spbn_sav.click )
VL_FBASBOB0000128900000000000001     invoke     #vl_dem21<>.save_depart
VL_FBASBOB0000129000000000000001     invoke     #vl_dem22.save_section
VL_FBASBOB0000129100000000000001     invoke     #vl_dem23.save_employ
VL_FBASBOB0000129200000000000001     ENDROUTINE
VL_FBASBOB0000129300000000000001     /* **********                                                         */
VL_FBASBOB0000129400000000000001     /* ********** Form Events                                             */
VL_FBASBOB0000129500000000000001     /* **********                                                         */
VL_FBASBOB0000129600000000000001     /* ********** The timer acts as a layout manager emulator resizing    */
VL_FBASBOB0000129700000000000001     /* ********** components when the form is resized.                    */
VL_FBASBOB0000129800000000000001     /* **********                                                         */
VL_FBASBOB0000129900000000000001     EVTROUTINE HANDLING(#TIMR_1.Tick)
VL_FBASBOB0000130000000000000001     CHANGE     FIELD(#WHEIGHT) TO('#COM_OWNER.HEIGHT')
VL_FBASBOB0000130100000000000001     CHANGE     FIELD(#WWIDTH) TO('#COM_OWNER.WIDTH')
VL_FBASBOB0000130200000000000001     IF         COND('(#WWIDTH *NE #PWIDTH) *OR (#WHEIGHT *NE #PHEIGHT)')
VL_FBASBOB0000130300000000000001     CHANGE     FIELD(#PHEIGHT) TO(#WHEIGHT)
VL_FBASBOB0000130400000000000001     CHANGE     FIELD(#PWIDTH) TO(#WWIDTH)
VL_FBASBOB0000130500000000000001     CHANGE     FIELD(#WHEIGHT) TO('#WHEIGHT - #XHEIGHT')
VL_FBASBOB0000130600000000000001     CHANGE     FIELD(#WWIDTH) TO('#WWIDTH - #XWIDTH')
VL_FBASBOB0000130700000000000001     set        (#ltvw_1) width(#wwidth)
VL_FBASBOB0000130800000000000001     CHANGE     FIELD(#WWIDTH) TO('#WWIDTH + 4')
VL_FBASBOB0000130900000000000001     set        (#lsttl2) width(#wwidth)
VL_FBASBOB0000131000000000000001     set        (#ltvw_1 #treeview) height(#wheight)
VL_FBASBOB0000131100000000000001     CHANGE     FIELD(#WWIDTH) TO('#PWIDTH - 7')
VL_FBASBOB0000131200000000000001     set        #tools width(#wwidth)
VL_FBASBOB0000131300000000000001     ENDIF
VL_FBASBOB0000131400000000000001     ENDROUTINE
VL_FBASBOB0000131500000000000001     /* **********                                                         */
VL_FBASBOB0000131600000000000001     /* ********** When closing the owner (top) form close all members as  */
VL_FBASBOB0000131700000000000001     /* ********** well.                                                   */
VL_FBASBOB0000131800000000000001     /* **********                                                         */
VL_FBASBOB0000131900000000000001     EVTROUTINE HANDLING(#COM_OWNER.CloseQuery)
VL_FBASBOB0000132000000000000001     EXECUTE    SUBROUTINE(CLOSEFORMS)
VL_FBASBOB0000132100000000000001     ENDROUTINE
VL_FBASBOB0000132200000000000001     /* **********                                                         */
VL_FBASBOB0000132300000000000001     SUBROUTINE NAME(CLOSEFORMS)
VL_FBASBOB0000132400000000000001     /* **********                                                         */
VL_FBASBOB0000132500000000000001     /* ********** The first close statement handles all instances of the  */
VL_FBASBOB0000132600000000000001     /* ********** named form. This form has been defined as a keyed       */
VL_FBASBOB0000132700000000000001     /* ********** collection (multi instance form).                       */
VL_FBASBOB0000132800000000000001     /* ********** The other forms are single instance forms.              */
VL_FBASBOB0000132900000000000001     /* ********** Rename these forms to your form names.                  */
VL_FBASBOB0000133000000000000001     /* **********                                                         */
VL_FBASBOB0000133100000000000001     invoke     #vl_dem21<>.close_save
VL_FBASBOB0000133200000000000001     invoke     #vl_dem22.close_save
VL_FBASBOB0000133300000000000001     invoke     #vl_dem23.close_save
VL_FBASBOB0000133400000000000001     invoke     #vl_dem27.udisconnect
VL_FBASBOB0000133500000000000001     invoke     #vl_dem28.closeform
VL_FBASBOB0000133600000000000001     ENDROUTINE
VL_FBASBOB0000133700000000000001     /* **********                                                         */
VL_FBASBOB0000133800000000000001     /* ********** Monitor for the filter.                                 */
VL_FBASBOB0000133900000000000001     /* ********** Change the filter form name to the name of your filter. */
VL_FBASBOB0000134000000000000001     /* **********                                                         */
VL_FBASBOB0000134100000000000001     EVTROUTINE HANDLING(#VL_DEM28.ApplyFilter)
VL_FBASBOB0000134200000000000001     /* **********                                                         */
VL_FBASBOB0000134300000000000001     /* ********** Initialise the variables to hold the filter values.     */
VL_FBASBOB0000134400000000000001     /* **********                                                         */
VL_FBASBOB0000134500000000000001     EXECUTE    SUBROUTINE(INIT_VALUE)
VL_FBASBOB0000134600000000000001     /* **********                                                         */
VL_FBASBOB0000134700000000000001     /* ********** Get the filter values.                                  */
VL_FBASBOB0000134800000000000001     /* **********                                                         */
VL_FBASBOB0000134900000000000001     CHANGE     FIELD(#STD_LEVEL) TO('#VL_DEM28.LEVEL_VALUE')
VL_FBASBOB0000135000000000000001     CHANGE     FIELD(#FLTRLVL1) TO('#VL_DEM28.DEPT_VALUE')
VL_FBASBOB0000135100000000000001     CHANGE     FIELD(#FLTRLVL2) TO('#VL_DEM28.SECT_VALUE')
VL_FBASBOB0000135200000000000001     CHANGE     FIELD(#STD_SORT) TO('#VL_DEM28.SORT_VALUE')
VL_FBASBOB0000135300000000000001     CHANGE     FIELD(#STD_DIRCT) TO('#VL_DEM28.DIRECTION_VALUE')
VL_FBASBOB0000135400000000000001     CHANGE     FIELD(#STD_DATE) TO('#VL_DEM28.DATE_VALUE')
VL_FBASBOB0000135500000000000001     CHANGE     FIELD(#STD_NUM) TO('#VL_DEM28.SALARY_VALUE')
VL_FBASBOB0000135600000000000001     CHANGE     FIELD(#STD_CMPAR) TO('#VL_DEM28.COMPARE_VALUE')
VL_FBASBOB0000135700000000000001     CHANGE     FIELD(#STD_FILTR) TO(Y)
VL_FBASBOB0000135800000000000001     /* **********                                                         */
VL_FBASBOB0000135900000000000001     /* ********** Set display to view the tree or list according filter   */
VL_FBASBOB0000136000000000000001     /* ********** choice and refresh the details.                         */
VL_FBASBOB0000136100000000000001     /* **********                                                         */
VL_FBASBOB0000136200000000000001     IF         COND('( #STD_LEVEL *EQ 1 ) OR ( #STD_LEVEL *EQ 2 )')
VL_FBASBOB0000136300000000000001     set        #treeview visible( true )
VL_FBASBOB0000136400000000000001     set        #lvl3lst visible( false )
VL_FBASBOB0000136500000000000001     set        #cmbx_1 enabled( True )
VL_FBASBOB0000136600000000000001     EXECUTE    SUBROUTINE(LOAD_LVL1)
VL_FBASBOB0000136700000000000001     ELSE
VL_FBASBOB0000136800000000000001     IF         COND('#STD_LEVEL *EQ 3')
VL_FBASBOB0000136900000000000001     set        #treeview visible( false )
VL_FBASBOB0000137000000000000001     set        #lvl3lst visible( true )
VL_FBASBOB0000137100000000000001     set        #cmbx_1 enabled( False )
VL_FBASBOB0000137200000000000001     EXECUTE    SUBROUTINE(LD_LVL3LST)
VL_FBASBOB0000137300000000000001     ENDIF
VL_FBASBOB0000137400000000000001     ENDIF
VL_FBASBOB0000137500000000000001     /* **********                                                         */
VL_FBASBOB0000137600000000000001     /* ********** Close the filter form.                                  */
VL_FBASBOB0000137700000000000001     /* **********                                                         */
VL_FBASBOB0000137800000000000001     invoke     #vl_dem28.closeform
VL_FBASBOB0000137900000000000001     ENDROUTINE
VL_FBASBOB0000138000000000000001     /* **********                                                         */
VL_FBASBOB0000138100000000000001     SUBROUTINE NAME(INIT_VALUE)
VL_FBASBOB0000138200000000000001     /* **********                                                         */
VL_FBASBOB0000138300000000000001     /* ********** Initialise the variables to hold the filter values.     */
VL_FBASBOB0000138400000000000001     /* **********                                                         */
VL_FBASBOB0000138500000000000001     CHANGE     FIELD(#STD_LEVEL #SAVLVL1 #SAVLVL2 #STD_SORT #STD_DIRCT #STD_DATE #STD_NUM #STD_CMPAR #STD_FILTR) TO(*NULL)
VL_FBASBOB0000138600000000000001     ENDROUTINE
VL_FBASBOB0000138700000000000001     /* **********                                                         */
VL_FBASBOB0000138800000000000001     @@ROUTEEND
VL_FBASBOB0000138900000000000001     END_COM
VL_FBASBOB0000139000000000000001E99: @@LABEL
VL_FBASBOD0000000100000000000001     @@QUESTION PROMPT('Do you want to continue?') ANSWER(@@CANS001) EXTEND('This template produces a Business Object Detail skeleton.' 'It is based on the demonstration personnel system.' 'Please read the comments in the code and replace' 'the field and file names as required.' 'See help for further information.') LOWER(*NO) HELPIDS(HELP010)
VL_FBASBOD0000000200000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(E99)
VL_FBASBOD0000000300000000000001     @@ROUTEBEG
VL_FBASBOD0000000400000000000001     BEGIN_COM  BORDERICONS(Minimize+SystemMenu) FRAMESTYLE(Dialog) HEIGHT(426) LEFT(304) TOP(114) VISUALSTYLE(#VS_NORM) WIDTH(455)
VL_FBASBOD0000000500000000000001     @@ROUTEDEF
VL_FBASBOD0000000600000000000001     /* **********                                                         */
VL_FBASBOD0000000700000000000001     /* ********** Business Object Detail Template                         */
VL_FBASBOD0000000800000000000001     /* ********** Version  1.0                                            */
VL_FBASBOD0000000900000000000001     /* **********                                                         */
VL_FBASBOD0000001000000000000001     /* ********** Tabsheet                                                */
VL_FBASBOD0000001100000000000001     DEFINE_COM CLASS(#PRIM_TAB) NAME(#FOLDER) DISPLAYPOSITION(1) HEIGHT(321) LEFT(8) PARENT(#COM_OWNER) RAGGEDRIGHT(False) TABPOSITION(2) WIDTH(433)
VL_FBASBOD0000001200000000000001     /* **********                                                         */
VL_FBASBOD0000001300000000000001     /* ********** Change caption of tabsheet as required.                 */
VL_FBASBOD0000001400000000000001     /* ********** Replace surname and section fields on tabsheet.         */
VL_FBASBOD0000001500000000000001     /* ********** Add tabsheets for each logical group of fields to be    */
VL_FBASBOD0000001600000000000001     /* ********** displayed.                                              */
VL_FBASBOD0000001700000000000001     /* **********                                                         */
VL_FBASBOD0000001800000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_1) CAPTION('&Detail 1') DISPLAYPOSITION(1) HEIGHT(295) LEFT(4) PARENT(#FOLDER) TABPOSITION(1) TABSTOP(False) TOP(22) WIDTH(425)
VL_FBASBOD0000001900000000000001     DEFINE_COM CLASS(#EMPNO.Visual) NAME(#EMPNO) DISPLAYPOSITION(2) HEIGHT(19) LEFT(24) PARENT(#TBSH_2) TABPOSITION(2) TOP(56) WIDTH(209)
VL_FBASBOD0000002000000000000001     DEFINE_COM CLASS(#SURNAME.Visual) NAME(#SURNAME) DISPLAYPOSITION(1) HEIGHT(19) LEFT(24) PARENT(#TBSH_1) TABPOSITION(1) TOP(64) WIDTH(185)
VL_FBASBOD0000002100000000000001     /* **********                                                         */
VL_FBASBOD0000002200000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_2) CAPTION('&Detail 2') DISPLAYPOSITION(2) HEIGHT(295) LEFT(4) PARENT(#FOLDER) TABPOSITION(2) TABSTOP(False) TOP(22) WIDTH(425)
VL_FBASBOD0000002300000000000001     DEFINE_COM CLASS(#SECTION.Visual) NAME(#SECTION) DISPLAYPOSITION(1) HEIGHT(19) LEFT(24) PARENT(#TBSH_2) TABPOSITION(1) TOP(96) WIDTH(324)
VL_FBASBOD0000002400000000000001     DEFINE_COM CLASS(#SECDESC.Visual) NAME(#SECDESC) DISPLAYPOSITION(3) HEIGHT(19) LEFT(24) PARENT(#TBSH_2) TABPOSITION(3) TOP(137) WIDTH(324)
VL_FBASBOD0000002500000000000001     /* **********                                                         */
VL_FBASBOD0000002600000000000001     /* ********** The save button saves all outstanding changes on ALL    */
VL_FBASBOD0000002700000000000001     /* ********** tabsheets.                                              */
VL_FBASBOD0000002800000000000001     /* ********** The refresh button reloads all fields on the tabsheets  */
VL_FBASBOD0000002900000000000001     /* ********** from the data base which will clear all changes since   */
VL_FBASBOD0000003000000000000001     /* ********** the last save.                                          */
VL_FBASBOD0000003100000000000001     /* **********                                                         */
VL_FBASBOD0000003200000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_SAV) CAPTION(&Save) DISPLAYPOSITION(3) LEFT(272) PARENT(#COM_OWNER) TABPOSITION(3) TOP(344)
VL_FBASBOD0000003300000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_RFR) CAPTION(&Refresh) DISPLAYPOSITION(4) LEFT(360) PARENT(#COM_OWNER)TABPOSITION(4) TOP(344)
VL_FBASBOD0000003400000000000001     /* ********** Status bar definition.                                  */
VL_FBASBOD0000003500000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) DISPLAYPOSITION(2) HEIGHT(25) LEFT(0) MESSAGEPOSITION(1) PARENT(#COM_OWNER) TABPOSITION(1) TABSTOP(False) TOP(374) WIDTH(447)
VL_FBASBOD0000003600000000000001     /* **********                                                         */
VL_FBASBOD0000003700000000000001     DEFINE     FIELD(#UPDREQD) TYPE(*CHAR) LENGTH(1) DEFAULT(N)
VL_FBASBOD0000003800000000000001     DEFINE     FIELD(#INSREQD) TYPE(*CHAR) LENGTH(1) DEFAULT(N)
VL_FBASBOD0000003900000000000001     /* **********                                                         */
VL_FBASBOD0000004000000000000001     /* ********** Published properties set by owner form.                 */
VL_FBASBOD0000004100000000000001     /* ********** Replace empno with appropriate key field.               */
VL_FBASBOD0000004200000000000001     /* **********                                                         */
VL_FBASBOD0000004300000000000001     define_pty name(key_value) set(next_key) get(*auto #empno)
VL_FBASBOD0000004400000000000001     /* **********                                                         */
VL_FBASBOD0000004500000000000001     /* ********** Published events to indicate changed or new details     */
VL_FBASBOD0000004600000000000001     /* **********                                                         */
VL_FBASBOD0000004700000000000001     define_evt dtl_insert
VL_FBASBOD0000004800000000000001     define_evt dtl_chgd
VL_FBASBOD0000004900000000000001     /* **********                                                         */
VL_FBASBOD0000005000000000000001     @@ROUTERTN
VL_FBASBOD0000005100000000000001     EVTROUTINE HANDLING( #com_owner.Initialize )
VL_FBASBOD0000005200000000000001     /* **********                                                         */
VL_FBASBOD0000005300000000000001     /* ********** Initialise flags used to indicate pending updates and   */
VL_FBASBOD0000005400000000000001     /* ********** new details.                                            */
VL_FBASBOD0000005500000000000001     /* **********                                                         */
VL_FBASBOD0000005600000000000001     CHANGE     FIELD(#UPDREQD) TO(N)
VL_FBASBOD0000005700000000000001     CHANGE     FIELD(#INSREQD) TO(N)
VL_FBASBOD0000005800000000000001     ENDROUTINE
VL_FBASBOD0000005900000000000001     /* **********                                                         */
VL_FBASBOD0000006000000000000001     /* ********** Property routine to process next key.                   */
VL_FBASBOD0000006100000000000001     /* ********** Replace empno in the define_map with appropriate key    */
VL_FBASBOD0000006200000000000001     /* ********** field.                                                  */
VL_FBASBOD0000006300000000000001     /* **********                                                         */
VL_FBASBOD0000006400000000000001     ptyroutine name(next_key)
VL_FBASBOD0000006500000000000001     define_map *input class(#empno) name(#nxt_keyfld)
VL_FBASBOD0000006600000000000001     EXECUTE    SUBROUTINE(CHK_UPD)
VL_FBASBOD0000006700000000000001     /* **********                                                         */
VL_FBASBOD0000006800000000000001     /* ********** Replace empno with the appropriate key field.           */
VL_FBASBOD0000006900000000000001     /* **********                                                         */
VL_FBASBOD0000007000000000000001     CHANGE     FIELD(#EMPNO) TO('#NXT_KEYFLD.VALUE')
VL_FBASBOD0000007100000000000001     EXECUTE    SUBROUTINE(LOAD_KEY)
VL_FBASBOD0000007200000000000001     endroutine
VL_FBASBOD0000007300000000000001     /* **********                                                         */
VL_FBASBOD0000007400000000000001     SUBROUTINE NAME(LOAD_KEY)
VL_FBASBOD0000007500000000000001     /* **********                                                         */
VL_FBASBOD0000007600000000000001     /* ********** If no key has been provided set all fields to null and  */
VL_FBASBOD0000007700000000000001     /* ********** set flag to indicate a new record is to be inserted.    */
VL_FBASBOD0000007800000000000001     /* ********** Replace section with all the appropriate fields which   */
VL_FBASBOD0000007900000000000001     /* ********** may be updated.                                         */
VL_FBASBOD0000008000000000000001     /* ********** The key fields should be set to read only unless a new  */
VL_FBASBOD0000008100000000000001     /* ********** record is being created.                                */
VL_FBASBOD0000008200000000000001     /* **********                                                         */
VL_FBASBOD0000008300000000000001     IF         COND('#EMPNO *EQ *BLANKS')
VL_FBASBOD0000008400000000000001     CHANGE     FIELD(#INSREQD) TO(Y)
VL_FBASBOD0000008500000000000001     set        #empno readonly(false)
VL_FBASBOD0000008600000000000001     CHANGE     FIELD(#SECTION) TO(*NULL)
VL_FBASBOD0000008700000000000001     set        #phbn_sav enabled( true )
VL_FBASBOD0000008800000000000001     ELSE
VL_FBASBOD0000008900000000000001     /* **********                                                         */
VL_FBASBOD0000009000000000000001     /* ********** Else, set the key fields to read only.                  */
VL_FBASBOD0000009100000000000001     /* ********** Retrieve the details for the provided key.              */
VL_FBASBOD0000009200000000000001     /* ********** Replace file processing with appropriate file details.  */
VL_FBASBOD0000009300000000000001     /* **********                                                         */
VL_FBASBOD0000009400000000000001     set        #empno readonly( true )
VL_FBASBOD0000009500000000000001     set        #phbn_sav enabled( false )
VL_FBASBOD0000009600000000000001     FETCH      FIELDS(*ALL) FROM_FILE(PSLMST) WITH_KEY(#EMPNO)
VL_FBASBOD0000009700000000000001     ENDIF
VL_FBASBOD0000009800000000000001     ENDROUTINE
VL_FBASBOD0000009900000000000001     /* **********                                                         */
VL_FBASBOD0000010000000000000001     /* ********** Method routine to save pending changes.                 */
VL_FBASBOD0000010100000000000001     /* **********                                                         */
VL_FBASBOD0000010200000000000001     MTHROUTINE save_bus_obj
VL_FBASBOD0000010300000000000001     IF         COND('#UPDREQD *EQ Y')
VL_FBASBOD0000010400000000000001     EXECUTE    SUBROUTINE(UPD_BUSOBJ)
VL_FBASBOD0000010500000000000001     ENDIF
VL_FBASBOD0000010600000000000001     IF         COND('#INSREQD *EQ Y')
VL_FBASBOD0000010700000000000001     EXECUTE    SUBROUTINE(INS_BUSOBJ)
VL_FBASBOD0000010800000000000001     ENDIF
VL_FBASBOD0000010900000000000001     ENDROUTINE
VL_FBASBOD0000011000000000000001     /* **********                                                         */
VL_FBASBOD0000011100000000000001     /* ********** ======================================================= */
VL_FBASBOD0000011200000000000001     /* ********** Changed details                                         */
VL_FBASBOD0000011300000000000001     /* ********** ======================================================= */
VL_FBASBOD0000011400000000000001     /* **********                                                         */
VL_FBASBOD0000011500000000000001     /* ********** Monitor all fields which can change.                    */
VL_FBASBOD0000011600000000000001     /* ********** Set flag to indicate update required if if this is not  */
VL_FBASBOD0000011700000000000001     /* ********** a new record.                                           */
VL_FBASBOD0000011800000000000001     /* ********** Enabled the save push button.                           */
VL_FBASBOD0000011900000000000001     /* **********                                                         */
VL_FBASBOD0000012000000000000001     EVTROUTINE ( #section.changed #secdesc.changed )
VL_FBASBOD0000012100000000000001     IF         COND('#INSREQD *NE Y')
VL_FBASBOD0000012200000000000001     CHANGE     FIELD(#UPDREQD) TO(Y)
VL_FBASBOD0000012300000000000001     ENDIF
VL_FBASBOD0000012400000000000001     set        #phbn_sav enabled(true)
VL_FBASBOD0000012500000000000001     ENDROUTINE
VL_FBASBOD0000012600000000000001     /* **********                                                         */
VL_FBASBOD0000012700000000000001     /* ********** When the save push button is clicked call the           */
VL_FBASBOD0000012800000000000001     /* ********** appropriate routine to save the current details.        */
VL_FBASBOD0000012900000000000001     /* **********                                                         */
VL_FBASBOD0000013000000000000001     EVTROUTINE #phbn_sav.click
VL_FBASBOD0000013100000000000001     IF         COND('#UPDREQD *EQ Y')
VL_FBASBOD0000013200000000000001     EXECUTE    SUBROUTINE(UPD_BUSOBJ)
VL_FBASBOD0000013300000000000001     ENDIF
VL_FBASBOD0000013400000000000001     IF         COND('#INSREQD *EQ Y')
VL_FBASBOD0000013500000000000001     EXECUTE    SUBROUTINE(INS_BUSOBJ)
VL_FBASBOD0000013600000000000001     ENDIF
VL_FBASBOD0000013700000000000001     ENDROUTINE
VL_FBASBOD0000013800000000000001     /* **********                                                         */
VL_FBASBOD0000013900000000000001     /* ********** Insert a new record.                                    */
VL_FBASBOD0000014000000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_FBASBOD0000014100000000000001     /* ********** details.                                                */
VL_FBASBOD0000014200000000000001     /* ********** Signal to all interested forms that a new record has    */
VL_FBASBOD0000014300000000000001     /* ********** been added.                                             */
VL_FBASBOD0000014400000000000001     /* ********** Disabled save push button after record successfully     */
VL_FBASBOD0000014500000000000001     /* ********** saved.                                                  */
VL_FBASBOD0000014600000000000001     /* ********** Reset flag to indicate no pending new records exist.    */
VL_FBASBOD0000014700000000000001     /* **********                                                         */
VL_FBASBOD0000014800000000000001     SUBROUTINE NAME(INS_BUSOBJ)
VL_FBASBOD0000014900000000000001     CHECK_FOR  IN_FILE(PSLMST) WITH_KEY(#EMPNO) VAL_ERROR(*NEXT)
VL_FBASBOD0000015000000000000001     IF_STATUS  IS(*NOTEQUALKEY)
VL_FBASBOD0000015100000000000001     INSERT     FIELDS(#DEPTMENT #SECTION #SECDESC #SECADDR1 #SECADDR2 #SECADDR3 #SECPCODE #SECPHBUS) TO_FILE(SECTAB)
VL_FBASBOD0000015200000000000001     IF_STATUS  IS(*OKAY)
VL_FBASBOD0000015300000000000001     signal     event(dtl_insert)
VL_FBASBOD0000015400000000000001     CHANGE     FIELD(#INSREQD) TO(N)
VL_FBASBOD0000015500000000000001     set        #phbn_sav enabled(false)
VL_FBASBOD0000015600000000000001     MESSAGE    MSGTXT('Section successfully inserted') TYPE(*STATUS)
VL_FBASBOD0000015700000000000001     ENDIF
VL_FBASBOD0000015800000000000001     ELSE
VL_FBASBOD0000015900000000000001     ENDIF
VL_FBASBOD0000016000000000000001     ENDROUTINE
VL_FBASBOD0000016100000000000001     /* **********                                                         */
VL_FBASBOD0000016200000000000001     /* ********** Update the current record.                              */
VL_FBASBOD0000016300000000000001     /* ********** Replace the file processing with the appropriate file   */
VL_FBASBOD0000016400000000000001     /* ********** details.                                                */
VL_FBASBOD0000016500000000000001     /* ********** Signal to all interested forms that a record has been   */
VL_FBASBOD0000016600000000000001     /* ********** updated.                                                */
VL_FBASBOD0000016700000000000001     /* ********** Disabled save push button after record successfully     */
VL_FBASBOD0000016800000000000001     /* ********** updated.                                                */
VL_FBASBOD0000016900000000000001     /* ********** Reset flag to indicate no pending changes exist.        */
VL_FBASBOD0000017000000000000001     /* **********                                                         */
VL_FBASBOD0000017100000000000001     SUBROUTINE NAME(UPD_BUSOBJ)
VL_FBASBOD0000017200000000000001     CHECK_FOR  IN_FILE(SECTAB) WITH_KEY(#DEPTMENT #SECTION) VAL_ERROR(*NEXT)
VL_FBASBOD0000017300000000000001     IF_STATUS  IS(*NOTEQUALKEY)
VL_FBASBOD0000017400000000000001     ELSE
VL_FBASBOD0000017500000000000001     UPDATE     FIELDS(#SECDESC #SECADDR1 #SECADDR2 #SECADDR3 #SECPCODE #SECPHBUS) IN_FILE(SECTAB) WITH_KEY(#DEPTMENT #SECTION) VAL_ERROR(*NEXT)
VL_FBASBOD0000017600000000000001     IF_STATUS  IS(*OKAY)
VL_FBASBOD0000017700000000000001     signal     event(dtl_chgd)
VL_FBASBOD0000017800000000000001     CHANGE     FIELD(#UPDREQD) TO(N)
VL_FBASBOD0000017900000000000001     set        #phbn_sav enabled(false)
VL_FBASBOD0000018000000000000001     MESSAGE    MSGTXT('Section successfully updated') TYPE(*STATUS)
VL_FBASBOD0000018100000000000001     ENDIF
VL_FBASBOD0000018200000000000001     ENDIF
VL_FBASBOD0000018300000000000001     ENDROUTINE
VL_FBASBOD0000018400000000000001     /* **********                                                         */
VL_FBASBOD0000018500000000000001     /* ********** This published method allows the owner form to force    */
VL_FBASBOD0000018600000000000001     /* ********** the save                                                */
VL_FBASBOD0000018700000000000001     /* ********** of pending details and close this form.                 */
VL_FBASBOD0000018800000000000001     /* **********                                                         */
VL_FBASBOD0000018900000000000001     MTHROUTINE close_save
VL_FBASBOD0000019000000000000001     EXECUTE    SUBROUTINE(CHK_UPD)
VL_FBASBOD0000019100000000000001     invoke     #com_owner.closeform
VL_FBASBOD0000019200000000000001     ENDROUTINE
VL_FBASBOD0000019300000000000001     /* **********                                                         */
VL_FBASBOD0000019400000000000001     /* ********** This routine checks for pending updates and new records */
VL_FBASBOD0000019500000000000001     /* ********** and displays a message box allowing them to be saved or */
VL_FBASBOD0000019600000000000001     /* ********** cancelled.                                              */
VL_FBASBOD0000019700000000000001     /* ********** This warning is issued when a new object is selected    */
VL_FBASBOD0000019800000000000001     /* ********** or a closeform is invoked, if there are pending changes.                                                       */
VL_FBASBOD0000019900000000000001     /* **********                                                         */
VL_FBASBOD0000020000000000000001     SUBROUTINE NAME(CHK_UPD)
VL_FBASBOD0000020100000000000001     IF         COND('( #UPDREQD *EQ Y ) OR ( #INSREQD *EQ Y )')
VL_FBASBOD0000020200000000000001     USE        BUILTIN(MESSAGE_BOX_CLEAR)
VL_FBASBOD0000020300000000000001     /* **********                                                         */
VL_FBASBOD0000020400000000000001     /* ********** Format the message box text using the following example */
VL_FBASBOD0000020500000000000001     /* ********** as a guide.                                             */
VL_FBASBOD0000020600000000000001     /* **********                                                         */
VL_FBASBOD0000020700000000000001     CHANGE     FIELD(#MSGBXTLE) TO('''Details Update Pending''')
VL_FBASBOD0000020800000000000001     CHANGE     FIELD(#MSGBXTXT) TO('''Changes have been made to the current details,''')
VL_FBASBOD0000020900000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_FBASBOD0000021000000000000001     CHANGE     FIELD(#MSGBXTXT) TO(''' ''')
VL_FBASBOD0000021100000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_FBASBOD0000021200000000000001     CHANGE     FIELD(#MSGBXTXT) TO('''               ---   ''')
VL_FBASBOD0000021300000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_FBASBOD0000021400000000000001     /* **********                                                         */
VL_FBASBOD0000021500000000000001     /* ********** Replace the employee details with appropriate fields.   */
VL_FBASBOD0000021600000000000001     /* **********                                                         */
VL_FBASBOD0000021700000000000001     USE        BUILTIN(MESSAGE_BOX_APPEND) WITH_ARGS(#EMPNO '''-''' #GIVENAME #SURNAME)
VL_FBASBOD0000021800000000000001     CHANGE     FIELD(#MSGBXTXT) TO(''' ---''')
VL_FBASBOD0000021900000000000001     USE        BUILTIN(MESSAGE_BOX_APPEND) WITH_ARGS(#MSGBXTXT)
VL_FBASBOD0000022000000000000001     CHANGE     FIELD(#MSGBXTXT) TO(''' ''')
VL_FBASBOD0000022100000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_FBASBOD0000022200000000000001     CHANGE     FIELD(#MSGBXTXT) TO('''                  but have not been saved.''')
VL_FBASBOD0000022300000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_FBASBOD0000022400000000000001     CHANGE     FIELD(#MSGBXTXT) TO(''' ''')
VL_FBASBOD0000022500000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_FBASBOD0000022600000000000001     CHANGE     FIELD(#MSGBXTXT) TO('''Press OK to save them now, or CANCEL to disregard them..''')
VL_FBASBOD0000022700000000000001     USE        BUILTIN(MESSAGE_BOX_ADD) WITH_ARGS(#MSGBXTXT)
VL_FBASBOD0000022800000000000001     CHANGE     FIELD(#MSGBXRTN) TO(*BLANKS)
VL_FBASBOD0000022900000000000001     USE        BUILTIN(MESSAGE_BOX_SHOW) WITH_ARGS(OKCANCEL OK WARNING #MSGBXTLE) TO_GET(#MSGBXRTN)
VL_FBASBOD0000023000000000000001     IF         COND('#MSGBXRTN *EQ OK')
VL_FBASBOD0000023100000000000001     IF         COND('#UPDREQD *EQ Y')
VL_FBASBOD0000023200000000000001     EXECUTE    SUBROUTINE(UPD_BUSOBJ)
VL_FBASBOD0000023300000000000001     ELSE
VL_FBASBOD0000023400000000000001     IF         COND('#INSREQD *EQ Y')
VL_FBASBOD0000023500000000000001     EXECUTE    SUBROUTINE(INS_BUSOBJ)
VL_FBASBOD0000023600000000000001     ENDIF
VL_FBASBOD0000023700000000000001     ENDIF
VL_FBASBOD0000023800000000000001     ENDIF
VL_FBASBOD0000023900000000000001     ENDIF
VL_FBASBOD0000024000000000000001     ENDROUTINE
VL_FBASBOD0000024100000000000001     /* **********                                                         */
VL_FBASBOD0000024200000000000001     @@ROUTEEND
VL_FBASBOD0000024300000000000001     END_COM
VL_FBASBOD0000024400000000000001E99: @@LABEL
VL_FBASBOF0000000100000000000001     @@QUESTION PROMPT('Do you want to continue?') ANSWER(@@CANS001) EXTEND('This template produces a Business Object Filter.' 'It is based on the demonstration personnel system.' 'Please read the comments in the code and replace' 'the field and file names as required.' 'See help for further information.') LOWER(*NO) HELPIDS(HELP010)
VL_FBASBOF0000000200000000000001     @@IF       COND((*IF @@CANS001 *EQ N)) GOTO(E99)
VL_FBASBOF0000000300000000000001     @@ROUTEBEG
VL_FBASBOF0000000400000000000001     BEGIN_COM  BORDERICONS(Minimize+SystemMenu) CAPTION('Business Object Filter') FRAMESTYLE(Dialog) HEIGHT(491) LEFT(347) TOP(21) VISUALSTYLE(#VS_NORM) WIDTH(321)
VL_FBASBOF0000000500000000000001     @@ROUTEDEF
VL_FBASBOF0000000600000000000001     /* **********                                                         */
VL_FBASBOF0000000700000000000001     /* ********** Business Object Filter Template                         */
VL_FBASBOF0000000800000000000001     /* ********** Version  1.0                                            */
VL_FBASBOF0000000900000000000001     /* **********                                                         */
VL_FBASBOF0000001000000000000001     /* **********                                                         */
VL_FBASBOF0000001100000000000001     /* ********** Open the component tab of editor.                       */
VL_FBASBOF0000001200000000000001     /* ********** If required change the captions for the view radio      */
VL_FBASBOF0000001300000000000001     /* ********** buttons in the property sheet.                          */
VL_FBASBOF0000001400000000000001     /* **********                                                         */
VL_FBASBOF0000001500000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_1) CAPTION(Views) DISPLAYPOSITION(1) HEIGHT(57) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(1) TABSTOP(False) TOP(8) WIDTH(313)
VL_FBASBOF0000001600000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RDBN_LVL1) BUTTONCHECKED(True) CAPTION('By Level 1/level 2') DISPLAYPOSITION(1) LEFT(12) PARENT(#GPBX_1) TABPOSITION(1) TOP(20) WIDTH(141)
VL_FBASBOF0000001700000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RDBN_LVL3) CAPTION('By Level 3') DISPLAYPOSITION(2) LEFT(184) PARENT(#GPBX_1) TABPOSITION(2) TOP(22) WIDTH(87)
VL_FBASBOF0000001800000000000001     /* **********                                                         */
VL_FBASBOF0000001900000000000001     /* ********** Level 1 group box.                                      */
VL_FBASBOF0000002000000000000001     /* ********** If required change caption of group box.                */
VL_FBASBOF0000002100000000000001     /* ********** The combo box columns use the key and descriptive       */
VL_FBASBOF0000002200000000000001     /* ********** fields of the first level file.                         */
VL_FBASBOF0000002300000000000001     /* ********** Change the source field property to the correct names.  */
VL_FBASBOF0000002400000000000001     /* **********                                                         */
VL_FBASBOF0000002500000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_LVL1) CAPTION('Level 1') DISPLAYPOSITION(4) HEIGHT(57) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(4) TABSTOP(False) TOP(72) WIDTH(313)
VL_FBASBOF0000002600000000000001     DEFINE_COM CLASS(#PRIM_CKBX) NAME(#CKBX_LVL1) BUTTONSTATE(Checked) CAPTION('All Level 1') DISPLAYPOSITION(2) LEFT(8) PARENT(#GPBX_LVL1) TABPOSITION(2) TOP(23)
VL_FBASBOF0000002700000000000001     DEFINE_COM CLASS(#PRIM_CMBX) NAME(#CMBX_LVL1) DISPLAYPOSITION(1) ENABLED(False) HEIGHT(22) LEFT(128) PARENT(#GPBX_LVL1) TABPOSITION(1) TOP(24) WIDTH(177)
VL_FBASBOF0000002800000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBL1_1) PARENT(#CMBX_LVL1) SOURCE(#DEPTMENT) VISIBLE(False) WIDTH(20)
VL_FBASBOF0000002900000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBL1_2) DISPLAYPOSITION(1) PARENT(#CMBX_LVL1) SORTPOSITION(1) SOURCE(#DEPTDESC) WIDTH(20)
VL_FBASBOF0000003000000000000001     /* **********                                                         */
VL_FBASBOF0000003100000000000001     /* ********** Level 2 group box.                                      */
VL_FBASBOF0000003200000000000001     /* ********** If required change caption of group box.                */
VL_FBASBOF0000003300000000000001     /* ********** The combo box columns use the key and descriptive       */
VL_FBASBOF0000003400000000000001     /* ********** fields of the second level file.                        */
VL_FBASBOF0000003500000000000001     /* ********** Change the source field property to the correct names.  */
VL_FBASBOF0000003600000000000001     /* **********                                                         */
VL_FBASBOF0000003700000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_LVL2) CAPTION('Level 2') DISPLAYPOSITION(6) HEIGHT(57) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(6) TABSTOP(False) TOP(136) WIDTH(313)
VL_FBASBOF0000003800000000000001     DEFINE_COM CLASS(#PRIM_CKBX) NAME(#CKBX_LVL2) BUTTONSTATE(Checked) CAPTION('All Level 2') DISPLAYPOSITION(2) ENABLED(False) PARENT(#GPBX_LVL2) TABPOSITION(2) TOP(20 )
VL_FBASBOF0000003900000000000001     DEFINE_COM CLASS(#PRIM_CMBX) NAME(#CMBX_LVL2) DISPLAYPOSITION(1) ENABLED(False) HEIGHT(22) LEFT(128) PARENT(#GPBX_LVL2) TABPOSITION(1) TOP(22) WIDTH(177)
VL_FBASBOF0000004000000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBL2_2) PARENT(#CMBX_LVL2) SOURCE(#SECTION) VISIBLE(False) WIDTH(20)
VL_FBASBOF0000004100000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBL2_3) DISPLAYPOSITION(1) PARENT(#CMBX_LVL2) SOURCE(#SECDESC) WIDTH(20)
VL_FBASBOF0000004200000000000001     /* **********                                                         */
VL_FBASBOF0000004300000000000001     /* ********** Level 3 group box.                                      */
VL_FBASBOF0000004400000000000001     /* ********** If required change caption of group box.                */
VL_FBASBOF0000004500000000000001     /* **********                                                         */
VL_FBASBOF0000004600000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_LVL3) CAPTION('Level 3') DISPLAYPOSITION(2) HEIGHT(217) LEFT(0) PARENT(#COM_OWNER) TABPOSITION(2) TABSTOP(False) TOP(200) WIDTH(313)
VL_FBASBOF0000004700000000000001     /* **********                                                         */
VL_FBASBOF0000004800000000000001     /* ********** If required change caption of group box and radio       */
VL_FBASBOF0000004900000000000001     /* ********** buttons.                                                */
VL_FBASBOF0000005000000000000001     /* ********** These buttons indicate how the data should be sorted.   */
VL_FBASBOF0000005100000000000001     /* ********** How buttons are required will be determined by what     */
VL_FBASBOF0000005200000000000001     /* ********** data will be displayed at the third level.              */
VL_FBASBOF0000005300000000000001     /* ********** If changing the names of these buttons also change      */
VL_FBASBOF0000005400000000000001     /* ********** the names of the associated events.                     */
VL_FBASBOF0000005500000000000001     /* **********                                                         */
VL_FBASBOF0000005600000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_4) CAPTION(Sort) DISPLAYPOSITION(2) HEIGHT(81) LEFT(8) PARENT(#GPBX_LVL3) TABPOSITION(2) TABSTOP(False) TOP(16) WIDTH(297)
VL_FBASBOF0000005700000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_ALP) BUTTONCHECKED(True) CAPTION('By Name') DISPLAYPOSITION(2) LEFT(160) PARENT(#GPBX_4) TABPOSITION(2) TOP(16) WIDTH(92)
VL_FBASBOF0000005800000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_SAL) CAPTION('By Value') DISPLAYPOSITION(1) LEFT(160) PARENT(#GPBX_4) TABPOSITION(1) TOP(48) WIDTH(100)
VL_FBASBOF0000005900000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_DAT) BUTTONCHECKED(True) CAPTION('By Date') DISPLAYPOSITION(3) LEFT(8) PARENT(#GPBX_4) TABPOSITION(3) TOP(48)
VL_FBASBOF0000006000000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_NBR) CAPTION('By Code') DISPLAYPOSITION(4) LEFT(8) PARENT(#GPBX_4) TABPOSITION(4) TOP(19)
VL_FBASBOF0000006100000000000001     /* **********                                                         */
VL_FBASBOF0000006200000000000001     /* ********** If required change caption of group box and radio       */
VL_FBASBOF0000006300000000000001     /* ********** buttons.                                                */
VL_FBASBOF0000006400000000000001     /* ********** These buttons indicate the order of the sorted data.    */
VL_FBASBOF0000006500000000000001     /* **********                                                         */
VL_FBASBOF0000006600000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_5) CAPTION(Direction) DISPLAYPOSITION(3) LEFT(8) PARENT(#GPBX_LVL3) TABPOSITION(3) TABSTOP(False) TOP(104) WIDTH(297)
VL_FBASBOF0000006700000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_ASC) BUTTONCHECKED(True) CAPTION(Ascending) DISPLAYPOSITION(1) LEFT(16) PARENT(#GPBX_5) TABPOSITION(1) TOP(16)
VL_FBASBOF0000006800000000000001     DEFINE_COM CLASS(#PRIM_RDBN) NAME(#RB_DSC) CAPTION(Descending) DISPLAYPOSITION(2) LEFT(160) PARENT(#GPBX_5) TABPOSITION(2) TOP(16)
VL_FBASBOF0000006900000000000001     /* **********                                                         */
VL_FBASBOF0000007000000000000001     /* ********** If required change caption of group box.                */
VL_FBASBOF0000007100000000000001     /* ********** This group box can be hidden/shown depending on what    */
VL_FBASBOF0000007200000000000001     /* ********** type of field is used to sort the data.                 */
VL_FBASBOF0000007300000000000001     /* ********** Appropriate fields can be added to save the comparison  */
VL_FBASBOF0000007400000000000001     /* ********** value.                                                  */
VL_FBASBOF0000007500000000000001     /* **********                                                         */
VL_FBASBOF0000007600000000000001     DEFINE_COM CLASS(#PRIM_GPBX) NAME(#GPBX_6) CAPTION(Date) DISPLAYPOSITION(1) LEFT(8) PARENT(#GPBX_LVL3) TABPOSITION(1) TABSTOP(False) TOP(160) VISIBLE(False) WIDTH(297)
VL_FBASBOF0000007700000000000001     DEFINE_COM CLASS(#PRIM_CMBX) NAME(#CMBX_CMP) DISPLAYPOSITION(1) HEIGHT(22) LEFT(5) PARENT(#GPBX_6) TABPOSITION(1) TOP(20)
VL_FBASBOF0000007800000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBCL_CMP) DISPLAYPOSITION(1) PARENT(#CMBX_CMP) SOURCE(#STD_DESCS) WIDTH(20)
VL_FBASBOF0000007900000000000001     DEFINE_COM CLASS(#PRIM_CBCL) NAME(#CBCL_CDE) PARENT(#CMBX_CMP) SOURCE(#STD_CMPAR) VISIBLE(False) WIDTH(20)
VL_FBASBOF0000008000000000000001     DEFINE_COM CLASS(#STD_NUM.Visual) NAME(#STD_NUM) DISPLAYPOSITION(3) HEIGHT(19) LEFT(128) MARGINLEFT(0) PARENT(#GPBX_6) TABPOSITION(3) TOP(20) VISIBLE(False) WIDTH(150)
VL_FBASBOF0000008100000000000001     DEFINE_COM CLASS(#STD_DATE.Visual) NAME(#STD_DATE) CAPTION(YYMMDD) DISPLAYPOSITION(2) HEIGHT(19) LABELTYPE(Caption) LEFT(136) MARGINLEFT(60) PARENT(#GPBX_6) TABPOSITION(2) TOP(24) VISIBLE(False) WIDTH(150)
VL_FBASBOF0000008200000000000001     /* **********                                                         */
VL_FBASBOF0000008300000000000001     /* ********** If required change caption of these buttons.            */
VL_FBASBOF0000008400000000000001     /* ********** The 'apply' button signals that a choice has been made. */
VL_FBASBOF0000008500000000000001     /* ********** The 'cancel' button closes the filter form without      */
VL_FBASBOF0000008600000000000001     /* ********** signalling any choices.                                 */
VL_FBASBOF0000008700000000000001     /* ********** The 'clear choice' button resets the all radio buttons  */
VL_FBASBOF0000008800000000000001     /* ********** and values to the last saved choice or default if       */
VL_FBASBOF0000008900000000000001     /* ********** never saved.                                            */
VL_FBASBOF0000009000000000000001     /* ********** The 'save choice' button saves the current choice as    */
VL_FBASBOF0000009100000000000001     /* ********** remembered values for the form which will be used on    */
VL_FBASBOF0000009200000000000001     /* ********** first opening the filter and when the clear choice      */
VL_FBASBOF0000009300000000000001     /* ********** button is used.                                         */
VL_FBASBOF0000009400000000000001     /* **********                                                         */
VL_FBASBOF0000009500000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_APLY) CAPTION(Apply) DISPLAYPOSITION(3) LEFT(8) PARENT(#COM_OWNER) TABPOSITION(3) TOP(432) WIDTH(70)
VL_FBASBOF0000009600000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_CNCL) CAPTION(Cancel) DISPLAYPOSITION(5) LEFT(85) PARENT(#COM_OWNER) TABPOSITION(5) TOP(432) WIDTH(70)
VL_FBASBOF0000009700000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_CLR) CAPTION('Clear Choice') DISPLAYPOSITION(8) HINT('Using this button will restore the selection details to the last saved choice, or if no choice has been saved, to the default setting.') LEFT(162) PARENT(#COM_OWNER) TABPOSITION(8) TOP(432) WIDTH(70)
VL_FBASBOF0000009800000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#PHBN_SAV) CAPTION('Save Choice') DISPLAYPOSITION(7) HINT('This button will save the current selection. These choices will be restored when the form is next executed.') LEFT(240) PARENT(#COM_OWNER) TABPOSITION(7) TOP(432) WIDTH(70)
VL_FBASBOF0000009900000000000001     /* **********                                                         */
VL_FBASBOF0000010000000000000001     /* ********** These work fields are used to remember the current      */
VL_FBASBOF0000010100000000000001     /* ********** choices.                                                */
VL_FBASBOF0000010200000000000001     /* ********** Change the deptment and section names to the            */
VL_FBASBOF0000010300000000000001     /* ********** appropriate key fields for the first and second level   */
VL_FBASBOF0000010400000000000001     /* ********** keys.                                                   */
VL_FBASBOF0000010500000000000001     /* ********** The field #rmv_saved indicates if a choice has been     */
VL_FBASBOF0000010600000000000001     /* ********** saved or not.                                           */
VL_FBASBOF0000010700000000000001     /* **********                                                         */
VL_FBASBOF0000010800000000000001     DEFINE     FIELD(#RMV_DEPT) REFFLD(#DEPTMENT)
VL_FBASBOF0000010900000000000001     DEFINE     FIELD(#RMV_SECT) REFFLD(#SECTION)
VL_FBASBOF0000011000000000000001     DEFINE     FIELD(#RMV_LEVEL) REFFLD(#STD_LEVEL)
VL_FBASBOF0000011100000000000001     DEFINE     FIELD(#RMV_SORT) REFFLD(#STD_SORT)
VL_FBASBOF0000011200000000000001     DEFINE     FIELD(#RMV_DIRCT) REFFLD(#STD_DIRCT)
VL_FBASBOF0000011300000000000001     DEFINE     FIELD(#RMV_DATE) REFFLD(#STD_DATE)
VL_FBASBOF0000011400000000000001     DEFINE     FIELD(#RMV_VALUE) REFFLD(#STD_NUM)
VL_FBASBOF0000011500000000000001     DEFINE     FIELD(#RMV_CMPAR) REFFLD(#STD_CMPAR)
VL_FBASBOF0000011600000000000001     DEFINE     FIELD(#RMV_SAVED) TYPE(*CHAR) LENGTH(1) DEFAULT(N)
VL_FBASBOF0000011700000000000001     /* **********                                                         */
VL_FBASBOF0000011800000000000001     /* ********** These are the published properties used to pass the     */
VL_FBASBOF0000011900000000000001     /* ********** filter choices to calling forms.                        */
VL_FBASBOF0000012000000000000001     /* ********** Change the deptment and section names to the            */
VL_FBASBOF0000012100000000000001     /* ********** appropriate key fields for the first and second level   */
VL_FBASBOF0000012200000000000001     /* ********** keys.                                                   */
VL_FBASBOF0000012300000000000001     /* **********                                                         */
VL_FBASBOF0000012400000000000001     define_pty name( dept_value ) get( *auto #deptment )
VL_FBASBOF0000012500000000000001     define_pty name( sect_value ) get( *auto #section )
VL_FBASBOF0000012600000000000001     define_pty name( level_value ) get( *auto #std_level )
VL_FBASBOF0000012700000000000001     define_pty name( sort_value ) get( *auto #std_sort )
VL_FBASBOF0000012800000000000001     define_pty name( direction_value ) get( *auto #std_dirct )
VL_FBASBOF0000012900000000000001     define_pty name( date_value ) get( *auto #std_date )
VL_FBASBOF0000013000000000000001     define_pty name( salary_value ) get( *auto #std_num )
VL_FBASBOF0000013100000000000001     define_pty name( compare_value ) get( *auto #std_cmpar)
VL_FBASBOF0000013200000000000001     /* **********                                                         */
VL_FBASBOF0000013300000000000001     /* ********** This is the published event used to signal that filter  */
VL_FBASBOF0000013400000000000001     /* ********** choices have been made.                                 */
VL_FBASBOF0000013500000000000001     /* **********                                                         */
VL_FBASBOF0000013600000000000001     define_evt name( ApplyFilter )
VL_FBASBOF0000013700000000000001     /* **********                                                         */
VL_FBASBOF0000013800000000000001     @@QUESTION PROMPT('END OF DEFINITION      ') ANSWER(@@CANS001)
VL_FBASBOF0000013900000000000001     @@ROUTERTN
VL_FBASBOF0000014000000000000001     EVTROUTINE #com_owner.Initialize
VL_FBASBOF0000014100000000000001     /* **********                                                         */
VL_FBASBOF0000014200000000000001     /* ********** This statement establishes which values are to be       */
VL_FBASBOF0000014300000000000001     /* ********** remembered.                                             */
VL_FBASBOF0000014400000000000001     /* ********** Change the deptment and section names to the            */
VL_FBASBOF0000014500000000000001     /* ********** appropriate key fields for the first and second level   */
VL_FBASBOF0000014600000000000001     /* ********** keys.                                                   */
VL_FBASBOF0000014700000000000001     /* **********                                                         */
VL_FBASBOF0000014800000000000001     CHANGE     FIELD(#RMV_SAVED #RMV_DEPT #RMV_SECT #RMV_LEVEL #RMV_SORT #RMV_DIRCT #RMV_DATE #RMV_VALUE #RMV_CMPAR) TO('*REMEMBERED_VALUE_FOR_FUNCTION')
VL_FBASBOF0000014900000000000001     /* **********                                                         */
VL_FBASBOF0000015000000000000001     /* ********** Load combo box with required comparison operators.      */
VL_FBASBOF0000015100000000000001     /* **********                                                         */
VL_FBASBOF0000015200000000000001     EXECUTE    SUBROUTINE(ADD_CMP) WITH_PARMS('''Greater than''' '''GT''')
VL_FBASBOF0000015300000000000001     EXECUTE    SUBROUTINE(ADD_CMP) WITH_PARMS('''Less than''' '''LT''')
VL_FBASBOF0000015400000000000001     EXECUTE    SUBROUTINE(ADD_CMP) WITH_PARMS('''Equal to''' '''EQ''')
VL_FBASBOF0000015500000000000001     /* **********                                                         */
VL_FBASBOF0000015600000000000001     /* ********** Prefill the level one combo box with the appropriate    */
VL_FBASBOF0000015700000000000001     /* ********** details.                                                */
VL_FBASBOF0000015800000000000001     /* **********                                                         */
VL_FBASBOF0000015900000000000001     SELECT     FIELDS(*ALL) FROM_FILE(DEPTAB)
VL_FBASBOF0000016000000000000001     ADD_ENTRY  TO_LIST(#CMBX_LVL1)
VL_FBASBOF0000016100000000000001     ENDSELECT
VL_FBASBOF0000016200000000000001     /* **********                                                         */
VL_FBASBOF0000016300000000000001     /* ********** Initialise all radio buttons and values.                */
VL_FBASBOF0000016400000000000001     /* **********                                                         */
VL_FBASBOF0000016500000000000001     EXECUTE    SUBROUTINE(INIT_VALUE)
VL_FBASBOF0000016600000000000001     ENDROUTINE
VL_FBASBOF0000016700000000000001     /* **********                                                         */
VL_FBASBOF0000016800000000000001     /* ********** Add the comarison operators to combo box.               */
VL_FBASBOF0000016900000000000001     /* **********                                                         */
VL_FBASBOF0000017000000000000001     SUBROUTINE NAME(ADD_CMP) PARMS((#STD_DESCS *RECEIVED) (#STD_CMPAR *RECEIVED))
VL_FBASBOF0000017100000000000001     ADD_ENTRY  TO_LIST(#CMBX_CMP)
VL_FBASBOF0000017200000000000001     ENDROUTINE
VL_FBASBOF0000017300000000000001     /* **********                                                         */
VL_FBASBOF0000017400000000000001     EVTROUTINE HANDLING(#PHBN_CLR.Click)
VL_FBASBOF0000017500000000000001     /* **********                                                         */
VL_FBASBOF0000017600000000000001     /* ********** Reset all radio buttons and values.                     */
VL_FBASBOF0000017700000000000001     /* **********                                                         */
VL_FBASBOF0000017800000000000001     EXECUTE    SUBROUTINE(INIT_VALUE)
VL_FBASBOF0000017900000000000001     ENDROUTINE
VL_FBASBOF0000018000000000000001     /* **********                                                         */
VL_FBASBOF0000018100000000000001     SUBROUTINE NAME(INIT_VALUE)
VL_FBASBOF0000018200000000000001     /* **********                                                         */
VL_FBASBOF0000018300000000000001     /* ********** If choices have been saved                              */
VL_FBASBOF0000018400000000000001     /* ********** Map from remembered fields/values into visual entities. */
VL_FBASBOF0000018500000000000001     /* **********                                                         */
VL_FBASBOF0000018600000000000001     IF         COND('#RMV_SAVED *EQ Y')
VL_FBASBOF0000018700000000000001     /* **********                                                         */
VL_FBASBOF0000018800000000000001     /* ********** Set level to filter by.                                 */
VL_FBASBOF0000018900000000000001     /* **********                                                         */
VL_FBASBOF0000019000000000000001     CHANGE     FIELD(#STD_LEVEL) TO('#RMV_LEVEL')
VL_FBASBOF0000019100000000000001     IF         COND('#STD_LEVEL *EQ 3')
VL_FBASBOF0000019200000000000001     set        #rdbn_lvl3 buttonchecked( true )
VL_FBASBOF0000019300000000000001     ELSE
VL_FBASBOF0000019400000000000001     set        #rdbn_lvl1 buttonchecked( true )
VL_FBASBOF0000019500000000000001     ENDIF
VL_FBASBOF0000019600000000000001     /* **********                                                         */
VL_FBASBOF0000019700000000000001     /* ********** Set level 1 check box and combo box.                    */
VL_FBASBOF0000019800000000000001     /* **********                                                         */
VL_FBASBOF0000019900000000000001     IF         COND('#RMV_DEPT *EQ *BLANK')
VL_FBASBOF0000020000000000000001     set        ( #ckbx_lvl1 #ckbx_lvl2 ) buttonstate( checked )
VL_FBASBOF0000020100000000000001     set        ( #cmbx_lvl1 #gpbx_lvl2 #cmbx_lvl2 #ckbx_lvl2 ) enabled( false )
VL_FBASBOF0000020200000000000001     ELSE
VL_FBASBOF0000020300000000000001     CLR_LIST   NAMED(#CMBX_LVL1)
VL_FBASBOF0000020400000000000001     /* **********                                                         */
VL_FBASBOF0000020500000000000001     /* ********** Replace department file processing with the appropriate */
VL_FBASBOF0000020600000000000001     /* ********** first level file details.                               */
VL_FBASBOF0000020700000000000001     /* **********                                                         */
VL_FBASBOF0000020800000000000001     SELECT     FIELDS(*ALL) FROM_FILE(DEPTAB)
VL_FBASBOF0000020900000000000001     ADD_ENTRY  TO_LIST(#CMBX_LVL1)
VL_FBASBOF0000021000000000000001     IF         COND('#DEPTMENT *EQ #RMV_DEPT')
VL_FBASBOF0000021100000000000001     set        #cmbx_lvl1.currentitem focus( true )
VL_FBASBOF0000021200000000000001     ENDIF
VL_FBASBOF0000021300000000000001     ENDSELECT
VL_FBASBOF0000021400000000000001     CHANGE     FIELD(#DEPTMENT) TO('#RMV_DEPT')
VL_FBASBOF0000021500000000000001     set        #ckbx_lvl1 buttonstate( unchecked )
VL_FBASBOF0000021600000000000001     set        ( #cmbx_lvl1 #gpbx_lvl2 ) enabled( true )
VL_FBASBOF0000021700000000000001     /* **********                                                         */
VL_FBASBOF0000021800000000000001     /* ********** Set the second level check box and combo box.           */
VL_FBASBOF0000021900000000000001     /* ********** Replace the section file processing with the            */
VL_FBASBOF0000022000000000000001     /* ********** appropriate second level file details.                  */
VL_FBASBOF0000022100000000000001     /* **********                                                         */
VL_FBASBOF0000022200000000000001     IF         COND('#RMV_SECT *EQ *BLANK')
VL_FBASBOF0000022300000000000001     set        #ckbx_lvl2 buttonstate( checked )
VL_FBASBOF0000022400000000000001     set        #cmbx_lvl2 enabled( false )
VL_FBASBOF0000022500000000000001     ELSE
VL_FBASBOF0000022600000000000001     CLR_LIST   NAMED(#CMBX_LVL2)
VL_FBASBOF0000022700000000000001     SELECT     FIELDS(*ALL) FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT)
VL_FBASBOF0000022800000000000001     ADD_ENTRY  TO_LIST(#CMBX_LVL2)
VL_FBASBOF0000022900000000000001     IF         COND('#SECTION *EQ #RMV_SECT')
VL_FBASBOF0000023000000000000001     set        #cmbx_lvl2.currentitem focus( true )
VL_FBASBOF0000023100000000000001     ENDIF
VL_FBASBOF0000023200000000000001     ENDSELECT
VL_FBASBOF0000023300000000000001     CHANGE     FIELD(#SECTION) TO('#RMV_SECT')
VL_FBASBOF0000023400000000000001     set        ( #ckbx_lvl1 #ckbx_lvl2 ) buttonstate( unchecked )
VL_FBASBOF0000023500000000000001     ENDIF
VL_FBASBOF0000023600000000000001     ENDIF
VL_FBASBOF0000023700000000000001     /* **********                                                         */
VL_FBASBOF0000023800000000000001     /* ********** Set the appropriate radio button and if appropriate the */
VL_FBASBOF0000023900000000000001     /* ********** comparison details.                                     */
VL_FBASBOF0000024000000000000001     /* ********** Replace field names as required.                        */
VL_FBASBOF0000024100000000000001     /* **********                                                         */
VL_FBASBOF0000024200000000000001     CHANGE     FIELD(#STD_SORT) TO('#RMV_SORT')
VL_FBASBOF0000024300000000000001     set        ( #gpbx_6 #cmbx_cmp #std_date #std_num ) visible( false )
VL_FBASBOF0000024400000000000001     IF         COND('#STD_SORT *EQ N')
VL_FBASBOF0000024500000000000001     set        #rb_nbr buttonchecked( true )
VL_FBASBOF0000024600000000000001     ELSE
VL_FBASBOF0000024700000000000001     IF         COND('#STD_SORT *EQ A')
VL_FBASBOF0000024800000000000001     set        #rb_alp buttonchecked( true )
VL_FBASBOF0000024900000000000001     ELSE
VL_FBASBOF0000025000000000000001     set        ( #gpbx_6 #cmbx_cmp ) visible( true )
VL_FBASBOF0000025100000000000001     IF         COND('#STD_SORT *EQ D')
VL_FBASBOF0000025200000000000001     set        #rb_dat buttonchecked( true )
VL_FBASBOF0000025300000000000001     set        #std_date visible( true )
VL_FBASBOF0000025400000000000001     CHANGE     FIELD(#STD_DATE) TO('#RMV_DATE')
VL_FBASBOF0000025500000000000001     ELSE
VL_FBASBOF0000025600000000000001     IF         COND('#STD_SORT *EQ V')
VL_FBASBOF0000025700000000000001     set        #rb_sal buttonchecked( true )
VL_FBASBOF0000025800000000000001     set        #std_num visible( true )
VL_FBASBOF0000025900000000000001     CHANGE     FIELD(#STD_NUM) TO('#RMV_VALUE')
VL_FBASBOF0000026000000000000001     ENDIF
VL_FBASBOF0000026100000000000001     ENDIF
VL_FBASBOF0000026200000000000001     ENDIF
VL_FBASBOF0000026300000000000001     ENDIF
VL_FBASBOF0000026400000000000001     /* **********                                                         */
VL_FBASBOF0000026500000000000001     /* ********** Set the direction of the sorted data.                   */
VL_FBASBOF0000026600000000000001     /* **********                                                         */
VL_FBASBOF0000026700000000000001     CHANGE     FIELD(#STD_DIRCT) TO('#RMV_DIRCT')
VL_FBASBOF0000026800000000000001     IF         COND('#STD_DIRCT *EQ A')
VL_FBASBOF0000026900000000000001     set        #rb_asc buttonchecked( true )
VL_FBASBOF0000027000000000000001     ELSE
VL_FBASBOF0000027100000000000001     IF         COND('#STD_DIRCT *EQ D')
VL_FBASBOF0000027200000000000001     set        #rb_dsc buttonchecked( true )
VL_FBASBOF0000027300000000000001     ENDIF
VL_FBASBOF0000027400000000000001     ENDIF
VL_FBASBOF0000027500000000000001     /* **********                                                         */
VL_FBASBOF0000027600000000000001     /* ********** Set focus to the correct comparison operator.           */
VL_FBASBOF0000027700000000000001     /* **********                                                         */
VL_FBASBOF0000027800000000000001     SELECTLIST NAMED(#CMBX_CMP)
VL_FBASBOF0000027900000000000001     IF         COND('#STD_CMPAR *EQ #RMV_CMPAR')
VL_FBASBOF0000028000000000000001     set        #cmbx_cmp.currentitem focus( true )
VL_FBASBOF0000028100000000000001     LEAVE
VL_FBASBOF0000028200000000000001     ENDIF
VL_FBASBOF0000028300000000000001     ENDSELECT
VL_FBASBOF0000028400000000000001     CHANGE     FIELD(#STD_CMPAR) TO('#RMV_CMPAR')
VL_FBASBOF0000028500000000000001     /* **********                                                         */
VL_FBASBOF0000028600000000000001     /* ********** Else if no chioces were saved, use defaults.            */
VL_FBASBOF0000028700000000000001     /* **********                                                         */
VL_FBASBOF0000028800000000000001     ELSE
VL_FBASBOF0000028900000000000001     EXECUTE    SUBROUTINE(SETDEFAULT)
VL_FBASBOF0000029000000000000001     ENDIF
VL_FBASBOF0000029100000000000001     ENDROUTINE
VL_FBASBOF0000029200000000000001     /* **********                                                         */
VL_FBASBOF0000029300000000000001     SUBROUTINE NAME(SETDEFAULT)
VL_FBASBOF0000029400000000000001     /* **********                                                         */
VL_FBASBOF0000029500000000000001     /* ********** Replace the deptment, section and comparison fields     */
VL_FBASBOF0000029600000000000001     /* ********** with the appropriate fields.                            */
VL_FBASBOF0000029700000000000001     /* **********                                                         */
VL_FBASBOF0000029800000000000001     CHANGE     FIELD(#DEPTMENT #SECTION #STD_DATE #STD_NUM) TO(*NULL)
VL_FBASBOF0000029900000000000001     set        #rdbn_lvl1 buttonchecked( true )
VL_FBASBOF0000030000000000000001     CHANGE     FIELD(#STD_LEVEL) TO(1)
VL_FBASBOF0000030100000000000001     set        #ckbx_lvl1 buttonstate( checked )
VL_FBASBOF0000030200000000000001     set        #ckbx_lvl2 buttonstate( checked ) enabled( false )
VL_FBASBOF0000030300000000000001     set        ( #cmbx_lvl1 #cmbx_lvl2 ) enabled( false )
VL_FBASBOF0000030400000000000001     set        #rb_nbr buttonchecked( true )
VL_FBASBOF0000030500000000000001     CHANGE     FIELD(#STD_SORT) TO(N)
VL_FBASBOF0000030600000000000001     set        #rb_asc buttonchecked( true )
VL_FBASBOF0000030700000000000001     CHANGE     FIELD(#STD_DIRCT) TO(A)
VL_FBASBOF0000030800000000000001     set        #gpbx_6 visible( false )
VL_FBASBOF0000030900000000000001     CHANGE     FIELD(#STD_CMPAR) TO(GT)
VL_FBASBOF0000031000000000000001     ENDROUTINE
VL_FBASBOF0000031100000000000001     /* **********                                                         */
VL_FBASBOF0000031200000000000001     /* ********** Level 1                                                 */
VL_FBASBOF0000031300000000000001     /* **********                                                         */
VL_FBASBOF0000031400000000000001     EVTROUTINE HANDLING(#RDBN_lvl1.Click)
VL_FBASBOF0000031500000000000001     /* **********                                                         */
VL_FBASBOF0000031600000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000031700000000000001     /* **********                                                         */
VL_FBASBOF0000031800000000000001     CHANGE     FIELD(#STD_LEVEL) TO(1)
VL_FBASBOF0000031900000000000001     ENDROUTINE
VL_FBASBOF0000032000000000000001     /* **********                                                         */
VL_FBASBOF0000032100000000000001     EVTROUTINE HANDLING(#ckbx_lvl1.Click)
VL_FBASBOF0000032200000000000001     IF         COND('#CKBX_LVL1.BUTTONSTATE *EQ CHECKED')
VL_FBASBOF0000032300000000000001     set        #cmbx_lvl1 enabled( false )
VL_FBASBOF0000032400000000000001     set        #ckbx_lvl2 buttonstate( checked ) enabled( false )
VL_FBASBOF0000032500000000000001     /* **********                                                         */
VL_FBASBOF0000032600000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000032700000000000001     /* ********** Replace deptment with appropriate first level key field.                                                       */
VL_FBASBOF0000032800000000000001     /* **********                                                         */
VL_FBASBOF0000032900000000000001     CHANGE     FIELD(#DEPTMENT) TO(*BLANK)
VL_FBASBOF0000033000000000000001     ELSE
VL_FBASBOF0000033100000000000001     set        ( #cmbx_lvl1 #gpbx_lvl2 ) enabled( true )
VL_FBASBOF0000033200000000000001     set        #ckbx_lvl2 buttonstate( checked ) enabled( true )
VL_FBASBOF0000033300000000000001     ENDIF
VL_FBASBOF0000033400000000000001     ENDROUTINE
VL_FBASBOF0000033500000000000001     /* **********                                                         */
VL_FBASBOF0000033600000000000001     /* ********** Level 2                                                 */
VL_FBASBOF0000033700000000000001     /* **********                                                         */
VL_FBASBOF0000033800000000000001     EVTROUTINE HANDLING(#CKBX_LVL2.Click)
VL_FBASBOF0000033900000000000001     IF         COND('#CKBX_LVL2.BUTTONSTATE *EQ CHECKED')
VL_FBASBOF0000034000000000000001     set        #cmbx_lvl2 enabled( false )
VL_FBASBOF0000034100000000000001     /* **********                                                         */
VL_FBASBOF0000034200000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000034300000000000001     /* ********** Replace section with appropriate second level key field.                                                       */
VL_FBASBOF0000034400000000000001     /* **********                                                         */
VL_FBASBOF0000034500000000000001     CHANGE     FIELD(#SECTION) TO(*BLANK)
VL_FBASBOF0000034600000000000001     ELSE
VL_FBASBOF0000034700000000000001     set        #cmbx_lvl2 enabled( true )
VL_FBASBOF0000034800000000000001     CLR_LIST   NAMED(#CMBX_LVL2)
VL_FBASBOF0000034900000000000001     /* **********                                                         */
VL_FBASBOF0000035000000000000001     /* ********** Replace section file processing with appropriate second */
VL_FBASBOF0000035100000000000001     /* ********** level file details.                                     */
VL_FBASBOF0000035200000000000001     /* **********                                                         */
VL_FBASBOF0000035300000000000001     SELECT     FIELDS(*ALL) FROM_FILE(SECTAB) WITH_KEY(#DEPTMENT)
VL_FBASBOF0000035400000000000001     ADD_ENTRY  TO_LIST(#CMBX_LVL2)
VL_FBASBOF0000035500000000000001     ENDSELECT
VL_FBASBOF0000035600000000000001     ENDIF
VL_FBASBOF0000035700000000000001     ENDROUTINE
VL_FBASBOF0000035800000000000001     /* **********                                                         */
VL_FBASBOF0000035900000000000001     /* ********** Level 3                                                 */
VL_FBASBOF0000036000000000000001     /* **********                                                         */
VL_FBASBOF0000036100000000000001     EVTROUTINE HANDLING(#RDBN_lvl3.Click)
VL_FBASBOF0000036200000000000001     set        ( #cmbx_lvl1 #cmbx_lvl2 #ckbx_lvl2 #gpbx_lvl2 ) enabled( false )
VL_FBASBOF0000036300000000000001     /* **********                                                         */
VL_FBASBOF0000036400000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000036500000000000001     /* **********                                                         */
VL_FBASBOF0000036600000000000001     CHANGE     FIELD(#STD_LEVEL) TO(3)
VL_FBASBOF0000036700000000000001     ENDROUTINE
VL_FBASBOF0000036800000000000001     /* **********                                                         */
VL_FBASBOF0000036900000000000001     EVTROUTINE HANDLING(#PHBN_APLY.Click)
VL_FBASBOF0000037000000000000001     IF         COND('#CKBX_LVL1.BUTTONSTATE *EQ CHECKED')
VL_FBASBOF0000037100000000000001     /* **********                                                         */
VL_FBASBOF0000037200000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000037300000000000001     /* ********** Replace deptment with appropriate first level key field.                                                       */
VL_FBASBOF0000037400000000000001     /* **********                                                         */
VL_FBASBOF0000037500000000000001     CHANGE     FIELD(#DEPTMENT) TO(*BLANK)
VL_FBASBOF0000037600000000000001     ENDIF
VL_FBASBOF0000037700000000000001     IF         COND('#CKBX_LVL2.BUTTONSTATE *EQ CHECKED')
VL_FBASBOF0000037800000000000001     /* **********                                                         */
VL_FBASBOF0000037900000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000038000000000000001     /* ********** Replace section with appropriate second level key field.                                                       */
VL_FBASBOF0000038100000000000001     /* **********                                                         */
VL_FBASBOF0000038200000000000001     CHANGE     FIELD(#SECTION) TO(*BLANK)
VL_FBASBOF0000038300000000000001     ENDIF
VL_FBASBOF0000038400000000000001     signal     event( ApplyFilter )
VL_FBASBOF0000038500000000000001     ENDROUTINE
VL_FBASBOF0000038600000000000001     /* **********                                                         */
VL_FBASBOF0000038700000000000001     EVTROUTINE HANDLING(#RB_DAT.Click)
VL_FBASBOF0000038800000000000001     set        #std_num visible( false )
VL_FBASBOF0000038900000000000001     set        ( #cmbx_cmp #std_date ) visible( true )
VL_FBASBOF0000039000000000000001     set        #gpbx_6 caption( 'Date' ) visible( true )
VL_FBASBOF0000039100000000000001     /* **********                                                         */
VL_FBASBOF0000039200000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000039300000000000001     /* **********                                                         */
VL_FBASBOF0000039400000000000001     CHANGE     FIELD(#STD_SORT) TO(D)
VL_FBASBOF0000039500000000000001     ENDROUTINE
VL_FBASBOF0000039600000000000001     /* **********                                                         */
VL_FBASBOF0000039700000000000001     EVTROUTINE HANDLING(#RB_SAL.Click)
VL_FBASBOF0000039800000000000001     set        #std_date visible( false )
VL_FBASBOF0000039900000000000001     set        ( #cmbx_cmp #std_num ) visible( true )
VL_FBASBOF0000040000000000000001     set        #gpbx_6 caption( 'Value' ) visible( true )
VL_FBASBOF0000040100000000000001     /* **********                                                         */
VL_FBASBOF0000040200000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000040300000000000001     /* **********                                                         */
VL_FBASBOF0000040400000000000001     CHANGE     FIELD(#STD_SORT) TO(V)
VL_FBASBOF0000040500000000000001     ENDROUTINE
VL_FBASBOF0000040600000000000001     /* **********                                                         */
VL_FBASBOF0000040700000000000001     EVTROUTINE HANDLING(#RB_ASC.Click)
VL_FBASBOF0000040800000000000001     /* **********                                                         */
VL_FBASBOF0000040900000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000041000000000000001     /* **********                                                         */
VL_FBASBOF0000041100000000000001     CHANGE     FIELD(#STD_DIRCT) TO(A)
VL_FBASBOF0000041200000000000001     ENDROUTINE
VL_FBASBOF0000041300000000000001     /* **********                                                         */
VL_FBASBOF0000041400000000000001     EVTROUTINE HANDLING(#RB_DSC.Click)
VL_FBASBOF0000041500000000000001     /* **********                                                         */
VL_FBASBOF0000041600000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000041700000000000001     /* **********                                                         */
VL_FBASBOF0000041800000000000001     CHANGE     FIELD(#STD_DIRCT) TO(D)
VL_FBASBOF0000041900000000000001     ENDROUTINE
VL_FBASBOF0000042000000000000001     /* **********                                                         */
VL_FBASBOF0000042100000000000001     EVTROUTINE HANDLING(#rb_nbr.Click)
VL_FBASBOF0000042200000000000001     /* **********                                                         */
VL_FBASBOF0000042300000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000042400000000000001     /* **********                                                         */
VL_FBASBOF0000042500000000000001     CHANGE     FIELD(#STD_SORT) TO(C)
VL_FBASBOF0000042600000000000001     set        #gpbx_6 visible( false )
VL_FBASBOF0000042700000000000001     ENDROUTINE
VL_FBASBOF0000042800000000000001     /* **********                                                         */
VL_FBASBOF0000042900000000000001     EVTROUTINE HANDLING(#RB_ALP.Click)
VL_FBASBOF0000043000000000000001     /* **********                                                         */
VL_FBASBOF0000043100000000000001     /* ********** Set published property.                                 */
VL_FBASBOF0000043200000000000001     /* **********                                                         */
VL_FBASBOF0000043300000000000001     CHANGE     FIELD(#STD_SORT) TO(N)
VL_FBASBOF0000043400000000000001     set        #gpbx_6 visible( false )
VL_FBASBOF0000043500000000000001     ENDROUTINE
VL_FBASBOF0000043600000000000001     /* **********                                                         */
VL_FBASBOF0000043700000000000001     EVTROUTINE HANDLING(#PHBN_CNCL.Click)
VL_FBASBOF0000043800000000000001     invoke     #com_owner.closeform
VL_FBASBOF0000043900000000000001     ENDROUTINE
VL_FBASBOF0000044000000000000001     /* **********                                                         */
VL_FBASBOF0000044100000000000001     EVTROUTINE HANDLING(#PHBN_SAV.Click)
VL_FBASBOF0000044200000000000001     /* ********** Map from visual entities into remembered fields/values. */
VL_FBASBOF0000044300000000000001     /* **********                                                         */
VL_FBASBOF0000044400000000000001     /* ********** Set indicator that choice has been saved.               */
VL_FBASBOF0000044500000000000001     /* **********                                                         */
VL_FBASBOF0000044600000000000001     CHANGE     FIELD(#RMV_SAVED) TO(Y)
VL_FBASBOF0000044700000000000001     /* **********                                                         */
VL_FBASBOF0000044800000000000001     /* ********** Save level of filter.                                   */
VL_FBASBOF0000044900000000000001     /* **********                                                         */
VL_FBASBOF0000045000000000000001     IF         COND('#RDBN_LVL1.BUTTONCHECKED *EQ TRUE')
VL_FBASBOF0000045100000000000001     CHANGE     FIELD(#RMV_LEVEL) TO(1)
VL_FBASBOF0000045200000000000001     ELSE
VL_FBASBOF0000045300000000000001     CHANGE     FIELD(#RMV_LEVEL) TO(3)
VL_FBASBOF0000045400000000000001     ENDIF
VL_FBASBOF0000045500000000000001     /* **********                                                         */
VL_FBASBOF0000045600000000000001     /* ********** Save key values.                                        */
VL_FBASBOF0000045700000000000001     /* ********** Replace deptment and section with appropriate fields.   */
VL_FBASBOF0000045800000000000001     /* **********                                                         */
VL_FBASBOF0000045900000000000001     IF         COND('#CKBX_LVL1.BUTTONSTATE *EQ CHECKED')
VL_FBASBOF0000046000000000000001     CHANGE     FIELD(#RMV_DEPT) TO(*BLANK)
VL_FBASBOF0000046100000000000001     CHANGE     FIELD(#RMV_SECT) TO(*BLANK)
VL_FBASBOF0000046200000000000001     ELSE
VL_FBASBOF0000046300000000000001     CHANGE     FIELD(#RMV_DEPT) TO(#DEPTMENT)
VL_FBASBOF0000046400000000000001     IF         COND('#CKBX_LVL2.BUTTONSTATE *EQ CHECKED')
VL_FBASBOF0000046500000000000001     CHANGE     FIELD(#RMV_SECT) TO(*BLANK)
VL_FBASBOF0000046600000000000001     ELSE
VL_FBASBOF0000046700000000000001     CHANGE     FIELD(#RMV_SECT) TO(#SECTION)
VL_FBASBOF0000046800000000000001     ENDIF
VL_FBASBOF0000046900000000000001     ENDIF
VL_FBASBOF0000047000000000000001     /* **********                                                         */
VL_FBASBOF0000047100000000000001     /* ********** Save comparison values.                                 */
VL_FBASBOF0000047200000000000001     /* ********** Replace date and value with appropriate fields.         */
VL_FBASBOF0000047300000000000001     /* **********                                                         */
VL_FBASBOF0000047400000000000001     CHANGE     FIELD(#RMV_DATE) TO(*ZERO)
VL_FBASBOF0000047500000000000001     CHANGE     FIELD(#RMV_VALUE) TO(*ZERO)
VL_FBASBOF0000047600000000000001     IF         COND('#RB_NBR.BUTTONCHECKED *EQ TRUE')
VL_FBASBOF0000047700000000000001     CHANGE     FIELD(#RMV_SORT) TO(N)
VL_FBASBOF0000047800000000000001     ELSE
VL_FBASBOF0000047900000000000001     IF         COND('#RB_ALP.BUTTONCHECKED *EQ TRUE')
VL_FBASBOF0000048000000000000001     CHANGE     FIELD(#RMV_SORT) TO(A)
VL_FBASBOF0000048100000000000001     ELSE
VL_FBASBOF0000048200000000000001     IF         COND('#RB_DAT.BUTTONCHECKED *EQ TRUE')
VL_FBASBOF0000048300000000000001     CHANGE     FIELD(#RMV_SORT) TO(D)
VL_FBASBOF0000048400000000000001     CHANGE     FIELD(#RMV_DATE) TO('#STD_DATE')
VL_FBASBOF0000048500000000000001     ELSE
VL_FBASBOF0000048600000000000001     CHANGE     FIELD(#RMV_SORT) TO(V)
VL_FBASBOF0000048700000000000001     CHANGE     FIELD(#RMV_VALUE) TO('#STD_NUM')
VL_FBASBOF0000048800000000000001     ENDIF
VL_FBASBOF0000048900000000000001     ENDIF
VL_FBASBOF0000049000000000000001     ENDIF
VL_FBASBOF0000049100000000000001     /* **********                                                         */
VL_FBASBOF0000049200000000000001     /* ********** Save sort direction.                                    */
VL_FBASBOF0000049300000000000001     /* **********                                                         */
VL_FBASBOF0000049400000000000001     IF         COND('#RB_ASC.BUTTONCHECKED *EQ TRUE')
VL_FBASBOF0000049500000000000001     CHANGE     FIELD(#RMV_DIRCT) TO(A)
VL_FBASBOF0000049600000000000001     ELSE
VL_FBASBOF0000049700000000000001     CHANGE     FIELD(#RMV_DIRCT) TO(D)
VL_FBASBOF0000049800000000000001     ENDIF
VL_FBASBOF0000049900000000000001     /* **********                                                         */
VL_FBASBOF0000050000000000000001     /* ********** Save comparison operator.                               */
VL_FBASBOF0000050100000000000001     /* **********                                                         */
VL_FBASBOF0000050200000000000001     IF         COND('#GPBX_6.ENABLED *EQ TRUE')
VL_FBASBOF0000050300000000000001     CHANGE     FIELD(#RMV_CMPAR) TO('#STD_CMPAR')
VL_FBASBOF0000050400000000000001     ELSE
VL_FBASBOF0000050500000000000001     CHANGE     FIELD(#RMV_CMPAR) TO(*BLANK)
VL_FBASBOF0000050600000000000001     ENDIF
VL_FBASBOF0000050700000000000001     ENDROUTINE
VL_FBASBOF0000050800000000000001     /* **********                                                         */
VL_FBASBOF0000050900000000000001     @@ROUTEEND
VL_FBASBOF0000051000000000000001     END_COM
VL_FBASBOF0000051100000000000001E99: @@LABEL
VL_FBASBR10000000100000000000001     /* ********** ======================================================= */
VL_FBASBR10000000200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASBR10000000300000000000001     @@COMMENT  COMMENT(' This template is not available.            ')
VL_FBASBR10000000400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASBR10000000500000000000001     @@COMMENT  COMMENT(' It is still under development.             ')
VL_FBASBR10000000600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASBR20000000100000000000001     /* ********** ======================================================= */
VL_FBASBR20000000200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASBR20000000300000000000001     @@COMMENT  COMMENT(' This template is not available.            ')
VL_FBASBR20000000400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASBR20000000500000000000001     @@COMMENT  COMMENT(' It is still under development.             ')
VL_FBASBR20000000600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASBR20000000700000000000001     /* ********** ======================================================= */
VL_FBASMNT0000000100000000000001     /* **********                                                         */
VL_FBASMNT0000000200000000000001     /* ********** This RDMLX code creates a file maintenance form         */
VL_FBASMNT0000000300000000000001     /* **********                                                         */
VL_FBASMNT0000000400000000000001     /* ********** ======================================================= */
VL_FBASMNT0000000500000000000001     /* **********                                                         */
VL_FBASMNT0000000600000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT this data entry program works with') ANSWER(@@CANS001) EXTEND('The word you specify here is used to build messages that appear on the' 'data entry screen panel. You should use ONE word only, use lowercase' 'characters, and only use singular form (eg: "Customer", "Employee"' '"Order"). Do NOT use more than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010)
VL_FBASMNT0000000700000000000001     /* **********                                                         */
VL_FBASMNT0000000800000000000001     /* ********** Get name of one physical file                           */
VL_FBASMNT0000000900000000000001     /* **********                                                         */
VL_FBASMNT0000001000000000000001     @@GET_FILS TO(1) PROMPT('Enter the name of the PHYSICAL file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of RDML applications it can create.') HELPIDS(HELP020)
VL_FBASMNT0000001100000000000001     /* **********                                                         */
VL_FBASMNT0000001200000000000001     @@ROUTEDEF
VL_FBASMNT0000001300000000000001     /* ********** ======================================================= */
VL_FBASMNT0000001400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000001500000000000001     @@COMMENT  COMMENT(' @@CANS001                                  ')
VL_FBASMNT0000001600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000001700000000000001     @@COMMENT  COMMENT(' @@FNAME01 - Maintenance form               ')
VL_FBASMNT0000001800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000001900000000000001     @@COMMENT  COMMENT(' Template - VL_BASEMNT  Version 2.          ')
VL_FBASMNT0000002000000000000001     /* ********** ======================================================= */
VL_FBASMNT0000002100000000000001     @@COMMENT  COMMENT('    Set to top @@var_top = 0          ')
VL_FBASMNT0000002200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000002300000000000001     /* **********                                                         */
VL_FBASMNT0000002400000000000001     /* ********** Load fields and keys                                    */
VL_FBASMNT0000002500000000000001     /* **********                                                         */
VL_FBASMNT0000002600000000000001     @@CLR_LST  NUMBER(1)
VL_FBASMNT0000002700000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
VL_FBASMNT0000002800000000000001     /* **********                                                         */
VL_FBASMNT0000002900000000000001     @@CLR_LST  NUMBER(2)
VL_FBASMNT0000003000000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
VL_FBASMNT0000003100000000000001     @@SET_IDX  IDX_NAME(SV) TO(@@LNE02)
VL_FBASMNT0000003200000000000001     @@CLR_LST  NUMBER(9)
VL_FBASMNT0000003300000000000001     @@MRG_LSTS FROM_LSTS((2)) INTO_LST(9)
VL_FBASMNT0000003400000000000001     /* **********                                                         */
VL_FBASMNT0000003500000000000001     /* ********** Set index WW to 0 as flag for width property.           */
VL_FBASMNT0000003600000000000001     /* **********                                                         */
VL_FBASMNT0000003700000000000001     @@SET_IDX  IDX_NAME(WW) TO(0)
VL_FBASMNT0000003800000000000001     /* **********                                                         */
VL_FBASMNT0000003900000000000001     /* ********** ======================================================= */
VL_FBASMNT0000004000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000004100000000000001     @@COMMENT  COMMENT(' Key Fields                                 ')
VL_FBASMNT0000004200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000004300000000000001     /* ********** ======================================================= */
VL_FBASMNT0000004400000000000001     /* **********                                                         */
VL_FBASMNT0000004500000000000001     /* ********** Set displayposition count to 1                          */
VL_FBASMNT0000004600000000000001     /* ********** Set key field count to 1                                */
VL_FBASMNT0000004700000000000001     /* **********                                                         */
VL_FBASMNT0000004800000000000001     @@SET_IDX  IDX_NAME(DP) TO(1)
VL_FBASMNT0000004900000000000001     @@SET_IDX  IDX_NAME(KF) TO(1)
VL_FBASMNT0000005000000000000001K10: @@LABEL
VL_FBASMNT0000005100000000000001     @@CMP_IDX  IDX_NAME(KF) IDX_VALUE(@@LNE02) IF_GT(K20)
VL_FBASMNT0000005200000000000001     DEFINE_COM CLASS(#@@LEL02KF.VISUAL ) NAME(#@@LEL02KF) LEFT(8) PARENT(#@@PROCESS) TOP(@@VAR_TOP + 30)
VL_FBASMNT0000005300000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASMNT0000005400000000000001     @@INC_IDX  IDX_NAME(KF)
VL_FBASMNT0000005500000000000001     @@GOTO     LABEL(K10)
VL_FBASMNT0000005600000000000001K20: @@LABEL
VL_FBASMNT0000005700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000005800000000000001     /* **********                                                         */
VL_FBASMNT0000005900000000000001     @@QUESTION PROMPT('How do you want to display fields? Select from types listed below') ANSWER(@@CANS002) EXTEND('FF = Flat Form' 'TF = Tab Folder' 'Note: If the file definition contains many fields (more than 10), it may' 'be easier to arrange them on a tab folder.') LOWER(*NO) VALUES(FF TF) HELPIDS(HELP030)
VL_FBASMNT0000006000000000000001     /* **********                                                         */
VL_FBASMNT0000006100000000000001A10: @@LABEL
VL_FBASMNT0000006200000000000001     @@IF       COND((*IF @@CANS002 *EQ TF)) GOTO(T10)
VL_FBASMNT0000006300000000000001     /* **********                                                         */
VL_FBASMNT0000006400000000000001     /* ********** Create single form display                              */
VL_FBASMNT0000006500000000000001     /* **********                                                         */
VL_FBASMNT0000006600000000000001S10: @@LABEL
VL_FBASMNT0000006700000000000001     @@CLR_LST  NUMBER(3)
VL_FBASMNT0000006800000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(9) INTO_LSTS((3 'Select' 'fields' 'to display' *YESNO *FORCE))
VL_FBASMNT0000006900000000000001     @@MRG_LSTS FROM_LSTS((3)) INTO_LST(9)
VL_FBASMNT0000007000000000000001     @@SET_IDX  IDX_NAME(TT) TO(@@LNE03)
VL_FBASMNT0000007100000000000001     @@CMP_IDX  IDX_NAME(TT) IDX_VALUE(0) IF_EQ(A99)
VL_FBASMNT0000007200000000000001     /* **********                                                         */
VL_FBASMNT0000007300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000007400000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left  = 8      ')
VL_FBASMNT0000007500000000000001     @@COMMENT  COMMENT('    Set field top to @@var_top + 20         ')
VL_FBASMNT0000007600000000000001     @@COMMENT  COMMENT('    Set field top to @@var_ftop = @@var_top ')
VL_FBASMNT0000007700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000007800000000000001     @@SET_IDX  IDX_NAME(SF) TO(@@INDEXSV)
VL_FBASMNT0000007900000000000001     @@INC_IDX  IDX_NAME(SF)
VL_FBASMNT0000008000000000000001     @@SET_IDX  IDX_NAME(XX) TO(1)
VL_FBASMNT0000008100000000000001S20: @@LABEL
VL_FBASMNT0000008200000000000001     @@CMP_IDX  IDX_NAME(SF) IDX_VALUE(@@LNE09) IF_GT(A99)
VL_FBASMNT0000008300000000000001     @@CMP_IDX  IDX_NAME(XX) IDX_VALUE(9) IF_LT(Z10)
VL_FBASMNT0000008400000000000001     @@CMP_IDX  IDX_NAME(XX) IDX_VALUE(9) IF_GT(Z10)
VL_FBASMNT0000008500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000008600000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left  = 384    ')
VL_FBASMNT0000008700000000000001     @@COMMENT  COMMENT('  Reset field top to @@var_ftop = @@var_top ')
VL_FBASMNT0000008800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000008900000000000001     /* **********                                                         */
VL_FBASMNT0000009000000000000001     /* ********** Set index WW to 1 as flag for width property.           */
VL_FBASMNT0000009100000000000001     /* **********                                                         */
VL_FBASMNT0000009200000000000001     @@SET_IDX  IDX_NAME(WW) TO(1)
VL_FBASMNT0000009300000000000001Z10: @@LABEL
VL_FBASMNT0000009400000000000001     DEFINE_COM CLASS(#@@LEL09SF.VISUAL ) NAME(#@@LEL09SF) LEFT(@@VAR_LEFT + 0) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP)     TOP(@@VAR_FTOP + 30)
VL_FBASMNT0000009500000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASMNT0000009600000000000001     @@INC_IDX  IDX_NAME(SF)
VL_FBASMNT0000009700000000000001     @@INC_IDX  IDX_NAME(XX)
VL_FBASMNT0000009800000000000001     @@GOTO     LABEL(S20)
VL_FBASMNT0000009900000000000001     /* **********                                                         */
VL_FBASMNT0000010000000000000001     /* ********** Create tab folder                                       */
VL_FBASMNT0000010100000000000001     /* **********                                                         */
VL_FBASMNT0000010200000000000001T10: @@LABEL
VL_FBASMNT0000010300000000000001     @@SET_IDX  IDX_NAME(ZZ) TO(0)
VL_FBASMNT0000010400000000000001     @@QUESTION PROMPT('''How many tab sheets do you wish to create?') ANSWER(@@NANS001) EXTEND('Select up to 10 logically grouped fields for each tab sheet to allow room ' 'to rearrange position or size of fields if required.') HELPIDS(HELP040)
VL_FBASMNT0000010500000000000001     @@SET_IDX  IDX_NAME(TB) TO(1)
VL_FBASMNT0000010600000000000001T20: @@LABEL
VL_FBASMNT0000010700000000000001     @@CMP_IDX  IDX_NAME(TB) IDX_VALUE(@@NANS001) IF_GT(T99)
VL_FBASMNT0000010800000000000001     @@CLR_LST  NUMBER(3)
VL_FBASMNT0000010900000000000001     @@INC_IDX  IDX_NAME(ZZ)
VL_FBASMNT0000011000000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT tab sheet @@INDEXZZ contains') ANSWER(@@CANS003) EXTEND('The word you specify here is used as the caption on the tab sheet')
VL_FBASMNT0000011100000000000001     @@SET_IDX  IDX_NAME(SV) TO(@@LNE09)
VL_FBASMNT0000011200000000000001     @@MAK_LSTS FROM_LSTS(1) FORCE_LSTS(9) INTO_LSTS((3 'Select' 'fields' 'to display' *YESNO *FORCE))
VL_FBASMNT0000011300000000000001     @@MRG_LSTS FROM_LSTS((3)) INTO_LST(9)
VL_FBASMNT0000011400000000000001     @@SET_IDX  IDX_NAME(TT) TO(@@LNE03)
VL_FBASMNT0000011500000000000001     @@CMP_IDX  IDX_NAME(TT) IDX_VALUE(0) IF_EQ(T99)
VL_FBASMNT0000011600000000000001     /* **********                                                         */
VL_FBASMNT0000011700000000000001     /* ********** ======================================================= */
VL_FBASMNT0000011800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000011900000000000001     @@COMMENT  COMMENT('    @@CANS003 - Tab sheet                   ')
VL_FBASMNT0000012000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000012100000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left = 2       ')
VL_FBASMNT0000012200000000000001     @@COMMENT  COMMENT('    Set top margin to @@var_tbshtop  = 0   ')
VL_FBASMNT0000012300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000012400000000000001     /* ********** ======================================================= */
VL_FBASMNT0000012500000000000001     /* **********                                                         */
VL_FBASMNT0000012600000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_@@INDEXZZ) CAPTION('@@CANS003') DISPLAYPOSITION(@@INDEXZZ) PARENT(#TAB_1)
VL_FBASMNT0000012700000000000001     @@SET_IDX  IDX_NAME(CF) TO(@@INDEXSV)
VL_FBASMNT0000012800000000000001     @@INC_IDX  IDX_NAME(CF)
VL_FBASMNT0000012900000000000001     @@SET_IDX  IDX_NAME(XX) TO(1)
VL_FBASMNT0000013000000000000001T30: @@LABEL
VL_FBASMNT0000013100000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE03) IF_GT(T40)
VL_FBASMNT0000013200000000000001     @@CMP_IDX  IDX_NAME(XX) IDX_VALUE(9) IF_LT(X10)
VL_FBASMNT0000013300000000000001     @@CMP_IDX  IDX_NAME(XX) IDX_VALUE(9) IF_GT(X10)
VL_FBASMNT0000013400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000013500000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left  = 370    ')
VL_FBASMNT0000013600000000000001     @@COMMENT  COMMENT('    Set top margin to @@var_tbshtop  = 0    ')
VL_FBASMNT0000013700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000013800000000000001     /* **********                                                         */
VL_FBASMNT0000013900000000000001     /* ********** Set index WW to 1 as flag for width property.           */
VL_FBASMNT0000014000000000000001     /* **********                                                         */
VL_FBASMNT0000014100000000000001     @@SET_IDX  IDX_NAME(WW) TO(1)
VL_FBASMNT0000014200000000000001X10: @@LABEL
VL_FBASMNT0000014300000000000001     DEFINE_COM CLASS(#@@LEL09CF.VISUAL ) NAME(#@@LEL09CF) LEFT(@@VAR_LEFT + 0) PARENT(#TBSH_@@INDEXZZ) TOP(@@VAR_TBSHTOP + 25)
VL_FBASMNT0000014400000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASMNT0000014500000000000001     @@INC_IDX  IDX_NAME(CF)
VL_FBASMNT0000014600000000000001     @@INC_IDX  IDX_NAME(XX)
VL_FBASMNT0000014700000000000001     @@GOTO     LABEL(T30)
VL_FBASMNT0000014800000000000001T40: @@LABEL
VL_FBASMNT0000014900000000000001     @@INC_IDX  IDX_NAME(TB)
VL_FBASMNT0000015000000000000001     @@GOTO     LABEL(T20)
VL_FBASMNT0000015100000000000001     /* **********                                                         */
VL_FBASMNT0000015200000000000001T99: @@LABEL
VL_FBASMNT0000015300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000015400000000000001     @@CMP_IDX  IDX_NAME(WW) IDX_VALUE(1) IF_EQ(TF1)
VL_FBASMNT0000015500000000000001     @@COMMENT  COMMENT(' Set tab folder width @@var_TFW   = 445    ')
VL_FBASMNT0000015600000000000001     @@GOTO     LABEL(TF9)
VL_FBASMNT0000015700000000000001TF1: @@LABEL
VL_FBASMNT0000015800000000000001     @@COMMENT  COMMENT(' Set tab folder width @@var_TFW   = 745    ')
VL_FBASMNT0000015900000000000001TF9: @@LABEL
VL_FBASMNT0000016000000000000001     DEFINE_COM CLASS(#PRIM_TAB) NAME(#TAB_1) DISPLAYPOSITION(@@INDEXDP) HEIGHT(265) LEFT(8) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 35) WIDTH(@@VAR_TFW + 0)
VL_FBASMNT0000016100000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASMNT0000016200000000000001     /* **********                                                         */
VL_FBASMNT0000016300000000000001A99: @@LABEL
VL_FBASMNT0000016400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000016500000000000001     @@COMMENT  COMMENT('    Buttons                                 ')
VL_FBASMNT0000016600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000016700000000000001     @@COMMENT  COMMENT('    Set button top to @@VAR_TOP + 280       ')
VL_FBASMNT0000016800000000000001     /* **********                                                         */
VL_FBASMNT0000016900000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#FETCH) CAPTION(&Fetch) DISPLAYPOSITION(@@INDEXDP) LEFT(20) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0)
VL_FBASMNT0000017000000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASMNT0000017100000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#INSERT) CAPTION(&Insert) DISPLAYPOSITION(@@INDEXDP) LEFT(120) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0)
VL_FBASMNT0000017200000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASMNT0000017300000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#UPDATE) CAPTION(&Update) DISPLAYPOSITION(@@INDEXDP) LEFT(220) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0)
VL_FBASMNT0000017400000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASMNT0000017500000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#DELETE) CAPTION(&Delete) DISPLAYPOSITION(@@INDEXDP) LEFT(320) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0)
VL_FBASMNT0000017600000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASMNT0000017700000000000001     /* **********                                                         */
VL_FBASMNT0000017800000000000001     /* ********** Add status bar for messages.                            */
VL_FBASMNT0000017900000000000001     /* **********                                                         */
VL_FBASMNT0000018000000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(25) MESSAGEPOSITION(1) PARENT(#@@PROCESS) TOP(@@VAR_TOP + 50)
VL_FBASMNT0000018100000000000001     /* **********                                                         */
VL_FBASMNT0000018200000000000001     /* ********** Adjust form size and details.                           */
VL_FBASMNT0000018300000000000001     /* **********                                                         */
VL_FBASMNT0000018400000000000001     @@ROUTEBEG
VL_FBASMNT0000018500000000000001     @@CMP_IDX  IDX_NAME(WW) IDX_VALUE(1) IF_EQ(W10)
VL_FBASMNT0000018600000000000001     BEGIN_COM  CAPTION(@@CANS001) HEIGHT(@@VAR_TOP + 40) LEFT(270)    TOP(105) VISUALSTYLE(#VS_NORM) WIDTH(470)
VL_FBASMNT0000018700000000000001     @@GOTO     LABEL(W20)
VL_FBASMNT0000018800000000000001W10: @@LABEL
VL_FBASMNT0000018900000000000001     BEGIN_COM  CAPTION(@@CANS001) HEIGHT(@@VAR_TOP + 40) LEFT(19)     TOP(105) VISUALSTYLE(#VS_NORM) WIDTH(765)
VL_FBASMNT0000019000000000000001W20: @@LABEL
VL_FBASMNT0000019100000000000001     @@ROUTEDEF
VL_FBASMNT0000019200000000000001     /* **********                                                         */
VL_FBASMNT0000019300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000019400000000000001     @@COMMENT  COMMENT('     RDML Definitions                       ')
VL_FBASMNT0000019500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000019600000000000001     /* **********                                                         */
VL_FBASMNT0000019700000000000001     DEFINE     #MESSAGE *CHAR 132
VL_FBASMNT0000019800000000000001     GROUP_BY   NAME(#ALLFLDS) FIELDS(@@LST01)
VL_FBASMNT0000019900000000000001     @@ROUTERTN
VL_FBASMNT0000020000000000000001     /* **********                                                         */
VL_FBASMNT0000020100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000020200000000000001     @@COMMENT  COMMENT('     Event Routines                         ')
VL_FBASMNT0000020300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000020400000000000001     /* **********                                                         */
VL_FBASMNT0000020500000000000001     @@COMMENT  COMMENT('    Fetch                                   ')
VL_FBASMNT0000020600000000000001     EVTROUTINE HANDLING(#FETCH.CLICK)
VL_FBASMNT0000020700000000000001     FETCH      FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01) WITH_KEY(@@LST02)
VL_FBASMNT0000020800000000000001     IF_STATUS  IS(*NORECORD)
VL_FBASMNT0000020900000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_FBASMNT0000021000000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_FBASMNT0000021100000000000001     ELSE
VL_FBASMNT0000021200000000000001     IF_STATUS  IS(*ERROR)
VL_FBASMNT0000021300000000000001     MESSAGE    MSGTXT('Error retrieving @@CANS001')
VL_FBASMNT0000021400000000000001     ENDIF
VL_FBASMNT0000021500000000000001     ENDIF
VL_FBASMNT0000021600000000000001     ENDROUTINE
VL_FBASMNT0000021700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000021800000000000001     /* **********                                                         */
VL_FBASMNT0000021900000000000001     @@COMMENT  COMMENT('    Insert                                  ')
VL_FBASMNT0000022000000000000001     EVTROUTINE HANDLING(#INSERT.CLICK)
VL_FBASMNT0000022100000000000001     INSERT     FIELDS(#ALLFLDS) TO_FILE(@@FNAME01) VAL_ERROR(*NEXT)
VL_FBASMNT0000022200000000000001     IF_STATUS  IS(*OKAY)
VL_FBASMNT0000022300000000000001     MESSAGE    MSGTXT('@@CANS001 inserted successfully')
VL_FBASMNT0000022400000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_FBASMNT0000022500000000000001     ELSE
VL_FBASMNT0000022600000000000001     IF_STATUS  IS(*ERROR)
VL_FBASMNT0000022700000000000001     MESSAGE    MSGTXT('Error inserting @@CANS001')
VL_FBASMNT0000022800000000000001     ENDIF
VL_FBASMNT0000022900000000000001     ENDIF
VL_FBASMNT0000023000000000000001     ENDROUTINE
VL_FBASMNT0000023100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000023200000000000001     /* **********                                                         */
VL_FBASMNT0000023300000000000001     @@COMMENT  COMMENT('    Update                                  ')
VL_FBASMNT0000023400000000000001     EVTROUTINE HANDLING(#UPDATE.CLICK)
VL_FBASMNT0000023500000000000001     UPDATE     FIELDS(#ALLFLDS) IN_FILE(@@FNAME01) WITH_KEY(@@LST02) VAL_ERROR(*NEXT)
VL_FBASMNT0000023600000000000001     IF_STATUS  IS(*OKAY)
VL_FBASMNT0000023700000000000001     MESSAGE    MSGTXT('@@CANS001 updated successfully')
VL_FBASMNT0000023800000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_FBASMNT0000023900000000000001     ELSE
VL_FBASMNT0000024000000000000001     IF_STATUS  IS(*NORECORD)
VL_FBASMNT0000024100000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_FBASMNT0000024200000000000001     ELSE
VL_FBASMNT0000024300000000000001     IF_STATUS  IS(*ERROR)
VL_FBASMNT0000024400000000000001     MESSAGE    MSGTXT('Error updating @@CANS001')
VL_FBASMNT0000024500000000000001     ENDIF
VL_FBASMNT0000024600000000000001     ENDIF
VL_FBASMNT0000024700000000000001     ENDIF
VL_FBASMNT0000024800000000000001     ENDROUTINE
VL_FBASMNT0000024900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000025000000000000001     /* **********                                                         */
VL_FBASMNT0000025100000000000001     @@COMMENT  COMMENT('    Delete                                  ')
VL_FBASMNT0000025200000000000001     EVTROUTINE HANDLING(#DELETE.CLICK)
VL_FBASMNT0000025300000000000001     DELETE     FROM_FILE(@@FNAME01) WITH_KEY(@@LST02) VAL_ERROR(*NEXT)
VL_FBASMNT0000025400000000000001     IF_STATUS  IS(*OKAY)
VL_FBASMNT0000025500000000000001     MESSAGE    MSGTXT('@@CANS001 deleted successfully')
VL_FBASMNT0000025600000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_FBASMNT0000025700000000000001     ELSE
VL_FBASMNT0000025800000000000001     IF_STATUS  IS(*NORECORD)
VL_FBASMNT0000025900000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_FBASMNT0000026000000000000001     ELSE
VL_FBASMNT0000026100000000000001     IF_STATUS  IS(*ERROR)
VL_FBASMNT0000026200000000000001     MESSAGE    MSGTXT('Error deleting @@CANS001')
VL_FBASMNT0000026300000000000001     ENDIF
VL_FBASMNT0000026400000000000001     ENDIF
VL_FBASMNT0000026500000000000001     ENDIF
VL_FBASMNT0000026600000000000001     ENDROUTINE
VL_FBASMNT0000026700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000026800000000000001     /* **********                                                         */
VL_FBASMNT0000026900000000000001     /* ********** Initialise fields                                       */
VL_FBASMNT0000027000000000000001     /* **********                                                         */
VL_FBASMNT0000027100000000000001     SUBROUTINE NAME(INITFLDS)
VL_FBASMNT0000027200000000000001     CHANGE     #ALLFLDS *NULL
VL_FBASMNT0000027300000000000001     ENDROUTINE
VL_FBASMNT0000027400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASMNT0000027500000000000001     /* **********                                                         */
VL_FBASMNT0000027600000000000001E99: @@LABEL
VL_FBASMNT0000027700000000000001     @@ROUTEEND
VL_FBASMNT0000027800000000000001     END_COM
VL_FBASMNT0000027900000000000001     /* **********                                                         */
VL_FBASMNT0000028000000000000001     /* ********** ------------------------------------------------        */
VL_FBASMNT0000028100000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
VL_FBASMNT0000028200000000000001     /* ********** ------------------------------------------------        */
VL_FBASMNT0000028300000000000001     @@CLR_LST  NUMBER(1)
VL_FBASMNT0000028400000000000001     @@CLR_LST  NUMBER(2)
VL_FBASMNT0000028500000000000001     @@CLR_LST  NUMBER(3)
VL_FBASMNT0000028600000000000001     @@CLR_LST  NUMBER(9)
VL_FBASTAB0000000100000000000001     /* ********** ======================================================= */
VL_FBASTAB0000000200000000000001     @@ROUTEBEG
VL_FBASTAB0000000300000000000001     BEGIN_COM  CAPTION('TAB FOLDER') VISUALSTYLE(#VS_NORM)
VL_FBASTAB0000000400000000000001     @@ROUTEDEF
VL_FBASTAB0000000500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000000600000000000001     @@COMMENT  COMMENT(' Tab folder                                 ')
VL_FBASTAB0000000700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000000800000000000001     /* ********** ======================================================= */
VL_FBASTAB0000000900000000000001     DEFINE_COM CLASS(#PRIM_TAB) NAME(#TAB_1) HEIGHT(210) LEFT(40) PARENT(#@@PROCESS) TOP(48) WIDTH(420)
VL_FBASTAB0000001000000000000001     /* ********** ======================================================= */
VL_FBASTAB0000001100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000001200000000000001     @@COMMENT  COMMENT(' Tab sheets.                                ')
VL_FBASTAB0000001300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000001400000000000001     /* ********** ======================================================= */
VL_FBASTAB0000001500000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_1) CAPTION('Tab 1') PARENT(#TAB_1)
VL_FBASTAB0000001600000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_2) CAPTION('Tab 2') PARENT(#TAB_1)
VL_FBASTAB0000001700000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_3) CAPTION('Tab 3') PARENT(#TAB_1)
VL_FBASTAB0000001800000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_4) CAPTION('Tab 4') PARENT(#TAB_1)
VL_FBASTAB0000001900000000000001     /* ********** ======================================================= */
VL_FBASTAB0000002000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000002100000000000001     @@COMMENT  COMMENT(' Status bar for messages           ')
VL_FBASTAB0000002200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000002300000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(25)
VL_FBASTAB0000002400000000000001     /* ********** ======================================================= */
VL_FBASTAB0000002500000000000001     @@ROUTERTN
VL_FBASTAB0000002600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000002700000000000001     @@COMMENT  COMMENT(' Event routines                         ')
VL_FBASTAB0000002800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000002900000000000001     /* ********** ======================================================= */
VL_FBASTAB0000003000000000000001     EVTROUTINE HANDLING(#TBSH_1.Opening)
VL_FBASTAB0000003100000000000001     ENDROUTINE
VL_FBASTAB0000003200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000003300000000000001     /* **********                                                         */
VL_FBASTAB0000003400000000000001     EVTROUTINE HANDLING(#TBSH_2.Opening)
VL_FBASTAB0000003500000000000001     ENDROUTINE
VL_FBASTAB0000003600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000003700000000000001     /* **********                                                         */
VL_FBASTAB0000003800000000000001     EVTROUTINE HANDLING(#TBSH_3.Opening)
VL_FBASTAB0000003900000000000001     ENDROUTINE
VL_FBASTAB0000004000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000004100000000000001     /* **********                                                         */
VL_FBASTAB0000004200000000000001     EVTROUTINE HANDLING(#TBSH_4.Opening)
VL_FBASTAB0000004300000000000001     ENDROUTINE
VL_FBASTAB0000004400000000000001     /* **********                                                         */
VL_FBASTAB0000004500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000004600000000000001     @@COMMENT  COMMENT('    Status Message                          ')
VL_FBASTAB0000004700000000000001     SUBROUTINE STSMESSAGE ((#EX_ISSUE *RECEIVED)(#EX_COUNT *BOTH)(#EX_NAME *RECEIVED))
VL_FBASTAB0000004800000000000001     define     #ex_issue *dec 15 0
VL_FBASTAB0000004900000000000001     define     #ex_count *dec 15 0
VL_FBASTAB0000005000000000000001     define     #ex_name  *char 20
VL_FBASTAB0000005100000000000001     define     #ex_remn  *dec 7 7
VL_FBASTAB0000005200000000000001     change     #ex_count '#ex_count + 1'
VL_FBASTAB0000005300000000000001     change     #ex_remn  '#ex_count / #ex_issue'
VL_FBASTAB0000005400000000000001     if         '#ex_remn = 0.0000000'
VL_FBASTAB0000005500000000000001     message    msgid(dcu0017) msgf(dc@m01) msgdta(#ex_count #ex_name) type(*status)
VL_FBASTAB0000005600000000000001     endif
VL_FBASTAB0000005700000000000001     ENDROUTINE
VL_FBASTAB0000005800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000005900000000000001     @@COMMENT  COMMENT('    Information Message                     ')
VL_FBASTAB0000006000000000000001     SUBROUTINE INFMESSAGE ((#EX_TEXT *RECEIVED))
VL_FBASTAB0000006100000000000001     define     #ex_text  *char 132
VL_FBASTAB0000006200000000000001     message    msgid(dcm9992) msgf(dc@m01) msgdta(#ex_text *blanks)
VL_FBASTAB0000006300000000000001     ENDROUTINE
VL_FBASTAB0000006400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTAB0000006500000000000001     /* **********                                                         */
VL_FBASTAB0000006600000000000001     @@ROUTEEND
VL_FBASTAB0000006700000000000001     END_COM
VL_FBASTAB0000006800000000000001     /* **********                                                         */
VL_FBASTRE0000000100000000000001     /* ********** ======================================================= */
VL_FBASTRE0000000200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000000300000000000001     @@QUESTION PROMPT('Supply a word that describes the type of object this function works with.') ANSWER(@@CANS001) EXTEND('123456789012345678' 'You should use ONE word only, use lowercase characters and only use ' 'singular form (eg: "Customer", "Employee", Order"). DO NOT use more ' 'than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010)
VL_FBASTRE0000000400000000000001     /* **********                                                         */
VL_FBASTRE0000000500000000000001     /* ********** ======================================================= */
VL_FBASTRE0000000600000000000001     @@ROUTEBEG
VL_FBASTRE0000000700000000000001     BEGIN_COM  CAPTION('@@CANS001') VISUALSTYLE(#VS_NORM)
VL_FBASTRE0000000800000000000001     @@ROUTEDEF
VL_FBASTRE0000000900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000001000000000000001     @@COMMENT  COMMENT('    Work With @@cans001            ')
VL_FBASTRE0000001100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000001200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000001300000000000001     @@COMMENT  COMMENT('    Menu definition                ')
VL_FBASTRE0000001400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000001500000000000001     /* ********** ======================================================= */
VL_FBASTRE0000001600000000000001     DEFINE_COM CLASS(#PRIM_MBAR) NAME(#MBAR_1) PARENT(#@@PROCESS)
VL_FBASTRE0000001700000000000001     /* ********** ======================================================= */
VL_FBASTRE0000001800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000001900000000000001     @@COMMENT  COMMENT('    Menu 1 - @@CANS001                      ')
VL_FBASTRE0000002000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000002100000000000001     /* ********** ======================================================= */
VL_FBASTRE0000002200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_1) CAPTION(&@@CANS001) PARENT(#MBAR_1)
VL_FBASTRE0000002300000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_1) PARENT(#MITM_1)
VL_FBASTRE0000002400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_2) CAPTION(&New) PARENT(#SMNU_1)
VL_FBASTRE0000002500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_3) CAPTION(-) PARENT(#SMNU_1)
VL_FBASTRE0000002600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_4) CAPTION(&Open) PARENT(#SMNU_1)
VL_FBASTRE0000002700000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_5) CAPTION(&Close) PARENT(#SMNU_1)
VL_FBASTRE0000002800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_6) CAPTION(-) PARENT(#SMNU_1)
VL_FBASTRE0000002900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_7) CAPTION(&Save) PARENT(#SMNU_1)
VL_FBASTRE0000003000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_8) CAPTION('Save &As') PARENT(#SMNU_1)
VL_FBASTRE0000003100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_9) CAPTION(-) PARENT(#SMNU_1)
VL_FBASTRE0000003200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_10) CAPTION('Sen&d To') PARENT(#SMNU_1)
VL_FBASTRE0000003300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_11) CAPTION(&Print) PARENT(#SMNU_1)
VL_FBASTRE0000003400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_12) CAPTION(-) PARENT(#SMNU_1)
VL_FBASTRE0000003500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_13) CAPTION(E&xit) PARENT(#SMNU_1)
VL_FBASTRE0000003600000000000001     /* ********** ======================================================= */
VL_FBASTRE0000003700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000003800000000000001     @@COMMENT  COMMENT('    Menu 2 - Selected                       ')
VL_FBASTRE0000003900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000004000000000000001     /* ********** ======================================================= */
VL_FBASTRE0000004100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_14) CAPTION(&Selected) PARENT(#MBAR_1)
VL_FBASTRE0000004200000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_2) PARENT(#MITM_14)
VL_FBASTRE0000004300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_15) CAPTION(Dis&play) PARENT(#SMNU_2)
VL_FBASTRE0000004400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_16) CAPTION(&Delete) PARENT(#SMNU_2)
VL_FBASTRE0000004500000000000001     /* ********** ======================================================= */
VL_FBASTRE0000004600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000004700000000000001     @@COMMENT  COMMENT('    Menu 3 - View                           ')
VL_FBASTRE0000004800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000004900000000000001     /* ********** ======================================================= */
VL_FBASTRE0000005000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_17) CAPTION(&View) PARENT(#MBAR_1)
VL_FBASTRE0000005100000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_3) PARENT(#MITM_17)
VL_FBASTRE0000005200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_18) CAPTION('&Full Screen')PARENT(#SMNU_3)
VL_FBASTRE0000005300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_19) CAPTION(&Zoom)  PARENT(#SMNU_3)
VL_FBASTRE0000005400000000000001     /* ********** ======================================================= */
VL_FBASTRE0000005500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000005600000000000001     @@COMMENT  COMMENT('    Menu 4 - Help                           ')
VL_FBASTRE0000005700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000005800000000000001     /* ********** ======================================================= */
VL_FBASTRE0000005900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_20) CAPTION(&Help) PARENT(#MBAR_1)
VL_FBASTRE0000006000000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_4) PARENT(#MITM_20)
VL_FBASTRE0000006100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_21) CAPTION('&Help Topics')PARENT(#SMNU_4)
VL_FBASTRE0000006200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_22) CAPTION(&About) PARENT(#SMNU_4)
VL_FBASTRE0000006300000000000001     /* ********** ======================================================= */
VL_FBASTRE0000006400000000000001     /* **********                                                         */
VL_FBASTRE0000006500000000000001     /* ********** ======================================================= */
VL_FBASTRE0000006600000000000001     /* ********** GET NAME OF JUST ONE PHYSICAL FILE                      */
VL_FBASTRE0000006700000000000001     /* ********** ======================================================= */
VL_FBASTRE0000006800000000000001     /* **********                                                         */
VL_FBASTRE0000006900000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of Visual LANSA applications it can create.') HELPIDS(HELP020)
VL_FBASTRE0000007000000000000001     /* **********                                                         */
VL_FBASTRE0000007100000000000001     /* ********** Load keys of base file                                  */
VL_FBASTRE0000007200000000000001     /* **********                                                         */
VL_FBASTRE0000007300000000000001     @@CLR_LST  NUMBER(1)
VL_FBASTRE0000007400000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(1)
VL_FBASTRE0000007500000000000001     /* **********                                                         */
VL_FBASTRE0000007600000000000001     @@QUESTION PROMPT('How many Key/levels do you wish to create?') ANSWER(@@NANS001) EXTEND('12' 'If you do not request at least 1 level the tree will not be created.' 'You will be prompted for a key field for each level of the tree.') HELPIDS(HELP030)
VL_FBASTRE0000007700000000000001     @@IF       COND((*IF @@NANS001 *LT 1)) GOTO(A99)
VL_FBASTRE0000007800000000000001     /* **********                                                         */
VL_FBASTRE0000007900000000000001     /* ********** ======================================================= */
VL_FBASTRE0000008000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000008100000000000001     @@COMMENT  COMMENT('    Tree view definition                    ')
VL_FBASTRE0000008200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000008300000000000001     /* ********** ======================================================= */
VL_FBASTRE0000008400000000000001     DEFINE_COM CLASS(#PRIM_TRVW) NAME(#TRVW_1) DISPLAYPOSITION(1) HEIGHT(200) LEFT(16) LINESATROOT(True) PARENT(#@@PROCESS) TABPOSITION(1) TOP(16) WIDTH(177)
VL_FBASTRE0000008500000000000001     /* **********                                                         */
VL_FBASTRE0000008600000000000001     @@SET_IDX  IDX_NAME(KL) TO(1)
VL_FBASTRE0000008700000000000001     @@SET_IDX  IDX_NAME(LP) TO(0)
VL_FBASTRE0000008800000000000001     @@SET_IDX  IDX_NAME(TR) TO(10)
VL_FBASTRE0000008900000000000001T10: @@LABEL
VL_FBASTRE0000009000000000000001     @@CMP_IDX  IDX_NAME(KL) IDX_VALUE(@@NANS001) IF_GT(A99)
VL_FBASTRE0000009100000000000001     @@INC_IDX  IDX_NAME(LP)
VL_FBASTRE0000009200000000000001     @@CLR_LST  NUMBER(2)
VL_FBASTRE0000009300000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((2 'Select key ' 'for next ' 'level    ')) HELPIDS(HELP040)
VL_FBASTRE0000009400000000000001     @@SET_IDX  IDX_NAME(TT) TO(@@LNE02)
VL_FBASTRE0000009500000000000001     @@CMP_IDX  IDX_NAME(TT) IDX_VALUE(0) IF_EQ(A99)
VL_FBASTRE0000009600000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
VL_FBASTRE0000009700000000000001T20: @@LABEL
VL_FBASTRE0000009800000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE02) IF_GT(T30)
VL_FBASTRE0000009900000000000001     /* **********                                                         */
VL_FBASTRE0000010000000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_@@INDEXTR) DISPLAYPOSITION(1) KEYPOSITION(1) LEVEL(@@INDEXLP) PARENT(#TRVW_1)    SOURCE(#@@LEL02CF)
VL_FBASTRE0000010100000000000001     /* **********                                                         */
VL_FBASTRE0000010200000000000001     @@INC_IDX  IDX_NAME(TR)
VL_FBASTRE0000010300000000000001     @@INC_IDX  IDX_NAME(CF)
VL_FBASTRE0000010400000000000001     @@GOTO     LABEL(T20)
VL_FBASTRE0000010500000000000001T30: @@LABEL
VL_FBASTRE0000010600000000000001     @@INC_IDX  IDX_NAME(KL)
VL_FBASTRE0000010700000000000001     @@GOTO     LABEL(T10)
VL_FBASTRE0000010800000000000001     /* **********                                                         */
VL_FBASTRE0000010900000000000001A99: @@LABEL
VL_FBASTRE0000011000000000000001     /* ********** ======================================================= */
VL_FBASTRE0000011100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000011200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000011300000000000001     @@COMMENT  COMMENT(' Create a status bar for messages           ')
VL_FBASTRE0000011400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000011500000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(25) MESSAGEPOSITION(1) PARENT(#@@PROCESS)
VL_FBASTRE0000011600000000000001     /* ********** ======================================================= */
VL_FBASTRE0000011700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000011800000000000001     @@COMMENT  COMMENT('     RDML Definitions                       ')
VL_FBASTRE0000011900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000012000000000000001     /* ********** ======================================================= */
VL_FBASTRE0000012100000000000001     GROUP_BY   NAME(#ALLFLDS) FIELDS(@@LST01)
VL_FBASTRE0000012200000000000001     /* ********** ======================================================= */
VL_FBASTRE0000012300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000012400000000000001     @@COMMENT  COMMENT('    Menu events                             ')
VL_FBASTRE0000012500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000012600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000012700000000000001     @@COMMENT  COMMENT('    Menu 1 - Object                         ')
VL_FBASTRE0000012800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000012900000000000001     @@COMMENT  COMMENT('    Menu item - New                         ')
VL_FBASTRE0000013000000000000001     /* ********** ======================================================= */
VL_FBASTRE0000013100000000000001     @@ROUTERTN
VL_FBASTRE0000013200000000000001     EVTROUTINE HANDLING(#MITM_2.CLICK)
VL_FBASTRE0000013300000000000001     ENDROUTINE
VL_FBASTRE0000013400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000013500000000000001     /* **********                                                         */
VL_FBASTRE0000013600000000000001     @@COMMENT  COMMENT('    Menu item - Open                        ')
VL_FBASTRE0000013700000000000001     EVTROUTINE HANDLING(#MITM_4.CLICK)
VL_FBASTRE0000013800000000000001     ENDROUTINE
VL_FBASTRE0000013900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000014000000000000001     /* **********                                                         */
VL_FBASTRE0000014100000000000001     @@COMMENT  COMMENT('    Menu item - Close                       ')
VL_FBASTRE0000014200000000000001     EVTROUTINE HANDLING(#MITM_5.CLICK)
VL_FBASTRE0000014300000000000001     ENDROUTINE
VL_FBASTRE0000014400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000014500000000000001     /* **********                                                         */
VL_FBASTRE0000014600000000000001     @@COMMENT  COMMENT('    Menu item - Save                        ')
VL_FBASTRE0000014700000000000001     EVTROUTINE HANDLING(#MITM_7.CLICK)
VL_FBASTRE0000014800000000000001     ENDROUTINE
VL_FBASTRE0000014900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000015000000000000001     /* **********                                                         */
VL_FBASTRE0000015100000000000001     @@COMMENT  COMMENT('    Menu item - Save As                     ')
VL_FBASTRE0000015200000000000001     EVTROUTINE HANDLING(#MITM_8.CLICK)
VL_FBASTRE0000015300000000000001     ENDROUTINE
VL_FBASTRE0000015400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000015500000000000001     /* **********                                                         */
VL_FBASTRE0000015600000000000001     @@COMMENT  COMMENT('    Menu item - Send To                     ')
VL_FBASTRE0000015700000000000001     EVTROUTINE HANDLING(#MITM_10.CLICK)
VL_FBASTRE0000015800000000000001     ENDROUTINE
VL_FBASTRE0000015900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000016000000000000001     /* **********                                                         */
VL_FBASTRE0000016100000000000001     @@COMMENT  COMMENT('    Menu item - Print                       ')
VL_FBASTRE0000016200000000000001     EVTROUTINE HANDLING(#MITM_11.CLICK)
VL_FBASTRE0000016300000000000001     ENDROUTINE
VL_FBASTRE0000016400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000016500000000000001     /* **********                                                         */
VL_FBASTRE0000016600000000000001     @@COMMENT  COMMENT('    Menu item - Exit                        ')
VL_FBASTRE0000016700000000000001     EVTROUTINE HANDLING(#MITM_13.CLICK)
VL_FBASTRE0000016800000000000001     ENDROUTINE
VL_FBASTRE0000016900000000000001     /* ********** ======================================================= */
VL_FBASTRE0000017000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000017100000000000001     @@COMMENT  COMMENT('    Menu 2 - Selected                       ')
VL_FBASTRE0000017200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000017300000000000001     /* ********** ======================================================= */
VL_FBASTRE0000017400000000000001     @@COMMENT  COMMENT('    Menu item - Display                     ')
VL_FBASTRE0000017500000000000001     EVTROUTINE HANDLING(#MITM_15.CLICK)
VL_FBASTRE0000017600000000000001     ENDROUTINE
VL_FBASTRE0000017700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000017800000000000001     /* **********                                                         */
VL_FBASTRE0000017900000000000001     @@COMMENT  COMMENT('    Menu item - Delete                      ')
VL_FBASTRE0000018000000000000001     EVTROUTINE HANDLING(#MITM_16.CLICK)
VL_FBASTRE0000018100000000000001     ENDROUTINE
VL_FBASTRE0000018200000000000001     /* ********** ======================================================= */
VL_FBASTRE0000018300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000018400000000000001     @@COMMENT  COMMENT('    Menu 3 - View                           ')
VL_FBASTRE0000018500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000018600000000000001     /* ********** ======================================================= */
VL_FBASTRE0000018700000000000001     @@COMMENT  COMMENT('    Menu item - Full Screen                 ')
VL_FBASTRE0000018800000000000001     EVTROUTINE HANDLING(#MITM_18.CLICK)
VL_FBASTRE0000018900000000000001     ENDROUTINE
VL_FBASTRE0000019000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000019100000000000001     /* **********                                                         */
VL_FBASTRE0000019200000000000001     @@COMMENT  COMMENT('    Menu item - Zoom                        ')
VL_FBASTRE0000019300000000000001     EVTROUTINE HANDLING(#MITM_19.CLICK)
VL_FBASTRE0000019400000000000001     ENDROUTINE
VL_FBASTRE0000019500000000000001     /* ********** ======================================================= */
VL_FBASTRE0000019600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000019700000000000001     @@COMMENT  COMMENT('    Menu 4 - Help                           ')
VL_FBASTRE0000019800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000019900000000000001     /* ********** ======================================================= */
VL_FBASTRE0000020000000000000001     @@COMMENT  COMMENT('    Menu item - Help Topics                 ')
VL_FBASTRE0000020100000000000001     EVTROUTINE HANDLING(#MITM_21.CLICK)
VL_FBASTRE0000020200000000000001     ENDROUTINE
VL_FBASTRE0000020300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000020400000000000001     /* **********                                                         */
VL_FBASTRE0000020500000000000001     @@COMMENT  COMMENT('    Menu item - About                       ')
VL_FBASTRE0000020600000000000001     EVTROUTINE HANDLING(#MITM_22.CLICK)
VL_FBASTRE0000020700000000000001     ENDROUTINE
VL_FBASTRE0000020800000000000001     /* **********                                                         */
VL_FBASTRE0000020900000000000001     /* **********                                                         */
VL_FBASTRE0000021000000000000001     @@COMMENT  COMMENT('    Status Message                          ')
VL_FBASTRE0000021100000000000001     SUBROUTINE STSMESSAGE ((#EX_ISSUE  *RECEIVED)(#EX_COUNT *BOTH)(#EX_NAME *RECEIVED))
VL_FBASTRE0000021200000000000001     define     #ex_issue *dec 15 0
VL_FBASTRE0000021300000000000001     define     #ex_count *dec 15 0
VL_FBASTRE0000021400000000000001     define     #ex_name  *char 20
VL_FBASTRE0000021500000000000001     define     #ex_remn  *dec 7 7
VL_FBASTRE0000021600000000000001     change     #ex_count '#ex_count + 1'
VL_FBASTRE0000021700000000000001     change     #ex_remn  '#ex_count / #ex_issue'
VL_FBASTRE0000021800000000000001     if         '#ex_remn = 0.0000000'
VL_FBASTRE0000021900000000000001     message    msgid(dcu0017) msgf(dc@m01) msgdta(#ex_count #ex_name) type(*status)
VL_FBASTRE0000022000000000000001     endif
VL_FBASTRE0000022100000000000001     ENDROUTINE
VL_FBASTRE0000022200000000000001     /* **********                                                         */
VL_FBASTRE0000022300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000022400000000000001     @@COMMENT  COMMENT('    Information Message                     ')
VL_FBASTRE0000022500000000000001     SUBROUTINE INFMESSAGE ((#EX_TEXT *RECEIVED))
VL_FBASTRE0000022600000000000001     define     #ex_text  *char 132
VL_FBASTRE0000022700000000000001     message    msgid(dcm9992) msgf(dc@m01) msgdta(#ex_text *blanks)
VL_FBASTRE0000022800000000000001     ENDROUTINE
VL_FBASTRE0000022900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000023000000000000001     /* **********                                                         */
VL_FBASTRE0000023100000000000001     @@IF       COND((*IF @@NANS001 *LT 1)) GOTO(E99)
VL_FBASTRE0000023200000000000001     @@COMMENT  COMMENT(' Initialise tree view.                      ')
VL_FBASTRE0000023300000000000001     EVTROUTINE HANDLING(#TRVW_1.Initialize)
VL_FBASTRE0000023400000000000001     SELECT     FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01)
VL_FBASTRE0000023500000000000001     ADD_ENTRY  TO_LIST(#TRVW_1)
VL_FBASTRE0000023600000000000001     ENDSELECT
VL_FBASTRE0000023700000000000001     ENDROUTINE
VL_FBASTRE0000023800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASTRE0000023900000000000001E99: @@LABEL
VL_FBASTRE0000024000000000000001     @@ROUTEEND
VL_FBASTRE0000024100000000000001     END_COM
VL_FBASTRE0000024200000000000001     /* **********                                                         */
VL_FBASTRE0000024300000000000001     /* ********** ------------------------------------------------        */
VL_FBASTRE0000024400000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
VL_FBASTRE0000024500000000000001     /* ********** ------------------------------------------------        */
VL_FBASTRE0000024600000000000001     @@CLR_LST  NUMBER(1)
VL_FBASTRE0000024700000000000001     @@CLR_LST  NUMBER(2)
VL_FBASWRK0000000100000000000001     /* ********** ======================================================= */
VL_FBASWRK0000000200000000000001     @@QUESTION PROMPT('Supply a word that describes the type of object this function works with.') ANSWER(@@CANS001) EXTEND('123456789012345678' 'You should use ONE word only, use lowercase' 'characters and only use singular form (eg: "Customer", "Employee"' '"Order"). Do NOT use more than 18 characters in your answer.' 'Use the HELP function key for more information and examples.') HELPIDS(HELP010)
VL_FBASWRK0000000300000000000001     /* **********                                                         */
VL_FBASWRK0000000400000000000001     @@ROUTEDEF
VL_FBASWRK0000000500000000000001     /* ********** ======================================================= */
VL_FBASWRK0000000600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000000700000000000001     @@COMMENT  COMMENT('    Work With @@cans001            ')
VL_FBASWRK0000000800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000000900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000001000000000000001     @@COMMENT  COMMENT('    Tree view definition                    ')
VL_FBASWRK0000001100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000001200000000000001     /* ********** ======================================================= */
VL_FBASWRK0000001300000000000001     /* ********** GET NAME OF JUST ONE FILE                               */
VL_FBASWRK0000001400000000000001     /* ********** ======================================================= */
VL_FBASWRK0000001500000000000001     /* **********                                                         */
VL_FBASWRK0000001600000000000001     @@GET_FILS TO(1) PHY_ONLY(*NO) SGL_ONLY(*NO) PROMPT('Enter the name of the file to be used by this template') EXTEND('The file name may be specified in full, partially (to cause a partial list' 'of available files to be displayed) or left blank (to cause a full list of' 'available files to be displayed). When a list of files is displayed, the' 'file required may be selected from the list.' ' ' 'Use the HELP function key for more details about this template and' 'examples of the type of Visual LANSA applications it can create.') HELPIDS(HELP020)
VL_FBASWRK0000001700000000000001     /* **********                                                         */
VL_FBASWRK0000001800000000000001     /* ********** Load details of all fields in primary file into list 1  */
VL_FBASWRK0000001900000000000001     /* **********                                                         */
VL_FBASWRK0000002000000000000001     @@CLR_LST  NUMBER(1)
VL_FBASWRK0000002100000000000001     @@RTV_FLDS FROM_FILE(1) INTO_LST(1)
VL_FBASWRK0000002200000000000001     /* **********                                                         */
VL_FBASWRK0000002300000000000001     /* ********** Load keys of base file                                  */
VL_FBASWRK0000002400000000000001     /* **********                                                         */
VL_FBASWRK0000002500000000000001     @@CLR_LST  NUMBER(2)
VL_FBASWRK0000002600000000000001     @@RTV_KEYS OF_FILE(1) INTO_LST(2)
VL_FBASWRK0000002700000000000001     @@CLR_LST  NUMBER(4)
VL_FBASWRK0000002800000000000001     /* **********                                                         */
VL_FBASWRK0000002900000000000001     @@QUESTION PROMPT('How many Key/levels do you wish to create?') ANSWER(@@NANS001) EXTEND('12' 'You can select a key field for each level of the tree structure and a non-' 'key field. If you select a non-key field the key field will be hidden.') HELPIDS(HELP030)
VL_FBASWRK0000003000000000000001     @@SET_IDX  IDX_NAME(DP) TO(1)
VL_FBASWRK0000003100000000000001     DEFINE_COM CLASS(#PRIM_TRVW) NAME(#TRVW_1) DISPLAYPOSITION(@@INDEXDP) HEIGHT(275) LEFT(16) LINESATROOT(True) PARENT(#@@PROCESS) TABPOSITION(1) TOP(16) WIDTH(177)
VL_FBASWRK0000003200000000000001     @@SET_IDX  IDX_NAME(KL) TO(1)
VL_FBASWRK0000003300000000000001     @@SET_IDX  IDX_NAME(LP) TO(0)
VL_FBASWRK0000003400000000000001     @@SET_IDX  IDX_NAME(TR) TO(10)
VL_FBASWRK0000003500000000000001L10: @@LABEL
VL_FBASWRK0000003600000000000001     @@CMP_IDX  IDX_NAME(KL) IDX_VALUE(@@NANS001) IF_GT(A99)
VL_FBASWRK0000003700000000000001F10: @@LABEL
VL_FBASWRK0000003800000000000001     @@INC_IDX  IDX_NAME(LP)
VL_FBASWRK0000003900000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASWRK0000004000000000000001     /* **********                                                         */
VL_FBASWRK0000004100000000000001     /* ********** Select fields for current level                         */
VL_FBASWRK0000004200000000000001     /* **********                                                         */
VL_FBASWRK0000004300000000000001     @@CLR_LST  NUMBER(3)
VL_FBASWRK0000004400000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((3 'Select flds' 'current' 'level')) HELPIDS(HELP040)
VL_FBASWRK0000004500000000000001     @@SET_IDX  IDX_NAME(FF) TO(@@LNE03)
VL_FBASWRK0000004600000000000001     @@CMP_IDX  IDX_NAME(FF) IDX_VALUE(0) IF_EQ(F99)
VL_FBASWRK0000004700000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
VL_FBASWRK0000004800000000000001     @@SET_IDX  IDX_NAME(SP) TO(1)
VL_FBASWRK0000004900000000000001F20: @@LABEL
VL_FBASWRK0000005000000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE03) IF_GT(F99)
VL_FBASWRK0000005100000000000001     /* **********                                                         */
VL_FBASWRK0000005200000000000001     /* ********** Define fields for current level                         */
VL_FBASWRK0000005300000000000001     /* **********                                                         */
VL_FBASWRK0000005400000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_@@INDEXTR) DISPLAYPOSITION(@@INDEXDP) LEVEL(@@INDEXLP) PARENT(#TRVW_1)           SORTPOSITION(@@INDEXSP) SOURCE(#@@LEL03CF)
VL_FBASWRK0000005500000000000001     /* **********                                                         */
VL_FBASWRK0000005600000000000001     @@INC_IDX  IDX_NAME(CF)
VL_FBASWRK0000005700000000000001     @@SET_IDX  IDX_NAME(DP) TO(0)
VL_FBASWRK0000005800000000000001     @@INC_IDX  IDX_NAME(SP)
VL_FBASWRK0000005900000000000001     @@INC_IDX  IDX_NAME(TR)
VL_FBASWRK0000006000000000000001     @@GOTO     LABEL(F20)
VL_FBASWRK0000006100000000000001F99: @@LABEL
VL_FBASWRK0000006200000000000001     /* **********                                                         */
VL_FBASWRK0000006300000000000001     /* ********** Select keys for current level                           */
VL_FBASWRK0000006400000000000001     /* **********                                                         */
VL_FBASWRK0000006500000000000001K10: @@LABEL
VL_FBASWRK0000006600000000000001     @@CLR_LST  NUMBER(3)
VL_FBASWRK0000006700000000000001     @@MAK_LSTS FROM_LSTS(2) INTO_LSTS((3 'Select key' 'current' 'level')) HELPIDS(HELP050)
VL_FBASWRK0000006800000000000001     @@SET_IDX  IDX_NAME(KK) TO(@@LNE03)
VL_FBASWRK0000006900000000000001     /* **********                                                         */
VL_FBASWRK0000007000000000000001     /* ********** If no fields or keys selected goto end of definition    */
VL_FBASWRK0000007100000000000001     /* **********                                                         */
VL_FBASWRK0000007200000000000001     @@IF       COND((*IF @@INDEXFF *EQ 0) (*AND @@INDEXKK *EQ 0)) GOTO(A99)
VL_FBASWRK0000007300000000000001     @@CMP_IDX  IDX_NAME(KK) IDX_VALUE(0) IF_EQ(K99)
VL_FBASWRK0000007400000000000001     @@SET_IDX  IDX_NAME(KP) TO(1)
VL_FBASWRK0000007500000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
VL_FBASWRK0000007600000000000001     @@CMP_IDX  IDX_NAME(FF) IDX_VALUE(0) IF_GT(K20)
VL_FBASWRK0000007700000000000001     @@SET_IDX  IDX_NAME(DP) TO(1)
VL_FBASWRK0000007800000000000001K20: @@LABEL
VL_FBASWRK0000007900000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE03) IF_GT(K99)
VL_FBASWRK0000008000000000000001     /* **********                                                         */
VL_FBASWRK0000008100000000000001     /* ********** Define keys for current level                           */
VL_FBASWRK0000008200000000000001     /* **********                                                         */
VL_FBASWRK0000008300000000000001     DEFINE_COM CLASS(#PRIM_TVCL) NAME(#TVCL_@@INDEXTR) DISPLAYPOSITION(@@INDEXDP) KEYPOSITION(@@INDEXKP) LEVEL(@@INDEXLP) PARENT(#TRVW_1) SOURCE(#@@LEL03CF)
VL_FBASWRK0000008400000000000001     @@INC_IDX  IDX_NAME(CF)
VL_FBASWRK0000008500000000000001     @@SET_IDX  IDX_NAME(DP) TO(0)
VL_FBASWRK0000008600000000000001     @@INC_IDX  IDX_NAME(KP)
VL_FBASWRK0000008700000000000001     @@INC_IDX  IDX_NAME(TR)
VL_FBASWRK0000008800000000000001     @@GOTO     LABEL(K20)
VL_FBASWRK0000008900000000000001K99: @@LABEL
VL_FBASWRK0000009000000000000001     @@INC_IDX  IDX_NAME(KL)
VL_FBASWRK0000009100000000000001     @@GOTO     LABEL(L10)
VL_FBASWRK0000009200000000000001     /* **********                                                         */
VL_FBASWRK0000009300000000000001A99: @@LABEL
VL_FBASWRK0000009400000000000001     /* **********                                                         */
VL_FBASWRK0000009500000000000001     /* ********** Select fields for form                                  */
VL_FBASWRK0000009600000000000001     /* **********                                                         */
VL_FBASWRK0000009700000000000001     /* **********                                                         */
VL_FBASWRK0000009800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000009900000000000001     @@COMMENT  COMMENT('    Set default field position and size     ')
VL_FBASWRK0000010000000000000001     @@COMMENT  COMMENT('    Left margin to @@var_lmgn  = 140        ')
VL_FBASWRK0000010100000000000001     @@COMMENT  COMMENT('    Set left margin to  @@var_left  = 225   ')
VL_FBASWRK0000010200000000000001     @@COMMENT  COMMENT('    Set field top to    @@var_top = 16      ')
VL_FBASWRK0000010300000000000001     @@COMMENT  COMMENT('    Set field height to @@var_hgt = 20      ')
VL_FBASWRK0000010400000000000001     @@COMMENT  COMMENT('    Set field width to  @@var_fwtd = 300    ')
VL_FBASWRK0000010500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000010600000000000001     /* **********                                                         */
VL_FBASWRK0000010700000000000001     /* ********** Create tab folder                                       */
VL_FBASWRK0000010800000000000001     /* **********                                                         */
VL_FBASWRK0000010900000000000001T10: @@LABEL
VL_FBASWRK0000011000000000000001     @@SET_IDX  IDX_NAME(ZZ) TO(0)
VL_FBASWRK0000011100000000000001     DEFINE_COM CLASS(#PRIM_TAB) NAME(#TAB_1) DISPLAYPOSITION(@@INDEXDP) HEIGHT(370) LEFT(230) PARENT(#@@PROCESS) TABPOSITION(@@INDEXDP) TOP(@@VAR_TOP + 0) WIDTH(385)
VL_FBASWRK0000011200000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASWRK0000011300000000000001     @@QUESTION PROMPT('How many tab sheets do you wish to create?') ANSWER(@@NANS002) EXTEND('12' 'Select up to 10 logically grouped fields for each tab sheet to allow room ' 'to rearrange position or size of fields if required.') HELPIDS(HELP060)
VL_FBASWRK0000011400000000000001     @@SET_IDX  IDX_NAME(TB) TO(1)
VL_FBASWRK0000011500000000000001T20: @@LABEL
VL_FBASWRK0000011600000000000001     @@CMP_IDX  IDX_NAME(TB) IDX_VALUE(@@NANS002) IF_GT(T99)
VL_FBASWRK0000011700000000000001     @@CLR_LST  NUMBER(5)
VL_FBASWRK0000011800000000000001     @@INC_IDX  IDX_NAME(ZZ)
VL_FBASWRK0000011900000000000001     @@QUESTION PROMPT('Supply a word that describes WHAT tab sheet @@INDEXZZ contains') ANSWER(@@CANS003) EXTEND('123456789012345678' 'The word you specify here is used as the caption on the tab sheet')
VL_FBASWRK0000012000000000000001     @@MAK_LSTS FROM_LSTS(1) INTO_LSTS((5 'Select flds' 'to display' 'on tab    '))
VL_FBASWRK0000012100000000000001     @@SET_IDX  IDX_NAME(TT) TO(@@LNE05)
VL_FBASWRK0000012200000000000001     @@CMP_IDX  IDX_NAME(TT) IDX_VALUE(0) IF_EQ(T99)
VL_FBASWRK0000012300000000000001     /* **********                                                         */
VL_FBASWRK0000012400000000000001     /* ********** ======================================================= */
VL_FBASWRK0000012500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000012600000000000001     @@COMMENT  COMMENT('    @@CANS003 - Tab sheet               .   ')
VL_FBASWRK0000012700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000012800000000000001     @@COMMENT  COMMENT('    Set left margin to @@var_left = 10      ')
VL_FBASWRK0000012900000000000001     @@COMMENT  COMMENT('    Set top margin to @@var_tbshtop  = 15   ')
VL_FBASWRK0000013000000000000001     @@COMMENT  COMMENT('    Set top margin to @@var_tsfltop  = 0    ')
VL_FBASWRK0000013100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000013200000000000001     /* ********** ======================================================= */
VL_FBASWRK0000013300000000000001     /* **********                                                         */
VL_FBASWRK0000013400000000000001     DEFINE_COM CLASS(#PRIM_TBSH) NAME(#TBSH_@@INDEXZZ) CAPTION('@@CANS003') DISPLAYPOSITION(@@INDEXZZ) PARENT(#TAB_1)
VL_FBASWRK0000013500000000000001     @@SET_IDX  IDX_NAME(CF) TO(1)
VL_FBASWRK0000013600000000000001T30: @@LABEL
VL_FBASWRK0000013700000000000001     @@CMP_IDX  IDX_NAME(CF) IDX_VALUE(@@LNE05) IF_GT(T40)
VL_FBASWRK0000013800000000000001     DEFINE_COM CLASS(#@@LEL05CF.VISUAL ) NAME(#@@LEL05CF) DISPLAYPOSITION(@@INDEXDP) HEIGHT(@@VAR_HGT + 0) LABELHORALIGNMENT(Left) LEFT(@@VAR_LEFT + 0) MARGINLEFT(@@VAR_LMGN + 0)  PARENT(#TBSH_@@INDEXZZ) TABPOSITION(@@INDEXDP)         TOP(@@VAR_TSFLTOP + 30) WIDTH(@@VAR_FWTD + 0)
VL_FBASWRK0000013900000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASWRK0000014000000000000001     @@INC_IDX  IDX_NAME(CF)
VL_FBASWRK0000014100000000000001     @@GOTO     LABEL(T30)
VL_FBASWRK0000014200000000000001T40: @@LABEL
VL_FBASWRK0000014300000000000001     @@INC_IDX  IDX_NAME(TB)
VL_FBASWRK0000014400000000000001     @@GOTO     LABEL(T20)
VL_FBASWRK0000014500000000000001T99: @@LABEL
VL_FBASWRK0000014600000000000001     /* **********                                                         */
VL_FBASWRK0000014700000000000001     /* ********** ======================================================= */
VL_FBASWRK0000014800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000014900000000000001     @@COMMENT  COMMENT('    Buttons                                 ')
VL_FBASWRK0000015000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000015100000000000001     /* ********** ======================================================= */
VL_FBASWRK0000015200000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASWRK0000015300000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#UPDATE) CAPTION(Update) DISPLAYPOSITION(@@INDEXDP) LEFT(16) PARENT(#@@PROCESS)        TABPOSITION(@@INDEXDP) TOP(320)
VL_FBASWRK0000015400000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASWRK0000015500000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#DELETE) CAPTION(Delete) DISPLAYPOSITION(@@INDEXDP) LEFT(16) PARENT(#@@PROCESS)        TABPOSITION(@@INDEXDP) TOP(360)
VL_FBASWRK0000015600000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASWRK0000015700000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#NEW) CAPTION(New      ) DISPLAYPOSITION(@@INDEXDP) LEFT(112) PARENT(#@@PROCESS)       TABPOSITION(@@INDEXDP) TOP(320)
VL_FBASWRK0000015800000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASWRK0000015900000000000001     DEFINE_COM CLASS(#PRIM_PHBN) NAME(#INSERT) CAPTION(Insert) DISPLAYPOSITION(@@INDEXDP) LEFT(112) PARENT(#@@PROCESS)       TABPOSITION(@@INDEXDP) TOP(360)
VL_FBASWRK0000016000000000000001     @@INC_IDX  IDX_NAME(DP)
VL_FBASWRK0000016100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000016200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000016300000000000001     @@COMMENT  COMMENT(' Create a status bar for messages           ')
VL_FBASWRK0000016400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000016500000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(30) MESSAGEPOSITION(1) PARENT(#@@PROCESS)
VL_FBASWRK0000016600000000000001     /* **********                                                         */
VL_FBASWRK0000016700000000000001     /* **********                                                         */
VL_FBASWRK0000016800000000000001     @@ROUTEBEG
VL_FBASWRK0000016900000000000001     BEGIN_COM  HEIGHT(450) LEFT(140) TOP(110) VISIBLE(False) VISUALSTYLE(#VS_NORM) WIDTH(650)
VL_FBASWRK0000017000000000000001     @@ROUTEDEF
VL_FBASWRK0000017100000000000001     /* ********** ======================================================= */
VL_FBASWRK0000017200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000017300000000000001     @@COMMENT  COMMENT('     RDML Definitions                       ')
VL_FBASWRK0000017400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000017500000000000001     /* ********** ======================================================= */
VL_FBASWRK0000017600000000000001     GROUP_BY   NAME(#ALLFLDS) FIELDS(@@LST01)
VL_FBASWRK0000017700000000000001     /* ********** ======================================================= */
VL_FBASWRK0000017800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000017900000000000001     @@COMMENT  COMMENT('         Events                             ')
VL_FBASWRK0000018000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000018100000000000001     /* ********** ======================================================= */
VL_FBASWRK0000018200000000000001     @@ROUTERTN
VL_FBASWRK0000018300000000000001     /* **********                                                         */
VL_FBASWRK0000018400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000018500000000000001     @@COMMENT  COMMENT(' Initialise tree view.                      ')
VL_FBASWRK0000018600000000000001     EVTROUTINE HANDLING(#TRVW_1.Initialize)
VL_FBASWRK0000018700000000000001     SELECT     FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01)
VL_FBASWRK0000018800000000000001     ADD_ENTRY  TO_LIST(#TRVW_1)
VL_FBASWRK0000018900000000000001     ENDSELECT
VL_FBASWRK0000019000000000000001     CHANGE     #ALLFLDS *NULL
VL_FBASWRK0000019100000000000001     ENDROUTINE
VL_FBASWRK0000019200000000000001     /* **********                                                         */
VL_FBASWRK0000019300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000019400000000000001     @@COMMENT  COMMENT(' Retrieve current object                    ')
VL_FBASWRK0000019500000000000001     EVTROUTINE HANDLING(#TRVW_1.ItemGotFocus)
VL_FBASWRK0000019600000000000001     FETCH      FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01) WITH_KEY(@@LST02)
VL_FBASWRK0000019700000000000001     IF_STATUS  IS(*NORECORD)
VL_FBASWRK0000019800000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_FBASWRK0000019900000000000001     EXECUTE    INITFLDS
VL_FBASWRK0000020000000000000001     ELSE
VL_FBASWRK0000020100000000000001     IF_STATUS  IS(*ERROR)
VL_FBASWRK0000020200000000000001     MESSAGE    MSGTXT('Error retrieving @@CANS001')
VL_FBASWRK0000020300000000000001     ENDIF
VL_FBASWRK0000020400000000000001     ENDIF
VL_FBASWRK0000020500000000000001     ENDROUTINE
VL_FBASWRK0000020600000000000001     /* **********                                                         */
VL_FBASWRK0000020700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000020800000000000001     @@COMMENT  COMMENT('    Update                                  ')
VL_FBASWRK0000020900000000000001     EVTROUTINE HANDLING(#UPDATE.CLICK)
VL_FBASWRK0000021000000000000001     UPDATE     FIELDS(#ALLFLDS) IN_FILE(@@FNAME01) WITH_KEY(@@LST02) VAL_ERROR(*NEXT)
VL_FBASWRK0000021100000000000001     IF_STATUS  IS(*OKAY)
VL_FBASWRK0000021200000000000001     MESSAGE    MSGTXT('@@CANS001 updated successfully')
VL_FBASWRK0000021300000000000001     ELSE
VL_FBASWRK0000021400000000000001     IF_STATUS  IS(*NORECORD)
VL_FBASWRK0000021500000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_FBASWRK0000021600000000000001     ELSE
VL_FBASWRK0000021700000000000001     IF_STATUS  IS(*ERROR)
VL_FBASWRK0000021800000000000001     MESSAGE    MSGTXT('Error updating @@CANS001')
VL_FBASWRK0000021900000000000001     ENDIF
VL_FBASWRK0000022000000000000001     ENDIF
VL_FBASWRK0000022100000000000001     ENDIF
VL_FBASWRK0000022200000000000001     ENDROUTINE
VL_FBASWRK0000022300000000000001     /* **********                                                         */
VL_FBASWRK0000022400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000022500000000000001     @@COMMENT  COMMENT('    Delete                                  ')
VL_FBASWRK0000022600000000000001     EVTROUTINE HANDLING(#DELETE.CLICK)
VL_FBASWRK0000022700000000000001     DELETE     FROM_FILE(@@FNAME01) WITH_KEY(@@LST02) VAL_ERROR(*NEXT)
VL_FBASWRK0000022800000000000001     IF_STATUS  IS(*OKAY)
VL_FBASWRK0000022900000000000001     DLT_ENTRY  FROM_LIST(#TRVW_1)
VL_FBASWRK0000023000000000000001     MESSAGE    MSGTXT('@@CANS001 deleted successfully')
VL_FBASWRK0000023100000000000001     EXECUTE    SUBROUTINE(INITFLDS)
VL_FBASWRK0000023200000000000001     ELSE
VL_FBASWRK0000023300000000000001     IF_STATUS  IS(*NORECORD)
VL_FBASWRK0000023400000000000001     MESSAGE    MSGTXT('@@CANS001 not found')
VL_FBASWRK0000023500000000000001     ELSE
VL_FBASWRK0000023600000000000001     IF_STATUS  IS(*ERROR)
VL_FBASWRK0000023700000000000001     MESSAGE    MSGTXT('Error deleting @@CANS001')
VL_FBASWRK0000023800000000000001     ENDIF
VL_FBASWRK0000023900000000000001     ENDIF
VL_FBASWRK0000024000000000000001     ENDIF
VL_FBASWRK0000024100000000000001     ENDROUTINE
VL_FBASWRK0000024200000000000001     /* **********                                                         */
VL_FBASWRK0000024300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000024400000000000001     @@COMMENT  COMMENT('    New                                     ')
VL_FBASWRK0000024500000000000001     EVTROUTINE HANDLING(#New.CLICK)
VL_FBASWRK0000024600000000000001     EXECUTE    INITFLDS
VL_FBASWRK0000024700000000000001     ENDROUTINE
VL_FBASWRK0000024800000000000001     /* **********                                                         */
VL_FBASWRK0000024900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000025000000000000001     @@COMMENT  COMMENT('    Insert                                  ')
VL_FBASWRK0000025100000000000001     EVTROUTINE HANDLING(#INSERT.CLICK)
VL_FBASWRK0000025200000000000001     INSERT     FIELDS(#ALLFLDS) TO_FILE(@@FNAME01) VAL_ERROR(*NEXT)
VL_FBASWRK0000025300000000000001     IF_STATUS  IS(*OKAY)
VL_FBASWRK0000025400000000000001     MESSAGE    MSGTXT('@@CANS001 inserted successfully')
VL_FBASWRK0000025500000000000001     ELSE
VL_FBASWRK0000025600000000000001     IF_STATUS  IS(*ERROR)
VL_FBASWRK0000025700000000000001     MESSAGE    MSGTXT('Error inserting @@CANS001')
VL_FBASWRK0000025800000000000001     ENDIF
VL_FBASWRK0000025900000000000001     ENDIF
VL_FBASWRK0000026000000000000001     ENDROUTINE
VL_FBASWRK0000026100000000000001     /* **********                                                         */
VL_FBASWRK0000026200000000000001     /* ********** Initialise fields                                       */
VL_FBASWRK0000026300000000000001     /* **********                                                         */
VL_FBASWRK0000026400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000026500000000000001     SUBROUTINE NAME(INITFLDS)
VL_FBASWRK0000026600000000000001     CHANGE     #ALLFLDS *NULL
VL_FBASWRK0000026700000000000001     ENDROUTINE
VL_FBASWRK0000026800000000000001     /* **********                                                         */
VL_FBASWRK0000026900000000000001     /* ********** Initialise tree                                         */
VL_FBASWRK0000027000000000000001     /* **********                                                         */
VL_FBASWRK0000027100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000027200000000000001     SUBROUTINE NAME(INITTREE)
VL_FBASWRK0000027300000000000001     CLR_LIST   #TRVW_1
VL_FBASWRK0000027400000000000001     SELECT     FIELDS(#ALLFLDS) FROM_FILE(@@FNAME01)
VL_FBASWRK0000027500000000000001     ADD_ENTRY  #TRVW_1
VL_FBASWRK0000027600000000000001     ENDSELECT
VL_FBASWRK0000027700000000000001     ENDROUTINE
VL_FBASWRK0000027800000000000001     /* **********                                                         */
VL_FBASWRK0000027900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000028000000000000001     @@COMMENT  COMMENT('    Status Message                          ')
VL_FBASWRK0000028100000000000001     SUBROUTINE STSMESSAGE ((#EX_ISSUE  *RECEIVED)(#EX_COUNT *BOTH)(#EX_NAME *RECEIVED))
VL_FBASWRK0000028200000000000001     define     #ex_issue *dec 15 0
VL_FBASWRK0000028300000000000001     define     #ex_count *dec 15 0
VL_FBASWRK0000028400000000000001     define     #ex_name  *char 20
VL_FBASWRK0000028500000000000001     define     #ex_remn  *dec 7 7
VL_FBASWRK0000028600000000000001     change     #ex_count '#ex_count + 1'
VL_FBASWRK0000028700000000000001     change     #ex_remn  '#ex_count / #ex_issue'
VL_FBASWRK0000028800000000000001     if         '#ex_remn = 0.0000000'
VL_FBASWRK0000028900000000000001     message    msgid(dcu0017) msgf(dc@m01) msgdta(#ex_count #ex_name) type(*status)
VL_FBASWRK0000029000000000000001     endif
VL_FBASWRK0000029100000000000001     ENDROUTINE
VL_FBASWRK0000029200000000000001     /* **********                                                         */
VL_FBASWRK0000029300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000029400000000000001     @@COMMENT  COMMENT('    Information Message                     ')
VL_FBASWRK0000029500000000000001     SUBROUTINE INFMESSAGE ((#EX_TEXT *RECEIVED))
VL_FBASWRK0000029600000000000001     define     #ex_text  *char 132
VL_FBASWRK0000029700000000000001     message    msgid(dcm9992) msgf(dc@m01) msgdta(#ex_text *blanks)
VL_FBASWRK0000029800000000000001     ENDROUTINE
VL_FBASWRK0000029900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBASWRK0000030000000000000001     /* **********                                                         */
VL_FBASWRK0000030100000000000001E99: @@LABEL
VL_FBASWRK0000030200000000000001     @@ROUTEEND
VL_FBASWRK0000030300000000000001     END_COM
VL_FBASWRK0000030400000000000001     /* **********                                                         */
VL_FBASWRK0000030500000000000001     /* ********** ------------------------------------------------        */
VL_FBASWRK0000030600000000000001     /* ********** CLEAN UP TEMPLATE PROCESSING                            */
VL_FBASWRK0000030700000000000001     /* ********** ------------------------------------------------        */
VL_FBASWRK0000030800000000000001     @@CLR_LST  NUMBER(1)
VL_FBASWRK0000030900000000000001     @@CLR_LST  NUMBER(2)
VL_FBASWRK0000031000000000000001     @@CLR_LST  NUMBER(3)
VL_FBASWRK0000031100000000000001     @@CLR_LST  NUMBER(5)
VL_FBBMNUB0000000100000000000001     /* ********** =========================================================                                                      */
VL_FBBMNUB0000000200000000000001     /* **********                                                         */
VL_FBBMNUB0000000300000000000001     /* ********** This RDMLX code creates a menu bar with drop down menus */
VL_FBBMNUB0000000400000000000001     /* **********                                                         */
VL_FBBMNUB0000000500000000000001     /* ********** =========================================================                                                      */
VL_FBBMNUB0000000600000000000001     @@ROUTEDEF
VL_FBBMNUB0000000700000000000001     DEFINE_COM CLASS(#PRIM_MBAR) NAME(#MBAR_1) PARENT(#@@PROCESS)
VL_FBBMNUB0000000800000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000000900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000001000000000000001     @@COMMENT  COMMENT('    Menu 1 - Object                         ')
VL_FBBMNUB0000001100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000001200000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000001300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_1) CAPTION(&Object) PARENT(#MBAR_1)
VL_FBBMNUB0000001400000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_1) PARENT(#MITM_1)
VL_FBBMNUB0000001500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_2) CAPTION(&New) PARENT(#SMNU_1)
VL_FBBMNUB0000001600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_3) CAPTION(-) PARENT(#SMNU_1)
VL_FBBMNUB0000001700000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_4) CAPTION(&Open) PARENT(#SMNU_1)
VL_FBBMNUB0000001800000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_5) CAPTION(&Close) PARENT(#SMNU_1)
VL_FBBMNUB0000001900000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_6) CAPTION(-) PARENT(#SMNU_1)
VL_FBBMNUB0000002000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_7) CAPTION(&Save) PARENT(#SMNU_1)
VL_FBBMNUB0000002100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_8) CAPTION('Save &As') PARENT(#SMNU_1)
VL_FBBMNUB0000002200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_9) CAPTION(-) PARENT(#SMNU_1)
VL_FBBMNUB0000002300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_10) CAPTION('Sen&d To') PARENT(#SMNU_1)
VL_FBBMNUB0000002400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_11) CAPTION(&Print) PARENT(#SMNU_1)
VL_FBBMNUB0000002500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_12) CAPTION(-) PARENT(#SMNU_1)
VL_FBBMNUB0000002600000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_13) CAPTION(E&xit) PARENT(#SMNU_1)
VL_FBBMNUB0000002700000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000002800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000002900000000000001     @@COMMENT  COMMENT('    Menu 2 - Selected                       ')
VL_FBBMNUB0000003000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000003100000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000003200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_14) CAPTION(&Selected) PARENT(#MBAR_1)
VL_FBBMNUB0000003300000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_2) PARENT(#MITM_14)
VL_FBBMNUB0000003400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_15) CAPTION(Dis&play) PARENT(#SMNU_2)
VL_FBBMNUB0000003500000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_16) CAPTION(&Delete) PARENT(#SMNU_2)
VL_FBBMNUB0000003600000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000003700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000003800000000000001     @@COMMENT  COMMENT('    Menu 3 - View                           ')
VL_FBBMNUB0000003900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000004000000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000004100000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_17) CAPTION(&View) PARENT(#MBAR_1)
VL_FBBMNUB0000004200000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_3) PARENT(#MITM_17)
VL_FBBMNUB0000004300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_18) CAPTION('&Full Screen')PARENT(#SMNU_3)
VL_FBBMNUB0000004400000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_19) CAPTION(&Zoom)  PARENT(#SMNU_3)
VL_FBBMNUB0000004500000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000004600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000004700000000000001     @@COMMENT  COMMENT('    Menu 4 - Help                           ')
VL_FBBMNUB0000004800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000004900000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000005000000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_20) CAPTION(&Help) PARENT(#MBAR_1)
VL_FBBMNUB0000005100000000000001     DEFINE_COM CLASS(#PRIM_SMNU) NAME(#SMNU_4) PARENT(#MITM_20)
VL_FBBMNUB0000005200000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_21) CAPTION('&Help Topics')PARENT(#SMNU_4)
VL_FBBMNUB0000005300000000000001     DEFINE_COM CLASS(#PRIM_MITM) NAME(#MITM_22) CAPTION(&About) PARENT(#SMNU_4)
VL_FBBMNUB0000005400000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000005500000000000001     /* ********** Event Routines                                          */
VL_FBBMNUB0000005600000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000005700000000000001     @@ROUTERTN
VL_FBBMNUB0000005800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000005900000000000001     @@COMMENT  COMMENT('    Menu 1 - Object                         ')
VL_FBBMNUB0000006000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000006100000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000006200000000000001     @@COMMENT  COMMENT('    Menu item - New                         ')
VL_FBBMNUB0000006300000000000001     EVTROUTINE HANDLING(#MITM_2.CLICK)
VL_FBBMNUB0000006400000000000001     ENDROUTINE
VL_FBBMNUB0000006500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000006600000000000001     /* **********                                                         */
VL_FBBMNUB0000006700000000000001     @@COMMENT  COMMENT('    Menu item - Open                        ')
VL_FBBMNUB0000006800000000000001     EVTROUTINE HANDLING(#MITM_4.CLICK)
VL_FBBMNUB0000006900000000000001     ENDROUTINE
VL_FBBMNUB0000007000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000007100000000000001     /* **********                                                         */
VL_FBBMNUB0000007200000000000001     @@COMMENT  COMMENT('    Menu item - Close                       ')
VL_FBBMNUB0000007300000000000001     EVTROUTINE HANDLING(#MITM_5.CLICK)
VL_FBBMNUB0000007400000000000001     ENDROUTINE
VL_FBBMNUB0000007500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000007600000000000001     /* **********                                                         */
VL_FBBMNUB0000007700000000000001     @@COMMENT  COMMENT('    Menu item - Save                        ')
VL_FBBMNUB0000007800000000000001     EVTROUTINE HANDLING(#MITM_7.CLICK)
VL_FBBMNUB0000007900000000000001     ENDROUTINE
VL_FBBMNUB0000008000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000008100000000000001     /* **********                                                         */
VL_FBBMNUB0000008200000000000001     @@COMMENT  COMMENT('    Menu item - Save As                     ')
VL_FBBMNUB0000008300000000000001     EVTROUTINE HANDLING(#MITM_8.CLICK)
VL_FBBMNUB0000008400000000000001     ENDROUTINE
VL_FBBMNUB0000008500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000008600000000000001     /* **********                                                         */
VL_FBBMNUB0000008700000000000001     @@COMMENT  COMMENT('    Menu item - Send To                     ')
VL_FBBMNUB0000008800000000000001     EVTROUTINE HANDLING(#MITM_10.CLICK)
VL_FBBMNUB0000008900000000000001     ENDROUTINE
VL_FBBMNUB0000009000000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000009100000000000001     /* **********                                                         */
VL_FBBMNUB0000009200000000000001     @@COMMENT  COMMENT('    Menu item - Print                       ')
VL_FBBMNUB0000009300000000000001     EVTROUTINE HANDLING(#MITM_11.CLICK)
VL_FBBMNUB0000009400000000000001     ENDROUTINE
VL_FBBMNUB0000009500000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000009600000000000001     /* **********                                                         */
VL_FBBMNUB0000009700000000000001     @@COMMENT  COMMENT('    Menu item - Exit                        ')
VL_FBBMNUB0000009800000000000001     EVTROUTINE HANDLING(#MITM_13.CLICK)
VL_FBBMNUB0000009900000000000001     ENDROUTINE
VL_FBBMNUB0000010000000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000010100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000010200000000000001     @@COMMENT  COMMENT('    Menu 2 - Selected                       ')
VL_FBBMNUB0000010300000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000010400000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000010500000000000001     @@COMMENT  COMMENT('    Menu item - Display                     ')
VL_FBBMNUB0000010600000000000001     EVTROUTINE HANDLING(#MITM_15.CLICK)
VL_FBBMNUB0000010700000000000001     ENDROUTINE
VL_FBBMNUB0000010800000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000010900000000000001     /* **********                                                         */
VL_FBBMNUB0000011000000000000001     @@COMMENT  COMMENT('    Menu item - Delete                      ')
VL_FBBMNUB0000011100000000000001     EVTROUTINE HANDLING(#MITM_16.CLICK)
VL_FBBMNUB0000011200000000000001     ENDROUTINE
VL_FBBMNUB0000011300000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000011400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000011500000000000001     @@COMMENT  COMMENT('    Menu 3 - View                           ')
VL_FBBMNUB0000011600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000011700000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000011800000000000001     @@COMMENT  COMMENT('    Menu item - Full Screen                 ')
VL_FBBMNUB0000011900000000000001     EVTROUTINE HANDLING(#MITM_18.CLICK)
VL_FBBMNUB0000012000000000000001     ENDROUTINE
VL_FBBMNUB0000012100000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000012200000000000001     /* **********                                                         */
VL_FBBMNUB0000012300000000000001     @@COMMENT  COMMENT('    Menu item - Zoom                        ')
VL_FBBMNUB0000012400000000000001     EVTROUTINE HANDLING(#MITM_19.CLICK)
VL_FBBMNUB0000012500000000000001     ENDROUTINE
VL_FBBMNUB0000012600000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000012700000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000012800000000000001     @@COMMENT  COMMENT('    Menu 4 - Help                           ')
VL_FBBMNUB0000012900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000013000000000000001     /* ********** ======================================================= */
VL_FBBMNUB0000013100000000000001     @@COMMENT  COMMENT('    Menu item - Help Topics                 ')
VL_FBBMNUB0000013200000000000001     EVTROUTINE HANDLING(#MITM_21.CLICK)
VL_FBBMNUB0000013300000000000001     ENDROUTINE
VL_FBBMNUB0000013400000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000013500000000000001     /* **********                                                         */
VL_FBBMNUB0000013600000000000001     @@COMMENT  COMMENT('    Menu item - About                       ')
VL_FBBMNUB0000013700000000000001     EVTROUTINE HANDLING(#MITM_22.CLICK)
VL_FBBMNUB0000013800000000000001     ENDROUTINE
VL_FBBMNUB0000013900000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBMNUB0000014000000000000001     /* **********                                                         */
VL_FBBSTSB0000000100000000000001     /* **********                                                         */
VL_FBBSTSB0000000200000000000001     /* **********                                                         */
VL_FBBSTSB0000000300000000000001     /* **********                                                         */
VL_FBBSTSB0000000400000000000001     /* **********                                                         */
VL_FBBSTSB0000000500000000000001     /* ********** This RDMLX code creates a status bar for messages       */
VL_FBBSTSB0000000600000000000001     /* **********                                                         */
VL_FBBSTSB0000000700000000000001     /* ********** ======================================================= */
VL_FBBSTSB0000000800000000000001     @@ROUTEDEF
VL_FBBSTSB0000000900000000000001     DEFINE_COM CLASS(#PRIM_STBR) NAME(#STBR_1) HEIGHT(25) MESSAGEPOSITION(1) PARENT(#@@PROCESS)
VL_FBBSTSB0000001000000000000001     /* ********** ======================================================= */
VL_FBBSTSB0000001100000000000001     @@ROUTERTN
VL_FBBSTSB0000001200000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBSTSB0000001300000000000001     /* **********                                                         */
VL_FBBSTSB0000001400000000000001     @@COMMENT  COMMENT('    Status Message                          ')
VL_FBBSTSB0000001500000000000001     SUBROUTINE STSMESSAGE ((#EX_ISSUE  *RECEIVED)(#EX_COUNT *BOTH)(#EX_NAME *RECEIVED))
VL_FBBSTSB0000001600000000000001     define     #ex_issue *dec 15 0
VL_FBBSTSB0000001700000000000001     define     #ex_count *dec 15 0
VL_FBBSTSB0000001800000000000001     define     #ex_name  *char 20
VL_FBBSTSB0000001900000000000001     define     #ex_remn  *dec 7 7
VL_FBBSTSB0000002000000000000001     change     #ex_count '#ex_count + 1'
VL_FBBSTSB0000002100000000000001     change     #ex_remn  '#ex_count / #ex_issue'
VL_FBBSTSB0000002200000000000001     if         '#ex_remn = 0.0000000'
VL_FBBSTSB0000002300000000000001     message    msgid(dcu0017) msgf(dc@m01) msgdta(#ex_count #ex_name) type(*status)
VL_FBBSTSB0000002400000000000001     endif
VL_FBBSTSB0000002500000000000001     ENDROUTINE
VL_FBBSTSB0000002600000000000001     @@COMMENT  COMMENT('                                            ')
VL_FBBSTSB0000002700000000000001     @@COMMENT  COMMENT('    Information Message                     ')
VL_FBBSTSB0000002800000000000001     SUBROUTINE INFMESSAGE ((#EX_TEXT *RECEIVED))
VL_FBBSTSB0000002900000000000001     define     #ex_text  *char 132
VL_FBBSTSB0000003000000000000001     message    msgid(dcm9993) msgf(dc@m01) msgdta(#ex_text *blanks)
VL_FBBSTSB0000003100000000000001     ENDROUTINE
VL_FBBSTSB0000003200000000000001     @@COMMENT  COMMENT('                                            ')
